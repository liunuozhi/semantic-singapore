{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../Beeswarm.svelte",
    "../../SGMap.svelte",
    "../../Textdemo.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import Home from \"./page/Home.svelte\";\n  import About from \"./page/About.svelte\";\n  export let nav = \"home\";\n\n  let class1, class2;\n\n  $: {\n    if (nav) {\n      if (nav === \"home\") {\n        class1 = \"topnav-active\";\n      } else {\n        class1 = \"\";\n      }\n      if (nav === \"about\") {\n        class2 = \"topnav-active\";\n      } else {\n        class2 = \"\";\n      }\n    }\n  }\n</script>\n\n<main>\n  <ul class=\"topnav\">\n    <a href=\"/\" on:click|preventDefault={() => (nav = 'home')} class={class1}>\n      Home\n    </a>\n    <a href=\"/\" on:click|preventDefault={() => (nav = 'about')} class={class2}>\n      About\n    </a>\n  </ul>\n\n  {#if nav === 'home'}\n    <Home />\n  {:else if nav === 'about'}\n    <About />\n  {/if}\n</main>\n\n<style>\n  .topnav {\n    background-color: #53aeb6;\n    overflow: hidden;\n    margin-bottom: 0;\n    border: 0;\n  }\n\n  /* Style the links inside the navigation bar */\n  .topnav a {\n    float: left;\n    color: #f2f2f2;\n    text-align: center;\n    padding: 14px 16px;\n    text-decoration: none;\n    font-size: 17px;\n  }\n\n  /* Change the color of links on hover */\n  .topnav a:hover {\n    color: rgb(124, 124, 124);\n  }\n\n  /* Add a color to the active/current link */\n  .topnav-active {\n    background-color: #9bd0d5;\n    color: white;\n  }\n</style>\n",
    "<script>\n  import { scaleLinear } from \"d3-scale\";\n  import { forceSimulation, forceX, forceY, forceCollide } from \"d3-force\";\n  import { Graphic, Point, Label, XAxis } from \"@snlab/florence\";\n  import Textdemo from \"./Textdemo.svelte\"\n\n  // data\n  export let pageTitle = \"\";\n  export let data = \"\";\n  export let text = \"\"\n  export let dataUpperBound = 10\n  export let dataLowerBound = 0\n\n  // set up\n  const width = 1200; // canvas\n  const height = 300; // canvas\n  const radiusUpperBound = 30; // the radius range of circle will between [ radiusLowerBound, radiusUpperBound ]\n  const radiusLowerBound = 0;\n  // set color\n  const backgroundColor = \"#b2ded3\";\n  const axisColor = \"#54918d\";\n  const labelColor = \"white\";\n  const circleColor = axisColor;\n  const mouseOverColor = \"#FF4D4D\";\n  // set other aes property\n  const opacityCircle = 0.7;\n  const opacityText = 0.8; // label of circle\n  const fontSize = 12; // label of circle & Axis\n\n  // scale the data for x position and radius\n  const scaleX = scaleLinear()\n    .domain([dataLowerBound, dataUpperBound]) // TODO: domain of dataset\n    .range([0, width]);\n  const scaleRadius = scaleLinear()\n    .domain([dataLowerBound, dataUpperBound])\n    .range([radiusLowerBound, radiusUpperBound]);\n\n  // copy data to a new container and format the data structures\n  let circles = data\n    .map(d => ({\n      x: scaleX(d.count),\n      y: height / 2,\n      radius: scaleRadius(d.count),\n      data: d\n    }))\n    .sort((a, b) => a.x - b.x);\n\n  // run simulation\n  const simulation = forceSimulation(circles)\n    .force(\"collide\", forceCollide(d => d.radius))\n    .force(\"x\", forceX(d => d.x))\n    .force(\"y\", forceY(height / 2))\n    .on(\"tick\", () => (circles = circles));\n\n  // mouse over handler\n  let hoverWord = \"\";\n  const mouseoverHandler = e => {\n    e.target.style.fontSize = 20;\n    e.target.style.fill = mouseOverColor;\n    hoverWord = e.target.textContent;\n  };\n  \n</script>\n\n<div>\n  <div id=\"beeswarm\">\n    <Graphic {width} {height} padding={20} {backgroundColor}>\n      <!-- name of the page -->\n      <Label\n        x={30}\n        y={30}\n        text={pageTitle}\n        fill={labelColor}\n        anchorPoint=\"lt\"\n        fontWeight=\"bold\" />\n\n      {#each circles as circle}\n        <circle\n          cx={circle.x}\n          cy={circle.y}\n          r={circle.radius - 3}\n          fill={circleColor}\n          fill-opacity={opacityCircle} />\n        <text\n          x={circle.x}\n          y={circle.y}\n          fill={labelColor}\n          font-size={fontSize}\n          opacity={opacityText}\n          text-anchor=\"middle\"\n          on:mouseover={mouseoverHandler}\n          on:mouseout={e => {\n            e.target.style.fontSize = fontSize;\n            e.target.style.fill = labelColor;\n          }}>\n          {circle.data.word}\n        </text>\n      {/each}\n      <XAxis\n        scale={scaleX}\n        labelColor={axisColor}\n        labelFontSize={fontSize}\n        baseLineColor={axisColor} />\n    </Graphic>\n  </div>\n\n  <h2 class=\"description\">Distribution of words</h2>\n  <p class=\"description\">{pageTitle}</p>\n  <!-- <Textdemo word={hoverWord}/> -->\n  <Textdemo text={text} token={hoverWord}/>\n</div>\n\n<style>\n  .description {\n    color: #53aeb6;\n    text-align: center;\n  }\n</style>\n",
    "<script>\n  \"use strict\";\n  import { singaporeShape } from \"../singaporeShape.js\";\n  import DataContainer from \"@snlab/florence-datacontainer\";\n  import {\n    Graphic,\n    PolygonLayer,\n    createGeoScales,\n    PointLayer\n  } from \"@snlab/florence\";\n  import { schemeAccent } from \"d3-scale-chromatic\";\n  import { createEventDispatcher } from \"svelte\";\n\n  export let locs = \"\";\n  const lats = locs.map(el => el.lat);\n  const lons = locs.map(el => el.lon);\n  const pageids = locs.map(el => el.pageid);\n  const titles = locs.map(el => el.title);\n  const myData = new DataContainer({\n    lat: lats,\n    lon: lons,\n    pageid: pageids,\n    title: titles\n  });\n  console.log(myData);\n\n  // setup geojson\n  const map = new DataContainer(singaporeShape);\n  const geoScale = createGeoScales(map.domain(\"$geometry\"));\n  // set up canvas\n  const width = 1000;\n  const height = 600;\n\n  // emit current page id to parent\n\n  let currentObjIndex = null;\n  let currentPageid = null;\n  let currentPageTitle = null;\n  const onClickHandler = e => {\n    currentObjIndex = e.key;\n  };\n  $: currentPageTitle = myData.column(\"title\")[currentObjIndex];\n  $: currentPageid = myData.column(\"pageid\")[currentObjIndex];\n\n  const dispatch = createEventDispatcher();\n  const sendParent = () => {\n    dispatch(\"currentPageid\", { pageid: currentPageid });\n  };\n</script>\n\n<div id=\"map\">\n  <Graphic {width} {height} {...geoScale} flipY padding={20}>\n    <PolygonLayer\n      geometry={map.column('$geometry')}\n      stroke={'white'}\n      strokeWidth={1}\n      fill=\"#b2ded3\" />\n\n    <PointLayer\n      x={myData.column('lon')}\n      y={myData.column('lat')}\n      radius={5}\n      onClick={onClickHandler} />\n\n  </Graphic>\n  <p>{currentPageTitle}</p>\n  <button on:click={sendParent}>show more</button>\n</div>\n\n<style>\n  #map {\n    display: block;\n    margin: 0 auto;\n  }\n</style>\n",
    "<script>\n  export let text;\n  export let token;\n\n  let reg = new RegExp(\"\", \"i\");;\n  let renderText = text\n  $: {\n    reg = new RegExp(token+\"[a-z]+\", \"i\"); //TODO: cannot match some words\n    renderText = text.replace(reg, str => {\n      return '<span style=\"color:white; background-color: #54918d;\">' + str + \"</span>\";\n    });\n  }\n</script>\n\n<div>\n  <h2>Token: {token}</h2>\n  <p>{@html renderText}</p>\n</div>\n\n<style>\n  div {\n    width: 60%;\n    margin: 0 auto;\n    margin-bottom: 50px;\n  }\n</style>\n"
  ],
  "names": [],
  "mappings": "AAyCE,OAAO,8BAAC,CAAC,AACP,gBAAgB,CAAE,OAAO,CACzB,QAAQ,CAAE,MAAM,CAChB,aAAa,CAAE,CAAC,CAChB,MAAM,CAAE,CAAC,AACX,CAAC,AAGD,sBAAO,CAAC,CAAC,eAAC,CAAC,AACT,KAAK,CAAE,IAAI,CACX,KAAK,CAAE,OAAO,CACd,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,IAAI,CAAC,IAAI,CAClB,eAAe,CAAE,IAAI,CACrB,SAAS,CAAE,IAAI,AACjB,CAAC,AAGD,sBAAO,CAAC,gBAAC,MAAM,AAAC,CAAC,AACf,KAAK,CAAE,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,AAC3B,CAAC,AAGD,cAAc,8BAAC,CAAC,AACd,gBAAgB,CAAE,OAAO,CACzB,KAAK,CAAE,KAAK,AACd,CAAC;AC8CD,YAAY,eAAC,CAAC,AACZ,KAAK,CAAE,OAAO,CACd,UAAU,CAAE,MAAM,AACpB,CAAC;AC9CD,IAAI,cAAC,CAAC,AACJ,OAAO,CAAE,KAAK,CACd,MAAM,CAAE,CAAC,CAAC,IAAI,AAChB,CAAC;ACrDD,GAAG,cAAC,CAAC,AACH,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,CAAC,CAAC,IAAI,CACd,aAAa,CAAE,IAAI,AACrB,CAAC"
}