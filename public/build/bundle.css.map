{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../Home.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import Home from \"./Home.svelte\";\n  import About from \"./About.svelte\";\n  export let nav = \"home\";\n\n  let class1, class2;\n\n  $: {\n    if (nav) {\n      if (nav === \"home\") {\n        class1 = \"topnav-active\";\n      } else {\n        class1 = \"\";\n      }\n      if (nav === \"about\") {\n        class2 = \"topnav-active\";\n      } else {\n        class2 = \"\";\n      }\n    }\n  }\n</script>\n\n<main>\n  <ul class=\"topnav\">\n    <a href=\"/\" on:click|preventDefault={() => (nav = 'home')} class={class1}>\n      Home\n    </a>\n    <a href=\"/\" on:click|preventDefault={() => (nav = 'about')} class={class2}>\n      About\n    </a>\n  </ul>\n\n  {#if nav === 'home'}\n    <Home />\n  {:else if nav === 'about'}\n    <About />\n  {/if}\n</main>\n\n<style>\n  .topnav {\n    background-color: #53aeb6;\n    overflow: hidden;\n    margin-bottom: 0;\n    border: 0;\n  }\n\n  /* Style the links inside the navigation bar */\n  .topnav a {\n    float: left;\n    color: #f2f2f2;\n    text-align: center;\n    padding: 14px 16px;\n    text-decoration: none;\n    font-size: 17px;\n  }\n\n  /* Change the color of links on hover */\n  .topnav a:hover {\n    color: rgb(124, 124, 124);\n  }\n\n  /* Add a color to the active/current link */\n  .topnav-active {\n    background-color: #9bd0d5;\n    color: white;\n  }\n</style>\n",
    "<script>\n  import { data } from \"./data.js\"\n  import { scaleLinear } from \"d3-scale\";\n  import { forceSimulation, forceX, forceY, forceCollide } from \"d3-force\"\n  import { Graphic, Point } from \"@snlab/florence\";\n\n  // set up\n  const width = 1000;\n  const height = 240;\n  const radiusforce = 10\n  const radius = 2\n  const opacity= 1\n\n  // scale the data\n  const scaleX = scaleLinear()\n    .domain([0, 6000]) // lower and upper bound of dataset\n    .range([0, width])\n  let circles = data.map(d => ({x: scaleX(d.Weight_in_lbs), y: height/2, data: d})).sort((a, b) => a.x - b.x);\n  console.log(circles)\n\n  // init simulation\n  const simulation = forceSimulation(circles)\n    .force(\"collide\", forceCollide(radiusforce))\n    .force(\"x\", forceX(d => d.x))\n    .force(\"y\", forceY(height / 2))\n    .on(\"tick\", () => circles=circles)\n\n</script>\n\n<div>\n  <h1>Home</h1>\n  <Graphic {width} {height} backgroundColor=\"#b2ded3\">\n    {#each circles as circle}\n       <Point x={circle.x} y={circle.y}  radius={radius} fill={\"white\"} {opacity}/>\n    {/each}\n  </Graphic>\n</div>\n\n<style>\n  h1 {\n    color: #53aeb6\n  }\n</style>"
  ],
  "names": [],
  "mappings": "AAyCE,OAAO,8BAAC,CAAC,AACP,gBAAgB,CAAE,OAAO,CACzB,QAAQ,CAAE,MAAM,CAChB,aAAa,CAAE,CAAC,CAChB,MAAM,CAAE,CAAC,AACX,CAAC,AAGD,sBAAO,CAAC,CAAC,eAAC,CAAC,AACT,KAAK,CAAE,IAAI,CACX,KAAK,CAAE,OAAO,CACd,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,IAAI,CAAC,IAAI,CAClB,eAAe,CAAE,IAAI,CACrB,SAAS,CAAE,IAAI,AACjB,CAAC,AAGD,sBAAO,CAAC,gBAAC,MAAM,AAAC,CAAC,AACf,KAAK,CAAE,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,AAC3B,CAAC,AAGD,cAAc,8BAAC,CAAC,AACd,gBAAgB,CAAE,OAAO,CACzB,KAAK,CAAE,KAAK,AACd,CAAC;AC5BD,EAAE,eAAC,CAAC,AACF,KAAK,CAAE,OAAO;EAChB,CAAC"
}