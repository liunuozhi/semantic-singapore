
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
var app = (function () {
    'use strict';

    function noop() { }
    const identity = x => x;
    function assign(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function is_promise(value) {
        return value && typeof value === 'object' && typeof value.then === 'function';
    }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    function validate_store(store, name) {
        if (store != null && typeof store.subscribe !== 'function') {
            throw new Error(`'${name}' is not a store with a 'subscribe' method`);
        }
    }
    function subscribe(store, ...callbacks) {
        if (store == null) {
            return noop;
        }
        const unsub = store.subscribe(...callbacks);
        return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
    }
    function component_subscribe(component, store, callback) {
        component.$$.on_destroy.push(subscribe(store, callback));
    }
    function create_slot(definition, ctx, $$scope, fn) {
        if (definition) {
            const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
            return definition[0](slot_ctx);
        }
    }
    function get_slot_context(definition, ctx, $$scope, fn) {
        return definition[1] && fn
            ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
            : $$scope.ctx;
    }
    function get_slot_changes(definition, $$scope, dirty, fn) {
        if (definition[2] && fn) {
            const lets = definition[2](fn(dirty));
            if ($$scope.dirty === undefined) {
                return lets;
            }
            if (typeof lets === 'object') {
                const merged = [];
                const len = Math.max($$scope.dirty.length, lets.length);
                for (let i = 0; i < len; i += 1) {
                    merged[i] = $$scope.dirty[i] | lets[i];
                }
                return merged;
            }
            return $$scope.dirty | lets;
        }
        return $$scope.dirty;
    }
    function null_to_empty(value) {
        return value == null ? '' : value;
    }

    const is_client = typeof window !== 'undefined';
    let now = is_client
        ? () => window.performance.now()
        : () => Date.now();
    let raf = is_client ? cb => requestAnimationFrame(cb) : noop;

    const tasks = new Set();
    function run_tasks(now) {
        tasks.forEach(task => {
            if (!task.c(now)) {
                tasks.delete(task);
                task.f();
            }
        });
        if (tasks.size !== 0)
            raf(run_tasks);
    }
    /**
     * Creates a new task that runs on each raf frame
     * until it returns a falsy value or is aborted
     */
    function loop(callback) {
        let task;
        if (tasks.size === 0)
            raf(run_tasks);
        return {
            promise: new Promise(fulfill => {
                tasks.add(task = { c: callback, f: fulfill });
            }),
            abort() {
                tasks.delete(task);
            }
        };
    }

    function append(target, node) {
        target.appendChild(node);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function destroy_each(iterations, detaching) {
        for (let i = 0; i < iterations.length; i += 1) {
            if (iterations[i])
                iterations[i].d(detaching);
        }
    }
    function element(name) {
        return document.createElement(name);
    }
    function svg_element(name) {
        return document.createElementNS('http://www.w3.org/2000/svg', name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function empty() {
        return text('');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function prevent_default(fn) {
        return function (event) {
            event.preventDefault();
            // @ts-ignore
            return fn.call(this, event);
        };
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function set_svg_attributes(node, attributes) {
        for (const key in attributes) {
            attr(node, key, attributes[key]);
        }
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function set_style(node, key, value, important) {
        node.style.setProperty(key, value, important ? 'important' : '');
    }
    function toggle_class(element, name, toggle) {
        element.classList[toggle ? 'add' : 'remove'](name);
    }
    function custom_event(type, detail) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, false, false, detail);
        return e;
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error(`Function called outside component initialization`);
        return current_component;
    }
    function beforeUpdate(fn) {
        get_current_component().$$.before_update.push(fn);
    }
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }
    function afterUpdate(fn) {
        get_current_component().$$.after_update.push(fn);
    }
    function onDestroy(fn) {
        get_current_component().$$.on_destroy.push(fn);
    }
    function setContext(key, context) {
        get_current_component().$$.context.set(key, context);
    }
    function getContext(key) {
        return get_current_component().$$.context.get(key);
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function tick() {
        schedule_update();
        return resolved_promise;
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    let flushing = false;
    const seen_callbacks = new Set();
    function flush() {
        if (flushing)
            return;
        flushing = true;
        do {
            // first, call beforeUpdate functions
            // and update components
            for (let i = 0; i < dirty_components.length; i += 1) {
                const component = dirty_components[i];
                set_current_component(component);
                update(component.$$);
            }
            dirty_components.length = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        flushing = false;
        seen_callbacks.clear();
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
    }

    function handle_promise(promise, info) {
        const token = info.token = {};
        function update(type, index, key, value) {
            if (info.token !== token)
                return;
            info.resolved = value;
            let child_ctx = info.ctx;
            if (key !== undefined) {
                child_ctx = child_ctx.slice();
                child_ctx[key] = value;
            }
            const block = type && (info.current = type)(child_ctx);
            let needs_flush = false;
            if (info.block) {
                if (info.blocks) {
                    info.blocks.forEach((block, i) => {
                        if (i !== index && block) {
                            group_outros();
                            transition_out(block, 1, 1, () => {
                                info.blocks[i] = null;
                            });
                            check_outros();
                        }
                    });
                }
                else {
                    info.block.d(1);
                }
                block.c();
                transition_in(block, 1);
                block.m(info.mount(), info.anchor);
                needs_flush = true;
            }
            info.block = block;
            if (info.blocks)
                info.blocks[index] = block;
            if (needs_flush) {
                flush();
            }
        }
        if (is_promise(promise)) {
            const current_component = get_current_component();
            promise.then(value => {
                set_current_component(current_component);
                update(info.then, 1, info.value, value);
                set_current_component(null);
            }, error => {
                set_current_component(current_component);
                update(info.catch, 2, info.error, error);
                set_current_component(null);
            });
            // if we previously had a then/catch block, destroy it
            if (info.current !== info.pending) {
                update(info.pending, 0);
                return true;
            }
        }
        else {
            if (info.current !== info.then) {
                update(info.then, 1, info.value, promise);
                return true;
            }
            info.resolved = promise;
        }
    }

    const globals = (typeof window !== 'undefined'
        ? window
        : typeof globalThis !== 'undefined'
            ? globalThis
            : global);

    function destroy_block(block, lookup) {
        block.d(1);
        lookup.delete(block.key);
    }
    function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {
        let o = old_blocks.length;
        let n = list.length;
        let i = o;
        const old_indexes = {};
        while (i--)
            old_indexes[old_blocks[i].key] = i;
        const new_blocks = [];
        const new_lookup = new Map();
        const deltas = new Map();
        i = n;
        while (i--) {
            const child_ctx = get_context(ctx, list, i);
            const key = get_key(child_ctx);
            let block = lookup.get(key);
            if (!block) {
                block = create_each_block(key, child_ctx);
                block.c();
            }
            else if (dynamic) {
                block.p(child_ctx, dirty);
            }
            new_lookup.set(key, new_blocks[i] = block);
            if (key in old_indexes)
                deltas.set(key, Math.abs(i - old_indexes[key]));
        }
        const will_move = new Set();
        const did_move = new Set();
        function insert(block) {
            transition_in(block, 1);
            block.m(node, next, lookup.has(block.key));
            lookup.set(block.key, block);
            next = block.first;
            n--;
        }
        while (o && n) {
            const new_block = new_blocks[n - 1];
            const old_block = old_blocks[o - 1];
            const new_key = new_block.key;
            const old_key = old_block.key;
            if (new_block === old_block) {
                // do nothing
                next = new_block.first;
                o--;
                n--;
            }
            else if (!new_lookup.has(old_key)) {
                // remove old block
                destroy(old_block, lookup);
                o--;
            }
            else if (!lookup.has(new_key) || will_move.has(new_key)) {
                insert(new_block);
            }
            else if (did_move.has(old_key)) {
                o--;
            }
            else if (deltas.get(new_key) > deltas.get(old_key)) {
                did_move.add(new_key);
                insert(new_block);
            }
            else {
                will_move.add(old_key);
                o--;
            }
        }
        while (o--) {
            const old_block = old_blocks[o];
            if (!new_lookup.has(old_block.key))
                destroy(old_block, lookup);
        }
        while (n)
            insert(new_blocks[n - 1]);
        return new_blocks;
    }
    function validate_each_keys(ctx, list, get_context, get_key) {
        const keys = new Set();
        for (let i = 0; i < list.length; i++) {
            const key = get_key(get_context(ctx, list, i));
            if (keys.has(key)) {
                throw new Error(`Cannot have duplicate keys in a keyed each`);
            }
            keys.add(key);
        }
    }

    function get_spread_update(levels, updates) {
        const update = {};
        const to_null_out = {};
        const accounted_for = { $$scope: 1 };
        let i = levels.length;
        while (i--) {
            const o = levels[i];
            const n = updates[i];
            if (n) {
                for (const key in o) {
                    if (!(key in n))
                        to_null_out[key] = 1;
                }
                for (const key in n) {
                    if (!accounted_for[key]) {
                        update[key] = n[key];
                        accounted_for[key] = 1;
                    }
                }
                levels[i] = n;
            }
            else {
                for (const key in o) {
                    accounted_for[key] = 1;
                }
            }
        }
        for (const key in to_null_out) {
            if (!(key in update))
                update[key] = undefined;
        }
        return update;
    }
    function get_spread_object(spread_props) {
        return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};
    }
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        // onMount happens before the initial afterUpdate
        add_render_callback(() => {
            const new_on_destroy = on_mount.map(run).filter(is_function);
            if (on_destroy) {
                on_destroy.push(...new_on_destroy);
            }
            else {
                // Edge case - component was destroyed immediately,
                // most likely as a result of a binding initialising
                run_all(new_on_destroy);
            }
            component.$$.on_mount = [];
        });
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const prop_values = options.props || {};
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            before_update: [],
            after_update: [],
            context: new Map(parent_component ? parent_component.$$.context : []),
            // everything else
            callbacks: blank_object(),
            dirty
        };
        let ready = false;
        $$.ctx = instance
            ? instance(component, prop_values, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if ($$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor);
            flush();
        }
        set_current_component(parent_component);
    }
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set() {
            // overridden by instance, if it has props
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.21.0' }, detail)));
    }
    function append_dev(target, node) {
        dispatch_dev("SvelteDOMInsert", { target, node });
        append(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev("SvelteDOMInsert", { target, node, anchor });
        insert(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev("SvelteDOMRemove", { node });
        detach(node);
    }
    function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
        const modifiers = options === true ? ["capture"] : options ? Array.from(Object.keys(options)) : [];
        if (has_prevent_default)
            modifiers.push('preventDefault');
        if (has_stop_propagation)
            modifiers.push('stopPropagation');
        dispatch_dev("SvelteDOMAddEventListener", { node, event, handler, modifiers });
        const dispose = listen(node, event, handler, options);
        return () => {
            dispatch_dev("SvelteDOMRemoveEventListener", { node, event, handler, modifiers });
            dispose();
        };
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev("SvelteDOMRemoveAttribute", { node, attribute });
        else
            dispatch_dev("SvelteDOMSetAttribute", { node, attribute, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.data === data)
            return;
        dispatch_dev("SvelteDOMSetData", { node: text, data });
        text.data = data;
    }
    function validate_each_argument(arg) {
        if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
            let msg = '{#each} only iterates over array-like objects.';
            if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
                msg += ' You can use a spread to convert this iterable into an array.';
            }
            throw new Error(msg);
        }
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
            }
        }
    }
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error(`'target' is a required option`);
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn(`Component was already destroyed`); // eslint-disable-line no-console
            };
        }
        $capture_state() { }
        $inject_state() { }
    }

    const subscriber_queue = [];
    /**
     * Create a `Writable` store that allows both updating and reading by subscription.
     * @param {*=}value initial value
     * @param {StartStopNotifier=}start start and stop notifications for subscriptions
     */
    function writable(value, start = noop) {
        let stop;
        const subscribers = [];
        function set(new_value) {
            if (safe_not_equal(value, new_value)) {
                value = new_value;
                if (stop) { // store is ready
                    const run_queue = !subscriber_queue.length;
                    for (let i = 0; i < subscribers.length; i += 1) {
                        const s = subscribers[i];
                        s[1]();
                        subscriber_queue.push(s, value);
                    }
                    if (run_queue) {
                        for (let i = 0; i < subscriber_queue.length; i += 2) {
                            subscriber_queue[i][0](subscriber_queue[i + 1]);
                        }
                        subscriber_queue.length = 0;
                    }
                }
            }
        }
        function update(fn) {
            set(fn(value));
        }
        function subscribe(run, invalidate = noop) {
            const subscriber = [run, invalidate];
            subscribers.push(subscriber);
            if (subscribers.length === 1) {
                stop = start(set) || noop;
            }
            run(value);
            return () => {
                const index = subscribers.indexOf(subscriber);
                if (index !== -1) {
                    subscribers.splice(index, 1);
                }
                if (subscribers.length === 0) {
                    stop();
                    stop = null;
                }
            };
        }
        return { set, update, subscribe };
    }

    const hoverWordWrite = writable(0);
    const clickWordWrite = writable(0);
    const clickHexIdWrite = writable(0);

    class GraphicContext {
      constructor ({ renderer }) {
        if (!renderer) {
          this._rendererOptions = { output: 'svg' };
        }

        if (renderer) {
          validateRendererOptions(renderer);
          this._rendererOptions = renderer;
        }
      }

      output () {
        return this._rendererOptions.output
      }
    }

    function validateRendererOptions (options) {
      if (!(
        options.constructor === Object &&
        'output' in options &&
        ['svg'].includes(options.output)
      )) {
        throw new Error(`Invalid renderer options: ${JSON.stringify(options)}`)
      }
    }

    const key = {};

    function subscribe$1 () {
      return getContext(key)
    }

    function init$1 () {
      const graphicContext = writable();
      setContext(key, graphicContext);

      return graphicContext
    }

    function update$1 (graphicContext, options) {
      graphicContext.set(new GraphicContext(options));
    }

    var GraphicContext$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        subscribe: subscribe$1,
        init: init$1,
        update: update$1
    });

    function parsePadding (_padding) {
      const padding = _padding === undefined
        ? 0
        : _padding;

      if (padding.constructor === Number) {
        return { left: padding, right: padding, top: padding, bottom: padding }
      }

      if (padding.constructor === Object) {
        if (Object.keys(padding).length !== 4) throw invalidPaddingError

        for (const key of ['left', 'right', 'top', 'bottom']) {
          if (!(key in padding)) throw invalidPaddingError
        }

        return padding
      }

      throw invalidPaddingError
    }

    const invalidPaddingError = new Error('Invalid padding specification');

    function applyPadding (range, offsetMin, offsetMax) {
      ensurePaddingSmallerThanRange(range, offsetMin, offsetMax);

      if (range[0] < range[1]) {
        return [range[0] + offsetMin, range[1] - offsetMax]
      } else {
        return [range[0] - offsetMax, range[1] + offsetMin]
      }
    }

    function ensurePaddingSmallerThanRange (range, min, max) {
      if (Math.abs(range[0] - range[1]) < (min + max)) {
        console.warn('Padding cannot exceed width or height');
      }
    }

    function getRanges ({ coordinates }) {
      return {
        rangeX: [coordinates.x1, coordinates.x2],
        rangeY: [coordinates.y1, coordinates.y2]
      }
    }

    function getFinalRanges (sectionContext, ranges, padding) {
      const { flipX, flipY, zoomIdentity } = sectionContext;
      const { rangeX, rangeY } = ranges;
      const { left, right, top, bottom } = padding;

      let finalRangeX = applyFlip(rangeX, flipX);
      finalRangeX = applyPadding(finalRangeX, left, right);

      if (zoomIdentity) {
        validateZoomFactor(zoomIdentity.kx);
        finalRangeX = applyZoom(finalRangeX, zoomIdentity.kx, zoomIdentity.x);
      }

      let finalRangeY = applyFlip(rangeY, flipY);
      finalRangeY = applyPadding(finalRangeY, top, bottom);

      if (zoomIdentity) {
        validateZoomFactor(zoomIdentity.ky);
        finalRangeY = applyZoom(finalRangeY, zoomIdentity.ky, zoomIdentity.y);
      }

      return { finalRangeX, finalRangeY }
    }

    function applyFlip (range, flip) {
      return flip
        ? [range[1], range[0]]
        : range
    }

    function applyZoom (range, k, translate) {
      return [
        range[0] * k + translate,
        range[1] * k + translate
      ]
    }

    function validateZoomFactor (k) {
      if (k < 0) throw new Error('Zoom factors have to be positive')
    }

    function ascending(a, b) {
      return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
    }

    function bisector(compare) {
      if (compare.length === 1) compare = ascendingComparator(compare);
      return {
        left: function(a, x, lo, hi) {
          if (lo == null) lo = 0;
          if (hi == null) hi = a.length;
          while (lo < hi) {
            var mid = lo + hi >>> 1;
            if (compare(a[mid], x) < 0) lo = mid + 1;
            else hi = mid;
          }
          return lo;
        },
        right: function(a, x, lo, hi) {
          if (lo == null) lo = 0;
          if (hi == null) hi = a.length;
          while (lo < hi) {
            var mid = lo + hi >>> 1;
            if (compare(a[mid], x) > 0) hi = mid;
            else lo = mid + 1;
          }
          return lo;
        }
      };
    }

    function ascendingComparator(f) {
      return function(d, x) {
        return ascending(f(d), x);
      };
    }

    var ascendingBisect = bisector(ascending);
    var bisectRight = ascendingBisect.right;

    var e10 = Math.sqrt(50),
        e5 = Math.sqrt(10),
        e2 = Math.sqrt(2);

    function arrayTicks(start, stop, count) {
      var reverse,
          i = -1,
          n,
          ticks,
          step;

      stop = +stop, start = +start, count = +count;
      if (start === stop && count > 0) return [start];
      if (reverse = stop < start) n = start, start = stop, stop = n;
      if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];

      if (step > 0) {
        start = Math.ceil(start / step);
        stop = Math.floor(stop / step);
        ticks = new Array(n = Math.ceil(stop - start + 1));
        while (++i < n) ticks[i] = (start + i) * step;
      } else {
        start = Math.floor(start * step);
        stop = Math.ceil(stop * step);
        ticks = new Array(n = Math.ceil(start - stop + 1));
        while (++i < n) ticks[i] = (start - i) / step;
      }

      if (reverse) ticks.reverse();

      return ticks;
    }

    function tickIncrement(start, stop, count) {
      var step = (stop - start) / Math.max(0, count),
          power = Math.floor(Math.log(step) / Math.LN10),
          error = step / Math.pow(10, power);
      return power >= 0
          ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)
          : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
    }

    function tickStep(start, stop, count) {
      var step0 = Math.abs(stop - start) / Math.max(0, count),
          step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
          error = step0 / step1;
      if (error >= e10) step1 *= 10;
      else if (error >= e5) step1 *= 5;
      else if (error >= e2) step1 *= 2;
      return stop < start ? -step1 : step1;
    }

    function initRange(domain, range) {
      switch (arguments.length) {
        case 0: break;
        case 1: this.range(domain); break;
        default: this.range(range).domain(domain); break;
      }
      return this;
    }

    const implicit = Symbol("implicit");

    function ordinal() {
      var index = new Map(),
          domain = [],
          range = [],
          unknown = implicit;

      function scale(d) {
        var key = d + "", i = index.get(key);
        if (!i) {
          if (unknown !== implicit) return unknown;
          index.set(key, i = domain.push(d));
        }
        return range[(i - 1) % range.length];
      }

      scale.domain = function(_) {
        if (!arguments.length) return domain.slice();
        domain = [], index = new Map();
        for (const value of _) {
          const key = value + "";
          if (index.has(key)) continue;
          index.set(key, domain.push(value));
        }
        return scale;
      };

      scale.range = function(_) {
        return arguments.length ? (range = Array.from(_), scale) : range.slice();
      };

      scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
      };

      scale.copy = function() {
        return ordinal(domain, range).unknown(unknown);
      };

      initRange.apply(scale, arguments);

      return scale;
    }

    function define(constructor, factory, prototype) {
      constructor.prototype = factory.prototype = prototype;
      prototype.constructor = constructor;
    }

    function extend(parent, definition) {
      var prototype = Object.create(parent.prototype);
      for (var key in definition) prototype[key] = definition[key];
      return prototype;
    }

    function Color() {}

    var darker = 0.7;
    var brighter = 1 / darker;

    var reI = "\\s*([+-]?\\d+)\\s*",
        reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",
        reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",
        reHex = /^#([0-9a-f]{3,8})$/,
        reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$"),
        reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$"),
        reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$"),
        reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$"),
        reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$"),
        reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");

    var named = {
      aliceblue: 0xf0f8ff,
      antiquewhite: 0xfaebd7,
      aqua: 0x00ffff,
      aquamarine: 0x7fffd4,
      azure: 0xf0ffff,
      beige: 0xf5f5dc,
      bisque: 0xffe4c4,
      black: 0x000000,
      blanchedalmond: 0xffebcd,
      blue: 0x0000ff,
      blueviolet: 0x8a2be2,
      brown: 0xa52a2a,
      burlywood: 0xdeb887,
      cadetblue: 0x5f9ea0,
      chartreuse: 0x7fff00,
      chocolate: 0xd2691e,
      coral: 0xff7f50,
      cornflowerblue: 0x6495ed,
      cornsilk: 0xfff8dc,
      crimson: 0xdc143c,
      cyan: 0x00ffff,
      darkblue: 0x00008b,
      darkcyan: 0x008b8b,
      darkgoldenrod: 0xb8860b,
      darkgray: 0xa9a9a9,
      darkgreen: 0x006400,
      darkgrey: 0xa9a9a9,
      darkkhaki: 0xbdb76b,
      darkmagenta: 0x8b008b,
      darkolivegreen: 0x556b2f,
      darkorange: 0xff8c00,
      darkorchid: 0x9932cc,
      darkred: 0x8b0000,
      darksalmon: 0xe9967a,
      darkseagreen: 0x8fbc8f,
      darkslateblue: 0x483d8b,
      darkslategray: 0x2f4f4f,
      darkslategrey: 0x2f4f4f,
      darkturquoise: 0x00ced1,
      darkviolet: 0x9400d3,
      deeppink: 0xff1493,
      deepskyblue: 0x00bfff,
      dimgray: 0x696969,
      dimgrey: 0x696969,
      dodgerblue: 0x1e90ff,
      firebrick: 0xb22222,
      floralwhite: 0xfffaf0,
      forestgreen: 0x228b22,
      fuchsia: 0xff00ff,
      gainsboro: 0xdcdcdc,
      ghostwhite: 0xf8f8ff,
      gold: 0xffd700,
      goldenrod: 0xdaa520,
      gray: 0x808080,
      green: 0x008000,
      greenyellow: 0xadff2f,
      grey: 0x808080,
      honeydew: 0xf0fff0,
      hotpink: 0xff69b4,
      indianred: 0xcd5c5c,
      indigo: 0x4b0082,
      ivory: 0xfffff0,
      khaki: 0xf0e68c,
      lavender: 0xe6e6fa,
      lavenderblush: 0xfff0f5,
      lawngreen: 0x7cfc00,
      lemonchiffon: 0xfffacd,
      lightblue: 0xadd8e6,
      lightcoral: 0xf08080,
      lightcyan: 0xe0ffff,
      lightgoldenrodyellow: 0xfafad2,
      lightgray: 0xd3d3d3,
      lightgreen: 0x90ee90,
      lightgrey: 0xd3d3d3,
      lightpink: 0xffb6c1,
      lightsalmon: 0xffa07a,
      lightseagreen: 0x20b2aa,
      lightskyblue: 0x87cefa,
      lightslategray: 0x778899,
      lightslategrey: 0x778899,
      lightsteelblue: 0xb0c4de,
      lightyellow: 0xffffe0,
      lime: 0x00ff00,
      limegreen: 0x32cd32,
      linen: 0xfaf0e6,
      magenta: 0xff00ff,
      maroon: 0x800000,
      mediumaquamarine: 0x66cdaa,
      mediumblue: 0x0000cd,
      mediumorchid: 0xba55d3,
      mediumpurple: 0x9370db,
      mediumseagreen: 0x3cb371,
      mediumslateblue: 0x7b68ee,
      mediumspringgreen: 0x00fa9a,
      mediumturquoise: 0x48d1cc,
      mediumvioletred: 0xc71585,
      midnightblue: 0x191970,
      mintcream: 0xf5fffa,
      mistyrose: 0xffe4e1,
      moccasin: 0xffe4b5,
      navajowhite: 0xffdead,
      navy: 0x000080,
      oldlace: 0xfdf5e6,
      olive: 0x808000,
      olivedrab: 0x6b8e23,
      orange: 0xffa500,
      orangered: 0xff4500,
      orchid: 0xda70d6,
      palegoldenrod: 0xeee8aa,
      palegreen: 0x98fb98,
      paleturquoise: 0xafeeee,
      palevioletred: 0xdb7093,
      papayawhip: 0xffefd5,
      peachpuff: 0xffdab9,
      peru: 0xcd853f,
      pink: 0xffc0cb,
      plum: 0xdda0dd,
      powderblue: 0xb0e0e6,
      purple: 0x800080,
      rebeccapurple: 0x663399,
      red: 0xff0000,
      rosybrown: 0xbc8f8f,
      royalblue: 0x4169e1,
      saddlebrown: 0x8b4513,
      salmon: 0xfa8072,
      sandybrown: 0xf4a460,
      seagreen: 0x2e8b57,
      seashell: 0xfff5ee,
      sienna: 0xa0522d,
      silver: 0xc0c0c0,
      skyblue: 0x87ceeb,
      slateblue: 0x6a5acd,
      slategray: 0x708090,
      slategrey: 0x708090,
      snow: 0xfffafa,
      springgreen: 0x00ff7f,
      steelblue: 0x4682b4,
      tan: 0xd2b48c,
      teal: 0x008080,
      thistle: 0xd8bfd8,
      tomato: 0xff6347,
      turquoise: 0x40e0d0,
      violet: 0xee82ee,
      wheat: 0xf5deb3,
      white: 0xffffff,
      whitesmoke: 0xf5f5f5,
      yellow: 0xffff00,
      yellowgreen: 0x9acd32
    };

    define(Color, color, {
      copy: function(channels) {
        return Object.assign(new this.constructor, this, channels);
      },
      displayable: function() {
        return this.rgb().displayable();
      },
      hex: color_formatHex, // Deprecated! Use color.formatHex.
      formatHex: color_formatHex,
      formatHsl: color_formatHsl,
      formatRgb: color_formatRgb,
      toString: color_formatRgb
    });

    function color_formatHex() {
      return this.rgb().formatHex();
    }

    function color_formatHsl() {
      return hslConvert(this).formatHsl();
    }

    function color_formatRgb() {
      return this.rgb().formatRgb();
    }

    function color(format) {
      var m, l;
      format = (format + "").trim().toLowerCase();
      return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000
          : l === 3 ? new Rgb((m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1) // #f00
          : l === 8 ? new Rgb(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000
          : l === 4 ? new Rgb((m >> 12 & 0xf) | (m >> 8 & 0xf0), (m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), (((m & 0xf) << 4) | (m & 0xf)) / 0xff) // #f000
          : null) // invalid hex
          : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
          : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
          : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
          : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
          : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
          : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
          : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins
          : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0)
          : null;
    }

    function rgbn(n) {
      return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
    }

    function rgba(r, g, b, a) {
      if (a <= 0) r = g = b = NaN;
      return new Rgb(r, g, b, a);
    }

    function rgbConvert(o) {
      if (!(o instanceof Color)) o = color(o);
      if (!o) return new Rgb;
      o = o.rgb();
      return new Rgb(o.r, o.g, o.b, o.opacity);
    }

    function rgb(r, g, b, opacity) {
      return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
    }

    function Rgb(r, g, b, opacity) {
      this.r = +r;
      this.g = +g;
      this.b = +b;
      this.opacity = +opacity;
    }

    define(Rgb, rgb, extend(Color, {
      brighter: function(k) {
        k = k == null ? brighter : Math.pow(brighter, k);
        return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
      },
      darker: function(k) {
        k = k == null ? darker : Math.pow(darker, k);
        return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
      },
      rgb: function() {
        return this;
      },
      displayable: function() {
        return (-0.5 <= this.r && this.r < 255.5)
            && (-0.5 <= this.g && this.g < 255.5)
            && (-0.5 <= this.b && this.b < 255.5)
            && (0 <= this.opacity && this.opacity <= 1);
      },
      hex: rgb_formatHex, // Deprecated! Use color.formatHex.
      formatHex: rgb_formatHex,
      formatRgb: rgb_formatRgb,
      toString: rgb_formatRgb
    }));

    function rgb_formatHex() {
      return "#" + hex(this.r) + hex(this.g) + hex(this.b);
    }

    function rgb_formatRgb() {
      var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
      return (a === 1 ? "rgb(" : "rgba(")
          + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", "
          + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", "
          + Math.max(0, Math.min(255, Math.round(this.b) || 0))
          + (a === 1 ? ")" : ", " + a + ")");
    }

    function hex(value) {
      value = Math.max(0, Math.min(255, Math.round(value) || 0));
      return (value < 16 ? "0" : "") + value.toString(16);
    }

    function hsla(h, s, l, a) {
      if (a <= 0) h = s = l = NaN;
      else if (l <= 0 || l >= 1) h = s = NaN;
      else if (s <= 0) h = NaN;
      return new Hsl(h, s, l, a);
    }

    function hslConvert(o) {
      if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
      if (!(o instanceof Color)) o = color(o);
      if (!o) return new Hsl;
      if (o instanceof Hsl) return o;
      o = o.rgb();
      var r = o.r / 255,
          g = o.g / 255,
          b = o.b / 255,
          min = Math.min(r, g, b),
          max = Math.max(r, g, b),
          h = NaN,
          s = max - min,
          l = (max + min) / 2;
      if (s) {
        if (r === max) h = (g - b) / s + (g < b) * 6;
        else if (g === max) h = (b - r) / s + 2;
        else h = (r - g) / s + 4;
        s /= l < 0.5 ? max + min : 2 - max - min;
        h *= 60;
      } else {
        s = l > 0 && l < 1 ? 0 : h;
      }
      return new Hsl(h, s, l, o.opacity);
    }

    function hsl(h, s, l, opacity) {
      return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
    }

    function Hsl(h, s, l, opacity) {
      this.h = +h;
      this.s = +s;
      this.l = +l;
      this.opacity = +opacity;
    }

    define(Hsl, hsl, extend(Color, {
      brighter: function(k) {
        k = k == null ? brighter : Math.pow(brighter, k);
        return new Hsl(this.h, this.s, this.l * k, this.opacity);
      },
      darker: function(k) {
        k = k == null ? darker : Math.pow(darker, k);
        return new Hsl(this.h, this.s, this.l * k, this.opacity);
      },
      rgb: function() {
        var h = this.h % 360 + (this.h < 0) * 360,
            s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
            l = this.l,
            m2 = l + (l < 0.5 ? l : 1 - l) * s,
            m1 = 2 * l - m2;
        return new Rgb(
          hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
          hsl2rgb(h, m1, m2),
          hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
          this.opacity
        );
      },
      displayable: function() {
        return (0 <= this.s && this.s <= 1 || isNaN(this.s))
            && (0 <= this.l && this.l <= 1)
            && (0 <= this.opacity && this.opacity <= 1);
      },
      formatHsl: function() {
        var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
        return (a === 1 ? "hsl(" : "hsla(")
            + (this.h || 0) + ", "
            + (this.s || 0) * 100 + "%, "
            + (this.l || 0) * 100 + "%"
            + (a === 1 ? ")" : ", " + a + ")");
      }
    }));

    /* From FvD 13.37, CSS Color Module Level 3 */
    function hsl2rgb(h, m1, m2) {
      return (h < 60 ? m1 + (m2 - m1) * h / 60
          : h < 180 ? m2
          : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60
          : m1) * 255;
    }

    function constant(x) {
      return function() {
        return x;
      };
    }

    function linear(a, d) {
      return function(t) {
        return a + t * d;
      };
    }

    function exponential(a, b, y) {
      return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {
        return Math.pow(a + t * b, y);
      };
    }

    function gamma(y) {
      return (y = +y) === 1 ? nogamma : function(a, b) {
        return b - a ? exponential(a, b, y) : constant(isNaN(a) ? b : a);
      };
    }

    function nogamma(a, b) {
      var d = b - a;
      return d ? linear(a, d) : constant(isNaN(a) ? b : a);
    }

    var rgb$1 = (function rgbGamma(y) {
      var color = gamma(y);

      function rgb$1(start, end) {
        var r = color((start = rgb(start)).r, (end = rgb(end)).r),
            g = color(start.g, end.g),
            b = color(start.b, end.b),
            opacity = nogamma(start.opacity, end.opacity);
        return function(t) {
          start.r = r(t);
          start.g = g(t);
          start.b = b(t);
          start.opacity = opacity(t);
          return start + "";
        };
      }

      rgb$1.gamma = rgbGamma;

      return rgb$1;
    })(1);

    function numberArray(a, b) {
      if (!b) b = [];
      var n = a ? Math.min(b.length, a.length) : 0,
          c = b.slice(),
          i;
      return function(t) {
        for (i = 0; i < n; ++i) c[i] = a[i] * (1 - t) + b[i] * t;
        return c;
      };
    }

    function isNumberArray(x) {
      return ArrayBuffer.isView(x) && !(x instanceof DataView);
    }

    function genericArray(a, b) {
      var nb = b ? b.length : 0,
          na = a ? Math.min(nb, a.length) : 0,
          x = new Array(na),
          c = new Array(nb),
          i;

      for (i = 0; i < na; ++i) x[i] = interpolate(a[i], b[i]);
      for (; i < nb; ++i) c[i] = b[i];

      return function(t) {
        for (i = 0; i < na; ++i) c[i] = x[i](t);
        return c;
      };
    }

    function date(a, b) {
      var d = new Date;
      return a = +a, b = +b, function(t) {
        return d.setTime(a * (1 - t) + b * t), d;
      };
    }

    function interpolateNumber(a, b) {
      return a = +a, b = +b, function(t) {
        return a * (1 - t) + b * t;
      };
    }

    function object(a, b) {
      var i = {},
          c = {},
          k;

      if (a === null || typeof a !== "object") a = {};
      if (b === null || typeof b !== "object") b = {};

      for (k in b) {
        if (k in a) {
          i[k] = interpolate(a[k], b[k]);
        } else {
          c[k] = b[k];
        }
      }

      return function(t) {
        for (k in i) c[k] = i[k](t);
        return c;
      };
    }

    var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
        reB = new RegExp(reA.source, "g");

    function zero(b) {
      return function() {
        return b;
      };
    }

    function one(b) {
      return function(t) {
        return b(t) + "";
      };
    }

    function string(a, b) {
      var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b
          am, // current match in a
          bm, // current match in b
          bs, // string preceding current number in b, if any
          i = -1, // index in s
          s = [], // string constants and placeholders
          q = []; // number interpolators

      // Coerce inputs to strings.
      a = a + "", b = b + "";

      // Interpolate pairs of numbers in a & b.
      while ((am = reA.exec(a))
          && (bm = reB.exec(b))) {
        if ((bs = bm.index) > bi) { // a string precedes the next number in b
          bs = b.slice(bi, bs);
          if (s[i]) s[i] += bs; // coalesce with previous string
          else s[++i] = bs;
        }
        if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match
          if (s[i]) s[i] += bm; // coalesce with previous string
          else s[++i] = bm;
        } else { // interpolate non-matching numbers
          s[++i] = null;
          q.push({i: i, x: interpolateNumber(am, bm)});
        }
        bi = reB.lastIndex;
      }

      // Add remains of b.
      if (bi < b.length) {
        bs = b.slice(bi);
        if (s[i]) s[i] += bs; // coalesce with previous string
        else s[++i] = bs;
      }

      // Special optimization for only a single match.
      // Otherwise, interpolate each of the numbers and rejoin the string.
      return s.length < 2 ? (q[0]
          ? one(q[0].x)
          : zero(b))
          : (b = q.length, function(t) {
              for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
              return s.join("");
            });
    }

    function interpolate(a, b) {
      var t = typeof b, c;
      return b == null || t === "boolean" ? constant(b)
          : (t === "number" ? interpolateNumber
          : t === "string" ? ((c = color(b)) ? (b = c, rgb$1) : string)
          : b instanceof color ? rgb$1
          : b instanceof Date ? date
          : isNumberArray(b) ? numberArray
          : Array.isArray(b) ? genericArray
          : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? object
          : interpolateNumber)(a, b);
    }

    function interpolateRound(a, b) {
      return a = +a, b = +b, function(t) {
        return Math.round(a * (1 - t) + b * t);
      };
    }

    function constant$1(x) {
      return function() {
        return x;
      };
    }

    function number(x) {
      return +x;
    }

    var unit = [0, 1];

    function identity$1(x) {
      return x;
    }

    function normalize(a, b) {
      return (b -= (a = +a))
          ? function(x) { return (x - a) / b; }
          : constant$1(isNaN(b) ? NaN : 0.5);
    }

    function clamper(a, b) {
      var t;
      if (a > b) t = a, a = b, b = t;
      return function(x) { return Math.max(a, Math.min(b, x)); };
    }

    // normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
    // interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].
    function bimap(domain, range, interpolate) {
      var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];
      if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);
      else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);
      return function(x) { return r0(d0(x)); };
    }

    function polymap(domain, range, interpolate) {
      var j = Math.min(domain.length, range.length) - 1,
          d = new Array(j),
          r = new Array(j),
          i = -1;

      // Reverse descending domains.
      if (domain[j] < domain[0]) {
        domain = domain.slice().reverse();
        range = range.slice().reverse();
      }

      while (++i < j) {
        d[i] = normalize(domain[i], domain[i + 1]);
        r[i] = interpolate(range[i], range[i + 1]);
      }

      return function(x) {
        var i = bisectRight(domain, x, 1, j) - 1;
        return r[i](d[i](x));
      };
    }

    function copy(source, target) {
      return target
          .domain(source.domain())
          .range(source.range())
          .interpolate(source.interpolate())
          .clamp(source.clamp())
          .unknown(source.unknown());
    }

    function transformer() {
      var domain = unit,
          range = unit,
          interpolate$1 = interpolate,
          transform,
          untransform,
          unknown,
          clamp = identity$1,
          piecewise,
          output,
          input;

      function rescale() {
        var n = Math.min(domain.length, range.length);
        if (clamp !== identity$1) clamp = clamper(domain[0], domain[n - 1]);
        piecewise = n > 2 ? polymap : bimap;
        output = input = null;
        return scale;
      }

      function scale(x) {
        return isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate$1)))(transform(clamp(x)));
      }

      scale.invert = function(y) {
        return clamp(untransform((input || (input = piecewise(range, domain.map(transform), interpolateNumber)))(y)));
      };

      scale.domain = function(_) {
        return arguments.length ? (domain = Array.from(_, number), rescale()) : domain.slice();
      };

      scale.range = function(_) {
        return arguments.length ? (range = Array.from(_), rescale()) : range.slice();
      };

      scale.rangeRound = function(_) {
        return range = Array.from(_), interpolate$1 = interpolateRound, rescale();
      };

      scale.clamp = function(_) {
        return arguments.length ? (clamp = _ ? true : identity$1, rescale()) : clamp !== identity$1;
      };

      scale.interpolate = function(_) {
        return arguments.length ? (interpolate$1 = _, rescale()) : interpolate$1;
      };

      scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
      };

      return function(t, u) {
        transform = t, untransform = u;
        return rescale();
      };
    }

    function continuous() {
      return transformer()(identity$1, identity$1);
    }

    // Computes the decimal coefficient and exponent of the specified number x with
    // significant digits p, where x is positive and p is in [1, 21] or undefined.
    // For example, formatDecimal(1.23) returns ["123", 0].
    function formatDecimal(x, p) {
      if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity
      var i, coefficient = x.slice(0, i);

      // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
      // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).
      return [
        coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
        +x.slice(i + 1)
      ];
    }

    function exponent(x) {
      return x = formatDecimal(Math.abs(x)), x ? x[1] : NaN;
    }

    function formatGroup(grouping, thousands) {
      return function(value, width) {
        var i = value.length,
            t = [],
            j = 0,
            g = grouping[0],
            length = 0;

        while (i > 0 && g > 0) {
          if (length + g + 1 > width) g = Math.max(1, width - length);
          t.push(value.substring(i -= g, i + g));
          if ((length += g + 1) > width) break;
          g = grouping[j = (j + 1) % grouping.length];
        }

        return t.reverse().join(thousands);
      };
    }

    function formatNumerals(numerals) {
      return function(value) {
        return value.replace(/[0-9]/g, function(i) {
          return numerals[+i];
        });
      };
    }

    // [[fill]align][sign][symbol][0][width][,][.precision][~][type]
    var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;

    function formatSpecifier(specifier) {
      if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
      var match;
      return new FormatSpecifier({
        fill: match[1],
        align: match[2],
        sign: match[3],
        symbol: match[4],
        zero: match[5],
        width: match[6],
        comma: match[7],
        precision: match[8] && match[8].slice(1),
        trim: match[9],
        type: match[10]
      });
    }

    formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof

    function FormatSpecifier(specifier) {
      this.fill = specifier.fill === undefined ? " " : specifier.fill + "";
      this.align = specifier.align === undefined ? ">" : specifier.align + "";
      this.sign = specifier.sign === undefined ? "-" : specifier.sign + "";
      this.symbol = specifier.symbol === undefined ? "" : specifier.symbol + "";
      this.zero = !!specifier.zero;
      this.width = specifier.width === undefined ? undefined : +specifier.width;
      this.comma = !!specifier.comma;
      this.precision = specifier.precision === undefined ? undefined : +specifier.precision;
      this.trim = !!specifier.trim;
      this.type = specifier.type === undefined ? "" : specifier.type + "";
    }

    FormatSpecifier.prototype.toString = function() {
      return this.fill
          + this.align
          + this.sign
          + this.symbol
          + (this.zero ? "0" : "")
          + (this.width === undefined ? "" : Math.max(1, this.width | 0))
          + (this.comma ? "," : "")
          + (this.precision === undefined ? "" : "." + Math.max(0, this.precision | 0))
          + (this.trim ? "~" : "")
          + this.type;
    };

    // Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.
    function formatTrim(s) {
      out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {
        switch (s[i]) {
          case ".": i0 = i1 = i; break;
          case "0": if (i0 === 0) i0 = i; i1 = i; break;
          default: if (!+s[i]) break out; if (i0 > 0) i0 = 0; break;
        }
      }
      return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
    }

    var prefixExponent;

    function formatPrefixAuto(x, p) {
      var d = formatDecimal(x, p);
      if (!d) return x + "";
      var coefficient = d[0],
          exponent = d[1],
          i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
          n = coefficient.length;
      return i === n ? coefficient
          : i > n ? coefficient + new Array(i - n + 1).join("0")
          : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i)
          : "0." + new Array(1 - i).join("0") + formatDecimal(x, Math.max(0, p + i - 1))[0]; // less than 1y!
    }

    function formatRounded(x, p) {
      var d = formatDecimal(x, p);
      if (!d) return x + "";
      var coefficient = d[0],
          exponent = d[1];
      return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient
          : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1)
          : coefficient + new Array(exponent - coefficient.length + 2).join("0");
    }

    var formatTypes = {
      "%": function(x, p) { return (x * 100).toFixed(p); },
      "b": function(x) { return Math.round(x).toString(2); },
      "c": function(x) { return x + ""; },
      "d": function(x) { return Math.round(x).toString(10); },
      "e": function(x, p) { return x.toExponential(p); },
      "f": function(x, p) { return x.toFixed(p); },
      "g": function(x, p) { return x.toPrecision(p); },
      "o": function(x) { return Math.round(x).toString(8); },
      "p": function(x, p) { return formatRounded(x * 100, p); },
      "r": formatRounded,
      "s": formatPrefixAuto,
      "X": function(x) { return Math.round(x).toString(16).toUpperCase(); },
      "x": function(x) { return Math.round(x).toString(16); }
    };

    function identity$2(x) {
      return x;
    }

    var map = Array.prototype.map,
        prefixes = ["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];

    function formatLocale(locale) {
      var group = locale.grouping === undefined || locale.thousands === undefined ? identity$2 : formatGroup(map.call(locale.grouping, Number), locale.thousands + ""),
          currencyPrefix = locale.currency === undefined ? "" : locale.currency[0] + "",
          currencySuffix = locale.currency === undefined ? "" : locale.currency[1] + "",
          decimal = locale.decimal === undefined ? "." : locale.decimal + "",
          numerals = locale.numerals === undefined ? identity$2 : formatNumerals(map.call(locale.numerals, String)),
          percent = locale.percent === undefined ? "%" : locale.percent + "",
          minus = locale.minus === undefined ? "-" : locale.minus + "",
          nan = locale.nan === undefined ? "NaN" : locale.nan + "";

      function newFormat(specifier) {
        specifier = formatSpecifier(specifier);

        var fill = specifier.fill,
            align = specifier.align,
            sign = specifier.sign,
            symbol = specifier.symbol,
            zero = specifier.zero,
            width = specifier.width,
            comma = specifier.comma,
            precision = specifier.precision,
            trim = specifier.trim,
            type = specifier.type;

        // The "n" type is an alias for ",g".
        if (type === "n") comma = true, type = "g";

        // The "" type, and any invalid type, is an alias for ".12~g".
        else if (!formatTypes[type]) precision === undefined && (precision = 12), trim = true, type = "g";

        // If zero fill is specified, padding goes after sign and before digits.
        if (zero || (fill === "0" && align === "=")) zero = true, fill = "0", align = "=";

        // Compute the prefix and suffix.
        // For SI-prefix, the suffix is lazily computed.
        var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
            suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";

        // What format function should we use?
        // Is this an integer type?
        // Can this type generate exponential notation?
        var formatType = formatTypes[type],
            maybeSuffix = /[defgprs%]/.test(type);

        // Set the default precision if not specified,
        // or clamp the specified precision to the supported range.
        // For significant precision, it must be in [1, 21].
        // For fixed precision, it must be in [0, 20].
        precision = precision === undefined ? 6
            : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))
            : Math.max(0, Math.min(20, precision));

        function format(value) {
          var valuePrefix = prefix,
              valueSuffix = suffix,
              i, n, c;

          if (type === "c") {
            valueSuffix = formatType(value) + valueSuffix;
            value = "";
          } else {
            value = +value;

            // Determine the sign. -0 is not less than 0, but 1 / -0 is!
            var valueNegative = value < 0 || 1 / value < 0;

            // Perform the initial formatting.
            value = isNaN(value) ? nan : formatType(Math.abs(value), precision);

            // Trim insignificant zeros.
            if (trim) value = formatTrim(value);

            // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.
            if (valueNegative && +value === 0 && sign !== "+") valueNegative = false;

            // Compute the prefix and suffix.
            valuePrefix = (valueNegative ? (sign === "(" ? sign : minus) : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
            valueSuffix = (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : "");

            // Break the formatted value into the integer “value” part that can be
            // grouped, and fractional or exponential “suffix” part that is not.
            if (maybeSuffix) {
              i = -1, n = value.length;
              while (++i < n) {
                if (c = value.charCodeAt(i), 48 > c || c > 57) {
                  valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
                  value = value.slice(0, i);
                  break;
                }
              }
            }
          }

          // If the fill character is not "0", grouping is applied before padding.
          if (comma && !zero) value = group(value, Infinity);

          // Compute the padding.
          var length = valuePrefix.length + value.length + valueSuffix.length,
              padding = length < width ? new Array(width - length + 1).join(fill) : "";

          // If the fill character is "0", grouping is applied after padding.
          if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";

          // Reconstruct the final output based on the desired alignment.
          switch (align) {
            case "<": value = valuePrefix + value + valueSuffix + padding; break;
            case "=": value = valuePrefix + padding + value + valueSuffix; break;
            case "^": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;
            default: value = padding + valuePrefix + value + valueSuffix; break;
          }

          return numerals(value);
        }

        format.toString = function() {
          return specifier + "";
        };

        return format;
      }

      function formatPrefix(specifier, value) {
        var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)),
            e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,
            k = Math.pow(10, -e),
            prefix = prefixes[8 + e / 3];
        return function(value) {
          return f(k * value) + prefix;
        };
      }

      return {
        format: newFormat,
        formatPrefix: formatPrefix
      };
    }

    var locale;
    var format;
    var formatPrefix;

    defaultLocale({
      decimal: ".",
      thousands: ",",
      grouping: [3],
      currency: ["$", ""],
      minus: "-"
    });

    function defaultLocale(definition) {
      locale = formatLocale(definition);
      format = locale.format;
      formatPrefix = locale.formatPrefix;
      return locale;
    }

    function precisionFixed(step) {
      return Math.max(0, -exponent(Math.abs(step)));
    }

    function precisionPrefix(step, value) {
      return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));
    }

    function precisionRound(step, max) {
      step = Math.abs(step), max = Math.abs(max) - step;
      return Math.max(0, exponent(max) - exponent(step)) + 1;
    }

    function tickFormat(start, stop, count, specifier) {
      var step = tickStep(start, stop, count),
          precision;
      specifier = formatSpecifier(specifier == null ? ",f" : specifier);
      switch (specifier.type) {
        case "s": {
          var value = Math.max(Math.abs(start), Math.abs(stop));
          if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;
          return formatPrefix(specifier, value);
        }
        case "":
        case "e":
        case "g":
        case "p":
        case "r": {
          if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
          break;
        }
        case "f":
        case "%": {
          if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === "%") * 2;
          break;
        }
      }
      return format(specifier);
    }

    function linearish(scale) {
      var domain = scale.domain;

      scale.ticks = function(count) {
        var d = domain();
        return arrayTicks(d[0], d[d.length - 1], count == null ? 10 : count);
      };

      scale.tickFormat = function(count, specifier) {
        var d = domain();
        return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);
      };

      scale.nice = function(count) {
        if (count == null) count = 10;

        var d = domain(),
            i0 = 0,
            i1 = d.length - 1,
            start = d[i0],
            stop = d[i1],
            step;

        if (stop < start) {
          step = start, start = stop, stop = step;
          step = i0, i0 = i1, i1 = step;
        }

        step = tickIncrement(start, stop, count);

        if (step > 0) {
          start = Math.floor(start / step) * step;
          stop = Math.ceil(stop / step) * step;
          step = tickIncrement(start, stop, count);
        } else if (step < 0) {
          start = Math.ceil(start * step) / step;
          stop = Math.floor(stop * step) / step;
          step = tickIncrement(start, stop, count);
        }

        if (step > 0) {
          d[i0] = Math.floor(start / step) * step;
          d[i1] = Math.ceil(stop / step) * step;
          domain(d);
        } else if (step < 0) {
          d[i0] = Math.ceil(start * step) / step;
          d[i1] = Math.floor(stop * step) / step;
          domain(d);
        }

        return scale;
      };

      return scale;
    }

    function linear$1() {
      var scale = continuous();

      scale.copy = function() {
        return copy(scale, linear$1());
      };

      initRange.apply(scale, arguments);

      return linearish(scale);
    }

    function createScales ({ scaleX, scaleY }, { rangeX, rangeY }) {
      return {
        scaleX: createScale(scaleX, rangeX),
        scaleY: createScale(scaleY, rangeY)
      }
    }
    function createScale (scale, range) {
      if (scale) {
        const newScale = scale.copy().range(range);
        newScale.invert = createInvertMethod(newScale);

        return newScale
      }

      if (!scale) {
        return linear$1().domain(range).range(range)
      }
    }

    /**
     * Taken from react-vis:
     * https://github.com/uber/react-vis/blob/master/src/utils/scales-utils.js#L161
     *
     * By default, d3.scaleBand and d3.scalePoint do not have an .invert method, which is why
     * we are doing this. There are some PRs open for this, though, so hopefully we can
     * get rid of this in the future:
     * - https://github.com/d3/d3-scale/pull/151
     * - https://github.com/d3/d3-scale/pull/60
     */
    function createInvertMethod (scale) {
      if (scale.invert) {
        return scale.invert
      }

      return function invert (value) {
        const [lower, upper] = scale.range();
        const start = Math.min(lower, upper);
        const stop = Math.max(lower, upper);

        const flipped = upper < lower;

        const domain = scale.domain();
        const lastIndex = domain.length - 1;

        if (value < start + scale.padding() * scale.step()) {
          return domain[0]
        }

        if (value > stop - scale.padding() * scale.step()) {
          return domain[lastIndex]
        }

        let index;

        if (isPointScale(scale)) {
          index = Math.round((value - start - scale.padding() * scale.step()) / scale.step());
        }

        if (isBandScale(scale)) {
          index = Math.round((value - start - scale.padding() * scale.step()) / scale.step());
          if (index > lastIndex) index = lastIndex;
        }

        return domain[flipped ? lastIndex - index : index]
      }
    }

    function isPointScale (scale) {
      return !('paddingInner' in scale)
    }

    function isBandScale (scale) {
      return 'paddingInner' in scale
    }

    function createFinalScales ({ rangeX, rangeY }, { finalRangeX, finalRangeY }) {
      const finalScaleX = linear$1().domain(rangeX).range(finalRangeX);
      const finalScaleY = linear$1().domain(rangeY).range(finalRangeY);

      return { finalScaleX, finalScaleY }
    }

    function createPolarTransformation (
      { rangeX, rangeY },
      { finalRangeX, finalRangeY }
    ) {
      const toTheta = linear$1().domain(rangeX).range([0, 2 * Math.PI]);
      const toRadius = linear$1().domain(rangeY).range([0, 1]);

      const fitX = linear$1().domain([-1, 1]).range(finalRangeX);
      const fitY = linear$1().domain([-1, 1]).range(finalRangeY);

      const transform = function transform ([x, y]) {
        const theta = toTheta(x);
        const radius = toRadius(y);
        const coords = polarToCartesian(theta, radius);

        return [fitX(coords[0]), fitY(coords[1])]
      };

      const invert = function invert ([x, y]) {
        const smallCoords = [fitX.invert(x), fitY.invert(y)];
        const [theta, radius] = cartesianToPolar(...smallCoords);

        return [toTheta.invert(theta), toRadius.invert(radius)]
      };

      transform.invert = invert;

      return transform
    }

    function polarToCartesian (theta, radius) {
      const x = radius * Math.sin(theta);
      const y = radius * Math.cos(theta);

      return [x, y]
    }

    // https://www.mathsisfun.com/polar-cartesian-coordinates.html
    function cartesianToPolar (x, y) {
      const quadrant = getQuadrant(x, y);

      const r = Math.sqrt(y ** 2 + x ** 2);
      let theta = Math.atan(x / y);

      if (quadrant === 2) {
        theta += Math.PI * 2;
      }

      if (quadrant === 3) {
        theta += Math.PI;
      }

      if (quadrant === 4) {
        theta += Math.PI;
      }

      return [theta, r]
    }

    function getQuadrant (x, y) {
      if (x >= 0 && y >= 0) return 1
      if (x < 0 && y >= 0) return 2
      if (x < 0 && y < 0) return 3
      if (x >= 0 && y < 0) return 4
    }

    function attachTransformations (sectionContext) {
      const {
        transformation,
        rangeX,
        rangeY,
        finalRangeX,
        finalRangeY,
        scaleX,
        scaleY,
        finalScaleX,
        finalScaleY
      } = sectionContext;

      if (transformation !== 'polar') {
        sectionContext.getTotalTransformation = needsScaling => {
          const { xNeedsScaling, yNeedsScaling } = parseNeedsScaling(needsScaling);

          return ([x, y]) => ([
            finalScaleX(xNeedsScaling ? scaleX(x) : x),
            finalScaleY(yNeedsScaling ? scaleY(y) : y)
          ])
        };

        sectionContext.inverseTotalTransformation = ([x, y]) => ([
          scaleX.invert(finalScaleX.invert(x)),
          scaleY.invert(finalScaleY.invert(y))
        ]);
      }

      if (transformation === 'polar') {
        const getScaleTransformation = needsScaling => {
          const { xNeedsScaling, yNeedsScaling } = parseNeedsScaling(needsScaling);

          return ([x, y]) => ([
            xNeedsScaling ? scaleX(x) : x,
            yNeedsScaling ? scaleY(y) : y
          ])
        };

        const postScaleTransformation = createPolarTransformation(
          { rangeX, rangeY },
          { finalRangeX, finalRangeY }
        );

        sectionContext.getScaleTransformation = getScaleTransformation;
        sectionContext.postScaleTransformation = postScaleTransformation;

        sectionContext.getTotalTransformation = needsScaling => {
          const scaleTransformation = getScaleTransformation(needsScaling);

          return point => (
            postScaleTransformation(scaleTransformation(point))
          )
        };

        const inverseScaleTransformation = ([x, y]) => ([
          scaleX.invert(x),
          scaleY.invert(y)
        ]);

        sectionContext.inverseTotalTransformation = point => (
          inverseScaleTransformation(postScaleTransformation.invert(point))
        );
      }
    }

    function parseNeedsScaling (needsScaling) {
      if (needsScaling === undefined) {
        return {
          xNeedsScaling: true,
          yNeedsScaling: true
        }
      }

      if (needsScaling.constructor === Boolean) {
        return {
          xNeedsScaling: needsScaling,
          yNeedsScaling: needsScaling
        }
      }

      if (needsScaling.constructor === Object) {
        return needsScaling
      }
    }

    function createSectionContext (sectionData) {
      const padding = parsePadding(sectionData.padding);
      const ranges = getRanges(sectionData);
      const finalRanges = getFinalRanges(sectionData, ranges, padding);
      const scales = createScales(sectionData, ranges);
      const finalScales = createFinalScales(ranges, finalRanges);

      const sectionContext = constructSectionContext(
        sectionData,
        padding,
        ranges,
        finalRanges,
        scales,
        finalScales
      );

      attachTransformations(sectionContext);

      return sectionContext
    }

    function constructSectionContext (
      { scaleX, scaleY, padding: _, ...sectionData },
      padding,
      ranges,
      finalRanges,
      scales,
      finalScales
    ) {
      return {
        ...sectionData,
        padding,
        ...ranges,
        ...finalRanges,
        ...scales,
        ...finalScales,
        bbox: getBbox(ranges),
        paddedBbox: getPaddedBbox(ranges, padding)
      }
    }

    function getBbox ({ rangeX, rangeY }) {
      return {
        minX: Math.min(...rangeX),
        maxX: Math.max(...rangeX),
        minY: Math.min(...rangeY),
        maxY: Math.max(...rangeY)
      }
    }

    function getPaddedBbox ({ rangeX, rangeY }, { left, right, top, bottom }) {
      return {
        minX: Math.min(...rangeX) + left,
        maxX: Math.max(...rangeX) - right,
        minY: Math.min(...rangeY) + top,
        maxY: Math.max(...rangeY) - bottom
      }
    }

    const key$1 = {};

    function subscribe$2 () {
      return getContext(key$1)
    }

    function init$2 () {
      const sectionContext = writable();
      setContext(key$1, sectionContext);

      return sectionContext
    }

    function update$2 (sectionContext, options) {
      sectionContext.set(createSectionContext(options));
    }

    var SectionContext = /*#__PURE__*/Object.freeze({
        __proto__: null,
        subscribe: subscribe$2,
        init: init$2,
        update: update$2
    });

    const key$2 = {};

    function subscribe$3 () {
      return getContext(key$2)
    }

    function init$3 () {
      const eventManagerContext = writable();
      setContext(key$2, eventManagerContext);

      return eventManagerContext
    }

    function update$3 (eventManagerContext, eventManager) {
      eventManagerContext.set(eventManager);
    }

    var EventManagerContext = /*#__PURE__*/Object.freeze({
        __proto__: null,
        subscribe: subscribe$3,
        init: init$3,
        update: update$3
    });

    const key$3 = {};

    function subscribe$4 () {
      return getContext(key$3)
    }

    function init$4 () {
      const interactionManagerContext = writable();
      setContext(key$3, interactionManagerContext);

      return interactionManagerContext
    }

    function update$4 (interactionManagerContext, interactionManager) {
      interactionManagerContext.set(interactionManager);
    }

    var InteractionManagerContext = /*#__PURE__*/Object.freeze({
        __proto__: null,
        subscribe: subscribe$4,
        init: init$4,
        update: update$4
    });

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function unwrapExports (x) {
    	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }

    function createCommonjsModule(fn, module) {
    	return module = { exports: {} }, fn(module, module.exports), module.exports;
    }

    var lib = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var detectHover = {
      update: function update() {
        if (typeof window !== 'undefined' && typeof window.matchMedia === 'function') {
          detectHover.hover = window.matchMedia('(hover: hover)').matches;
          detectHover.none = window.matchMedia('(hover: none)').matches || window.matchMedia('(hover: on-demand)').matches;
          detectHover.anyHover = window.matchMedia('(any-hover: hover)').matches;
          detectHover.anyNone = window.matchMedia('(any-hover: none)').matches || window.matchMedia('(any-hover: on-demand)').matches;
        }
      }
    };

    detectHover.update();
    exports.default = detectHover;
    });

    unwrapExports(lib);

    var lib$1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var detectPointer = {
      update: function update() {
        if (typeof window !== 'undefined' && typeof window.matchMedia === 'function') {
          detectPointer.fine = window.matchMedia('(pointer: fine)').matches;
          detectPointer.coarse = window.matchMedia('(pointer: coarse)').matches;
          detectPointer.none = window.matchMedia('(pointer: none)').matches;
          detectPointer.anyFine = window.matchMedia('(any-pointer: fine)').matches;
          detectPointer.anyCoarse = window.matchMedia('(any-pointer: coarse)').matches;
          detectPointer.anyNone = window.matchMedia('(any-pointer: none)').matches;
        }
      }
    };

    detectPointer.update();
    exports.default = detectPointer;
    });

    unwrapExports(lib$1);

    var lib$2 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var detectTouchEvents = {
      update: function update() {
        if (typeof window !== 'undefined') {
          detectTouchEvents.hasSupport = 'ontouchstart' in window;
          detectTouchEvents.browserSupportsApi = Boolean(window.TouchEvent);
        }
      }
    };

    detectTouchEvents.update();
    exports.default = detectTouchEvents;
    });

    unwrapExports(lib$2);

    var lib$3 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    // adapted from https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md
    var detectPassiveEvents = {
      update: function update() {
        if (typeof window !== 'undefined' && typeof window.addEventListener === 'function') {
          var passive = false;
          var options = Object.defineProperty({}, 'passive', {
            get: function get() {
              passive = true;
            }
          });
          // note: have to set and remove a no-op listener instead of null
          // (which was used previously), becasue Edge v15 throws an error
          // when providing a null callback.
          // https://github.com/rafrex/detect-passive-events/pull/3
          var noop = function noop() {};
          window.addEventListener('testPassiveEventSupport', noop, options);
          window.removeEventListener('testPassiveEventSupport', noop, options);
          detectPassiveEvents.hasSupport = passive;
        }
      }
    };

    detectPassiveEvents.update();
    exports.default = detectPassiveEvents;
    });

    unwrapExports(lib$3);

    var lib$4 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });



    var _detectHover2 = _interopRequireDefault(lib);



    var _detectPointer2 = _interopRequireDefault(lib$1);



    var _detectTouchEvents2 = _interopRequireDefault(lib$2);



    var _detectPassiveEvents2 = _interopRequireDefault(lib$3);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /*
     * detectIt object structure
     * const detectIt = {
     *   deviceType: 'mouseOnly' / 'touchOnly' / 'hybrid',
     *   passiveEvents: boolean,
     *   hasTouch: boolean,
     *   hasMouse: boolean,
     *   maxTouchPoints: number,
     *   primaryHover: 'hover' / 'none',
     *   primaryPointer: 'fine' / 'coarse' / 'none',
     *   state: {
     *     detectHover,
     *     detectPointer,
     *     detectTouchEvents,
     *     detectPassiveEvents,
     *   },
     *   update() {...},
     * }
     */

    function determineDeviceType(hasTouch, anyHover, anyFine, state) {
      // A hybrid device is one that both hasTouch and any input device can hover
      // or has a fine pointer.
      if (hasTouch && (anyHover || anyFine)) return 'hybrid';

      // workaround for browsers that have the touch events api,
      // and have implemented Level 4 media queries but not the
      // hover and pointer media queries, so the tests are all false (notable Firefox)
      // if it hasTouch, no pointer and hover support, and on an android assume it's touchOnly
      // if it hasTouch, no pointer and hover support, and not on an android assume it's a hybrid
      if (hasTouch && Object.keys(state.detectHover).filter(function (key) {
        return key !== 'update';
      }).every(function (key) {
        return state.detectHover[key] === false;
      }) && Object.keys(state.detectPointer).filter(function (key) {
        return key !== 'update';
      }).every(function (key) {
        return state.detectPointer[key] === false;
      })) {
        if (window.navigator && /android/.test(window.navigator.userAgent.toLowerCase())) {
          return 'touchOnly';
        }
        return 'hybrid';
      }

      // In almost all cases a device that doesn’t support touch will have a mouse,
      // but there may be rare exceptions. Note that it doesn’t work to do additional tests
      // based on hover and pointer media queries as older browsers don’t support these.
      // Essentially, 'mouseOnly' is the default.
      return hasTouch ? 'touchOnly' : 'mouseOnly';
    }

    var detectIt = {
      state: {
        detectHover: _detectHover2.default,
        detectPointer: _detectPointer2.default,
        detectTouchEvents: _detectTouchEvents2.default,
        detectPassiveEvents: _detectPassiveEvents2.default
      },
      update: function update() {
        detectIt.state.detectHover.update();
        detectIt.state.detectPointer.update();
        detectIt.state.detectTouchEvents.update();
        detectIt.state.detectPassiveEvents.update();
        detectIt.updateOnlyOwnProperties();
      },
      updateOnlyOwnProperties: function updateOnlyOwnProperties() {
        if (typeof window !== 'undefined') {
          detectIt.passiveEvents = detectIt.state.detectPassiveEvents.hasSupport || false;

          detectIt.hasTouch = detectIt.state.detectTouchEvents.hasSupport || false;

          detectIt.deviceType = determineDeviceType(detectIt.hasTouch, detectIt.state.detectHover.anyHover, detectIt.state.detectPointer.anyFine, detectIt.state);

          detectIt.hasMouse = detectIt.deviceType !== 'touchOnly';

          detectIt.primaryInput = detectIt.deviceType === 'mouseOnly' && 'mouse' || detectIt.deviceType === 'touchOnly' && 'touch' ||
          // deviceType is hybrid:
          detectIt.state.detectPointer.fine && 'mouse' || detectIt.state.detectPointer.coarse && 'touch' ||
          // if there's no support for hover media queries but detectIt determined it's
          // a hybrid  device, then assume it's a mouse first device
          'mouse';

          // issue with Windows Chrome on hybrid devices starting in version 59 where
          // media queries represent a touch only device, so if the browser is an
          // affected Windows Chrome version and hasTouch,
          // then assume it's a hybrid with primaryInput mouse
          // note that version 62 of Chrome fixes this issue
          // see https://github.com/rafrex/detect-it/issues/8
          var inVersionRange = function inVersionRange(version) {
            return version >= 59 && version < 62;
          };
          var isAffectedWindowsChromeVersion = /windows/.test(window.navigator.userAgent.toLowerCase()) && /chrome/.test(window.navigator.userAgent.toLowerCase()) && inVersionRange(parseInt(/Chrome\/([0-9.]+)/.exec(navigator.userAgent)[1], 10));

          if (isAffectedWindowsChromeVersion && detectIt.hasTouch) {
            detectIt.deviceType = 'hybrid';
            detectIt.hasMouse = true;
            detectIt.primaryInput = 'mouse';
          }
        }
      }
    };

    detectIt.updateOnlyOwnProperties();
    exports.default = detectIt;
    });

    var detectIt = unwrapExports(lib$4);

    let handler;

    class EventTracker {
      constructor (eventManager, { eventName, nativeEventName, useWindow, preventDefault }) {
        this._eventManager = eventManager;
        this._eventName = eventName;
        this._nativeEventName = nativeEventName;
        this._useWindow = useWindow;
        this._preventDefault = preventDefault;

        this._numberOfActiveListeners = 0;
        this._callbacks = {};
      }

      setNativeEventName (nativeEventName) {
        this._nativeEventName = nativeEventName;
      }

      addListener (listenerId, callback) {
        this._callbacks[listenerId] = callback;

        if (this._eventManagerHasBeenMounted()) {
          this._attachNativeListenerIfNecessary();
        }
      }

      attachAllListeners () {
        /* eslint-disable-next-line */
        for (const _ in this._callbacks) {
          this._attachNativeListenerIfNecessary();
        }
      }

      removeListener (listenerId) {
        delete this._callbacks[listenerId];

        if (this._eventManagerHasBeenMounted()) {
          this._removeNativeListenerIfNecessary();
        }
      }

      _eventManagerHasBeenMounted () {
        return this._eventManager._mounted
      }

      _attachNativeListenerIfNecessary () {
        if (this._numberOfActiveListeners === 0) {
          handler = this._handleEvent.bind(this);
          const nativeEventName = this._nativeEventName;

          if (this._useWindow) {
            window.addEventListener(nativeEventName, handler);
          }

          if (!this._useWindow) {
            this._eventManager._domNode.addEventListener(nativeEventName, handler);
          }
        }

        this._numberOfActiveListeners++;
      }

      _removeNativeListenerIfNecessary () {
        this._numberOfActiveListeners--;

        if (this._numberOfActiveListeners === 0) {
          const nativeEventName = this._nativeEventName;

          if (this._useWindow) {
            window.removeEventListener(nativeEventName, handler);
          }

          if (!this._useWindow) {
            this._eventManager._domNode.removeEventListener(nativeEventName, handler);
          }
        }
      }

      _handleEvent (nativeEvent) {
        if (this._preventDefault) nativeEvent.preventDefault();

        const screenCoordinates = this._getScreenCoordinates(nativeEvent);
        nativeEvent.eventName = this._eventName;

        for (const listenerId in this._callbacks) {
          this._callbacks[listenerId](screenCoordinates, nativeEvent);
        }
      }

      _getScreenCoordinates (nativeEvent) {
        return this._eventManager._getScreenCoordinates(nativeEvent)
      }
    }

    class BaseEventManager {
      constructor (EXPOSED_EVENTS, managerType) {
        this._domNode = undefined;
        this._svgPoint = undefined;
        this._mounted = false;
        this._trackers = {};
        this._BROWSER_TYPE = undefined;
        this._managerType = managerType;

        for (const event of EXPOSED_EVENTS) {
          this._trackers[event.eventName] = new EventTracker(this, event);
        }
      }

      // Svelte can only bind to DOM nodes after initialization
      addRootNode (domNode) {
        this._domNode = domNode;
        this._svgPoint = this._domNode.createSVGPoint();

        // set browser type only after mount
        this._BROWSER_TYPE = window.navigator.pointerEnabled
          ? 'IE11 / MSEdge'
          : window.navigator.msPointerEnabled
            ? 'IE10 / WP8'
            : 'other';

        this._mounted = true;
      }

      attachEventListeners () {
        if (this._mounted === false) throw new Error('root node must be added first')

        for (const eventName in this._trackers) {
          // set native event names here, just before attaching actual listeners
          if (this._managerType === 'mouse') {
            this._trackers[eventName].setNativeEventName(this._getNativeMouseEventName(eventName, this._BROWSER_TYPE));
          }
          if (this._managerType === 'touch') {
            this._trackers[eventName].setNativeEventName(this._getNativeTouchEventName(eventName, this._BROWSER_TYPE));
          }

          this._trackers[eventName].attachAllListeners();
        }
      }

      eventTracker (eventName) {
        return this._trackers[eventName]
      }
    }

    var capitalize = str => str.charAt(0).toUpperCase() + str.slice(1);

    class MouseEventManager extends BaseEventManager {
      constructor () {
        super(EXPOSED_EVENTS, 'mouse');
      }

      _getNativeMouseEventName (exposedEventName, BROWSER_TYPE) {
        // 'click' has the same name in every non-mobile browser
        if (exposedEventName === 'click') return 'click'

        // 'wheel' has the same name in every non-mobile browser
        if (exposedEventName === 'wheel') return 'wheel'

        // In this non-mobile browser type, events are called 'pointerup' etc
        if (BROWSER_TYPE === 'IE11 / MSEdge') {
          const lastPart = sliceOffMouse(exposedEventName);
          return 'pointer' + lastPart
        }

        // In this non-mobile browser type, events are called 'MSPointerUp' etc
        if (BROWSER_TYPE === 'IE10 / WP8') {
          const lastPart = sliceOffMouse(exposedEventName);
          return 'MSPointer' + capitalize(lastPart)
        }

        // In other non-mobile browsers, events are called like the exposed ones
        if (BROWSER_TYPE === 'other') {
          return exposedEventName
        }
      }

      _getScreenCoordinates (nativeEvent) {
        this._svgPoint.x = nativeEvent.clientX;
        this._svgPoint.y = nativeEvent.clientY;

        return this._svgPoint.matrixTransform(this._domNode.getScreenCTM().inverse())
      }
    }

    const EVENT_NAMES = ['mousedown', 'mouseup', 'mousemove', 'mouseout', 'click', 'wheel'];
    const WINDOW_EVENTS = ['mousemove', 'mouseup'];
    const PREVENT_DEFAULT = ['mousedown'];

    const EXPOSED_EVENTS = EVENT_NAMES.map(eventName => ({
      eventName,
      nativeEventName: undefined,
      useWindow: WINDOW_EVENTS.includes(eventName),
      preventDefault: PREVENT_DEFAULT.includes(eventName)
    }));

    const sliceOffMouse = str => str.slice(5, str.length);

    class TouchEventManager extends BaseEventManager {
      constructor () {
        super(EXPOSED_EVENTS$1, 'touch');
      }

      _getNativeTouchEventName (exposedEventName, BROWSER_TYPE) {
        // In this mobile browser type, events are called 'pointerup' etc
        if (BROWSER_TYPE === 'IE11 / MSEdge') {
          const lastPart = sliceOffTouch(exposedEventName);
          return 'pointer' + lastPart
        }

        // In this mobile browser type, events are called 'MSPointerUp' etc
        if (BROWSER_TYPE === 'IE10 / WP8') {
          const lastPart = sliceOffTouch(exposedEventName);
          return 'MSPointer' + capitalize(lastPart)
        }

        // In other mobile browsers, events are called like the exposed ones
        if (BROWSER_TYPE === 'other') {
          return exposedEventName
        }
      }

      _getScreenCoordinates (nativeEvent) {
        const touches = getTouches(nativeEvent);

        if (touches.length === 1) {
          return this._getScreenCoordinatesSingle(touches[0])
        }

        if (touches.length > 1) {
          return this._getScreenCoordinatesMulti(touches)
        }
      }

      _getScreenCoordinatesSingle (touch) {
        this._svgPoint.x = touch.clientX;
        this._svgPoint.y = touch.clientY;

        return this._svgPoint.matrixTransform(this._domNode.getScreenCTM().inverse())
      }

      _getScreenCoordinatesMulti (touches) {
        const touchesInScreenCoordinates = [];

        for (const touch of touches) {
          touchesInScreenCoordinates.push(this._getScreenCoordinatesSingle(touch));
        }

        return touchesInScreenCoordinates
      }
    }

    const EVENT_NAMES$1 = ['touchstart', 'touchend', 'touchmove', 'touchcancel'];

    const EXPOSED_EVENTS$1 = EVENT_NAMES$1.map(eventName => ({
      eventName,
      nativeEventName: undefined,
      useWindow: false,
      preventDefault: true
    }));

    const sliceOffTouch = str => str.slice(5, str.length);

    function getTouches (nativeEvent) {
      return nativeEvent.touches
    }

    class EventManager {
      constructor () {
        if (detectIt.hasMouse) {
          this._mouseEventManager = new MouseEventManager();
        }

        if (detectIt.hasTouch) {
          this._touchEventManager = new TouchEventManager();
        }
      }

      // Initialization
      addRootNode (domNode) {
        this._forEachManager(manager => { manager.addRootNode(domNode); });
      }

      attachEventListeners () {
        this._forEachManager(manager => { manager.attachEventListeners(); });
      }

      mouse () {
        return this._mouseEventManager
      }

      touch () {
        return this._touchEventManager
      }

      _forEachManager (callback) {
        if (this._mouseEventManager) callback(this._mouseEventManager);
        if (this._touchEventManager) callback(this._touchEventManager);
      }
    }

    class BaseInteractionManager {
      constructor () {
        this._id = undefined;
        this._eventManager = undefined;

        this._section = undefined;

        this._markInteractionInterface = undefined;
        this._sectionInteractionInterface = undefined;
      }

      // Initialization
      setId (id) {
        this._id = id;
      }

      linkEventManager (eventManager) {
        this._eventManager = eventManager;
      }

      // Section context loading
      loadSection (sectionData) {
        this._section = sectionData;
      }

      // Mark and layer interactions interface
      marks () {
        return this._markInteractionInterface
      }

      // Section interactions interface
      section () {
        return this._sectionInteractionInterface
      }
    }

    class BaseInteractionInterface {
      constructor (interactionManager, InteractionHandlers) {
        this._interactionManager = interactionManager;
        this._handlers = {};

        for (const handlerName in InteractionHandlers) {
          this._handlers[handlerName] = new InteractionHandlers[handlerName](this._interactionManager);
        }
      }

      _getHandler (interactionName) {
        const handlerName = interactionNameToHandlerName(interactionName);
        return this._handlers[handlerName]
      }
    }

    const interactionNameToHandlerName = interactionName => {
      return capitalize(interactionName) + 'Handler'
    };

    function indexPoint (markData) {
      const pointAttributes = markData.attributes;

      const item = calculateBboxPoint(pointAttributes);

      item.attributes = pointAttributes;
      item.markType = 'Point';
      item.markId = markData.markId;

      return item
    }

    function indexPointLayer ({ layerAttributes, keyArray, layerId }) {
      const items = [];

      for (let i = 0; i < keyArray.length; i++) {
        const key = keyArray[i];

        const pointAttributes = getPointAttributes(layerAttributes, key);
        const item = calculateBboxPoint(pointAttributes);

        item.key = key;
        item.index = i;
        item.attributes = pointAttributes;
        item.markType = 'Point';
        item.layerId = layerId;

        items.push(item);
      }

      return items
    }

    function calculateBboxPoint (pointAttributes) {
      const x = pointAttributes.pixelGeometry.coordinates[0];
      const y = pointAttributes.pixelGeometry.coordinates[1];

      return {
        minX: x - pointAttributes.radius,
        maxX: x + pointAttributes.radius,
        minY: y - pointAttributes.radius,
        maxY: y + pointAttributes.radius
      }
    }

    function getPointAttributes (layerAttributes, key) {
      return {
        pixelGeometry: layerAttributes.pixelGeometryObject[key],
        radius: layerAttributes.radiusObject[key]
      }
    }

    // Adds floating point numbers with twice the normal precision.
    // Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and
    // Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)
    // 305–363 (1997).
    // Code adapted from GeographicLib by Charles F. F. Karney,
    // http://geographiclib.sourceforge.net/

    function adder() {
      return new Adder;
    }

    function Adder() {
      this.reset();
    }

    Adder.prototype = {
      constructor: Adder,
      reset: function() {
        this.s = // rounded value
        this.t = 0; // exact error
      },
      add: function(y) {
        add(temp, y, this.t);
        add(this, temp.s, this.s);
        if (this.s) this.t += temp.t;
        else this.s = temp.t;
      },
      valueOf: function() {
        return this.s;
      }
    };

    var temp = new Adder;

    function add(adder, a, b) {
      var x = adder.s = a + b,
          bv = x - a,
          av = x - bv;
      adder.t = (a - av) + (b - bv);
    }

    var pi = Math.PI;
    var tau = pi * 2;

    var abs = Math.abs;
    var sqrt = Math.sqrt;

    function noop$1() {}

    function streamGeometry(geometry, stream) {
      if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
        streamGeometryType[geometry.type](geometry, stream);
      }
    }

    var streamObjectType = {
      Feature: function(object, stream) {
        streamGeometry(object.geometry, stream);
      },
      FeatureCollection: function(object, stream) {
        var features = object.features, i = -1, n = features.length;
        while (++i < n) streamGeometry(features[i].geometry, stream);
      }
    };

    var streamGeometryType = {
      Sphere: function(object, stream) {
        stream.sphere();
      },
      Point: function(object, stream) {
        object = object.coordinates;
        stream.point(object[0], object[1], object[2]);
      },
      MultiPoint: function(object, stream) {
        var coordinates = object.coordinates, i = -1, n = coordinates.length;
        while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);
      },
      LineString: function(object, stream) {
        streamLine(object.coordinates, stream, 0);
      },
      MultiLineString: function(object, stream) {
        var coordinates = object.coordinates, i = -1, n = coordinates.length;
        while (++i < n) streamLine(coordinates[i], stream, 0);
      },
      Polygon: function(object, stream) {
        streamPolygon(object.coordinates, stream);
      },
      MultiPolygon: function(object, stream) {
        var coordinates = object.coordinates, i = -1, n = coordinates.length;
        while (++i < n) streamPolygon(coordinates[i], stream);
      },
      GeometryCollection: function(object, stream) {
        var geometries = object.geometries, i = -1, n = geometries.length;
        while (++i < n) streamGeometry(geometries[i], stream);
      }
    };

    function streamLine(coordinates, stream, closed) {
      var i = -1, n = coordinates.length - closed, coordinate;
      stream.lineStart();
      while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);
      stream.lineEnd();
    }

    function streamPolygon(coordinates, stream) {
      var i = -1, n = coordinates.length;
      stream.polygonStart();
      while (++i < n) streamLine(coordinates[i], stream, 1);
      stream.polygonEnd();
    }

    function geoStream(object, stream) {
      if (object && streamObjectType.hasOwnProperty(object.type)) {
        streamObjectType[object.type](object, stream);
      } else {
        streamGeometry(object, stream);
      }
    }

    function identity$3(x) {
      return x;
    }

    var areaSum = adder(),
        areaRingSum = adder(),
        x00,
        y00,
        x0,
        y0;

    var areaStream = {
      point: noop$1,
      lineStart: noop$1,
      lineEnd: noop$1,
      polygonStart: function() {
        areaStream.lineStart = areaRingStart;
        areaStream.lineEnd = areaRingEnd;
      },
      polygonEnd: function() {
        areaStream.lineStart = areaStream.lineEnd = areaStream.point = noop$1;
        areaSum.add(abs(areaRingSum));
        areaRingSum.reset();
      },
      result: function() {
        var area = areaSum / 2;
        areaSum.reset();
        return area;
      }
    };

    function areaRingStart() {
      areaStream.point = areaPointFirst;
    }

    function areaPointFirst(x, y) {
      areaStream.point = areaPoint;
      x00 = x0 = x, y00 = y0 = y;
    }

    function areaPoint(x, y) {
      areaRingSum.add(y0 * x - x0 * y);
      x0 = x, y0 = y;
    }

    function areaRingEnd() {
      areaPoint(x00, y00);
    }

    var x0$1 = Infinity,
        y0$1 = x0$1,
        x1 = -x0$1,
        y1 = x1;

    var boundsStream = {
      point: boundsPoint,
      lineStart: noop$1,
      lineEnd: noop$1,
      polygonStart: noop$1,
      polygonEnd: noop$1,
      result: function() {
        var bounds = [[x0$1, y0$1], [x1, y1]];
        x1 = y1 = -(y0$1 = x0$1 = Infinity);
        return bounds;
      }
    };

    function boundsPoint(x, y) {
      if (x < x0$1) x0$1 = x;
      if (x > x1) x1 = x;
      if (y < y0$1) y0$1 = y;
      if (y > y1) y1 = y;
    }

    // TODO Enforce positive area for exterior, negative area for interior?

    var X0 = 0,
        Y0 = 0,
        Z0 = 0,
        X1 = 0,
        Y1 = 0,
        Z1 = 0,
        X2 = 0,
        Y2 = 0,
        Z2 = 0,
        x00$1,
        y00$1,
        x0$2,
        y0$2;

    var centroidStream = {
      point: centroidPoint,
      lineStart: centroidLineStart,
      lineEnd: centroidLineEnd,
      polygonStart: function() {
        centroidStream.lineStart = centroidRingStart;
        centroidStream.lineEnd = centroidRingEnd;
      },
      polygonEnd: function() {
        centroidStream.point = centroidPoint;
        centroidStream.lineStart = centroidLineStart;
        centroidStream.lineEnd = centroidLineEnd;
      },
      result: function() {
        var centroid = Z2 ? [X2 / Z2, Y2 / Z2]
            : Z1 ? [X1 / Z1, Y1 / Z1]
            : Z0 ? [X0 / Z0, Y0 / Z0]
            : [NaN, NaN];
        X0 = Y0 = Z0 =
        X1 = Y1 = Z1 =
        X2 = Y2 = Z2 = 0;
        return centroid;
      }
    };

    function centroidPoint(x, y) {
      X0 += x;
      Y0 += y;
      ++Z0;
    }

    function centroidLineStart() {
      centroidStream.point = centroidPointFirstLine;
    }

    function centroidPointFirstLine(x, y) {
      centroidStream.point = centroidPointLine;
      centroidPoint(x0$2 = x, y0$2 = y);
    }

    function centroidPointLine(x, y) {
      var dx = x - x0$2, dy = y - y0$2, z = sqrt(dx * dx + dy * dy);
      X1 += z * (x0$2 + x) / 2;
      Y1 += z * (y0$2 + y) / 2;
      Z1 += z;
      centroidPoint(x0$2 = x, y0$2 = y);
    }

    function centroidLineEnd() {
      centroidStream.point = centroidPoint;
    }

    function centroidRingStart() {
      centroidStream.point = centroidPointFirstRing;
    }

    function centroidRingEnd() {
      centroidPointRing(x00$1, y00$1);
    }

    function centroidPointFirstRing(x, y) {
      centroidStream.point = centroidPointRing;
      centroidPoint(x00$1 = x0$2 = x, y00$1 = y0$2 = y);
    }

    function centroidPointRing(x, y) {
      var dx = x - x0$2,
          dy = y - y0$2,
          z = sqrt(dx * dx + dy * dy);

      X1 += z * (x0$2 + x) / 2;
      Y1 += z * (y0$2 + y) / 2;
      Z1 += z;

      z = y0$2 * x - x0$2 * y;
      X2 += z * (x0$2 + x);
      Y2 += z * (y0$2 + y);
      Z2 += z * 3;
      centroidPoint(x0$2 = x, y0$2 = y);
    }

    function PathContext(context) {
      this._context = context;
    }

    PathContext.prototype = {
      _radius: 4.5,
      pointRadius: function(_) {
        return this._radius = _, this;
      },
      polygonStart: function() {
        this._line = 0;
      },
      polygonEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._point = 0;
      },
      lineEnd: function() {
        if (this._line === 0) this._context.closePath();
        this._point = NaN;
      },
      point: function(x, y) {
        switch (this._point) {
          case 0: {
            this._context.moveTo(x, y);
            this._point = 1;
            break;
          }
          case 1: {
            this._context.lineTo(x, y);
            break;
          }
          default: {
            this._context.moveTo(x + this._radius, y);
            this._context.arc(x, y, this._radius, 0, tau);
            break;
          }
        }
      },
      result: noop$1
    };

    var lengthSum = adder(),
        lengthRing,
        x00$2,
        y00$2,
        x0$3,
        y0$3;

    var lengthStream = {
      point: noop$1,
      lineStart: function() {
        lengthStream.point = lengthPointFirst;
      },
      lineEnd: function() {
        if (lengthRing) lengthPoint(x00$2, y00$2);
        lengthStream.point = noop$1;
      },
      polygonStart: function() {
        lengthRing = true;
      },
      polygonEnd: function() {
        lengthRing = null;
      },
      result: function() {
        var length = +lengthSum;
        lengthSum.reset();
        return length;
      }
    };

    function lengthPointFirst(x, y) {
      lengthStream.point = lengthPoint;
      x00$2 = x0$3 = x, y00$2 = y0$3 = y;
    }

    function lengthPoint(x, y) {
      x0$3 -= x, y0$3 -= y;
      lengthSum.add(sqrt(x0$3 * x0$3 + y0$3 * y0$3));
      x0$3 = x, y0$3 = y;
    }

    function PathString() {
      this._string = [];
    }

    PathString.prototype = {
      _radius: 4.5,
      _circle: circle(4.5),
      pointRadius: function(_) {
        if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;
        return this;
      },
      polygonStart: function() {
        this._line = 0;
      },
      polygonEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._point = 0;
      },
      lineEnd: function() {
        if (this._line === 0) this._string.push("Z");
        this._point = NaN;
      },
      point: function(x, y) {
        switch (this._point) {
          case 0: {
            this._string.push("M", x, ",", y);
            this._point = 1;
            break;
          }
          case 1: {
            this._string.push("L", x, ",", y);
            break;
          }
          default: {
            if (this._circle == null) this._circle = circle(this._radius);
            this._string.push("M", x, ",", y, this._circle);
            break;
          }
        }
      },
      result: function() {
        if (this._string.length) {
          var result = this._string.join("");
          this._string = [];
          return result;
        } else {
          return null;
        }
      }
    };

    function circle(radius) {
      return "m0," + radius
          + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius
          + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius
          + "z";
    }

    function geoPath(projection, context) {
      var pointRadius = 4.5,
          projectionStream,
          contextStream;

      function path(object) {
        if (object) {
          if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
          geoStream(object, projectionStream(contextStream));
        }
        return contextStream.result();
      }

      path.area = function(object) {
        geoStream(object, projectionStream(areaStream));
        return areaStream.result();
      };

      path.measure = function(object) {
        geoStream(object, projectionStream(lengthStream));
        return lengthStream.result();
      };

      path.bounds = function(object) {
        geoStream(object, projectionStream(boundsStream));
        return boundsStream.result();
      };

      path.centroid = function(object) {
        geoStream(object, projectionStream(centroidStream));
        return centroidStream.result();
      };

      path.projection = function(_) {
        return arguments.length ? (projectionStream = _ == null ? (projection = null, identity$3) : (projection = _).stream, path) : projection;
      };

      path.context = function(_) {
        if (!arguments.length) return context;
        contextStream = _ == null ? (context = null, new PathString) : new PathContext(context = _);
        if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
        return path;
      };

      path.pointRadius = function(_) {
        if (!arguments.length) return pointRadius;
        pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
        return path;
      };

      return path.projection(projection).context(context);
    }

    function isInvalid (value) {
      if (value === undefined || value === null) { return true }

      if (value.constructor === Number) {
        return !isFinite(value)
      }

      return false
    }

    function isDefined (value) {
      return value !== undefined
    }

    function isUndefined (value) {
      return value === undefined
    }

    function calculateBboxGeometry (geometry) {
      const bbox = path.bounds(geometry);

      const bboxObj = {
        x: [bbox[0][0], bbox[1][0]],
        y: [bbox[0][1], bbox[1][1]]
      };

      return bboxObj
    }

    const path = geoPath();

    function isLinearRing (ring) {
      return ring.constructor === Array
    }

    function isPolygon (geometry) {
      return geometry.constructor === Object && geometry.type === 'Polygon'
    }

    function isMultiPolygon (geometry) {
      return geometry.constructor === Object && geometry.type === 'MultiPolygon'
    }

    function isLineString (geometry) {
      return geometry.constructor === Object && geometry.type === 'LineString'
    }

    function isMultiLineString (geometry) {
      return geometry.constructor === Object && geometry.type === 'MultiLineString'
    }

    function polygonArea (polygon) {
      if (isLinearRing(polygon)) {
        return getRingArea(polygon)
      }

      if (isPolygon(polygon)) {
        return getPolygonArea(polygon)
      }

      if (isMultiPolygon(polygon)) {
        return getMultiPolygonArea(polygon)
      }

      throw new Error('Invalid input')
    }

    function getRingArea (ring) {
      return Math.abs(getSignedRingArea(ring))
    }

    // Taken from: https://stackoverflow.com/a/33670691/7237112
    function getSignedRingArea (ring) {
      let total = 0;

      for (let i = 0, l = ring.length; i < l; i++) {
        const addX = ring[i][0];
        const addY = ring[i === ring.length - 1 ? 0 : i + 1][1];
        const subX = ring[i === ring.length - 1 ? 0 : i + 1][0];
        const subY = ring[i][1];

        total += (addX * addY * 0.5);
        total -= (subX * subY * 0.5);
      }

      return total
    }

    function getPolygonArea (polygon) {
      let totalArea = getRingArea(polygon.coordinates[0]);

      for (let i = 1; i < polygon.coordinates.length; i++) {
        const holeArea = getRingArea(polygon.coordinates[i]);
        totalArea -= holeArea;
      }

      return totalArea
    }

    function getMultiPolygonArea (multiPolygon) {
      let totalArea = 0;

      for (let i = 0; i < multiPolygon.coordinates.length; i++) {
        totalArea += getPolygonArea(multiPolygon.coordinates[i]);
      }

      return totalArea
    }

    function pointDistance (point1, point2) {
      return Math.sqrt(
        (point1[0] - point2[0]) ** 2 +
        (point1[1] - point2[1]) ** 2
      )
    }

    function linearRingLength (linearRing) {
      let totalLength = 0;

      for (let i = 0; i < linearRing.length - 1; i++) {
        const from = linearRing[i];
        const to = linearRing[i + 1];

        totalLength += pointDistance(from, to);
      }

      return totalLength
    }

    function calculateCentroid (geometry) {
      if (isLinearRing(geometry)) {
        return calculateLinearRingCentroid(geometry)
      }

      if (isPolygon(geometry)) {
        return calculatePolygonCentroid(geometry)
      }

      if (isMultiPolygon(geometry)) {
        return calculateMultiPolygonCentroid(geometry)
      }

      if (isLineString(geometry)) {
        return calculateLineStringCentroid(geometry)
      }

      if (isMultiLineString(geometry)) {
        return calculateMultiLineStringCentroid(geometry)
      }
    }

    // https://stackoverflow.com/a/33852627/7237112
    function calculateLinearRingCentroid (ring) {
      const nPts = ring.length;
      const off = ring[0];
      let twicearea = 0;
      let x = 0;
      let y = 0;
      let p1;
      let p2;
      let f;

      for (let i = 0, j = nPts - 1; i < nPts; j = i++) {
        p1 = ring[i];
        p2 = ring[j];
        f = (p1[0] - off[0]) * (p2[1] - off[1]) - (p2[0] - off[0]) * (p1[1] - off[1]);
        twicearea += f;
        x += (p1[0] + p2[0] - 2 * off[0]) * f;
        y += (p1[1] + p2[1] - 2 * off[1]) * f;
      }

      f = twicearea * 3;

      return [x / f + off[0], y / f + off[1]]
    }

    function calculatePolygonCentroid (polygon) {
      // We will ignore holes and just take the outer ring
      return calculateLinearRingCentroid(polygon.coordinates[0])
    }

    function calculateMultiPolygonCentroid (multiPolygon) {
      // We will take the centroid of each polygon (ignoring holes)
      // and take the weighted (by area) center of these.
      let x = 0;
      let y = 0;
      let totalArea = 0;

      for (let i = 0; i < multiPolygon.coordinates.length; i++) {
        const polygon = multiPolygon.coordinates[i];
        const polygonCentroid = calculateLinearRingCentroid(polygon[0]);
        const area = polygonArea(polygon[0]);

        x += polygonCentroid[0] * area;
        y += polygonCentroid[1] * area;
        totalArea += area;
      }

      return [x / totalArea, y / totalArea]
    }

    function calculateLineStringCentroid (lineString) {
      return calculateLinearRingCentroid(lineString.coordinates)
    }

    function calculateMultiLineStringCentroid (multiLineString) {
      // We will take the centroid of each LineString
      // and take the weighted (by length) center of these.
      let x = 0;
      let y = 0;
      let totalLength = 0;

      for (let i = 0; i < multiLineString.coordinates.length; i++) {
        const lineString = multiLineString.coordinates[i];
        const lineStringCentroid = calculateLinearRingCentroid(lineString);
        const length = linearRingLength(lineString);

        x += lineStringCentroid[0] * length;
        y += lineStringCentroid[1] * length;
        totalLength += length;
      }

      return [x / totalLength, y / totalLength]
    }

    function pointIntersectsLineSegment (point, lineSegment, lineWidth) {
      const distance = distanceClosestPointOnLineSegment(point, lineSegment);

      return distance < (lineWidth / 2)
    }

    function distanceClosestPointOnLineSegment (point, lineSegment) {
      const closestPoint = closestPointOnLineSegment(point, lineSegment);
      return pointDistance(point, closestPoint)
    }

    // https://stackoverflow.com/a/6853926/7237112
    function closestPointOnLineSegment (point, lineSegment) {
      // Point coordinates
      const x = point[0];
      const y = point[1];

      // Line segment coordinates
      const x1 = lineSegment[0][0];
      const y1 = lineSegment[0][1];
      const x2 = lineSegment[1][0];
      const y2 = lineSegment[1][1];

      const A = x - x1;
      const B = y - y1;
      const C = x2 - x1;
      const D = y2 - y1;

      const dot = A * C + B * D;
      const lengthSquared = C * C + D * D;
      let param = -1;
      if (lengthSquared !== 0) { // in case of 0 length line
        param = dot / lengthSquared;
      }

      let xx, yy;

      if (param < 0) {
        xx = x1;
        yy = y1;
      } else if (param > 1) {
        xx = x2;
        yy = y2;
      } else {
        xx = x1 + param * C;
        yy = y1 + param * D;
      }

      return [xx, yy]
    }

    var twoProduct_1 = twoProduct;

    var SPLITTER = +(Math.pow(2, 27) + 1.0);

    function twoProduct(a, b, result) {
      var x = a * b;

      var c = SPLITTER * a;
      var abig = c - a;
      var ahi = c - abig;
      var alo = a - ahi;

      var d = SPLITTER * b;
      var bbig = d - b;
      var bhi = d - bbig;
      var blo = b - bhi;

      var err1 = x - (ahi * bhi);
      var err2 = err1 - (alo * bhi);
      var err3 = err2 - (ahi * blo);

      var y = alo * blo - err3;

      if(result) {
        result[0] = y;
        result[1] = x;
        return result
      }

      return [ y, x ]
    }

    var robustSum = linearExpansionSum;

    //Easy case: Add two scalars
    function scalarScalar(a, b) {
      var x = a + b;
      var bv = x - a;
      var av = x - bv;
      var br = b - bv;
      var ar = a - av;
      var y = ar + br;
      if(y) {
        return [y, x]
      }
      return [x]
    }

    function linearExpansionSum(e, f) {
      var ne = e.length|0;
      var nf = f.length|0;
      if(ne === 1 && nf === 1) {
        return scalarScalar(e[0], f[0])
      }
      var n = ne + nf;
      var g = new Array(n);
      var count = 0;
      var eptr = 0;
      var fptr = 0;
      var abs = Math.abs;
      var ei = e[eptr];
      var ea = abs(ei);
      var fi = f[fptr];
      var fa = abs(fi);
      var a, b;
      if(ea < fa) {
        b = ei;
        eptr += 1;
        if(eptr < ne) {
          ei = e[eptr];
          ea = abs(ei);
        }
      } else {
        b = fi;
        fptr += 1;
        if(fptr < nf) {
          fi = f[fptr];
          fa = abs(fi);
        }
      }
      if((eptr < ne && ea < fa) || (fptr >= nf)) {
        a = ei;
        eptr += 1;
        if(eptr < ne) {
          ei = e[eptr];
          ea = abs(ei);
        }
      } else {
        a = fi;
        fptr += 1;
        if(fptr < nf) {
          fi = f[fptr];
          fa = abs(fi);
        }
      }
      var x = a + b;
      var bv = x - a;
      var y = b - bv;
      var q0 = y;
      var q1 = x;
      var _x, _bv, _av, _br, _ar;
      while(eptr < ne && fptr < nf) {
        if(ea < fa) {
          a = ei;
          eptr += 1;
          if(eptr < ne) {
            ei = e[eptr];
            ea = abs(ei);
          }
        } else {
          a = fi;
          fptr += 1;
          if(fptr < nf) {
            fi = f[fptr];
            fa = abs(fi);
          }
        }
        b = q0;
        x = a + b;
        bv = x - a;
        y = b - bv;
        if(y) {
          g[count++] = y;
        }
        _x = q1 + x;
        _bv = _x - q1;
        _av = _x - _bv;
        _br = x - _bv;
        _ar = q1 - _av;
        q0 = _ar + _br;
        q1 = _x;
      }
      while(eptr < ne) {
        a = ei;
        b = q0;
        x = a + b;
        bv = x - a;
        y = b - bv;
        if(y) {
          g[count++] = y;
        }
        _x = q1 + x;
        _bv = _x - q1;
        _av = _x - _bv;
        _br = x - _bv;
        _ar = q1 - _av;
        q0 = _ar + _br;
        q1 = _x;
        eptr += 1;
        if(eptr < ne) {
          ei = e[eptr];
        }
      }
      while(fptr < nf) {
        a = fi;
        b = q0;
        x = a + b;
        bv = x - a;
        y = b - bv;
        if(y) {
          g[count++] = y;
        } 
        _x = q1 + x;
        _bv = _x - q1;
        _av = _x - _bv;
        _br = x - _bv;
        _ar = q1 - _av;
        q0 = _ar + _br;
        q1 = _x;
        fptr += 1;
        if(fptr < nf) {
          fi = f[fptr];
        }
      }
      if(q0) {
        g[count++] = q0;
      }
      if(q1) {
        g[count++] = q1;
      }
      if(!count) {
        g[count++] = 0.0;  
      }
      g.length = count;
      return g
    }

    var twoSum = fastTwoSum;

    function fastTwoSum(a, b, result) {
    	var x = a + b;
    	var bv = x - a;
    	var av = x - bv;
    	var br = b - bv;
    	var ar = a - av;
    	if(result) {
    		result[0] = ar + br;
    		result[1] = x;
    		return result
    	}
    	return [ar+br, x]
    }

    var robustScale = scaleLinearExpansion;

    function scaleLinearExpansion(e, scale) {
      var n = e.length;
      if(n === 1) {
        var ts = twoProduct_1(e[0], scale);
        if(ts[0]) {
          return ts
        }
        return [ ts[1] ]
      }
      var g = new Array(2 * n);
      var q = [0.1, 0.1];
      var t = [0.1, 0.1];
      var count = 0;
      twoProduct_1(e[0], scale, q);
      if(q[0]) {
        g[count++] = q[0];
      }
      for(var i=1; i<n; ++i) {
        twoProduct_1(e[i], scale, t);
        var pq = q[1];
        twoSum(pq, t[0], q);
        if(q[0]) {
          g[count++] = q[0];
        }
        var a = t[1];
        var b = q[1];
        var x = a + b;
        var bv = x - a;
        var y = b - bv;
        q[1] = x;
        if(y) {
          g[count++] = y;
        }
      }
      if(q[1]) {
        g[count++] = q[1];
      }
      if(count === 0) {
        g[count++] = 0.0;
      }
      g.length = count;
      return g
    }

    var robustDiff = robustSubtract;

    //Easy case: Add two scalars
    function scalarScalar$1(a, b) {
      var x = a + b;
      var bv = x - a;
      var av = x - bv;
      var br = b - bv;
      var ar = a - av;
      var y = ar + br;
      if(y) {
        return [y, x]
      }
      return [x]
    }

    function robustSubtract(e, f) {
      var ne = e.length|0;
      var nf = f.length|0;
      if(ne === 1 && nf === 1) {
        return scalarScalar$1(e[0], -f[0])
      }
      var n = ne + nf;
      var g = new Array(n);
      var count = 0;
      var eptr = 0;
      var fptr = 0;
      var abs = Math.abs;
      var ei = e[eptr];
      var ea = abs(ei);
      var fi = -f[fptr];
      var fa = abs(fi);
      var a, b;
      if(ea < fa) {
        b = ei;
        eptr += 1;
        if(eptr < ne) {
          ei = e[eptr];
          ea = abs(ei);
        }
      } else {
        b = fi;
        fptr += 1;
        if(fptr < nf) {
          fi = -f[fptr];
          fa = abs(fi);
        }
      }
      if((eptr < ne && ea < fa) || (fptr >= nf)) {
        a = ei;
        eptr += 1;
        if(eptr < ne) {
          ei = e[eptr];
          ea = abs(ei);
        }
      } else {
        a = fi;
        fptr += 1;
        if(fptr < nf) {
          fi = -f[fptr];
          fa = abs(fi);
        }
      }
      var x = a + b;
      var bv = x - a;
      var y = b - bv;
      var q0 = y;
      var q1 = x;
      var _x, _bv, _av, _br, _ar;
      while(eptr < ne && fptr < nf) {
        if(ea < fa) {
          a = ei;
          eptr += 1;
          if(eptr < ne) {
            ei = e[eptr];
            ea = abs(ei);
          }
        } else {
          a = fi;
          fptr += 1;
          if(fptr < nf) {
            fi = -f[fptr];
            fa = abs(fi);
          }
        }
        b = q0;
        x = a + b;
        bv = x - a;
        y = b - bv;
        if(y) {
          g[count++] = y;
        }
        _x = q1 + x;
        _bv = _x - q1;
        _av = _x - _bv;
        _br = x - _bv;
        _ar = q1 - _av;
        q0 = _ar + _br;
        q1 = _x;
      }
      while(eptr < ne) {
        a = ei;
        b = q0;
        x = a + b;
        bv = x - a;
        y = b - bv;
        if(y) {
          g[count++] = y;
        }
        _x = q1 + x;
        _bv = _x - q1;
        _av = _x - _bv;
        _br = x - _bv;
        _ar = q1 - _av;
        q0 = _ar + _br;
        q1 = _x;
        eptr += 1;
        if(eptr < ne) {
          ei = e[eptr];
        }
      }
      while(fptr < nf) {
        a = fi;
        b = q0;
        x = a + b;
        bv = x - a;
        y = b - bv;
        if(y) {
          g[count++] = y;
        } 
        _x = q1 + x;
        _bv = _x - q1;
        _av = _x - _bv;
        _br = x - _bv;
        _ar = q1 - _av;
        q0 = _ar + _br;
        q1 = _x;
        fptr += 1;
        if(fptr < nf) {
          fi = -f[fptr];
        }
      }
      if(q0) {
        g[count++] = q0;
      }
      if(q1) {
        g[count++] = q1;
      }
      if(!count) {
        g[count++] = 0.0;  
      }
      g.length = count;
      return g
    }

    var orientation_1 = createCommonjsModule(function (module) {






    var NUM_EXPAND = 5;

    var EPSILON     = 1.1102230246251565e-16;
    var ERRBOUND3   = (3.0 + 16.0 * EPSILON) * EPSILON;
    var ERRBOUND4   = (7.0 + 56.0 * EPSILON) * EPSILON;

    function cofactor(m, c) {
      var result = new Array(m.length-1);
      for(var i=1; i<m.length; ++i) {
        var r = result[i-1] = new Array(m.length-1);
        for(var j=0,k=0; j<m.length; ++j) {
          if(j === c) {
            continue
          }
          r[k++] = m[i][j];
        }
      }
      return result
    }

    function matrix(n) {
      var result = new Array(n);
      for(var i=0; i<n; ++i) {
        result[i] = new Array(n);
        for(var j=0; j<n; ++j) {
          result[i][j] = ["m", j, "[", (n-i-1), "]"].join("");
        }
      }
      return result
    }

    function sign(n) {
      if(n & 1) {
        return "-"
      }
      return ""
    }

    function generateSum(expr) {
      if(expr.length === 1) {
        return expr[0]
      } else if(expr.length === 2) {
        return ["sum(", expr[0], ",", expr[1], ")"].join("")
      } else {
        var m = expr.length>>1;
        return ["sum(", generateSum(expr.slice(0, m)), ",", generateSum(expr.slice(m)), ")"].join("")
      }
    }

    function determinant(m) {
      if(m.length === 2) {
        return [["sum(prod(", m[0][0], ",", m[1][1], "),prod(-", m[0][1], ",", m[1][0], "))"].join("")]
      } else {
        var expr = [];
        for(var i=0; i<m.length; ++i) {
          expr.push(["scale(", generateSum(determinant(cofactor(m, i))), ",", sign(i), m[0][i], ")"].join(""));
        }
        return expr
      }
    }

    function orientation(n) {
      var pos = [];
      var neg = [];
      var m = matrix(n);
      var args = [];
      for(var i=0; i<n; ++i) {
        if((i&1)===0) {
          pos.push.apply(pos, determinant(cofactor(m, i)));
        } else {
          neg.push.apply(neg, determinant(cofactor(m, i)));
        }
        args.push("m" + i);
      }
      var posExpr = generateSum(pos);
      var negExpr = generateSum(neg);
      var funcName = "orientation" + n + "Exact";
      var code = ["function ", funcName, "(", args.join(), "){var p=", posExpr, ",n=", negExpr, ",d=sub(p,n);\
return d[d.length-1];};return ", funcName].join("");
      var proc = new Function("sum", "prod", "scale", "sub", code);
      return proc(robustSum, twoProduct_1, robustScale, robustDiff)
    }

    var orientation3Exact = orientation(3);
    var orientation4Exact = orientation(4);

    var CACHED = [
      function orientation0() { return 0 },
      function orientation1() { return 0 },
      function orientation2(a, b) { 
        return b[0] - a[0]
      },
      function orientation3(a, b, c) {
        var l = (a[1] - c[1]) * (b[0] - c[0]);
        var r = (a[0] - c[0]) * (b[1] - c[1]);
        var det = l - r;
        var s;
        if(l > 0) {
          if(r <= 0) {
            return det
          } else {
            s = l + r;
          }
        } else if(l < 0) {
          if(r >= 0) {
            return det
          } else {
            s = -(l + r);
          }
        } else {
          return det
        }
        var tol = ERRBOUND3 * s;
        if(det >= tol || det <= -tol) {
          return det
        }
        return orientation3Exact(a, b, c)
      },
      function orientation4(a,b,c,d) {
        var adx = a[0] - d[0];
        var bdx = b[0] - d[0];
        var cdx = c[0] - d[0];
        var ady = a[1] - d[1];
        var bdy = b[1] - d[1];
        var cdy = c[1] - d[1];
        var adz = a[2] - d[2];
        var bdz = b[2] - d[2];
        var cdz = c[2] - d[2];
        var bdxcdy = bdx * cdy;
        var cdxbdy = cdx * bdy;
        var cdxady = cdx * ady;
        var adxcdy = adx * cdy;
        var adxbdy = adx * bdy;
        var bdxady = bdx * ady;
        var det = adz * (bdxcdy - cdxbdy) 
                + bdz * (cdxady - adxcdy)
                + cdz * (adxbdy - bdxady);
        var permanent = (Math.abs(bdxcdy) + Math.abs(cdxbdy)) * Math.abs(adz)
                      + (Math.abs(cdxady) + Math.abs(adxcdy)) * Math.abs(bdz)
                      + (Math.abs(adxbdy) + Math.abs(bdxady)) * Math.abs(cdz);
        var tol = ERRBOUND4 * permanent;
        if ((det > tol) || (-det > tol)) {
          return det
        }
        return orientation4Exact(a,b,c,d)
      }
    ];

    function slowOrient(args) {
      var proc = CACHED[args.length];
      if(!proc) {
        proc = CACHED[args.length] = orientation(args.length);
      }
      return proc.apply(undefined, args)
    }

    function generateOrientationProc() {
      while(CACHED.length <= NUM_EXPAND) {
        CACHED.push(orientation(CACHED.length));
      }
      var args = [];
      var procArgs = ["slow"];
      for(var i=0; i<=NUM_EXPAND; ++i) {
        args.push("a" + i);
        procArgs.push("o" + i);
      }
      var code = [
        "function getOrientation(", args.join(), "){switch(arguments.length){case 0:case 1:return 0;"
      ];
      for(var i=2; i<=NUM_EXPAND; ++i) {
        code.push("case ", i, ":return o", i, "(", args.slice(0, i).join(), ");");
      }
      code.push("}var s=new Array(arguments.length);for(var i=0;i<arguments.length;++i){s[i]=arguments[i]};return slow(s);}return getOrientation");
      procArgs.push(code.join(""));

      var proc = Function.apply(undefined, procArgs);
      module.exports = proc.apply(undefined, [slowOrient].concat(CACHED));
      for(var i=0; i<=NUM_EXPAND; ++i) {
        module.exports[i] = CACHED[i];
      }
    }

    generateOrientationProc();
    });

    var robustPnp = robustPointInPolygon;



    function robustPointInPolygon(vs, point) {
      var x = point[0];
      var y = point[1];
      var n = vs.length;
      var inside = 1;
      var lim = n;
      for(var i = 0, j = n-1; i<lim; j=i++) {
        var a = vs[i];
        var b = vs[j];
        var yi = a[1];
        var yj = b[1];
        if(yj < yi) {
          if(yj < y && y < yi) {
            var s = orientation_1(a, b, point);
            if(s === 0) {
              return 0
            } else {
              inside ^= (0 < s)|0;
            }
          } else if(y === yi) {
            var c = vs[(i+1)%n];
            var yk = c[1];
            if(yi < yk) {
              var s = orientation_1(a, b, point);
              if(s === 0) {
                return 0
              } else {
                inside ^= (0 < s)|0;
              }
            }
          }
        } else if(yi < yj) {
          if(yi < y && y < yj) {
            var s = orientation_1(a, b, point);
            if(s === 0) {
              return 0
            } else {
              inside ^= (s < 0)|0;
            }
          } else if(y === yi) {
            var c = vs[(i+1)%n];
            var yk = c[1];
            if(yk < yi) {
              var s = orientation_1(a, b, point);
              if(s === 0) {
                return 0
              } else {
                inside ^= (s < 0)|0;
              }
            }
          }
        } else if(y === yi) {
          var x0 = Math.min(a[0], b[0]);
          var x1 = Math.max(a[0], b[0]);
          if(i === 0) {
            while(j>0) {
              var k = (j+n-1)%n;
              var p = vs[k];
              if(p[1] !== y) {
                break
              }
              var px = p[0];
              x0 = Math.min(x0, px);
              x1 = Math.max(x1, px);
              j = k;
            }
            if(j === 0) {
              if(x0 <= x && x <= x1) {
                return 0
              }
              return 1 
            }
            lim = j+1;
          }
          var y0 = vs[(j+n-1)%n][1];
          while(i+1<lim) {
            var p = vs[i+1];
            if(p[1] !== y) {
              break
            }
            var px = p[0];
            x0 = Math.min(x0, px);
            x1 = Math.max(x1, px);
            i += 1;
          }
          if(x0 <= x && x <= x1) {
            return 0
          }
          var y1 = vs[(i+1)%n][1];
          if(x < x0 && (y0 < y !== y1 < y)) {
            inside ^= 1;
          }
        }
      }
      return 2 * inside - 1
    }

    function pointInPolygon (point, geometry) {
      switch (geometry.type) {
        case 'Polygon': return pointInPolygon$1(point, geometry)
        case 'MultiPolygon': return pointInMultiPolygon(point, geometry)
      }
    }

    function pointInPolygon$1 (point, geometry) {
      const coordinates = geometry.coordinates;
      return pointInPolygonCoordinates(point, coordinates)
    }

    function pointInPolygonCoordinates (point, coordinates) {
      const outerRing = coordinates[0];

      if (!pointInRing(point, outerRing)) return false

      for (let i = 1; i < coordinates.length; i++) {
        const hole = coordinates[i];

        if (pointInRing(point, hole)) return false
      }

      return true
    }

    function pointInMultiPolygon (point, geometry) {
      const coordinates = geometry.coordinates;

      for (let i = 0; i < coordinates.length; i++) {
        const polygonCoordinates = coordinates[i];

        if (pointInPolygonCoordinates(point, polygonCoordinates)) return true
      }

      return false
    }

    function pointInRing (point, coordinates) {
      return robustPnp(coordinates, point) === -1
    }

    const invalidInputError = new Error('Invalid input');

    function getInput (geometry) {
      if ('coordinates' in geometry) {
        return 'geojson'
      }

      if ('x' in geometry && 'y' in geometry) {
        if (geometry.type !== 'Point') {
          ensureSameLength(geometry.x, geometry.y);
        }

        return 'xy'
      }

      throw invalidInputError
    }

    function ensureSameLength (x, y) {
      if (x !== undefined && y !== undefined) {
        if (x.constructor === Array && y.constructor === Array) {
          if (x.length === y.length && x.length > 1) {
            return
          }
        }
      }

      throw invalidInputError
    }

    function roundPoint ([x, y], decimals) {
      const zeroes = 10 ** decimals;

      return [
        Math.round(x * zeroes) / zeroes,
        Math.round(y * zeroes) / zeroes
      ]
    }

    function pointDistance$1 (p1, p2) {
      return Math.sqrt(
        (p1[0] - p2[0]) ** 2 +
        (p1[1] - p2[1]) ** 2
      )
    }

    function transformLinearRing (linearRing, transformation, settings) {
      if (!settings.simplify || linearRing.length < 3) {
        return transformLinearRingUnsimplified(linearRing, transformation)
      }

      if (settings.simplify === true) {
        return transformLinearRingSimplified(linearRing, transformation, settings.simplificationTreshold)
      }
    }

    function transformLinearRingUnsimplified (linearRing, transformation) {
      const transformedLinearRing = [];

      for (let i = 0; i < linearRing.length; i++) {
        transformedLinearRing.push(transformation(linearRing[i]));
      }

      return transformedLinearRing
    }

    function transformLinearRingSimplified (linearRing, transformation, simplificationTreshold = 1) {
      const transformedLinearRing = [transformation(linearRing[0])];

      let start = transformedLinearRing[0];
      let end;

      for (let i = 1; i < linearRing.length - 1; i++) {
        end = transformation(linearRing[i]);

        const dontSkip = pointDistance$1(start, end) >= simplificationTreshold;

        if (dontSkip) {
          transformedLinearRing.push(end);
          start = end;
        }
      }

      const lastPoint = transformation(linearRing[linearRing.length - 1]);
      transformedLinearRing.push(lastPoint);

      return transformedLinearRing
    }

    function transformSetOfLinearRings (linearRings, transformation, settings) {
      const transformedLinearRings = [];

      for (let i = 0; i < linearRings.length; i++) {
        transformedLinearRings.push(transformLinearRing(linearRings[i], transformation, settings));
      }

      return transformedLinearRings
    }

    function transformXYArrays ({ x, y }, transformation, settings) {
      if (!settings.simplify || x.length < 3) {
        return transformXYArraysUnsimplified(x, y, transformation)
      }

      if (settings.simplify === true) {
        return transformXYArraysSimplified(x, y, transformation, settings.simplificationTreshold)
      }
    }

    function transformXYArraysUnsimplified (x, y, transformation) {
      const transformedLinearRing = [];

      for (let i = 0; i < x.length; i++) {
        transformedLinearRing.push(transformation([x[i], y[i]]));
      }

      return transformedLinearRing
    }

    function transformXYArraysSimplified (x, y, transformation, simplificationTreshold = 1) {
      const transformedLinearRing = [transformation([x[0], y[0]])];

      let start = transformedLinearRing[0];
      let end;

      for (let i = 1; i < x.length - 1; i++) {
        end = transformation([x[i], y[i]]);

        const dontSkip = pointDistance$1(start, end) >= simplificationTreshold;

        if (dontSkip) {
          transformedLinearRing.push(end);
          start = end;
        }
      }

      const lastIndex = x.length - 1;
      const lastPoint = transformation([x[lastIndex], y[lastIndex]]);
      transformedLinearRing.push(lastPoint);

      return transformedLinearRing
    }

    const transformFunctions = {
      transformPoint,
      transformMultiPoint,
      transformLineString,
      transformMultiLineString,
      transformPolygon,
      transformMultiPolygon
    };

    function transformGeometry (geometry, _transformation, settings = {}) {
      const functionName = 'transform' + geometry.type;

      const transformation = settings.decimals
        ? point => roundPoint(_transformation(point), settings.decimals)
        : _transformation;

      return transformFunctions[functionName](geometry, transformation, settings)
    }

    function transformPoint (point, transformation) {
      const input = getInput(point);

      if (input === 'geojson') {
        return {
          type: 'Point',
          coordinates: transformation(point.coordinates)
        }
      }

      if (input === 'xy') {
        return {
          type: 'Point',
          coordinates: transformation([
            point.x,
            point.y
          ])
        }
      }
    }

    function transformMultiPoint (multiPoint, transformation) {
      const input = getInput(multiPoint);

      if (input === 'geojson') {
        return {
          type: 'MultiPoint',
          coordinates: transformLinearRing(multiPoint.coordinates, transformation, {})
        }
      }

      if (input === 'xy') {
        return {
          type: 'MultiPoint',
          coordinates: transformXYArrays(multiPoint, transformation, {})
        }
      }
    }

    function transformLineString (lineString, transformation, settings) {
      const input = getInput(lineString);

      if (input === 'geojson') {
        return {
          type: 'LineString',
          coordinates: transformLinearRing(lineString.coordinates, transformation, settings)
        }
      }

      if (input === 'xy') {
        return {
          type: 'LineString',
          coordinates: transformXYArrays(lineString, transformation, settings)
        }
      }
    }

    function transformMultiLineString (multiLineString, transformation, settings) {
      const input = getInput(multiLineString);

      if (input === 'geojson') {
        return {
          type: 'MultiLineString',
          coordinates: transformSetOfLinearRings(multiLineString.coordinates, transformation, settings)
        }
      }

      if (input === 'xy') {
        return {
          type: 'MultiLineString',
          coordinates: [
            transformXYArrays(multiLineString, transformation, settings)
          ]
        }
      }
    }

    function transformPolygon (polygon, transformation, settings) {
      const input = getInput(polygon);

      if (input === 'geojson') {
        return {
          type: 'Polygon',
          coordinates: transformSetOfLinearRings(polygon.coordinates, transformation, settings)
        }
      }

      if (input === 'xy') {
        return {
          type: 'Polygon',
          coordinates: [
            transformXYArrays(polygon, transformation, settings)
          ]
        }
      }
    }

    function transformMultiPolygon (multiPolygon, transformation, settings) {
      const input = getInput(multiPolygon);

      if (input === 'geojson') {
        const polygons = multiPolygon.coordinates;
        const transformedPolygons = [];

        for (let i = 0; i < polygons.length; i++) {
          transformedPolygons.push(transformSetOfLinearRings(polygons[i], transformation, settings));
        }

        return {
          type: 'MultiPolygon',
          coordinates: transformedPolygons
        }
      }

      if (input === 'xy') {
        return {
          type: 'MultiPolygon',
          coordinates: [
            [transformXYArrays(multiPolygon, transformation, settings)]
          ]
        }
      }
    }

    function getNumberOfInterpolatedPoints (
      from,
      to,
      toPolar,
      context,
      { interpolationTreshold = 1 }
    ) {
      const fromScaledDown = toPolar(from);
      const toScaledDown = toPolar(to);

      const totalScaleFactor = getTotalScaleFactor(context);

      if (straightInYDimension(fromScaledDown, toScaledDown, totalScaleFactor)) {
        return 0
      }

      const functionalForm = getFunctionalForm(fromScaledDown, toScaledDown);
      const scaledDownLength = getPolarLength(functionalForm);

      const realLength = scaledDownLength * totalScaleFactor;
      const numberOfPointsNeeded = realLength / interpolationTreshold;

      return Math.floor(numberOfPointsNeeded)
    }

    function getFunctionalForm (from, to) {
      const pointsSorted = from[0] < to[0]
        ? [from, to]
        : [to, from];

      const [[x1, y1], [x2, y2]] = pointsSorted;

      const a = (y2 - y1) / (x2 - x1);
      const b = y1 - (x1 * a);
      const interval = [x1, x2];

      return { a, b, interval }
    }

    function straightInYDimension (from, to, totalScaleFactor) {
      return Math.abs(from[0] - to[0]) * totalScaleFactor < 1
    }

    function getPolarLength ({ a, b, interval }) {
      const [c, d] = interval;

      if (a === 0) {
        return (d - c) * b
      }

      const aSq = a ** 2;
      const bSq = b ** 2;

      /*
       * This is the integral of:
       * sqrt( (a * theta + b) ** 2 + a ** 2 )
       * between c and d
       */
      return (
        aSq * Math.asinh((a * d + b) / a) + (a * d + b) *
        Math.sqrt(aSq * d ** 2 + 2 * a * b * d + bSq + aSq) -
        aSq * Math.asinh((a * c + b) / a) + (-a * c - b) *
        Math.sqrt(aSq * c ** 2 + 2 * a * b * c + bSq + aSq)
      ) / (2 * a)
    }

    function getTotalScaleFactor ({ finalRangeX, finalRangeY }) {
      const totalScaleFactorX = Math.abs(finalRangeX[0] - finalRangeX[1]) / 2;
      const totalScaleFactorY = Math.abs(finalRangeY[0] - finalRangeY[1]) / 2;

      return Math.max(totalScaleFactorX, totalScaleFactorY)
    }

    function interpolatePoints (
      transformedLinearRing,
      from,
      to,
      postScaleTransformation,
      numberOfPointsNeeded
    ) {
      const interpolator = interpolate$1(from, to);

      for (let i = 0; i < numberOfPointsNeeded; i++) {
        const t = (i + 1) / (numberOfPointsNeeded + 1);
        transformedLinearRing.push(
          postScaleTransformation(interpolator(t))
        );
      }
    }

    function interpolate$1 (a, b) {
      const dx = b[0] - a[0];
      const dy = b[1] - a[1];

      return t => ([
        a[0] + t * dx,
        a[1] + t * dy
      ])
    }

    function interpolateLinearRing (linearRing, context, transformations, settings) {
      if (!settings.simplify || linearRing.length < 3) {
        return interpolateLinearRingUnsimplified(linearRing, context, transformations, settings)
      }

      if (settings.simplify === true) {
        return interpolateLinearRingSimplified()
      }
    }

    function interpolateLinearRingUnsimplified (linearRing, context, transformations, settings) {
      const interpolatedLinearRing = [];
      const { scaleTransformation, postScaleTransformation, toPolar } = transformations;

      for (let i = 0; i < linearRing.length - 1; i++) {
        const from = linearRing[i];
        const to = linearRing[i + 1];
        const fromScaled = scaleTransformation(from);
        const toScaled = scaleTransformation(to);

        interpolatedLinearRing.push(postScaleTransformation(fromScaled));

        const numberOfPointsNeeded = getNumberOfInterpolatedPoints(
          fromScaled,
          toScaled,
          toPolar,
          context,
          settings
        );

        if (numberOfPointsNeeded > 0) {
          interpolatePoints(
            interpolatedLinearRing,
            fromScaled,
            toScaled,
            postScaleTransformation,
            numberOfPointsNeeded
          );
        }
      }

      const lastPoint = linearRing[linearRing.length - 1];
      interpolatedLinearRing.push(postScaleTransformation(
        scaleTransformation(lastPoint)
      ));

      return interpolatedLinearRing
    }

    function interpolateLinearRingSimplified (linearRing, context, transformations, settings) {

    }

    function interpolateSetOfLinearRings (linearRings, context, transformations, settings) {
      const interpolatedLinearRings = [];

      for (let i = 0; i < linearRings.length; i++) {
        interpolatedLinearRings.push(interpolateLinearRing(linearRings[i], context, transformations, settings));
      }

      return interpolatedLinearRings
    }

    function interpolateXYArrays ({ x, y }, context, transformations, settings) {
      if (!settings.simplify || x.length < 3) {
        return interpolateXYArraysUnsimplified(x, y, context, transformations, settings)
      }

      if (settings.simplify === true) {
        return interpolateXYArraysSimplified()
      }
    }

    function interpolateXYArraysUnsimplified (x, y, context, transformations, settings) {
      const interpolatedLinearRing = [];
      const { scaleTransformation, postScaleTransformation, toPolar } = transformations;

      for (let i = 0; i < x.length - 1; i++) {
        const from = [x[i], y[i]];
        const to = [x[i + 1], y[i + 1]];
        const fromScaled = scaleTransformation(from);
        const toScaled = scaleTransformation(to);

        interpolatedLinearRing.push(postScaleTransformation(fromScaled));

        const numberOfPointsNeeded = getNumberOfInterpolatedPoints(
          fromScaled,
          toScaled,
          toPolar,
          context,
          settings
        );

        if (numberOfPointsNeeded > 0) {
          interpolatePoints(
            interpolatedLinearRing,
            fromScaled,
            toScaled,
            postScaleTransformation,
            numberOfPointsNeeded
          );
        }
      }

      const lastIndex = x.length - 1;
      const lastPoint = [x[lastIndex], y[lastIndex]];
      interpolatedLinearRing.push(postScaleTransformation(
        scaleTransformation(lastPoint)
      ));

      return interpolatedLinearRing
    }

    function interpolateXYArraysSimplified (x, y, context, transformations, settings) {

    }

    const interpolateFunctions = {
      interpolateLineString,
      interpolateMultiLineString,
      interpolatePolygon,
      interpolateMultiPolygon
    };

    function polarGeometry (geometry, context, _transformations, settings = {}) {
      const functionName = 'interpolate' + geometry.type;

      const { scaleTransformation, postScaleTransformation: _postScaleTransformation } = _transformations;

      const postScaleTransformation = settings.decimals !== undefined
        ? point => roundPoint(_postScaleTransformation(point), settings.decimals)
        : _postScaleTransformation;

      const toTheta = linear$1().domain(context.rangeX).range([0, 2 * Math.PI]);
      const toRadius = linear$1().domain(context.rangeY).range([0, 1]);
      const toPolar = ([x, y]) => ([toTheta(x), toRadius(y)]);

      const transformations = { scaleTransformation, postScaleTransformation, toPolar };

      return interpolateFunctions[functionName](geometry, context, transformations, settings)
    }

    function interpolateLineString (lineString, context, transformations, settings) {
      const input = getInput(lineString);

      if (input === 'geojson') {
        return {
          type: 'LineString',
          coordinates: interpolateLinearRing(lineString.coordinates, context, transformations, settings)
        }
      }

      if (input === 'xy') {
        return {
          type: 'LineString',
          coordinates: interpolateXYArrays(lineString, context, transformations, settings)
        }
      }
    }

    function interpolateMultiLineString (multiLineString, context, transformations, settings) {
      const input = getInput(multiLineString);

      if (input === 'geojson') {
        return {
          type: 'MultiLineString',
          coordinates: interpolateSetOfLinearRings(multiLineString.coordinates, context, transformations, settings)
        }
      }

      if (input === 'xy') {
        return {
          type: 'MultiLineString',
          coordinates: [
            interpolateXYArrays(multiLineString, context, transformations, settings)
          ]
        }
      }
    }

    function interpolatePolygon (polygon, context, transformations, settings) {
      const input = getInput(polygon);

      if (input === 'geojson') {
        return {
          type: 'Polygon',
          coordinates: interpolateSetOfLinearRings(polygon.coordinates, context, transformations, settings)
        }
      }

      if (input === 'xy') {
        return {
          type: 'Polygon',
          coordinates: [
            interpolateXYArrays(polygon, context, transformations, settings)
          ]
        }
      }
    }

    function interpolateMultiPolygon (multiPolygon, context, transformations, settings) {
      const input = getInput(multiPolygon);

      if (input === 'geojson') {
        const polygons = multiPolygon.coordinates;
        const transformedPolygons = [];

        for (let i = 0; i < polygons.length; i++) {
          transformedPolygons.push(interpolateSetOfLinearRings(polygons[i], context, transformations, settings));
        }

        return {
          type: 'MultiPolygon',
          coordinates: transformedPolygons
        }
      }

      if (input === 'xy') {
        return {
          type: 'MultiPolygon',
          coordinates: [
            [interpolateXYArrays(multiPolygon, context, transformations, settings)]
          ]
        }
      }
    }

    var earcut_1 = earcut;
    var _default = earcut;

    function earcut(data, holeIndices, dim) {

        dim = dim || 2;

        var hasHoles = holeIndices && holeIndices.length,
            outerLen = hasHoles ? holeIndices[0] * dim : data.length,
            outerNode = linkedList(data, 0, outerLen, dim, true),
            triangles = [];

        if (!outerNode || outerNode.next === outerNode.prev) return triangles;

        var minX, minY, maxX, maxY, x, y, invSize;

        if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);

        // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox
        if (data.length > 80 * dim) {
            minX = maxX = data[0];
            minY = maxY = data[1];

            for (var i = dim; i < outerLen; i += dim) {
                x = data[i];
                y = data[i + 1];
                if (x < minX) minX = x;
                if (y < minY) minY = y;
                if (x > maxX) maxX = x;
                if (y > maxY) maxY = y;
            }

            // minX, minY and invSize are later used to transform coords into integers for z-order calculation
            invSize = Math.max(maxX - minX, maxY - minY);
            invSize = invSize !== 0 ? 1 / invSize : 0;
        }

        earcutLinked(outerNode, triangles, dim, minX, minY, invSize);

        return triangles;
    }

    // create a circular doubly linked list from polygon points in the specified winding order
    function linkedList(data, start, end, dim, clockwise) {
        var i, last;

        if (clockwise === (signedArea(data, start, end, dim) > 0)) {
            for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);
        } else {
            for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);
        }

        if (last && equals(last, last.next)) {
            removeNode(last);
            last = last.next;
        }

        return last;
    }

    // eliminate colinear or duplicate points
    function filterPoints(start, end) {
        if (!start) return start;
        if (!end) end = start;

        var p = start,
            again;
        do {
            again = false;

            if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {
                removeNode(p);
                p = end = p.prev;
                if (p === p.next) break;
                again = true;

            } else {
                p = p.next;
            }
        } while (again || p !== end);

        return end;
    }

    // main ear slicing loop which triangulates a polygon (given as a linked list)
    function earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {
        if (!ear) return;

        // interlink polygon nodes in z-order
        if (!pass && invSize) indexCurve(ear, minX, minY, invSize);

        var stop = ear,
            prev, next;

        // iterate through ears, slicing them one by one
        while (ear.prev !== ear.next) {
            prev = ear.prev;
            next = ear.next;

            if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {
                // cut off the triangle
                triangles.push(prev.i / dim);
                triangles.push(ear.i / dim);
                triangles.push(next.i / dim);

                removeNode(ear);

                // skipping the next vertex leads to less sliver triangles
                ear = next.next;
                stop = next.next;

                continue;
            }

            ear = next;

            // if we looped through the whole remaining polygon and can't find any more ears
            if (ear === stop) {
                // try filtering points and slicing again
                if (!pass) {
                    earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);

                // if this didn't work, try curing all small self-intersections locally
                } else if (pass === 1) {
                    ear = cureLocalIntersections(filterPoints(ear), triangles, dim);
                    earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);

                // as a last resort, try splitting the remaining polygon into two
                } else if (pass === 2) {
                    splitEarcut(ear, triangles, dim, minX, minY, invSize);
                }

                break;
            }
        }
    }

    // check whether a polygon node forms a valid ear with adjacent nodes
    function isEar(ear) {
        var a = ear.prev,
            b = ear,
            c = ear.next;

        if (area(a, b, c) >= 0) return false; // reflex, can't be an ear

        // now make sure we don't have other points inside the potential ear
        var p = ear.next.next;

        while (p !== ear.prev) {
            if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&
                area(p.prev, p, p.next) >= 0) return false;
            p = p.next;
        }

        return true;
    }

    function isEarHashed(ear, minX, minY, invSize) {
        var a = ear.prev,
            b = ear,
            c = ear.next;

        if (area(a, b, c) >= 0) return false; // reflex, can't be an ear

        // triangle bbox; min & max are calculated like this for speed
        var minTX = a.x < b.x ? (a.x < c.x ? a.x : c.x) : (b.x < c.x ? b.x : c.x),
            minTY = a.y < b.y ? (a.y < c.y ? a.y : c.y) : (b.y < c.y ? b.y : c.y),
            maxTX = a.x > b.x ? (a.x > c.x ? a.x : c.x) : (b.x > c.x ? b.x : c.x),
            maxTY = a.y > b.y ? (a.y > c.y ? a.y : c.y) : (b.y > c.y ? b.y : c.y);

        // z-order range for the current triangle bbox;
        var minZ = zOrder(minTX, minTY, minX, minY, invSize),
            maxZ = zOrder(maxTX, maxTY, minX, minY, invSize);

        var p = ear.prevZ,
            n = ear.nextZ;

        // look for points inside the triangle in both directions
        while (p && p.z >= minZ && n && n.z <= maxZ) {
            if (p !== ear.prev && p !== ear.next &&
                pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&
                area(p.prev, p, p.next) >= 0) return false;
            p = p.prevZ;

            if (n !== ear.prev && n !== ear.next &&
                pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&
                area(n.prev, n, n.next) >= 0) return false;
            n = n.nextZ;
        }

        // look for remaining points in decreasing z-order
        while (p && p.z >= minZ) {
            if (p !== ear.prev && p !== ear.next &&
                pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&
                area(p.prev, p, p.next) >= 0) return false;
            p = p.prevZ;
        }

        // look for remaining points in increasing z-order
        while (n && n.z <= maxZ) {
            if (n !== ear.prev && n !== ear.next &&
                pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&
                area(n.prev, n, n.next) >= 0) return false;
            n = n.nextZ;
        }

        return true;
    }

    // go through all polygon nodes and cure small local self-intersections
    function cureLocalIntersections(start, triangles, dim) {
        var p = start;
        do {
            var a = p.prev,
                b = p.next.next;

            if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {

                triangles.push(a.i / dim);
                triangles.push(p.i / dim);
                triangles.push(b.i / dim);

                // remove two nodes involved
                removeNode(p);
                removeNode(p.next);

                p = start = b;
            }
            p = p.next;
        } while (p !== start);

        return filterPoints(p);
    }

    // try splitting polygon into two and triangulate them independently
    function splitEarcut(start, triangles, dim, minX, minY, invSize) {
        // look for a valid diagonal that divides the polygon into two
        var a = start;
        do {
            var b = a.next.next;
            while (b !== a.prev) {
                if (a.i !== b.i && isValidDiagonal(a, b)) {
                    // split the polygon in two by the diagonal
                    var c = splitPolygon(a, b);

                    // filter colinear points around the cuts
                    a = filterPoints(a, a.next);
                    c = filterPoints(c, c.next);

                    // run earcut on each half
                    earcutLinked(a, triangles, dim, minX, minY, invSize);
                    earcutLinked(c, triangles, dim, minX, minY, invSize);
                    return;
                }
                b = b.next;
            }
            a = a.next;
        } while (a !== start);
    }

    // link every hole into the outer loop, producing a single-ring polygon without holes
    function eliminateHoles(data, holeIndices, outerNode, dim) {
        var queue = [],
            i, len, start, end, list;

        for (i = 0, len = holeIndices.length; i < len; i++) {
            start = holeIndices[i] * dim;
            end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
            list = linkedList(data, start, end, dim, false);
            if (list === list.next) list.steiner = true;
            queue.push(getLeftmost(list));
        }

        queue.sort(compareX);

        // process holes from left to right
        for (i = 0; i < queue.length; i++) {
            eliminateHole(queue[i], outerNode);
            outerNode = filterPoints(outerNode, outerNode.next);
        }

        return outerNode;
    }

    function compareX(a, b) {
        return a.x - b.x;
    }

    // find a bridge between vertices that connects hole with an outer ring and and link it
    function eliminateHole(hole, outerNode) {
        outerNode = findHoleBridge(hole, outerNode);
        if (outerNode) {
            var b = splitPolygon(outerNode, hole);

            // filter collinear points around the cuts
            filterPoints(outerNode, outerNode.next);
            filterPoints(b, b.next);
        }
    }

    // David Eberly's algorithm for finding a bridge between hole and outer polygon
    function findHoleBridge(hole, outerNode) {
        var p = outerNode,
            hx = hole.x,
            hy = hole.y,
            qx = -Infinity,
            m;

        // find a segment intersected by a ray from the hole's leftmost point to the left;
        // segment's endpoint with lesser x will be potential connection point
        do {
            if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {
                var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);
                if (x <= hx && x > qx) {
                    qx = x;
                    if (x === hx) {
                        if (hy === p.y) return p;
                        if (hy === p.next.y) return p.next;
                    }
                    m = p.x < p.next.x ? p : p.next;
                }
            }
            p = p.next;
        } while (p !== outerNode);

        if (!m) return null;

        if (hx === qx) return m; // hole touches outer segment; pick leftmost endpoint

        // look for points inside the triangle of hole point, segment intersection and endpoint;
        // if there are no points found, we have a valid connection;
        // otherwise choose the point of the minimum angle with the ray as connection point

        var stop = m,
            mx = m.x,
            my = m.y,
            tanMin = Infinity,
            tan;

        p = m;

        do {
            if (hx >= p.x && p.x >= mx && hx !== p.x &&
                    pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {

                tan = Math.abs(hy - p.y) / (hx - p.x); // tangential

                if (locallyInside(p, hole) &&
                    (tan < tanMin || (tan === tanMin && (p.x > m.x || (p.x === m.x && sectorContainsSector(m, p)))))) {
                    m = p;
                    tanMin = tan;
                }
            }

            p = p.next;
        } while (p !== stop);

        return m;
    }

    // whether sector in vertex m contains sector in vertex p in the same coordinates
    function sectorContainsSector(m, p) {
        return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;
    }

    // interlink polygon nodes in z-order
    function indexCurve(start, minX, minY, invSize) {
        var p = start;
        do {
            if (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, invSize);
            p.prevZ = p.prev;
            p.nextZ = p.next;
            p = p.next;
        } while (p !== start);

        p.prevZ.nextZ = null;
        p.prevZ = null;

        sortLinked(p);
    }

    // Simon Tatham's linked list merge sort algorithm
    // http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html
    function sortLinked(list) {
        var i, p, q, e, tail, numMerges, pSize, qSize,
            inSize = 1;

        do {
            p = list;
            list = null;
            tail = null;
            numMerges = 0;

            while (p) {
                numMerges++;
                q = p;
                pSize = 0;
                for (i = 0; i < inSize; i++) {
                    pSize++;
                    q = q.nextZ;
                    if (!q) break;
                }
                qSize = inSize;

                while (pSize > 0 || (qSize > 0 && q)) {

                    if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {
                        e = p;
                        p = p.nextZ;
                        pSize--;
                    } else {
                        e = q;
                        q = q.nextZ;
                        qSize--;
                    }

                    if (tail) tail.nextZ = e;
                    else list = e;

                    e.prevZ = tail;
                    tail = e;
                }

                p = q;
            }

            tail.nextZ = null;
            inSize *= 2;

        } while (numMerges > 1);

        return list;
    }

    // z-order of a point given coords and inverse of the longer side of data bbox
    function zOrder(x, y, minX, minY, invSize) {
        // coords are transformed into non-negative 15-bit integer range
        x = 32767 * (x - minX) * invSize;
        y = 32767 * (y - minY) * invSize;

        x = (x | (x << 8)) & 0x00FF00FF;
        x = (x | (x << 4)) & 0x0F0F0F0F;
        x = (x | (x << 2)) & 0x33333333;
        x = (x | (x << 1)) & 0x55555555;

        y = (y | (y << 8)) & 0x00FF00FF;
        y = (y | (y << 4)) & 0x0F0F0F0F;
        y = (y | (y << 2)) & 0x33333333;
        y = (y | (y << 1)) & 0x55555555;

        return x | (y << 1);
    }

    // find the leftmost node of a polygon ring
    function getLeftmost(start) {
        var p = start,
            leftmost = start;
        do {
            if (p.x < leftmost.x || (p.x === leftmost.x && p.y < leftmost.y)) leftmost = p;
            p = p.next;
        } while (p !== start);

        return leftmost;
    }

    // check if a point lies within a convex triangle
    function pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {
        return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 &&
               (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 &&
               (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;
    }

    // check if a diagonal between two polygon nodes is valid (lies in polygon interior)
    function isValidDiagonal(a, b) {
        return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && // dones't intersect other edges
               (locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && // locally visible
                (area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors
                equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case
    }

    // signed area of a triangle
    function area(p, q, r) {
        return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
    }

    // check if two points are equal
    function equals(p1, p2) {
        return p1.x === p2.x && p1.y === p2.y;
    }

    // check if two segments intersect
    function intersects(p1, q1, p2, q2) {
        var o1 = sign(area(p1, q1, p2));
        var o2 = sign(area(p1, q1, q2));
        var o3 = sign(area(p2, q2, p1));
        var o4 = sign(area(p2, q2, q1));

        if (o1 !== o2 && o3 !== o4) return true; // general case

        if (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1
        if (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1
        if (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2
        if (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2

        return false;
    }

    // for collinear points p, q, r, check if point q lies on segment pr
    function onSegment(p, q, r) {
        return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);
    }

    function sign(num) {
        return num > 0 ? 1 : num < 0 ? -1 : 0;
    }

    // check if a polygon diagonal intersects any polygon segments
    function intersectsPolygon(a, b) {
        var p = a;
        do {
            if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&
                    intersects(p, p.next, a, b)) return true;
            p = p.next;
        } while (p !== a);

        return false;
    }

    // check if a polygon diagonal is locally inside the polygon
    function locallyInside(a, b) {
        return area(a.prev, a, a.next) < 0 ?
            area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 :
            area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;
    }

    // check if the middle point of a polygon diagonal is inside the polygon
    function middleInside(a, b) {
        var p = a,
            inside = false,
            px = (a.x + b.x) / 2,
            py = (a.y + b.y) / 2;
        do {
            if (((p.y > py) !== (p.next.y > py)) && p.next.y !== p.y &&
                    (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x))
                inside = !inside;
            p = p.next;
        } while (p !== a);

        return inside;
    }

    // link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
    // if one belongs to the outer ring and another to a hole, it merges it into a single ring
    function splitPolygon(a, b) {
        var a2 = new Node(a.i, a.x, a.y),
            b2 = new Node(b.i, b.x, b.y),
            an = a.next,
            bp = b.prev;

        a.next = b;
        b.prev = a;

        a2.next = an;
        an.prev = a2;

        b2.next = a2;
        a2.prev = b2;

        bp.next = b2;
        b2.prev = bp;

        return b2;
    }

    // create a node and optionally link it with previous one (in a circular doubly linked list)
    function insertNode(i, x, y, last) {
        var p = new Node(i, x, y);

        if (!last) {
            p.prev = p;
            p.next = p;

        } else {
            p.next = last.next;
            p.prev = last;
            last.next.prev = p;
            last.next = p;
        }
        return p;
    }

    function removeNode(p) {
        p.next.prev = p.prev;
        p.prev.next = p.next;

        if (p.prevZ) p.prevZ.nextZ = p.nextZ;
        if (p.nextZ) p.nextZ.prevZ = p.prevZ;
    }

    function Node(i, x, y) {
        // vertex index in coordinates array
        this.i = i;

        // vertex coordinates
        this.x = x;
        this.y = y;

        // previous and next vertex nodes in a polygon ring
        this.prev = null;
        this.next = null;

        // z-order curve value
        this.z = null;

        // previous and next nodes in z-order
        this.prevZ = null;
        this.nextZ = null;

        // indicates whether this is a steiner point
        this.steiner = false;
    }

    // return a percentage difference between the polygon area and its triangulation area;
    // used to verify correctness of triangulation
    earcut.deviation = function (data, holeIndices, dim, triangles) {
        var hasHoles = holeIndices && holeIndices.length;
        var outerLen = hasHoles ? holeIndices[0] * dim : data.length;

        var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));
        if (hasHoles) {
            for (var i = 0, len = holeIndices.length; i < len; i++) {
                var start = holeIndices[i] * dim;
                var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
                polygonArea -= Math.abs(signedArea(data, start, end, dim));
            }
        }

        var trianglesArea = 0;
        for (i = 0; i < triangles.length; i += 3) {
            var a = triangles[i] * dim;
            var b = triangles[i + 1] * dim;
            var c = triangles[i + 2] * dim;
            trianglesArea += Math.abs(
                (data[a] - data[c]) * (data[b + 1] - data[a + 1]) -
                (data[a] - data[b]) * (data[c + 1] - data[a + 1]));
        }

        return polygonArea === 0 && trianglesArea === 0 ? 0 :
            Math.abs((trianglesArea - polygonArea) / polygonArea);
    };

    function signedArea(data, start, end, dim) {
        var sum = 0;
        for (var i = start, j = end - dim; i < end; i += dim) {
            sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);
            j = i;
        }
        return sum;
    }

    // turn a polygon in a multi-dimensional array form (e.g. as in GeoJSON) into a form Earcut accepts
    earcut.flatten = function (data) {
        var dim = data[0][0].length,
            result = {vertices: [], holes: [], dimensions: dim},
            holeIndex = 0;

        for (var i = 0; i < data.length; i++) {
            for (var j = 0; j < data[i].length; j++) {
                for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);
            }
            if (i > 0) {
                holeIndex += data[i - 1].length;
                result.holes.push(holeIndex);
            }
        }
        return result;
    };
    earcut_1.default = _default;

    function identity$4(x) {
      return x;
    }

    function transform(transform) {
      if (transform == null) return identity$4;
      var x0,
          y0,
          kx = transform.scale[0],
          ky = transform.scale[1],
          dx = transform.translate[0],
          dy = transform.translate[1];
      return function(input, i) {
        if (!i) x0 = y0 = 0;
        var j = 2, n = input.length, output = new Array(n);
        output[0] = (x0 += input[0]) * kx + dx;
        output[1] = (y0 += input[1]) * ky + dy;
        while (j < n) output[j] = input[j], ++j;
        return output;
      };
    }

    function reverse(array, n) {
      var t, j = array.length, i = j - n;
      while (i < --j) t = array[i], array[i++] = array[j], array[j] = t;
    }

    function feature(topology, o) {
      if (typeof o === "string") o = topology.objects[o];
      return o.type === "GeometryCollection"
          ? {type: "FeatureCollection", features: o.geometries.map(function(o) { return feature$1(topology, o); })}
          : feature$1(topology, o);
    }

    function feature$1(topology, o) {
      var id = o.id,
          bbox = o.bbox,
          properties = o.properties == null ? {} : o.properties,
          geometry = object$1(topology, o);
      return id == null && bbox == null ? {type: "Feature", properties: properties, geometry: geometry}
          : bbox == null ? {type: "Feature", id: id, properties: properties, geometry: geometry}
          : {type: "Feature", id: id, bbox: bbox, properties: properties, geometry: geometry};
    }

    function object$1(topology, o) {
      var transformPoint = transform(topology.transform),
          arcs = topology.arcs;

      function arc(i, points) {
        if (points.length) points.pop();
        for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length; k < n; ++k) {
          points.push(transformPoint(a[k], k));
        }
        if (i < 0) reverse(points, n);
      }

      function point(p) {
        return transformPoint(p);
      }

      function line(arcs) {
        var points = [];
        for (var i = 0, n = arcs.length; i < n; ++i) arc(arcs[i], points);
        if (points.length < 2) points.push(points[0]); // This should never happen per the specification.
        return points;
      }

      function ring(arcs) {
        var points = line(arcs);
        while (points.length < 4) points.push(points[0]); // This may happen if an arc has only two points.
        return points;
      }

      function polygon(arcs) {
        return arcs.map(ring);
      }

      function geometry(o) {
        var type = o.type, coordinates;
        switch (type) {
          case "GeometryCollection": return {type: type, geometries: o.geometries.map(geometry)};
          case "Point": coordinates = point(o.coordinates); break;
          case "MultiPoint": coordinates = o.coordinates.map(point); break;
          case "LineString": coordinates = line(o.arcs); break;
          case "MultiLineString": coordinates = o.arcs.map(line); break;
          case "Polygon": coordinates = polygon(o.arcs); break;
          case "MultiPolygon": coordinates = o.arcs.map(polygon); break;
          default: return null;
        }
        return {type: type, coordinates: coordinates};
      }

      return geometry(o);
    }

    function stitch(topology, arcs) {
      var stitchedArcs = {},
          fragmentByStart = {},
          fragmentByEnd = {},
          fragments = [],
          emptyIndex = -1;

      // Stitch empty arcs first, since they may be subsumed by other arcs.
      arcs.forEach(function(i, j) {
        var arc = topology.arcs[i < 0 ? ~i : i], t;
        if (arc.length < 3 && !arc[1][0] && !arc[1][1]) {
          t = arcs[++emptyIndex], arcs[emptyIndex] = i, arcs[j] = t;
        }
      });

      arcs.forEach(function(i) {
        var e = ends(i),
            start = e[0],
            end = e[1],
            f, g;

        if (f = fragmentByEnd[start]) {
          delete fragmentByEnd[f.end];
          f.push(i);
          f.end = end;
          if (g = fragmentByStart[end]) {
            delete fragmentByStart[g.start];
            var fg = g === f ? f : f.concat(g);
            fragmentByStart[fg.start = f.start] = fragmentByEnd[fg.end = g.end] = fg;
          } else {
            fragmentByStart[f.start] = fragmentByEnd[f.end] = f;
          }
        } else if (f = fragmentByStart[end]) {
          delete fragmentByStart[f.start];
          f.unshift(i);
          f.start = start;
          if (g = fragmentByEnd[start]) {
            delete fragmentByEnd[g.end];
            var gf = g === f ? f : g.concat(f);
            fragmentByStart[gf.start = g.start] = fragmentByEnd[gf.end = f.end] = gf;
          } else {
            fragmentByStart[f.start] = fragmentByEnd[f.end] = f;
          }
        } else {
          f = [i];
          fragmentByStart[f.start = start] = fragmentByEnd[f.end = end] = f;
        }
      });

      function ends(i) {
        var arc = topology.arcs[i < 0 ? ~i : i], p0 = arc[0], p1;
        if (topology.transform) p1 = [0, 0], arc.forEach(function(dp) { p1[0] += dp[0], p1[1] += dp[1]; });
        else p1 = arc[arc.length - 1];
        return i < 0 ? [p1, p0] : [p0, p1];
      }

      function flush(fragmentByEnd, fragmentByStart) {
        for (var k in fragmentByEnd) {
          var f = fragmentByEnd[k];
          delete fragmentByStart[f.start];
          delete f.start;
          delete f.end;
          f.forEach(function(i) { stitchedArcs[i < 0 ? ~i : i] = 1; });
          fragments.push(f);
        }
      }

      flush(fragmentByEnd, fragmentByStart);
      flush(fragmentByStart, fragmentByEnd);
      arcs.forEach(function(i) { if (!stitchedArcs[i < 0 ? ~i : i]) fragments.push([i]); });

      return fragments;
    }

    function planarRingArea(ring) {
      var i = -1, n = ring.length, a, b = ring[n - 1], area = 0;
      while (++i < n) a = b, b = ring[i], area += a[0] * b[1] - a[1] * b[0];
      return Math.abs(area); // Note: doubled area!
    }

    function mergeArcs(topology, objects) {
      var polygonsByArc = {},
          polygons = [],
          groups = [];

      objects.forEach(geometry);

      function geometry(o) {
        switch (o.type) {
          case "GeometryCollection": o.geometries.forEach(geometry); break;
          case "Polygon": extract(o.arcs); break;
          case "MultiPolygon": o.arcs.forEach(extract); break;
        }
      }

      function extract(polygon) {
        polygon.forEach(function(ring) {
          ring.forEach(function(arc) {
            (polygonsByArc[arc = arc < 0 ? ~arc : arc] || (polygonsByArc[arc] = [])).push(polygon);
          });
        });
        polygons.push(polygon);
      }

      function area(ring) {
        return planarRingArea(object$1(topology, {type: "Polygon", arcs: [ring]}).coordinates[0]);
      }

      polygons.forEach(function(polygon) {
        if (!polygon._) {
          var group = [],
              neighbors = [polygon];
          polygon._ = 1;
          groups.push(group);
          while (polygon = neighbors.pop()) {
            group.push(polygon);
            polygon.forEach(function(ring) {
              ring.forEach(function(arc) {
                polygonsByArc[arc < 0 ? ~arc : arc].forEach(function(polygon) {
                  if (!polygon._) {
                    polygon._ = 1;
                    neighbors.push(polygon);
                  }
                });
              });
            });
          }
        }
      });

      polygons.forEach(function(polygon) {
        delete polygon._;
      });

      return {
        type: "MultiPolygon",
        arcs: groups.map(function(polygons) {
          var arcs = [], n;

          // Extract the exterior (unique) arcs.
          polygons.forEach(function(polygon) {
            polygon.forEach(function(ring) {
              ring.forEach(function(arc) {
                if (polygonsByArc[arc < 0 ? ~arc : arc].length < 2) {
                  arcs.push(arc);
                }
              });
            });
          });

          // Stitch the arcs into one or more rings.
          arcs = stitch(topology, arcs);

          // If more than one ring is returned,
          // at most one of these rings can be the exterior;
          // choose the one with the greatest absolute area.
          if ((n = arcs.length) > 1) {
            for (var i = 1, k = area(arcs[0]), ki, t; i < n; ++i) {
              if ((ki = area(arcs[i])) > k) {
                t = arcs[0], arcs[0] = arcs[i], arcs[i] = t, k = ki;
              }
            }
          }

          return arcs;
        }).filter(function(arcs) {
          return arcs.length > 0;
        })
      };
    }

    function pointDistance$2 (point1, point2) {
      return Math.sqrt(
        (point1[0] - point2[0]) ** 2 +
        (point1[1] - point2[1]) ** 2
      )
    }

    function linearRingLength$1 (linearRing) {
      let totalLength = 0;

      for (let i = 0; i < linearRing.length - 1; i++) {
        const from = linearRing[i];
        const to = linearRing[i + 1];

        totalLength += pointDistance$2(from, to);
      }

      return totalLength
    }

    /*
      Why this weird map function when there is Array.map?
      Well, usually premature optimization is the root of all evil,
      but Array.map is just really really slow.

      See, for example,  https://jsperf.com/map-reduce-named-functions/2
      Array.map is more than 6x slower than a classical for loop,
      and almost 4x slower than a custom implementation like this one.
    */
    function map$1 (array, callback) {
      const result = [];

      for (let i = 0; i < array.length; i++) {
        result.push(callback(array[i], i));
      }

      return result
    }

    function getOrderDescending (array) {
      const indexArray = map$1(array, (_, i) => i);
      indexArray.sort((a, b) => array[b] - array[a]);

      return indexArray
    }

    function sortIntoOrder (array, order) {
      return map$1(order, i => array[i])
    }

    function getInsertionIndexDescending (arraySortedDescending, value) {
      if (arraySortedDescending.length === 0) return 0

      for (let i = arraySortedDescending.length - 1; i >= 0; i--) {
        const arrayValue = arraySortedDescending[i];

        if (value <= arrayValue) return i
      }

      return 0
    }

    function removeClosingPoint (linearRing) {
      linearRing.pop();

      return linearRing
    }

    function closeRing (linearRing) {
      let firstPoint = linearRing[0];
      linearRing.push(firstPoint);

      return linearRing
    }

    function insertPointsLinearRing (inputLinearRing, numberOfAdditionalPoints) {
      let linearRing = cloneLinearRing(inputLinearRing);
      linearRing = removeClosingPoint(linearRing);
      linearRing = insertPoints(linearRing, numberOfAdditionalPoints, { ring: true });
      linearRing = closeRing(linearRing);

      return linearRing
    }

    function insertPointsLineString (inputLineString, numberOfAdditionalPoints) {
      const lineString = cloneLinearRing(inputLineString);
      return insertPoints(lineString, numberOfAdditionalPoints, { ring: false })
    }

    function insertPoints (lineString, numberOfAdditionalPoints, { ring }) {
      const edgeLengths = getEdgeLengths(lineString, ring);
      let orderedEdgeIds = getOrderDescending(edgeLengths);

      for (let i = 0; i < numberOfAdditionalPoints; i++) {
        const longestEdgeId = orderedEdgeIds[0];

        const edge = getEdge(lineString, longestEdgeId);

        const edgeLength = edgeLengths[longestEdgeId];

        const newEdges = splitEdge(edge);
        const newEdgesLength = edgeLength / 2;

        // Remove old edge
        orderedEdgeIds.shift();
        lineString[longestEdgeId] = null;
        edgeLengths[longestEdgeId] = null;

        // Insert new edges
        orderedEdgeIds = insertOrderedId(orderedEdgeIds, edgeLengths, longestEdgeId, newEdgesLength);

        lineString[longestEdgeId] = newEdges[0][0];
        lineString.splice(longestEdgeId + 1, 0, newEdges[1][0]);

        edgeLengths[longestEdgeId] = newEdgesLength;
        edgeLengths.splice(longestEdgeId + 1, 0, newEdgesLength);
      }

      return lineString
    }

    function cloneLinearRing (linearRing) {
      const clonedLinearRing = [];

      for (let i = 0; i < linearRing.length; i++) {
        clonedLinearRing.push(linearRing[i].slice(0));
      }

      return clonedLinearRing
    }

    function getEdgeLengths (linearRing, ring) {
      const edgeLengths = [];
      const edges = ring ? linearRing.length : linearRing.length - 1;

      for (let i = 0; i < edges; i++) {
        const edge = getEdge(linearRing, i);

        edgeLengths.push(pointDistance$2(edge[0], edge[1]));
      }

      return edgeLengths
    }

    function getEdge (linearRing, index) {
      return [
        linearRing[index], linearRing[(index + 1) % linearRing.length]
      ]
    }

    function splitEdge (edge) {
      const pointInBetween = interpolate(edge[0], edge[1])(0.5);

      return [
        [edge[0], pointInBetween],
        [pointInBetween, edge[1]]
      ]
    }

    function insertOrderedId (orderedIds, edgeLengths, valueIndex, newValue) {
      // Insert new Ids right place
      let idsWereInserted = false;

      for (let i = 0; i < orderedIds.length; i++) {
        const index = orderedIds[i];

        // Increase all indices after the valueIndex with 1
        if (index > valueIndex) orderedIds[i] = orderedIds[i] + 1;

        const currentArrayValue = edgeLengths[index];
        if (currentArrayValue === null) continue

        if (newValue >= currentArrayValue) {
          orderedIds.splice(i, 0, valueIndex);
          orderedIds.splice(i + 1, 0, valueIndex + 1);

          idsWereInserted = true;
          break
        }
      }

      if (!idsWereInserted) {
        orderedIds.push(valueIndex);
        orderedIds.push(valueIndex + 1);
      }

      return orderedIds
    }

    /*
      Taken from flubber:
      https://github.com/veltman/flubber
    */

    function rotatePointsLinearRing (inputLinearRing, toLinearRing) {
      let fromLinearRing = cloneLinearRing(inputLinearRing);
      fromLinearRing = removeClosingPoint(fromLinearRing);

      const fromLength = fromLinearRing.length;
      let min = Infinity;
      let bestOffset;
      let sumOfSquares;
      let spliced;

      for (let offset = 0; offset < fromLength; offset++) {
        sumOfSquares = 0;

        toLinearRing.forEach((point, i) => {
          const distance = pointDistance$2(fromLinearRing[(offset + i) % fromLength], point);
          sumOfSquares += distance * distance;
        });

        if (sumOfSquares < min) {
          min = sumOfSquares;
          bestOffset = offset;
        }
      }

      if (bestOffset) {
        spliced = fromLinearRing.splice(0, bestOffset);
        fromLinearRing.splice(fromLinearRing.length, 0, ...spliced);
      }

      fromLinearRing = closeRing(fromLinearRing);

      return fromLinearRing
    }

    function isLinearRing$1 (ring) {
      return ring.constructor === Array
    }

    function isPolygon$1 (geometry) {
      return geometry.constructor === Object && geometry.type === 'Polygon'
    }

    function isMultiPolygon$1 (geometry) {
      return geometry.constructor === Object && geometry.type === 'MultiPolygon'
    }

    function isPolygonOrMultiPolygon (geometry) {
      return isPolygon$1(geometry) || isMultiPolygon$1(geometry)
    }

    function isLineString$1 (geometry) {
      return geometry.constructor === Object && geometry.type === 'LineString'
    }

    function isMultiLineString$1 (geometry) {
      return geometry.constructor === Object && geometry.type === 'MultiLineString'
    }

    function isLineStringOrMultiLineString (geometry) {
      return isLineString$1(geometry) || isMultiLineString$1(geometry)
    }

    function polygonArea$1 (polygon) {
      if (isLinearRing$1(polygon)) {
        return getRingArea$1(polygon)
      }

      if (isPolygon$1(polygon)) {
        return getPolygonArea$1(polygon)
      }

      if (isMultiPolygon$1(polygon)) {
        return getMultiPolygonArea$1(polygon)
      }

      throw new Error('Invalid input')
    }

    function linearRingIsClockwise (ring) {
      return getSignedRingArea$1(ring) < 0
    }

    function getRingArea$1 (ring) {
      return Math.abs(getSignedRingArea$1(ring))
    }

    // Taken from: https://stackoverflow.com/a/33670691/7237112
    function getSignedRingArea$1 (ring) {
      let total = 0;

      for (let i = 0, l = ring.length; i < l; i++) {
        const addX = ring[i][0];
        const addY = ring[i === ring.length - 1 ? 0 : i + 1][1];
        const subX = ring[i === ring.length - 1 ? 0 : i + 1][0];
        const subY = ring[i][1];

        total += (addX * addY * 0.5);
        total -= (subX * subY * 0.5);
      }

      return total
    }

    function getPolygonArea$1 (polygon) {
      let totalArea = getRingArea$1(polygon.coordinates[0]);

      for (let i = 1; i < polygon.coordinates.length; i++) {
        const holeArea = getRingArea$1(polygon.coordinates[i]);
        totalArea -= holeArea;
      }

      return totalArea
    }

    function getMultiPolygonArea$1 (multiPolygon) {
      let totalArea = 0;

      for (let i = 0; i < multiPolygon.coordinates.length; i++) {
        totalArea += getPolygonArea$1(multiPolygon.coordinates[i]);
      }

      return totalArea
    }

    function matchLinearRings (fromRings, toRings) {
      if (tooManyRings(fromRings)) {
        return map$1(fromRings, (_, i) => i)
      }

      return bestOrder(fromRings, toRings)
    }

    function tooManyRings (rings) {
      // with more than 9 rings, everything will be too chaotic to notice this stuff anyway.
      return rings.length > 9
    }

    function bestOrder (fromRings, toRings) {
      const fromAreas = map$1(fromRings, polygonArea$1);
      const toAreas = map$1(toRings, polygonArea$1);

      const fromAreasOrderDescending = getOrderDescending(fromAreas);
      const toAreasOrderDescending = getOrderDescending(toAreas);

      const pairs = {};

      for (let i = 0; i < toAreasOrderDescending.length; i++) {
        const fromIndex = fromAreasOrderDescending[i];
        const toIndex = toAreasOrderDescending[i];

        pairs[toIndex] = fromIndex;
      }

      const fromOrder = [];

      for (let i = 0; i < toRings.length; i++) {
        fromOrder.push(pairs[i]);
      }

      return fromOrder
    }

    function calculateCentroid$1 (geometry) {
      if (isLinearRing$1(geometry)) {
        return calculateLinearRingCentroid$1(geometry)
      }

      if (isPolygon$1(geometry)) {
        return calculatePolygonCentroid$1(geometry)
      }

      if (isMultiPolygon$1(geometry)) {
        return calculateMultiPolygonCentroid$1(geometry)
      }
    }

    // https://stackoverflow.com/a/33852627/7237112
    function calculateLinearRingCentroid$1 (ring) {
      const nPts = ring.length;
      const off = ring[0];
      let twicearea = 0;
      let x = 0;
      let y = 0;
      let p1;
      let p2;
      let f;

      for (let i = 0, j = nPts - 1; i < nPts; j = i++) {
        p1 = ring[i];
        p2 = ring[j];
        f = (p1[0] - off[0]) * (p2[1] - off[1]) - (p2[0] - off[0]) * (p1[1] - off[1]);
        twicearea += f;
        x += (p1[0] + p2[0] - 2 * off[0]) * f;
        y += (p1[1] + p2[1] - 2 * off[1]) * f;
      }

      f = twicearea * 3;

      return [x / f + off[0], y / f + off[1]]
    }

    function calculatePolygonCentroid$1 (polygon) {
      // We will ignore holes and just take the outer ring
      return calculateLinearRingCentroid$1(polygon.coordinates[0])
    }

    function calculateMultiPolygonCentroid$1 (multiPolygon) {
      // We will take the centroid of each polygon (ignoring holes)
      // and take the weighted (by area) center of these.
      let x = 0;
      let y = 0;
      let totalArea = 0;

      for (let i = 0; i < multiPolygon.coordinates.length; i++) {
        const polygon = multiPolygon.coordinates[i];
        const polygonCentroid = calculateLinearRingCentroid$1(polygon[0]);
        const area = polygonArea$1(polygon[0]);

        x += polygonCentroid[0] * area;
        y += polygonCentroid[1] * area;
        totalArea += area;
      }

      return [x / totalArea, y / totalArea]
    }

    function polygonToPolygon (from, to) {
      const fromOuterRing = from.coordinates[0];
      const toOuterRing = to.coordinates[0];

      const [fromOuterRingPrepared, toOuterRingPrepared] = prepareLinearRings(fromOuterRing, toOuterRing);

      if (neitherHasHoles(from, to)) {
        return createInterpolatorNoHoles(from, to, fromOuterRingPrepared, toOuterRingPrepared)
      }

      const holeInterpolators = createHoleInterpolators(from, to);

      return createInterpolatorWithHoles(
        from, to, fromOuterRingPrepared, toOuterRingPrepared, holeInterpolators
      )
    }

    function prepareLinearRings (fromRing, toRing) {
      const lengthDifference = fromRing.length - toRing.length;

      if (lengthDifference > 0) {
        toRing = insertPointsLinearRing(toRing, lengthDifference);
      }

      if (lengthDifference < 0) {
        fromRing = insertPointsLinearRing(fromRing, -lengthDifference);
      }

      const rotatedFromRing = rotatePointsLinearRing(fromRing, toRing);

      return [rotatedFromRing, toRing]
    }

    function createInterpolatorNoHoles (from, to, fromOuterRingPrepared, toOuterRingPrepared) {
      const outerRingInterpolator = interpolate(fromOuterRingPrepared, toOuterRingPrepared);

      return function interpolator (t) {
        if (t === 0) return from
        if (t === 1) return to

        const interpolatedLinearRing = outerRingInterpolator(t);

        return {
          type: 'Polygon',
          coordinates: [interpolatedLinearRing]
        }
      }
    }

    function neitherHasHoles (from, to) {
      return from.coordinates.length === 1 && to.coordinates.length === 1
    }

    function getHoles (polygon, numberOfHoles) {
      const holes = [];

      for (let i = 1; i <= numberOfHoles; i++) {
        holes.push(polygon.coordinates[i]);
      }

      return holes
    }

    function createHoleInterpolators (from, to) {
      let holeInterpolators = [];

      const numberOfMatchableHoles = Math.min(from.coordinates.length, to.coordinates.length) - 1;

      if (numberOfMatchableHoles > 0) {
        holeInterpolators = holeInterpolators.concat(
          createMatchableHoleInterpolators(from, to, numberOfMatchableHoles)
        );
      }

      const differenceBetweenNumberOfHoles = from.coordinates.length - to.coordinates.length;

      if (differenceBetweenNumberOfHoles > 0) {
        holeInterpolators = holeInterpolators.concat(
          createHoleImploders(from, differenceBetweenNumberOfHoles)
        );
      }

      if (differenceBetweenNumberOfHoles < 0) {
        holeInterpolators = holeInterpolators.concat(
          createHoleExploders(to, -differenceBetweenNumberOfHoles)
        );
      }

      return holeInterpolators
    }

    function createMatchableHoleInterpolators (from, to, numberOfMatchableHoles) {
      const holeInterpolators = [];

      const fromHoles = getHoles(from, numberOfMatchableHoles);
      const toHoles = getHoles(to, numberOfMatchableHoles);

      const fromOrder = matchLinearRings(fromHoles, toHoles);
      const fromHolesSorted = map$1(fromOrder, i => fromHoles[i]);

      for (let i = 0; i < numberOfMatchableHoles; i++) {
        const fromHole = fromHolesSorted[i];
        const toHole = toHoles[i];

        const [fromHolePrepared, toHolePrepared] = prepareLinearRings(fromHole, toHole);

        const holeInterpolator = interpolate(fromHolePrepared, toHolePrepared);

        holeInterpolators.push(holeInterpolator);
      }

      return holeInterpolators
    }

    function createHoleImploders (polygon, differenceBetweenNumberOfHoles) {
      const interpolators = [];

      const firstHoleThatNeedsImplodingIndex = polygon.coordinates.length - differenceBetweenNumberOfHoles;

      for (let i = firstHoleThatNeedsImplodingIndex; i < polygon.coordinates.length; i++) {
        const hole = polygon.coordinates[i];
        const holeCentroid = calculateCentroid$1(hole);
        const smallRectangleAroundCentroid = makeSmallRectangleAroundPoint(holeCentroid);

        const [preparedPolygon, preparedImplodePoint] = prepareLinearRings(hole, smallRectangleAroundCentroid);

        interpolators.push(interpolate(preparedPolygon, preparedImplodePoint));
      }

      return interpolators
    }

    function createHoleExploders (polygon, differenceBetweenNumberOfHoles) {
      return map$1(createHoleImploders(polygon, differenceBetweenNumberOfHoles), holeInterpolator => {
        return t => holeInterpolator(1 - t)
      })
    }

    function makeSmallRectangleAroundPoint ([x, y]) {
      const epsilon = 1e-6;

      const x1 = x - epsilon;
      const x2 = x + epsilon;
      const y1 = y - epsilon;
      const y2 = y + epsilon;

      return [[x1, y1], [x1, y2], [x2, y2], [x2, y1], [x1, y1]]
    }

    function createInterpolatorWithHoles (
      from, to, fromOuterRingPrepared, toOuterRingPrepared, holeInterpolators
    ) {
      const outerRingInterpolator = interpolate(fromOuterRingPrepared, toOuterRingPrepared);

      return function interpolator (t) {
        if (t === 0) return from
        if (t === 1) return to

        const interpolatedLinearRing = outerRingInterpolator(t);

        return {
          type: 'Polygon',
          coordinates: [
            interpolatedLinearRing,
            ...map$1(holeInterpolators, holeInterpolator => holeInterpolator(t))
          ]
        }
      }
    }

    /*
      Taken from flubber:
      https://github.com/veltman/flubber
    */

    function createTopology (vertices, triangleIndices) {
      const arcIndices = {};
      const topology = createEmptyTopology();

      for (let i = 0; i < triangleIndices.length; i += 3) {
        const geometry = [];

        const triangleIndexArcs = createTriangleIndexArcs(triangleIndices, i);

        triangleIndexArcs.forEach(arc => {
          const slug = createArcSlug(arc);

          const coordinates = map$1(arc, pointIndex => getPoint(vertices, pointIndex));

          if (slug in arcIndices) {
            geometry.push(~arcIndices[slug]); // Not sure what this is doing
          } else {
            geometry.push((arcIndices[slug] = topology.arcs.length));
            topology.arcs.push(coordinates);
          }
        });

        const area = getTriangleArea(vertices, triangleIndexArcs);
        const polygon = createTopoPolygon(area, geometry);

        topology.objects.triangles.geometries.push(polygon);
      }

      // Sort smallest first
      // TODO sorted insertion?
      topology.objects.triangles.geometries.sort((a, b) => a.area - b.area);

      return topology
    }

    function createEmptyTopology () {
      return {
        type: 'Topology',
        objects: {
          triangles: {
            type: 'GeometryCollection',
            geometries: []
          }
        },
        arcs: []
      }
    }

    function createTriangleIndexArcs (triangleIndices, i) {
      const a = triangleIndices[i];
      const b = triangleIndices[i + 1];
      const c = triangleIndices[i + 2];

      return [[a, b], [b, c], [c, a]]
    }

    function createArcSlug (arc) {
      return arc[0] < arc[1] ? arc.join(',') : arc[1] + ',' + arc[0]
    }

    function getPoint (vertices, i) {
      return [vertices[i * 2], vertices[(i * 2) + 1]]
    }

    function createTopoPolygon (area, geometry) {
      return {
        type: 'Polygon',
        area,
        arcs: [geometry]
      }
    }

    function getTriangleArea (vertices, triangleIndexArcs) {
      return Math.abs(
        polygonArea$1(map$1(triangleIndexArcs, arc => getPoint(vertices, arc[0])))
      )
    }

    /*
      Taken from flubber:
      https://github.com/veltman/flubber
    */

    const bisect = bisector(d => d.area).left;

    function findNeighbor (geoms) {
      // we assume the first geom is the candidate for which
      // we want to find a neighbor
      const sourceArcs = geoms[0].arcs[0].map(arc => arc < 0 ? ~arc : arc);

      let neighbor;

      // start loop at index 1, first possible neighbor
      for (let index = 1; index < geoms.length; index++) {
        const targetArcs = geoms[index].arcs[0].map(arc => arc < 0 ? ~arc : arc);
        if (sourceArcs.some(arc => targetArcs.includes(arc))) {
          neighbor = index;
          break
        }
      }
      return neighbor
    }

    function collapseTopology (topology, numberOfPieces) {
      const triangleGeometries = topology.objects.triangles.geometries;

      while (triangleGeometries.length > numberOfPieces) {
        mergeSmallestFeature();
      }

      if (numberOfPieces > triangleGeometries.length) {
        throw new RangeError('Can\'t collapse topology into ' + numberOfPieces + ' pieces.')
      }

      const geojson = feature(topology, topology.objects.triangles);
      const geojsonTriangleGeometries = map$1(geojson.features, feature => feature.geometry);

      return geojsonTriangleGeometries

      function mergeSmallestFeature () {
        const smallest = triangleGeometries[0];
        const neighborIndex = findNeighbor(triangleGeometries);
        const neighbor = triangleGeometries[neighborIndex];
        const merged = mergeArcs(topology, [smallest, neighbor]);

        // MultiPolygon -> Polygon
        merged.area = smallest.area + neighbor.area;
        merged.type = 'Polygon';
        merged.arcs = merged.arcs[0];

        // Delete smallest and its chosen neighbor
        triangleGeometries.splice(neighborIndex, 1);
        triangleGeometries.shift();

        // Add new merged shape in sorted order
        triangleGeometries.splice(bisect(triangleGeometries, merged.area), 0, merged);
      }
    }

    function createGeometries (vertices, triangleIndices) {
      const geometries = [];

      for (let i = 0; i < triangleIndices.length; i += 3) {
        const triangleIndexArcs = createTriangleIndexArcs(triangleIndices, i);

        let outerRing = map$1(triangleIndexArcs, arc => getPoint(vertices, arc[0]));
        outerRing.push(getPoint(vertices, triangleIndexArcs[0][0])); // close ring

        // earcut doesn't always give counterclockwise rings back
        if (linearRingIsClockwise(outerRing)) {
          outerRing = outerRing.reverse();
        }

        geometries.push({
          type: 'Polygon',
          coordinates: [outerRing]
        });
      }

      return geometries
    }

    function sliceUpTriangles (geometries, numberOfPieces) {
      const areas = map$1(geometries, polygonArea$1);

      const order = getOrderDescending(areas);

      const areasSorted = sortIntoOrder(areas, order);
      const geometriesSorted = sortIntoOrder(geometries, order);

      while (geometriesSorted.length < numberOfPieces) {
        areasSorted.shift();
        const biggestTriangle = geometriesSorted.shift();

        const cutTriangles = cutTriangleInTwo(biggestTriangle);

        const areaCutTriangles = map$1(cutTriangles, polygonArea$1);

        for (let i = 0; i < cutTriangles.length; i++) {
          const areaCutTriangle = areaCutTriangles[i];
          const cutTriangle = cutTriangles[i];

          const insertionIndex = getInsertionIndexDescending(areasSorted, areaCutTriangle);

          areasSorted.splice(insertionIndex, 0, areaCutTriangle);
          geometriesSorted.splice(insertionIndex, 0, cutTriangle);
        }
      }

      return geometriesSorted
    }

    function cutTriangleInTwo (triangle) {
      const a = triangle.coordinates[0][0];
      const b = triangle.coordinates[0][1];
      const c = triangle.coordinates[0][2];

      const pointBetweenAB = interpolate(a, b)(0.5);

      const firstTriangle = createTriangleGeometry([a, pointBetweenAB, c, a]);
      const secondTriangle = createTriangleGeometry([b, c, pointBetweenAB, b]);

      return [firstTriangle, secondTriangle]
    }

    function createTriangleGeometry (points) {
      return {
        type: 'Polygon',
        coordinates: [points]
      }
    }

    /*
      Inspired by flubber:
      https://github.com/veltman/flubber
    */

    const dimensions = 2;

    function cutPolygon (polygon, numberOfPieces) {
      if (numberOfPieces < 2) throw new Error('Cannot cut polygon in less than 2 pieces')

      const flattenedPolygon = earcut_1.flatten(polygon.coordinates);
      const triangleIndices = earcut_1(flattenedPolygon.vertices, flattenedPolygon.holes, dimensions);

      const numberOfTriangles = getNumberOfTriangles(triangleIndices);

      if (numberOfTriangles >= numberOfPieces) {
        const topology = createTopology(flattenedPolygon.vertices, triangleIndices);
        return collapseTopology(topology, numberOfPieces)
      }

      if (numberOfTriangles < numberOfPieces) {
        const triangleGeometries = createGeometries(flattenedPolygon.vertices, triangleIndices);
        return sliceUpTriangles(triangleGeometries, numberOfPieces)
      }
    }

    function getNumberOfTriangles (triangleIndices) {
      return triangleIndices.length / 3
    }

    function cutPolygons (polygons, numberOfDesiredAdditionalPolygons) {
      if (numberOfDesiredAdditionalPolygons < 1) throw wrongNumberOfPolygonsError

      const polygonAreas = map$1(polygons, polygonArea$1);
      const numberOfCutsPerPolygon = assignCuts(polygonAreas, numberOfDesiredAdditionalPolygons);

      let resultingPolygons = [];

      for (let i = 0; i < polygons.length; i++) {
        const polygon = polygons[i];
        const numberOfCuts = numberOfCutsPerPolygon[i];

        if (numberOfCuts === 0) {
          resultingPolygons.push(polygon);
        }

        if (numberOfCuts > 0) {
          const numberOfDesiredPolygons = numberOfCuts + 1;
          resultingPolygons = resultingPolygons.concat(cutPolygon(polygon, numberOfDesiredPolygons));
        }
      }

      return resultingPolygons
    }

    const wrongNumberOfPolygonsError = new Error('Number of desired additional polygons must be larger than 0');

    // https://stackoverflow.com/a/38905829/7237112
    function assignCuts (polygonAreas, numberOfPieces) {
      const numberOfCutsPerPolygon = [];
      let totalArea = sum(polygonAreas);

      for (let i = 0; i < polygonAreas.length; i++) {
        const area = polygonAreas[i];
        const numberOfCuts = Math.round(area / totalArea * numberOfPieces);

        numberOfCutsPerPolygon.push(numberOfCuts);
        totalArea -= area;
        numberOfPieces -= numberOfCuts;
      }

      return numberOfCutsPerPolygon
    }

    function sum (array) {
      let sum = 0;

      for (let i = 0; i < array.length; i++) {
        sum += array[i];
      }

      return sum
    }

    function combineIntoMultiPolygon (inputGeometries) {
      const multiPolygon = createEmptyMultiPolygon();

      for (const inputGeometry of inputGeometries) {
        if (inputGeometry.type === 'Polygon') {
          multiPolygon.coordinates.push(inputGeometry.coordinates);
        }

        if (inputGeometry.type === 'MultiPolygon') {
          for (const polygon of inputGeometry.coordinates) {
            multiPolygon.coordinates.push(polygon);
          }
        }
      }

      return multiPolygon
    }

    function splitMultiPolygon (multiPolygon) {
      const polygons = [];

      for (const polygonCoordinates of multiPolygon.coordinates) {
        const polygon = createEmptyPolygon();
        polygon.coordinates = polygonCoordinates;

        polygons.push(polygon);
      }

      return polygons
    }

    function createEmptyMultiPolygon () {
      return { type: 'MultiPolygon', coordinates: [] }
    }

    function createEmptyPolygon () {
      return { type: 'Polygon', coordinates: undefined }
    }

    function multiPolygonToMultiPolygon (from, to) {
      let fromPolygons = splitMultiPolygon(from);
      let toPolygons = splitMultiPolygon(to);

      const lengthDifference = fromPolygons.length - toPolygons.length;

      if (lengthDifference > 0) {
        toPolygons = cutPolygons(toPolygons, lengthDifference);
      }

      if (lengthDifference < 0) {
        fromPolygons = cutPolygons(fromPolygons, -lengthDifference);
      }

      return createInterpolatorPolygons(from, to, fromPolygons, toPolygons)
    }

    function createInterpolatorPolygons (from, to, fromPolygons, toPolygons) {
      const fromOuterRings = map$1(fromPolygons, polygon => polygon.coordinates[0]);
      const toOuterRings = map$1(toPolygons, polygon => polygon.coordinates[0]);

      const fromOrder = matchLinearRings(fromOuterRings, toOuterRings);
      fromPolygons = map$1(fromOrder, i => fromPolygons[i]);

      const polygonInterpolators = [];

      for (let i = 0; i < fromPolygons.length; i++) {
        const fromPolygon = fromPolygons[i];
        const toPolygon = toPolygons[i];

        polygonInterpolators.push(polygonToPolygon(fromPolygon, toPolygon));
      }

      return function interpolator (t) {
        if (t === 0) return from
        if (t === 1) return to

        return combineIntoMultiPolygon(
          map$1(polygonInterpolators, polygonInterpolator => polygonInterpolator(t))
        )
      }
    }

    function multiPolygonToPolygon (from, to) {
      const fromPolygons = splitMultiPolygon(from);
      let toPolygons = [to];

      const numberOfFromPolygons = fromPolygons.length;
      const numberOfAdditionalToPolygonsRequried = numberOfFromPolygons - 1;

      if (numberOfAdditionalToPolygonsRequried > 0) {
        toPolygons = cutPolygon(to, numberOfFromPolygons);
      }

      return createInterpolatorPolygons(from, to, fromPolygons, toPolygons)
    }

    function polygonToMultiPolygon (from, to) {
      const reverseInterpolator = multiPolygonToPolygon(to, from);

      return function interpolator (t) {
        return reverseInterpolator(1 - t)
      }
    }

    function lineStringtoLineString (from, to) {
      const [preparedFromCoordinates, preparedToCoordinates] = prepareCoordinates(
        from.coordinates, to.coordinates
      );

      return createInterpolator(from, to, preparedFromCoordinates, preparedToCoordinates)
    }

    function prepareCoordinates (fromCoordinates, toCoordinates) {
      const lengthDifference = fromCoordinates.length - toCoordinates.length;

      let preparedFromCoordinates = fromCoordinates;
      let preparedToCoordinates = toCoordinates;

      if (lengthDifference > 0) {
        preparedToCoordinates = insertPointsLineString(toCoordinates, lengthDifference);
      }

      if (lengthDifference < 0) {
        preparedFromCoordinates = insertPointsLineString(fromCoordinates, -lengthDifference);
      }

      preparedFromCoordinates = reverseIfBetterMatching(preparedFromCoordinates, preparedToCoordinates);

      return [preparedFromCoordinates, preparedToCoordinates]
    }

    function createInterpolator (from, to, preparedFromCoordinates, preparedToCoordinates) {
      const coordinateInterpolator = interpolate(preparedFromCoordinates, preparedToCoordinates);

      return function interpolator (t) {
        if (t === 0) return from
        if (t === 1) return to

        return {
          type: 'LineString',
          coordinates: coordinateInterpolator(t)
        }
      }
    }

    function reverseIfBetterMatching (from, to) {
      const normalTotalSquareDistance = getTotalSquaredDistancePositions(from, to);
      const fromReversed = cloneLinearRing(from).reverse();
      const reversedTotalSquareDistance = getTotalSquaredDistancePositions(fromReversed, to);

      if (normalTotalSquareDistance <= reversedTotalSquareDistance) {
        return from
      } else {
        return fromReversed
      }
    }

    function getTotalSquaredDistancePositions (from, to) {
      let totalSquaredDistance = 0;

      for (let i = 0; i < from.length; i++) {
        totalSquaredDistance += pointDistance$2(from[i], to[i]);
      }

      return totalSquaredDistance
    }

    function movePointAlongLine (a, b, distance) {
      const unitVector = getUnitVector(a, b);
      return movePoint(a, unitVector, distance)
    }

    function getUnitVector (a, b) {
      const magnitude = pointDistance$2(a, b);
      const dx = b[0] - a[0];
      const dy = b[1] - a[1];

      return [dx / magnitude, dy / magnitude]
    }

    function movePoint (point, unitVector, distance) {
      return [
        point[0] + unitVector[0] * distance,
        point[1] + unitVector[1] * distance
      ]
    }

    function multiLineStringToLineString (from, to) {
      const numberOfFromLineStrings = from.coordinates.length;
      const preparedToCoordinates = cutLineString(to.coordinates, numberOfFromLineStrings);
      const lineStringInterpolators = createLineStringInterpolators(from.coordinates, preparedToCoordinates);

      return createMultiLineStringInterpolator(from, to, lineStringInterpolators)
    }

    function lineStringToMultiLineString (from, to) {
      const reverseInterpolator = multiLineStringToLineString(to, from);

      return function interpolator (t) {
        return reverseInterpolator(1 - t)
      }
    }

    function cutLineString (toCoordinates, numberOfLineStrings) {
      const multiLineStringCoordinates = [];

      const totalLengthTo = linearRingLength$1(toCoordinates);
      const desiredSegmentSize = totalLengthTo / numberOfLineStrings;

      const lastPointIndex = toCoordinates.length - 1;

      let currentSegment = [];
      let elapsedDistanceSinceLastCut = 0;

      for (let i = 0; i < lastPointIndex; i++) {
        const a = toCoordinates[i];
        currentSegment.push(a);
        const b = toCoordinates[i + 1];

        const distanceAB = pointDistance$2(a, b);
        const distanceIncludingCurrentSegment = elapsedDistanceSinceLastCut + distanceAB;

        if (distanceIncludingCurrentSegment < desiredSegmentSize) {
          elapsedDistanceSinceLastCut += distanceAB;
        }

        if (distanceIncludingCurrentSegment >= desiredSegmentSize) {
          const numberOfCuts = Math.floor(distanceIncludingCurrentSegment / desiredSegmentSize);

          const cutCoordinates = calculateCutCoordinates(
            a, b, elapsedDistanceSinceLastCut, desiredSegmentSize, numberOfCuts
          );

          currentSegment = currentSegment.concat(cutCoordinates);
          multiLineStringCoordinates.push(currentSegment);

          const lastCut = cutCoordinates[cutCoordinates.length - 1];

          if (pointsEqual(lastCut, b)) {
            currentSegment = [];
          } else {
            currentSegment = [lastCut];
          }

          elapsedDistanceSinceLastCut = pointDistance$2(lastCut, b);
        }
      }

      return multiLineStringCoordinates
    }

    function calculateCutCoordinates (a, b, offset, size, numberOfCuts) {
      const cuts = [];

      for (let i = 1; i <= numberOfCuts; i++) {
        cuts.push(movePointAlongLine(a, b, ((size * i) - offset)));
      }

      return cuts
    }

    function pointsEqual (a, b) {
      return a[0] === b[0] && a[1] === b[1]
    }

    function createLineStringInterpolators (fromCoordinates, toCoordinates) {
      const interpolators = [];

      for (let i = 0; i < fromCoordinates.length; i++) {
        const fromLineString = fromCoordinates[i];
        const toLineString = toCoordinates[i];

        const [preparedFromLineString, preparedToLineString] = prepareCoordinates(fromLineString, toLineString);
        const interpolator = interpolate(preparedFromLineString, preparedToLineString);
        interpolators.push(interpolator);
      }

      return interpolators
    }

    function createMultiLineStringInterpolator (from, to, lineStringInterpolators) {
      return function interpolator (t) {
        if (t === 0) return from
        if (t === 1) return to

        return {
          type: 'MultiLineString',
          coordinates: map$1(
            lineStringInterpolators,
            lineStringInterpolator => lineStringInterpolator(t)
          )
        }
      }
    }

    function matchLineStrings (input, target) {
      const inputOrder = getInputOrder(input, target);
      return inputOrder.map(i => input[i])
    }

    function getInputOrder (input, target) {
      const inputLengths = map$1(input, linearRingLength$1);
      const targetLengths = map$1(target, linearRingLength$1);

      const inputLengthOrderDescending = getOrderDescending(inputLengths);
      const targetLengthOrderDescending = getOrderDescending(targetLengths);

      const pairs = {};

      for (let i = 0; i < targetLengthOrderDescending.length; i++) {
        const inputIndex = inputLengthOrderDescending[i];
        const targetIndex = targetLengthOrderDescending[i];

        pairs[inputIndex] = targetIndex;
      }

      const inputOrder = [];

      for (let i = 0; i < target.length; i++) {
        inputOrder.push(pairs[i]);
      }

      return inputOrder
    }

    function multiLineStringToMultiLineString (from, to) {
      let fromLineStrings = from.coordinates;
      let toLineStrings = to.coordinates;

      const lengthDifference = fromLineStrings.length - toLineStrings.length;

      if (lengthDifference > 0) {
        toLineStrings = splitLineStrings(toLineStrings, lengthDifference);
      }

      if (lengthDifference < 0) {
        fromLineStrings = splitLineStrings(fromLineStrings, -lengthDifference);
      }

      fromLineStrings = matchLineStrings(fromLineStrings, toLineStrings);

      const lineStringInterpolators = createLineStringInterpolators(fromLineStrings, toLineStrings);

      return createMultiLineStringInterpolator(from, to, lineStringInterpolators)
    }

    function splitLineStrings (lineStrings, numberOfDesiredLineStrings) {
      const lineStringLengths = getLengths(lineStrings);
      const numberOfCutsPerLineString = assignCuts(lineStringLengths, numberOfDesiredLineStrings);

      let resultingLineStrings = [];

      for (let i = 0; i < numberOfCutsPerLineString.length; i++) {
        const lineString = lineStrings[i];
        const numberOfCuts = numberOfCutsPerLineString[i];

        if (numberOfCuts === 0) {
          resultingLineStrings.push(lineString);
        }

        if (numberOfCuts > 0) {
          const numberOfDesiredPieces = numberOfCuts + 1;

          resultingLineStrings = resultingLineStrings.concat(
            cutLineString(lineString, numberOfDesiredPieces)
          );
        }
      }

      return resultingLineStrings
    }

    function getLengths (lineStrings) {
      const lengths = [];

      for (let i = 0; i < lineStrings.length; i++) {
        lengths.push(
          linearRingLength$1(lineStrings[i])
        );
      }

      return lengths
    }

    function transshape (from, to) {
      ensureValidInput(from, to);

      // Polygon transitions
      if (from.type === 'Polygon' && to.type === 'Polygon') {
        return polygonToPolygon(from, to)
      }

      if (from.type === 'MultiPolygon' && to.type === 'Polygon') {
        return multiPolygonToPolygon(from, to)
      }

      if (from.type === 'Polygon' && to.type === 'MultiPolygon') {
        return polygonToMultiPolygon(from, to)
      }

      if (from.type === 'MultiPolygon' && to.type === 'MultiPolygon') {
        return multiPolygonToMultiPolygon(from, to)
      }

      // LineString transitions
      if (from.type === 'LineString' && to.type === 'LineString') {
        return lineStringtoLineString(from, to)
      }

      if (from.type === 'MultiLineString' && to.type === 'LineString') {
        return multiLineStringToLineString(from, to)
      }

      if (from.type === 'LineString' && to.type === 'MultiLineString') {
        return lineStringToMultiLineString(from, to)
      }

      if (from.type === 'MultiLineString' && to.type === 'MultiLineString') {
        return multiLineStringToMultiLineString(from, to)
      }
    }

    function ensureValidInput (from, to) {
      if (bothPolygons(from, to) || bothLines(from, to)) {
        return
      }

      throw new Error('Invalid input')
    }

    function bothPolygons (from, to) {
      return isPolygonOrMultiPolygon(from) && isPolygonOrMultiPolygon(to)
    }

    function bothLines (from, to) {
      return isLineStringOrMultiLineString(from) && isLineStringOrMultiLineString(to)
    }

    function transitionGeometry (fromGeometry, toGeometry) {
      if (pointTransition(fromGeometry, toGeometry)) {
        return interpolate(fromGeometry, toGeometry)
      }

      if (polygonTransition(fromGeometry, toGeometry)) {
        return transshape(fromGeometry, toGeometry)
      }

      if (lineStringTransition(fromGeometry, toGeometry)) {
        return transshape(fromGeometry, toGeometry)
      }

      throw new Error('Invalid input')
    }

    function transitionGeometries (fromLayer, toLayer) {
      const firstFromGeometry = getFirstGeometry(fromLayer);
      const firstToGeometry = getFirstGeometry(toLayer);

      if (pointTransition(firstFromGeometry, firstToGeometry)) {
        return transitionLayer(fromLayer, toLayer, interpolate)
      }

      if (polygonTransition(firstFromGeometry, firstToGeometry)) {
        return transitionLayer(fromLayer, toLayer, transshape)
      }

      if (lineStringTransition(firstFromGeometry, firstToGeometry)) {
        return transitionLayer(fromLayer, toLayer, transshape)
      }

      throw new Error('Invalid input')
    }

    function pointTransition (fromGeometry, toGeometry) {
      return fromGeometry.type === 'Point' && toGeometry.type === 'Point'
    }

    const polygonTypes = ['Polygon', 'MultiPolygon'];

    function polygonTransition (fromGeometry, toGeometry) {
      return polygonTypes.includes(fromGeometry.type) &&
        polygonTypes.includes(toGeometry.type)
    }

    const lineStringTypes = ['LineString', 'MultiLineString'];

    function lineStringTransition (fromGeometry, toGeometry) {
      return lineStringTypes.includes(fromGeometry.type) &&
        lineStringTypes.includes(toGeometry.type)
    }

    function getFirstGeometry (layer) {
      return layer[Object.keys(layer)[0]]
    }

    function transitionLayer (fromLayer, toLayer, interpolationMethod) {
      const interpolatorObject = {};

      for (const key in toLayer) {
        if (key in fromLayer) {
          interpolatorObject[key] = interpolationMethod(fromLayer[key], toLayer[key]);
        } else {
          interpolatorObject[key] = () => toLayer[key];
        }
      }

      return function interpolator (t) {
        if (t === 0) return fromLayer
        if (t === 1) return toLayer

        const layer = {};
        for (const key in interpolatorObject) {
          layer[key] = interpolatorObject[key](t);
        }

        return layer
      }
    }

    function createItemFromBbox (bbox) {
      return {
        minX: bbox.x[0],
        maxX: bbox.x[1],
        minY: bbox.y[0],
        maxY: bbox.y[1]
      }
    }

    function indexRectangle (markData) {
      const rectangleAttributes = markData.attributes;

      const bbox = calculateBboxGeometry(rectangleAttributes.screenGeometry);
      const item = createItemFromBbox(bbox);

      item.attributes = rectangleAttributes;
      item.markType = 'Rectangle';
      item.markId = markData.markId;

      return item
    }

    function indexRectangleLayer ({ layerAttributes, keyArray, layerId }) {
      const items = [];

      for (let i = 0; i < keyArray.length; i++) {
        const key = keyArray[i];

        const rectangleAttributes = getRectangleAttributes(layerAttributes, key);
        const bbox = calculateBboxGeometry(rectangleAttributes.screenGeometry);
        const item = createItemFromBbox(bbox);

        item.key = key;
        item.index = i;
        item.attributes = rectangleAttributes;
        item.markType = 'Rectangle';
        item.layerId = layerId;

        items.push(item);
      }

      return items
    }

    function getRectangleAttributes (layerAttributes, key) {
      return { screenGeometry: layerAttributes.screenGeometryObject[key] }
    }

    function indexPolygon (markData) {
      const polygonAttributes = markData.attributes;

      const bbox = calculateBboxGeometry(polygonAttributes.screenGeometry);
      const item = createItemFromBbox(bbox);

      item.attributes = polygonAttributes;
      item.markType = 'Polygon';
      item.markId = markData.markId;

      return item
    }

    function indexPolygonLayer ({ layerAttributes, keyArray, layerId }) {
      const items = [];

      for (let i = 0; i < keyArray.length; i++) {
        const key = keyArray[i];

        const polygonAttributes = getPolygonAttributes(layerAttributes, key);
        const bbox = calculateBboxGeometry(polygonAttributes.screenGeometry);
        const item = createItemFromBbox(bbox);

        item.key = key;
        item.index = i;
        item.attributes = polygonAttributes;
        item.markType = 'Polygon';
        item.layerId = layerId;

        items.push(item);
      }

      return items
    }

    function getPolygonAttributes (layerAttributes, key) {
      return { screenGeometry: layerAttributes.screenGeometryObject[key] }
    }

    function indexLine (markData) {
      const lineAttributes = markData.attributes;
      const markId = markData.markId;

      const pixelGeometry = lineAttributes.pixelGeometry;
      const lineStringCoords = pixelGeometry.coordinates;

      if (pixelGeometry.type === 'LineString') {
        return indexLineString(lineStringCoords, lineAttributes, markId)
      }

      if (pixelGeometry.type === 'MultiLineString') {
        return indexMultiLineString(lineStringCoords, lineAttributes, markId)
      }
    }

    function indexLineString (lineStringCoords, lineAttributes, markId, lineStringIndex) {
      const indexableSegments = [];

      for (let i = 0; i < lineStringCoords.length - 1; i++) {
        const segment = [lineStringCoords[i], lineStringCoords[i + 1]];

        const item = createSegmentItem(segment, lineAttributes, i);
        if (lineStringIndex) {
          // Only for MultiLineStrings
          item.lineStringIndex = lineStringIndex;
        }
        item.markId = markId;
        indexableSegments.push(item);
      }

      return indexableSegments
    }

    function indexMultiLineString (lineStringCoords, lineAttributes, markId) {
      let indexableSegments = [];

      for (let lineStringIndex = 0; lineStringIndex < lineStringCoords.length; lineStringIndex++) {
        indexableSegments = indexableSegments.concat(indexLineString(
          lineStringCoords[lineStringIndex], lineAttributes, markId, lineStringIndex
        ));
      }

      return indexableSegments
    }

    function createSegmentItem (segment, attributes, i) {
      const segmentGeometry = { type: 'LineString', coordinates: segment };
      const bbox = calculateBboxGeometry(segmentGeometry);
      let item = createItemFromBbox(bbox);
      item = takeIntoAccountStrokeWidth(item, attributes.strokeWidth);

      item.attributes = {};
      item.attributes.strokeWidth = attributes.strokeWidth;
      item.attributes.segmentGeometry = segmentGeometry;
      item.markType = 'Line';
      item.segmentIndex = i;

      return item
    }

    function takeIntoAccountStrokeWidth (item, strokeWidth) {
      const halfStrokeWidth = strokeWidth / 2;

      const newBbox = {
        minX: item.minX - halfStrokeWidth,
        maxX: item.maxX + halfStrokeWidth,
        minY: item.minY - halfStrokeWidth,
        maxY: item.maxY + halfStrokeWidth
      };

      return Object.assign(item, newBbox)
    }

    function indexLineLayer ({ layerAttributes, keyArray, layerId }) {
      let items = [];

      for (let i = 0; i < keyArray.length; i++) {
        const key = keyArray[i];
        const lineAttributes = createLineAttributes(layerAttributes, key);
        const pixelGeometry = lineAttributes.pixelGeometry;
        const lineStringCoords = pixelGeometry.coordinates;

        if (pixelGeometry.type === 'LineString') {
          let segments = indexLineString(
            lineStringCoords, lineAttributes, key
          );

          segments = modifyForLayer(segments, layerId, key, i);
          items = items.concat(segments);
        }

        if (pixelGeometry.type === 'MultiLineString') {
          let segments = indexMultiLineString(
            lineStringCoords, lineAttributes, key
          );

          segments = modifyForLayer(segments, layerId, key, i);
          items = items.concat(segments);
        }
      }

      return items
    }

    function createLineAttributes (attributes, key) {
      return {
        pixelGeometry: attributes.pixelGeometryObject[key],
        strokeWidth: attributes.strokeWidthObject[key]
      }
    }

    function modifyForLayer (segments, layerId, key, index) {
      for (let i = 0; i < segments.length; i++) {
        const segmentItem = segments[i];
        delete segmentItem.markId;

        segmentItem.layerId = layerId;
        segmentItem.key = key;
        segmentItem.index = index;
      }

      return segments
    }

    function indexArea (markData) {
      const areaAttributes = markData.attributes;

      const bbox = calculateBboxGeometry(areaAttributes.screenGeometry);
      const item = createItemFromBbox(bbox);

      item.attributes = areaAttributes;
      item.markType = 'Area';
      item.markId = markData.markId;

      return item
    }

    function indexAreaLayer ({ layerAttributes, keyArray, layerId }) {
      const items = [];

      for (let i = 0; i < keyArray.length; i++) {
        const key = keyArray[i];

        const areaAttributes = getAreaAttributes(layerAttributes, key);
        const bbox = calculateBboxGeometry(areaAttributes.screenGeometry);
        const item = createItemFromBbox(bbox);

        item.key = key;
        item.index = i;
        item.attributes = areaAttributes;
        item.markType = 'Area';
        item.layerId = layerId;

        items.push(item);
      }

      return items
    }

    function getAreaAttributes (layerAttributes, key) {
      return { screenGeometry: layerAttributes.screenGeometryObject[key] }
    }

    function indexSymbol (markData) {
      const symbolAttributes = markData.attributes;

      const bbox = calculateBboxGeometry(symbolAttributes.screenGeometry);
      const item = createItemFromBbox(bbox);

      item.attributes = symbolAttributes;
      item.markType = 'Symbol';
      item.markId = markData.markId;

      return item
    }

    function indexSymbolLayer ({ layerAttributes, keyArray, layerId }) {
      const items = [];

      for (let i = 0; i < keyArray.length; i++) {
        const key = keyArray[i];

        const symbolAttributes = getSymbolAttributes(layerAttributes, key);
        const bbox = calculateBboxGeometry(symbolAttributes.screenGeometry);
        const item = createItemFromBbox(bbox);

        item.key = key;
        item.index = i;
        item.attributes = symbolAttributes;
        item.markType = 'Symbol';
        item.layerId = layerId;

        items.push(item);
      }

      return items
    }

    function getSymbolAttributes (layerAttributes, key) {
      return { screenGeometry: layerAttributes.screenGeometryObject[key] }
    }

    const markIndexing = {
      Point: indexPoint,
      Rectangle: indexRectangle,
      Polygon: indexPolygon,
      Line: indexLine,
      Label: indexPoint,
      Area: indexArea,
      Symbol: indexSymbol
    };

    const layerIndexing = {
      Point: indexPointLayer,
      Rectangle: indexRectangleLayer,
      Polygon: indexPolygonLayer,
      Line: indexLineLayer,
      Label: indexPointLayer,
      Area: indexAreaLayer,
      Symbol: indexSymbolLayer
    };

    class MarkInteractionInterface extends BaseInteractionInterface {
      constructor (interactionManager, InteractionHandlers) {
        super(interactionManager, InteractionHandlers);

        this._indexableMarks = {};
        this._indexableLayers = {};
      }

      // Mark loading and removing
      loadMark (markType, markData) {
        const indexingFunction = markIndexing[markType];
        const indexableMark = indexingFunction(markData);

        const markId = markData.markId;
        this._indexableMarks[markId] = indexableMark;
      }

      markIsLoaded (markId) {
        return markId in this._indexableMarks
      }

      removeMark (markId) {
        delete this._indexableMarks[markId];
      }

      // Layer loading and removing
      loadLayer (layerType, layerData) {
        const indexingFunction = layerIndexing[layerType];
        const indexableLayer = indexingFunction(layerData);

        const layerId = layerData.layerId;
        this._indexableLayers[layerId] = indexableLayer;
      }

      layerIsLoaded (layerId) {
        return layerId in this._indexableLayers
      }

      removeLayer (layerId) {
        delete this._indexableLayers[layerId];
      }

      // Add/remove mark interactions
      addMarkInteraction (interactionName, markId, callback) {
        this._getHandler(interactionName).addMarkInteraction(markId, callback);
      }

      removeAllMarkInteractions (markId) {
        for (const handlerName in this._handlers) {
          const handler = this._handlers[handlerName];

          if (handler.hasMark(markId)) {
            handler.removeMarkInteraction(markId);
          }
        }
      }

      // Add/remove layer interactions
      addLayerInteraction (interactionName, layerId, callback) {
        this._getHandler(interactionName).addLayerInteraction(layerId, callback);
      }

      removeAllLayerInteractions (layerId) {
        for (const handlerName in this._handlers) {
          const handler = this._handlers[handlerName];

          if (handler.hasLayer(layerId)) {
            handler.removeLayerInteraction(layerId);
          }
        }
      }
    }

    class SectionInteractionInterface extends BaseInteractionInterface {
      addInteraction (interactionName, callback) {
        this._getHandler(interactionName).addInteraction(callback);
      }

      removeAllInteractions () {
        for (const handlerName in this._handlers) {
          const handler = this._handlers[handlerName];

          if (handler.hasInteraction()) {
            handler.removeInteraction();
          }
        }
      }
    }

    class BaseInteractionHandler {
      constructor (interactionManager, { eventName, interactionName }) {
        this._interactionManager = interactionManager;
        this._eventName = eventName;
        this._interactionName = interactionName;
      }

      interactionManager () {
        return this._interactionManager
      }

      eventManager () {
        return this._interactionManager._eventManager
      }

      section () {
        return this._interactionManager._section
      }

      id () {
        return this._interactionManager._id
      }

      _addEventListener () {
        const handler = this._handleEvent.bind(this);

        const eventManager = this.eventManager();
        const listenerId = this.getId();

        const events = isArray(this._eventName) ? this._eventName : [this._eventName];

        for (const event of events) {
          eventManager
            .eventTracker(event)
            .addListener(listenerId, handler);
        }
      }

      _removeEventListener () {
        const eventManager = this.eventManager();
        const listenerId = this.getId();

        const events = isArray(this._eventName) ? this._eventName : [this._eventName];

        for (const event of events) {
          eventManager
            .eventTracker(event)
            .removeListener(listenerId);
        }
      }
    }

    function isArray (value) {
      return value.constructor === Array
    }

    var rbush_min = createCommonjsModule(function (module, exports) {
    !function(t,i){module.exports=i();}(commonjsGlobal,function(){function t(t,r,e,a,h){!function t(n,r,e,a,h){for(;a>e;){if(a-e>600){var o=a-e+1,s=r-e+1,l=Math.log(o),f=.5*Math.exp(2*l/3),u=.5*Math.sqrt(l*f*(o-f)/o)*(s-o/2<0?-1:1),m=Math.max(e,Math.floor(r-s*f/o+u)),c=Math.min(a,Math.floor(r+(o-s)*f/o+u));t(n,r,m,c,h);}var p=n[r],d=e,x=a;for(i(n,e,r),h(n[a],p)>0&&i(n,e,a);d<x;){for(i(n,d,x),d++,x--;h(n[d],p)<0;)d++;for(;h(n[x],p)>0;)x--;}0===h(n[e],p)?i(n,e,x):i(n,++x,a),x<=r&&(e=x+1),r<=x&&(a=x-1);}}(t,r,e||0,a||t.length-1,h||n);}function i(t,i,n){var r=t[i];t[i]=t[n],t[n]=r;}function n(t,i){return t<i?-1:t>i?1:0}var r=function(t){void 0===t&&(t=9),this._maxEntries=Math.max(4,t),this._minEntries=Math.max(2,Math.ceil(.4*this._maxEntries)),this.clear();};function e(t,i,n){if(!n)return i.indexOf(t);for(var r=0;r<i.length;r++)if(n(t,i[r]))return r;return -1}function a(t,i){h(t,0,t.children.length,i,t);}function h(t,i,n,r,e){e||(e=p(null)),e.minX=1/0,e.minY=1/0,e.maxX=-1/0,e.maxY=-1/0;for(var a=i;a<n;a++){var h=t.children[a];o(e,t.leaf?r(h):h);}return e}function o(t,i){return t.minX=Math.min(t.minX,i.minX),t.minY=Math.min(t.minY,i.minY),t.maxX=Math.max(t.maxX,i.maxX),t.maxY=Math.max(t.maxY,i.maxY),t}function s(t,i){return t.minX-i.minX}function l(t,i){return t.minY-i.minY}function f(t){return (t.maxX-t.minX)*(t.maxY-t.minY)}function u(t){return t.maxX-t.minX+(t.maxY-t.minY)}function m(t,i){return t.minX<=i.minX&&t.minY<=i.minY&&i.maxX<=t.maxX&&i.maxY<=t.maxY}function c(t,i){return i.minX<=t.maxX&&i.minY<=t.maxY&&i.maxX>=t.minX&&i.maxY>=t.minY}function p(t){return {children:t,height:1,leaf:!0,minX:1/0,minY:1/0,maxX:-1/0,maxY:-1/0}}function d(i,n,r,e,a){for(var h=[n,r];h.length;)if(!((r=h.pop())-(n=h.pop())<=e)){var o=n+Math.ceil((r-n)/e/2)*e;t(i,o,n,r,a),h.push(n,o,o,r);}}return r.prototype.all=function(){return this._all(this.data,[])},r.prototype.search=function(t){var i=this.data,n=[];if(!c(t,i))return n;for(var r=this.toBBox,e=[];i;){for(var a=0;a<i.children.length;a++){var h=i.children[a],o=i.leaf?r(h):h;c(t,o)&&(i.leaf?n.push(h):m(t,o)?this._all(h,n):e.push(h));}i=e.pop();}return n},r.prototype.collides=function(t){var i=this.data;if(!c(t,i))return !1;for(var n=[];i;){for(var r=0;r<i.children.length;r++){var e=i.children[r],a=i.leaf?this.toBBox(e):e;if(c(t,a)){if(i.leaf||m(t,a))return !0;n.push(e);}}i=n.pop();}return !1},r.prototype.load=function(t){if(!t||!t.length)return this;if(t.length<this._minEntries){for(var i=0;i<t.length;i++)this.insert(t[i]);return this}var n=this._build(t.slice(),0,t.length-1,0);if(this.data.children.length)if(this.data.height===n.height)this._splitRoot(this.data,n);else {if(this.data.height<n.height){var r=this.data;this.data=n,n=r;}this._insert(n,this.data.height-n.height-1,!0);}else this.data=n;return this},r.prototype.insert=function(t){return t&&this._insert(t,this.data.height-1),this},r.prototype.clear=function(){return this.data=p([]),this},r.prototype.remove=function(t,i){if(!t)return this;for(var n,r,a,h=this.data,o=this.toBBox(t),s=[],l=[];h||s.length;){if(h||(h=s.pop(),r=s[s.length-1],n=l.pop(),a=!0),h.leaf){var f=e(t,h.children,i);if(-1!==f)return h.children.splice(f,1),s.push(h),this._condense(s),this}a||h.leaf||!m(h,o)?r?(n++,h=r.children[n],a=!1):h=null:(s.push(h),l.push(n),n=0,r=h,h=h.children[0]);}return this},r.prototype.toBBox=function(t){return t},r.prototype.compareMinX=function(t,i){return t.minX-i.minX},r.prototype.compareMinY=function(t,i){return t.minY-i.minY},r.prototype.toJSON=function(){return this.data},r.prototype.fromJSON=function(t){return this.data=t,this},r.prototype._all=function(t,i){for(var n=[];t;)t.leaf?i.push.apply(i,t.children):n.push.apply(n,t.children),t=n.pop();return i},r.prototype._build=function(t,i,n,r){var e,h=n-i+1,o=this._maxEntries;if(h<=o)return a(e=p(t.slice(i,n+1)),this.toBBox),e;r||(r=Math.ceil(Math.log(h)/Math.log(o)),o=Math.ceil(h/Math.pow(o,r-1))),(e=p([])).leaf=!1,e.height=r;var s=Math.ceil(h/o),l=s*Math.ceil(Math.sqrt(o));d(t,i,n,l,this.compareMinX);for(var f=i;f<=n;f+=l){var u=Math.min(f+l-1,n);d(t,f,u,s,this.compareMinY);for(var m=f;m<=u;m+=s){var c=Math.min(m+s-1,u);e.children.push(this._build(t,m,c,r-1));}}return a(e,this.toBBox),e},r.prototype._chooseSubtree=function(t,i,n,r){for(;r.push(i),!i.leaf&&r.length-1!==n;){for(var e=1/0,a=1/0,h=void 0,o=0;o<i.children.length;o++){var s=i.children[o],l=f(s),u=(m=t,c=s,(Math.max(c.maxX,m.maxX)-Math.min(c.minX,m.minX))*(Math.max(c.maxY,m.maxY)-Math.min(c.minY,m.minY))-l);u<a?(a=u,e=l<e?l:e,h=s):u===a&&l<e&&(e=l,h=s);}i=h||i.children[0];}var m,c;return i},r.prototype._insert=function(t,i,n){var r=n?t:this.toBBox(t),e=[],a=this._chooseSubtree(r,this.data,i,e);for(a.children.push(t),o(a,r);i>=0&&e[i].children.length>this._maxEntries;)this._split(e,i),i--;this._adjustParentBBoxes(r,e,i);},r.prototype._split=function(t,i){var n=t[i],r=n.children.length,e=this._minEntries;this._chooseSplitAxis(n,e,r);var h=this._chooseSplitIndex(n,e,r),o=p(n.children.splice(h,n.children.length-h));o.height=n.height,o.leaf=n.leaf,a(n,this.toBBox),a(o,this.toBBox),i?t[i-1].children.push(o):this._splitRoot(n,o);},r.prototype._splitRoot=function(t,i){this.data=p([t,i]),this.data.height=t.height+1,this.data.leaf=!1,a(this.data,this.toBBox);},r.prototype._chooseSplitIndex=function(t,i,n){for(var r,e,a,o,s,l,u,m=1/0,c=1/0,p=i;p<=n-i;p++){var d=h(t,0,p,this.toBBox),x=h(t,p,n,this.toBBox),v=(e=d,a=x,o=void 0,s=void 0,l=void 0,u=void 0,o=Math.max(e.minX,a.minX),s=Math.max(e.minY,a.minY),l=Math.min(e.maxX,a.maxX),u=Math.min(e.maxY,a.maxY),Math.max(0,l-o)*Math.max(0,u-s)),M=f(d)+f(x);v<m?(m=v,r=p,c=M<c?M:c):v===m&&M<c&&(c=M,r=p);}return r||n-i},r.prototype._chooseSplitAxis=function(t,i,n){var r=t.leaf?this.compareMinX:s,e=t.leaf?this.compareMinY:l;this._allDistMargin(t,i,n,r)<this._allDistMargin(t,i,n,e)&&t.children.sort(r);},r.prototype._allDistMargin=function(t,i,n,r){t.children.sort(r);for(var e=this.toBBox,a=h(t,0,i,e),s=h(t,n-i,n,e),l=u(a)+u(s),f=i;f<n-i;f++){var m=t.children[f];o(a,t.leaf?e(m):m),l+=u(a);}for(var c=n-i-1;c>=i;c--){var p=t.children[c];o(s,t.leaf?e(p):p),l+=u(s);}return l},r.prototype._adjustParentBBoxes=function(t,i,n){for(var r=n;r>=0;r--)o(i[r],t);},r.prototype._condense=function(t){for(var i=t.length-1,n=void 0;i>=0;i--)0===t[i].children.length?i>0?(n=t[i-1].children).splice(n.indexOf(t[i]),1):this.clear():a(t[i],this.toBBox);},r});
    });

    function pointCollision (coordinates, pointAttributes) {
      const distance = pointDistance(
        [coordinates.x, coordinates.y],
        pointAttributes.pixelGeometry.coordinates
      );

      return distance < pointAttributes.radius
    }

    function rectangleCollision (coordinates, rectangleAttributes) {
      const point = [coordinates.x, coordinates.y];
      return pointInPolygon(point, rectangleAttributes.screenGeometry)
    }

    function polygonCollision (coordinates, polygonAttributes) {
      const point = [coordinates.x, coordinates.y];
      return pointInPolygon(point, polygonAttributes.screenGeometry)
    }

    function lineCollision (coordinates, lineAttributes) {
      const mouseCoordinates = [coordinates.x, coordinates.y];
      return pointIntersectsLineSegment(
        mouseCoordinates,
        lineAttributes.segmentGeometry.coordinates,
        lineAttributes.strokeWidth
      )
    }

    function symbolCollision (coordinates, symbolAttributes) {
      const point = [coordinates.x, coordinates.y];
      return pointInPolygon(point, symbolAttributes.screenGeometry)
    }

    function areaCollision (coordinates, areaAttributes) {
      const point = [coordinates.x, coordinates.y];
      return pointInPolygon(point, areaAttributes.screenGeometry)
    }

    var collisionTests = {
      Point: pointCollision,
      Rectangle: rectangleCollision,
      Polygon: polygonCollision,
      Line: lineCollision,
      Label: pointCollision,
      Symbol: symbolCollision,
      Area: areaCollision
    };

    class SpatialIndex {
      constructor (interactionHandler, getMark, getLayer) {
        this._rbush = new rbush_min();
        this._interactionHandler = interactionHandler;

        this._getMark = getMark.bind(interactionHandler);
        this._getLayer = getLayer.bind(interactionHandler);
      }

      // Layer indexing and unindexing
      indexLayer (layerId) {
        const layer = this._getLayer(layerId);
        this._rbush.load(layer);
      }

      unindexLayer (layerId) {
        const layer = this._getLayer(layerId);

        for (let i = 0; i < layer.length; i++) {
          const item = layer[i];
          this._rbush.remove(item);
        }
      }

      // Mark loading and removing
      indexMark (markId) {
        const mark = this._getMark(markId);

        if (multipleSegments(mark)) {
          this._rbush.load(mark);
        } else {
          this._rbush.insert(mark);
        }
      }

      unindexMark (markId) {
        const mark = this._getMark(markId);

        if (multipleSegments(mark)) {
          for (let i = 0; i < mark.length; i++) {
            const item = mark[i];
            this._rbush.remove(item);
          }
        } else {
          this._rbush.remove(mark);
        }
      }

      // Query functions
      queryMouseCoordinates (mouseCoordinates, radius) {
        const searchArea = searchAreaFromCoordinates(mouseCoordinates, radius);
        const indexQueryResults = this._rbush.search(searchArea);

        return this._getHits(mouseCoordinates, indexQueryResults)
      }

      queryBoundingBox (boundingBox) {
        return this._rbush.search(boundingBox)
      }

      // Internal
      _getHits (coordinates, indexQueryResults) {
        const hits = [];

        for (let i = 0; i < indexQueryResults.length; i++) {
          const indexQueryResult = indexQueryResults[i];
          const collisionTest = collisionTests[indexQueryResult.markType];

          if (collisionTest(coordinates, indexQueryResult.attributes)) {
            hits.push(indexQueryResult);
          }
        }

        return hits
      }
    }

    function searchAreaFromCoordinates (coordinates, radius = 3) {
      return {
        minX: coordinates.x - radius,
        maxX: coordinates.x + radius,
        minY: coordinates.y - radius,
        maxY: coordinates.y + radius
      }
    }

    function multipleSegments (indexableItem) {
      return indexableItem.constructor === Array
    }

    class MarkInteractionHandler extends BaseInteractionHandler {
      constructor (interactionManager, options) {
        super(interactionManager, options);

        const getMark = function (markId) {
          return this._interactionManager.marks()._indexableMarks[markId]
        };

        const getLayer = function (layerId) {
          return this._interactionManager.marks()._indexableLayers[layerId]
        };

        this._spatialIndex = new SpatialIndex(this, getMark, getLayer);

        this._numberOfInteractions = 0;

        this._markCallbacks = {};
        this._layerCallbacks = {};
      }

      // Add/remove mark interactions
      addMarkInteraction (markId, callback) {
        this._addEventListenerIfNecessary();
        this._numberOfInteractions++;
        this._markCallbacks[markId] = callback;

        this._spatialIndex.indexMark(markId);
      }

      hasMark (markId) {
        return markId in this._markCallbacks
      }

      removeMarkInteraction (markId) {
        this._removeEventListenerIfNecessary();
        delete this._markCallbacks[markId];
        this._numberOfInteractions--;

        this._spatialIndex.unindexMark(markId);
      }

      // Add/remove layer interactions
      addLayerInteraction (layerId, callback) {
        if (!(layerId in this._layerCallbacks)) {
          this._addEventListenerIfNecessary();
          this._numberOfInteractions++;
          this._layerCallbacks[layerId] = callback;

          this._spatialIndex.indexLayer(layerId);
        }
      }

      hasLayer (layerId) {
        return layerId in this._layerCallbacks
      }

      removeLayerInteraction (layerId) {
        if (layerId in this._layerCallbacks) {
          this._numberOfInteractions--;
          delete this._layerCallbacks[layerId];
          this._removeEventListenerIfNecessary();

          this._spatialIndex.unindexLayer(layerId);
        }
      }

      _addEventListenerIfNecessary () {
        if (this._numberOfInteractions === 0) {
          this._addEventListener();
        }
      }

      _removeEventListenerIfNecessary () {
        if (this._numberOfInteractions === 0) {
          this._removeEventListener();
        }
      }

      getId () {
        return `${this.id()}-mark-${this._interactionName}`
      }
    }

    function createMarkEvent (eventType, eventOptions, hit, nativeEvent) {
      eventOptions.markType = hit.markType;
      eventOptions.hitBbox = extractBbox(hit);
      eventOptions.hitSource = 'mark';

      return createEvent(eventType, eventOptions, nativeEvent)
    }

    function createLayerEvent (eventType, eventOptions, hit, nativeEvent) {
      eventOptions.markType = hit.markType;
      eventOptions.hitBbox = extractBbox(hit);
      eventOptions.key = hit.key;
      eventOptions.index = hit.index;
      eventOptions.hitSource = 'layer';

      return createEvent(eventType, eventOptions, nativeEvent)
    }

    function createSectionEvent (eventType, eventOptions, nativeEvent) {
      eventOptions.hitSource = 'section';

      return createEvent(eventType, eventOptions, nativeEvent)
    }

    function extractBbox (hit) {
      return { minX: hit.minX, maxX: hit.maxX, minY: hit.minY, maxY: hit.maxY }
    }

    function createEvent (eventType, eventOptions, nativeEvent) {
      const event = eventOptions;

      event.type = eventType;
      event.nativeType = nativeEvent.type;

      for (const key of INTERESTING_NATIVE_KEYS) {
        event[key] = nativeEvent[key];
      }

      return event
    }

    const INTERESTING_NATIVE_KEYS = [
      'altKey', 'ctrlKey', 'shiftKey',
      'clientX', 'clientY',
      'pageX', 'pageY',
      'screenX', 'screenY',
      'timeStamp'
    ];

    function createSelectMarkEvent (eventType, hit) {
      const event = {
        type: eventType,
        markType: hit.markType,
        hitSource: 'mark'
      };

      return event
    }

    function createSelectLayerEvent (eventType, hit) {
      const event = {
        type: eventType,
        markType: hit.markType,
        key: hit.key,
        index: hit.index,
        hitSource: 'layer'
      };

      return event
    }

    function getLocalCoordinates (screenCoordinates, interactionManager) {
      const section = interactionManager._section;
      const inverseTotalTransformation = section.inverseTotalTransformation;

      const { minX, maxX, minY, maxY } = section.paddedBbox;

      const clampedX = clamp(screenCoordinates.x, minX, maxX);
      const clampedY = clamp(screenCoordinates.y, minY, maxY);

      const [localX, localY] = inverseTotalTransformation([clampedX, clampedY]);

      return { x: localX, y: localY }
    }

    function clamp (value, min, max) {
      return Math.max(min, Math.min(value, max))
    }

    function coordinatesAreInsideSection (hit, section) {
      const bbox = section.bbox;

      return (
        hit.x >= bbox.minX &&
        hit.x <= bbox.maxX &&
        hit.y >= bbox.minY &&
        hit.y <= bbox.maxY
      )
    }

    function hitIsMark (hit) {
      return 'markId' in hit
    }

    function hitIsInLayer (hit) {
      return 'layerId' in hit
    }

    function getHitId (hit) {
      if (hitIsMark(hit)) return hit.markId
      if (hitIsInLayer(hit)) return hit.layerId + '-' + hit.key
    }

    class ClickHandler extends MarkInteractionHandler {
      constructor (interactionManager) {
        super(interactionManager, {
          interactionName: 'click',
          eventName: 'click'
        });
      }

      _handleEvent (screenCoordinates, nativeEvent) {
        if (!coordinatesAreInsideSection(screenCoordinates, this.section())) {
          return
        }

        const spatialIndex = this._spatialIndex;
        const hits = spatialIndex.queryMouseCoordinates(screenCoordinates);
        const localCoordinates = getLocalCoordinates(screenCoordinates, this.interactionManager());

        for (let i = 0; i < hits.length; i++) {
          const hit = hits[i];

          if (hitIsMark(hit)) {
            const clickEvent = createMarkEvent('click', {
              screenCoordinates,
              localCoordinates
            }, hit, nativeEvent);

            this._markCallbacks[hit.markId](clickEvent);
          }

          if (hitIsInLayer(hit)) {
            const clickEvent = createLayerEvent('click', {
              screenCoordinates,
              localCoordinates
            }, hit, nativeEvent);

            this._layerCallbacks[hit.layerId](clickEvent);
          }
        }
      }
    }

    class MouseoverHandler extends MarkInteractionHandler {
      constructor (interactionManager) {
        super(interactionManager, {
          interactionName: 'mouseover',
          eventName: 'mousemove'
        });

        this._previousMouseoverIds = {};
        this._currentMouseoverIds = {};
      }

      _handleEvent (screenCoordinates, nativeEvent) {
        const spatialIndex = this._spatialIndex;
        const hits = spatialIndex.queryMouseCoordinates(screenCoordinates);

        for (let i = 0; i < hits.length; i++) {
          const hit = hits[i];
          const hitId = getHitId(hit);

          this._currentMouseoverIds[hitId] = true;

          if (!(hitId in this._previousMouseoverIds)) {
            this._fireCallback(hit, screenCoordinates, nativeEvent);
          }
        }

        this._previousMouseoverIds = this._currentMouseoverIds;
        this._currentMouseoverIds = {};
      }

      _fireCallback (hit, screenCoordinates, nativeEvent) {
        const localCoordinates = getLocalCoordinates(screenCoordinates, this.interactionManager());

        if (hitIsMark(hit)) {
          const mouseoverEvent = createMarkEvent('mouseover', {
            screenCoordinates,
            localCoordinates
          }, hit, nativeEvent);

          this._markCallbacks[hit.markId](mouseoverEvent);
        }

        if (hitIsInLayer(hit)) {
          const mouseoverEvent = createLayerEvent('mouseover', {
            screenCoordinates,
            localCoordinates
          }, hit, nativeEvent);

          this._layerCallbacks[hit.layerId](mouseoverEvent);
        }
      }
    }

    class MouseoutHandler extends MarkInteractionHandler {
      constructor (interactionManager) {
        super(interactionManager, {
          interactionName: 'mouseout',
          eventName: 'mousemove'
        });

        this._previousMouseoverHits = {};
        this._currentMouseoverHits = {};
      }

      _handleEvent (screenCoordinates, nativeEvent) {
        const spatialIndex = this._spatialIndex;
        const hits = spatialIndex.queryMouseCoordinates(screenCoordinates);

        for (let i = 0; i < hits.length; i++) {
          const hit = hits[i];
          const hitId = getHitId(hit);

          this._currentMouseoverHits[hitId] = hit;
        }

        for (const hitId in this._previousMouseoverHits) {
          if (!(hitId in this._currentMouseoverHits)) {
            const hit = this._previousMouseoverHits[hitId];
            this._fireCallback(hit, screenCoordinates, nativeEvent);
          }
        }

        this._previousMouseoverHits = this._currentMouseoverHits;
        this._currentMouseoverHits = {};
      }

      _fireCallback (hit, screenCoordinates, nativeEvent) {
        const localCoordinates = getLocalCoordinates(screenCoordinates, this.interactionManager());

        if (hitIsMark(hit)) {
          const mouseoutEvent = createMarkEvent('mouseout', {
            screenCoordinates,
            localCoordinates
          }, hit, nativeEvent);

          this._markCallbacks[hit.markId](mouseoutEvent);
        }

        if (hitIsInLayer(hit)) {
          const mouseoutEvent = createLayerEvent('mouseout', {
            screenCoordinates,
            localCoordinates
          }, hit, nativeEvent);

          this._layerCallbacks[hit.layerId](mouseoutEvent);
        }
      }
    }

    class MousedownHandler extends MarkInteractionHandler {
      constructor (interactionManager) {
        super(interactionManager, {
          interactionName: 'mousedown',
          eventName: 'mousedown'
        });
      }

      _handleEvent (screenCoordinates, nativeEvent) {
        if (!coordinatesAreInsideSection(screenCoordinates, this.section())) {
          return
        }

        const spatialIndex = this._spatialIndex;
        const hits = spatialIndex.queryMouseCoordinates(screenCoordinates);
        const localCoordinates = getLocalCoordinates(screenCoordinates, this.interactionManager());

        for (let i = 0; i < hits.length; i++) {
          const hit = hits[i];

          if (hitIsMark(hit)) {
            const mousedownEvent = createMarkEvent('mousedown', {
              screenCoordinates,
              localCoordinates
            }, hit, nativeEvent);

            this._markCallbacks[hit.markId](mousedownEvent);
          }

          if (hitIsInLayer(hit)) {
            const mousedownEvent = createLayerEvent('mousedown', {
              screenCoordinates,
              localCoordinates
            }, hit, nativeEvent);

            this._layerCallbacks[hit.layerId](mousedownEvent);
          }
        }
      }
    }

    class MouseupHandler extends MarkInteractionHandler {
      constructor (interactionManager) {
        super(interactionManager, {
          interactionName: 'mouseup',
          eventName: 'mouseup'
        });
      }

      _handleEvent (screenCoordinates, nativeEvent) {
        if (!coordinatesAreInsideSection(screenCoordinates, this.section())) {
          return
        }

        const spatialIndex = this._spatialIndex;
        const hits = spatialIndex.queryMouseCoordinates(screenCoordinates);
        const localCoordinates = getLocalCoordinates(screenCoordinates, this.interactionManager());

        for (let i = 0; i < hits.length; i++) {
          const hit = hits[i];

          if (hitIsMark(hit)) {
            const mouseupEvent = createMarkEvent('mouseup', {
              screenCoordinates,
              localCoordinates
            }, hit, nativeEvent);

            this._markCallbacks[hit.markId](mouseupEvent);
          }

          if (hitIsInLayer(hit)) {
            const mouseupEvent = createLayerEvent('mouseup', {
              screenCoordinates,
              localCoordinates
            }, hit, nativeEvent);

            this._layerCallbacks[hit.layerId](mouseupEvent);
          }
        }
      }
    }

    class MousedragHandler extends MarkInteractionHandler {
      constructor (interactionManager) {
        super(interactionManager, {
          interactionName: 'mousedrag',
          eventName: ['mousedown', 'mousemove', 'mouseup']
        });

        this._currentHits = {};
      }

      _handleEvent (screenCoordinates, nativeEvent) {
        if (nativeEvent.eventName === 'mousedown') {
          this._handleMousedown(screenCoordinates, nativeEvent);
        }

        if (nativeEvent.eventName === 'mousemove') {
          this._handleMousemove(screenCoordinates, nativeEvent);
        }

        if (nativeEvent.eventName === 'mouseup') {
          this._handleMouseup(screenCoordinates, nativeEvent);
        }
      }

      _handleMousedown (screenCoordinates, nativeEvent) {
        if (!coordinatesAreInsideSection(screenCoordinates, this.section())) {
          return
        }

        const spatialIndex = this._spatialIndex;
        const hits = spatialIndex.queryMouseCoordinates(screenCoordinates);

        for (let i = 0; i < hits.length; i++) {
          const hit = hits[i];
          const hitId = getHitId(hit);

          this._currentHits[hitId] = hit;

          this._fireCallback(hit, screenCoordinates, nativeEvent, 'start');
        }
      }

      _handleMousemove (screenCoordinates, nativeEvent) {
        if (!coordinatesAreInsideSection(screenCoordinates, this.section())) {
          return
        }

        for (const hitId in this._currentHits) {
          const hit = this._currentHits[hitId];
          this._fireCallback(hit, screenCoordinates, nativeEvent, 'drag');
        }
      }

      _handleMouseup (screenCoordinates, nativeEvent) {
        for (const hitId in this._currentHits) {
          const hit = this._currentHits[hitId];
          this._fireCallback(hit, screenCoordinates, nativeEvent, 'end');
        }

        this._currentHits = {};
      }

      _fireCallback (hit, screenCoordinates, nativeEvent, dragType) {
        const localCoordinates = getLocalCoordinates(screenCoordinates, this.interactionManager());

        if (hitIsMark(hit)) {
          const mousedragEvent = createMarkEvent('mousedrag', {
            screenCoordinates,
            localCoordinates,
            dragType
          }, hit, nativeEvent);

          this._markCallbacks[hit.markId](mousedragEvent);
        }

        if (hitIsInLayer(hit)) {
          const mousedragEvent = createLayerEvent('mousedrag', {
            screenCoordinates,
            localCoordinates,
            dragType
          }, hit, nativeEvent);

          this._layerCallbacks[hit.layerId](mousedragEvent);
        }
      }
    }



    var MarkInteractionHandlers = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ClickHandler: ClickHandler,
        MouseoverHandler: MouseoverHandler,
        MouseoutHandler: MouseoutHandler,
        MousedownHandler: MousedownHandler,
        MouseupHandler: MouseupHandler,
        MousedragHandler: MousedragHandler
    });

    class SectionInteractionHandler extends BaseInteractionHandler {
      constructor (interactionManager, options) {
        super(interactionManager, options);
        this._callback = undefined;
      }

      addInteraction (callback) {
        this._addEventListener();
        this._callback = callback;
      }

      hasInteraction () {
        return this._callback !== undefined
      }

      removeInteraction () {
        if (this._callback) {
          this._callback = undefined;
          this._removeEventListener();
        }
      }

      getId () {
        return `${this.id()}-section-${this._interactionName}`
      }
    }

    // Taken from:
    // https://stackoverflow.com/a/37474225/7237112

    function getScrollLineHeight () {
      var r;
      var iframe = document.createElement('iframe');
      iframe.src = '#';
      document.body.appendChild(iframe);
      var iwin = iframe.contentWindow;
      var idoc = iwin.document;
      idoc.open();
      idoc.write('<!DOCTYPE html><html><head></head><body><span>a</span></body></html>');
      idoc.close();
      var span = idoc.body.firstElementChild;
      r = span.offsetHeight;
      document.body.removeChild(iframe);

      return r
    }

    class WheelHandler extends SectionInteractionHandler {
      constructor (interactionManager) {
        super(interactionManager, {
          interactionName: 'wheel',
          eventName: 'wheel'
        });
      }

      _handleEvent (screenCoordinates, nativeEvent) {
        nativeEvent.preventDefault();
        nativeEvent.stopPropagation();

        const interactionManager = this.interactionManager();
        const section = this.section();

        if (coordinatesAreInsideSection(screenCoordinates, section)) {
          const localCoordinates = getLocalCoordinates(screenCoordinates, interactionManager);
          const delta = getDelta(nativeEvent);

          const wheelEvent = createSectionEvent('wheel', {
            screenCoordinates,
            localCoordinates,
            delta
          }, nativeEvent);

          this._callback(wheelEvent);
        }
      }
    }

    let scrollLineHeight;

    function getDelta (nativeEvent) {
      let delta;

      // Legacy
      // IE pixels
      if ('wheelDelta' in nativeEvent && nativeEvent.wheelDelta !== 0) {
        delta = -nativeEvent.wheelDelta;
      }

      // Mozilla
      if ('detail' in nativeEvent && nativeEvent.detail !== 0) {
        delta = -nativeEvent.detail;
      }

      // Most other cases
      if ('deltaY' in nativeEvent && nativeEvent.deltaY !== 0) {
        delta = -nativeEvent.deltaY;
      }

      if (!scrollLineHeight) {
        scrollLineHeight = getScrollLineHeight();
      }

      return delta * (nativeEvent.deltaMode ? scrollLineHeight : 1) / 500
    }

    class ClickHandler$1 extends SectionInteractionHandler {
      constructor (interactionManager) {
        super(interactionManager, {
          interactionName: 'click',
          eventName: 'click'
        });
      }

      _handleEvent (screenCoordinates, nativeEvent) {
        const interactionManager = this.interactionManager();
        const section = this.section();

        if (coordinatesAreInsideSection(screenCoordinates, section)) {
          const localCoordinates = getLocalCoordinates(screenCoordinates, interactionManager);

          const clickEvent = createSectionEvent('click', {
            screenCoordinates,
            localCoordinates
          }, nativeEvent);

          this._callback(clickEvent);
        }
      }
    }

    class MousedownHandler$1 extends SectionInteractionHandler {
      constructor (interactionManager) {
        super(interactionManager, {
          interactionName: 'mousedown',
          eventName: 'mousedown'
        });
      }

      _handleEvent (screenCoordinates, nativeEvent) {
        const interactionManager = this.interactionManager();
        const section = this.section();

        if (coordinatesAreInsideSection(screenCoordinates, section)) {
          const localCoordinates = getLocalCoordinates(screenCoordinates, interactionManager);

          const mousedownEvent = createSectionEvent('mousedown', {
            screenCoordinates,
            localCoordinates
          }, nativeEvent);

          this._callback(mousedownEvent);
        }
      }
    }

    class MouseupHandler$1 extends SectionInteractionHandler {
      constructor (interactionManager) {
        super(interactionManager, {
          interactionName: 'mouseup',
          eventName: 'mouseup'
        });
      }

      _handleEvent (screenCoordinates, nativeEvent) {
        const interactionManager = this.interactionManager();
        const section = this.section();

        if (coordinatesAreInsideSection(screenCoordinates, section)) {
          const localCoordinates = getLocalCoordinates(screenCoordinates, interactionManager);

          const mouseupEvent = createSectionEvent('mouseup', {
            screenCoordinates,
            localCoordinates
          }, nativeEvent);

          this._callback(mouseupEvent);
        }
      }
    }

    class MouseoverHandler$1 extends SectionInteractionHandler {
      constructor (interactionManager) {
        super(interactionManager, {
          interactionName: 'mouseover',
          eventName: 'mousemove'
        });

        this._mouseCurrentlyOverSection = false;
      }

      _handleEvent (screenCoordinates, nativeEvent) {
        const interactionManager = this.interactionManager();
        const section = this.section();

        if (coordinatesAreInsideSection(screenCoordinates, section)) {
          if (!this._mouseCurrentlyOverSection) {
            const localCoordinates = getLocalCoordinates(screenCoordinates, interactionManager);

            const mousedownEvent = createSectionEvent('mouseover', {
              screenCoordinates,
              localCoordinates
            }, nativeEvent);

            this._callback(mousedownEvent);
            this._mouseCurrentlyOverSection = true;
          }
        } else {
          if (this._mouseCurrentlyOverSection) {
            this._mouseCurrentlyOverSection = false;
          }
        }
      }
    }

    class MouseoutHandler$1 extends SectionInteractionHandler {
      constructor (interactionManager) {
        super(interactionManager, {
          interactionName: 'mouseout',
          eventName: 'mousemove'
        });

        this._mouseCurrentlyOverSection = false;
      }

      _handleEvent (screenCoordinates, nativeEvent) {
        const interactionManager = this.interactionManager();
        const section = this.section();

        if (coordinatesAreInsideSection(screenCoordinates, section)) {
          if (!this._mouseCurrentlyOverSection) {
            this._mouseCurrentlyOverSection = true;
          }
        } else {
          if (this._mouseCurrentlyOverSection) {
            const localCoordinates = getLocalCoordinates(screenCoordinates, interactionManager);

            const mouseoutEvent = createSectionEvent('mouseout', {
              screenCoordinates,
              localCoordinates
            }, nativeEvent);

            this._callback(mouseoutEvent);
            this._mouseCurrentlyOverSection = false;
          }
        }
      }
    }

    class MousemoveHandler extends SectionInteractionHandler {
      constructor (interactionManager) {
        super(interactionManager, {
          interactionName: 'mouseover',
          eventName: 'mousemove'
        });
      }

      _handleEvent (screenCoordinates, nativeEvent) {
        const interactionManager = this.interactionManager();
        const section = this.section();

        if (coordinatesAreInsideSection(screenCoordinates, section)) {
          const localCoordinates = getLocalCoordinates(screenCoordinates, interactionManager);

          const mousemoveEvent = createSectionEvent('mousemove', {
            screenCoordinates,
            localCoordinates
          }, nativeEvent);

          this._callback(mousemoveEvent);
        }
      }
    }



    var SectionInteractionHandlers = /*#__PURE__*/Object.freeze({
        __proto__: null,
        WheelHandler: WheelHandler,
        ClickHandler: ClickHandler$1,
        MousedownHandler: MousedownHandler$1,
        MouseupHandler: MouseupHandler$1,
        MouseoverHandler: MouseoverHandler$1,
        MouseoutHandler: MouseoutHandler$1,
        MousemoveHandler: MousemoveHandler
    });

    class MouseInteractionManager extends BaseInteractionManager {
      constructor () {
        super();

        this._markInteractionInterface = new MarkInteractionInterface(this, MarkInteractionHandlers);
        this._sectionInteractionInterface = new SectionInteractionInterface(this, SectionInteractionHandlers);
      }
    }

    function numberOfTouches (screenCoordinates) {
      if (screenCoordinates.constructor === Object) return 1

      return screenCoordinates.length
    }

    class TouchdownHandler extends MarkInteractionHandler {
      constructor (interactionManager) {
        super(interactionManager, {
          interactionName: 'touchdown',
          eventName: 'touchstart'
        });
      }

      _handleEvent (screenCoordinates, nativeEvent) {
        if (numberOfTouches(screenCoordinates) !== 1) {
          return
        }

        const spatialIndex = this._spatialIndex;
        const hits = spatialIndex.queryMouseCoordinates(screenCoordinates);
        const localCoordinates = getLocalCoordinates(screenCoordinates, this.interactionManager());

        for (let i = 0; i < hits.length; i++) {
          const hit = hits[i];

          if (hitIsMark(hit)) {
            const touchdownEvent = createMarkEvent('touchdown', {
              screenCoordinates,
              localCoordinates
            }, hit, nativeEvent);

            this._markCallbacks[hit.markId](touchdownEvent);
          }

          if (hitIsInLayer(hit)) {
            const touchdownEvent = createLayerEvent('touchdown', {
              screenCoordinates,
              localCoordinates
            }, hit, nativeEvent);

            this._layerCallbacks[hit.layerId](touchdownEvent);
          }
        }
      }
    }

    class TouchupHandler extends MarkInteractionHandler {
      constructor (interactionManager) {
        super(interactionManager, {
          interactionName: 'touchup',
          eventName: ['touchend', 'touchcancel']
        });
      }

      _handleEvent (screenCoordinates, nativeEvent) {
        if (numberOfTouches(screenCoordinates) !== 1) {
          return
        }

        const spatialIndex = this._spatialIndex;
        const hits = spatialIndex.queryMouseCoordinates(screenCoordinates);
        const localCoordinates = getLocalCoordinates(screenCoordinates, this.interactionManager());

        for (let i = 0; i < hits.length; i++) {
          const hit = hits[i];

          if (hitIsMark(hit)) {
            const touchupEvent = createMarkEvent('touchup', {
              screenCoordinates,
              localCoordinates
            }, hit, nativeEvent);

            this._markCallbacks[hit.markId](touchupEvent);
          }

          if (hitIsInLayer(hit)) {
            const touchupEvent = createLayerEvent('touchup', {
              screenCoordinates,
              localCoordinates
            }, hit, nativeEvent);

            this._layerCallbacks[hit.layerId](touchupEvent);
          }
        }
      }
    }

    class TouchoverHandler extends MarkInteractionHandler {
      constructor (interactionManager) {
        super(interactionManager, {
          interactionName: 'touchover',
          eventName: ['touchstart', 'touchmove']
        });

        this._previousHits = {};
        this._currentHits = {};
      }

      _handleEvent (screenCoordinates, nativeEvent) {
        if (numberOfTouches(screenCoordinates) !== 1) {
          return
        }

        if (nativeEvent.eventName === 'touchstart') {
          this._handleTouchstart(screenCoordinates, nativeEvent);
        }

        if (nativeEvent.eventName === 'touchmove') {
          this._handleTouchmove(screenCoordinates, nativeEvent);
        }
      }

      _handleTouchstart (screenCoordinates, nativeEvent) {
        if (!coordinatesAreInsideSection(screenCoordinates, this.section())) {
          return
        }

        const spatialIndex = this._spatialIndex;
        const hits = spatialIndex.queryMouseCoordinates(screenCoordinates);

        for (let i = 0; i < hits.length; i++) {
          const hit = hits[i];
          const hitId = getHitId(hit);

          this._previousHits[hitId] = true;
        }
      }

      _handleTouchmove (screenCoordinates, nativeEvent) {
        if (!coordinatesAreInsideSection(screenCoordinates, this.section())) {
          return
        }

        const spatialIndex = this._spatialIndex;
        const hits = spatialIndex.queryMouseCoordinates(screenCoordinates);

        for (let i = 0; i < hits.length; i++) {
          const hit = hits[i];
          const hitId = getHitId(hit);

          this._currentHits[hitId] = true;

          if (!(hitId in this._previousHits)) {
            this._fireCallback(hit, screenCoordinates, nativeEvent);
          }
        }

        this._previousHits = this._currentHits;
        this._currentHits = {};
      }

      _fireCallback (hit, screenCoordinates, nativeEvent) {
        const localCoordinates = getLocalCoordinates(screenCoordinates, this.interactionManager());

        if (hitIsMark(hit)) {
          const touchoverEvent = createMarkEvent('touchover', {
            screenCoordinates,
            localCoordinates
          }, hit, nativeEvent);

          this._markCallbacks[hit.markId](touchoverEvent);
        }

        if (hitIsInLayer(hit)) {
          const touchoverEvent = createLayerEvent('touchover', {
            screenCoordinates,
            localCoordinates
          }, hit, nativeEvent);

          this._layerCallbacks[hit.layerId](touchoverEvent);
        }
      }
    }

    class TouchoutHandler extends MarkInteractionHandler {
      constructor (interactionManager) {
        super(interactionManager, {
          interactionName: 'touchout',
          eventName: ['touchstart', 'touchmove', 'touchend']
        });

        this._previousHits = {};
        this._currentHits = {};
      }

      _handleEvent (screenCoordinates, nativeEvent) {
        if (numberOfTouches(screenCoordinates) !== 1) {
          return
        }

        if (nativeEvent.eventName === 'touchstart') {
          this._handleTouchstart(screenCoordinates, nativeEvent);
        }

        if (nativeEvent.eventName === 'touchmove') {
          this._handleTouchmove(screenCoordinates, nativeEvent);
        }

        if (nativeEvent.eventName === 'touchend') {
          this._handleTouchend();
        }
      }

      _handleTouchstart (screenCoordinates, nativeEvent) {
        if (!coordinatesAreInsideSection(screenCoordinates, this.section())) {
          return
        }

        const spatialIndex = this._spatialIndex;
        const hits = spatialIndex.queryMouseCoordinates(screenCoordinates);

        for (let i = 0; i < hits.length; i++) {
          const hit = hits[i];
          const hitId = getHitId(hit);

          this._previousHits[hitId] = hit;
        }
      }

      _handleTouchmove (screenCoordinates, nativeEvent) {
        if (!coordinatesAreInsideSection(screenCoordinates, this.section())) {
          return
        }

        const spatialIndex = this._spatialIndex;
        const hits = spatialIndex.queryMouseCoordinates(screenCoordinates);

        for (let i = 0; i < hits.length; i++) {
          const hit = hits[i];
          const hitId = getHitId(hit);

          this._currentHits[hitId] = hit;
        }

        for (const hitId in this._previousHits) {
          if (!(hitId in this._currentHits)) {
            const hit = this._previousHits[hitId];
            this._fireCallback(hit, screenCoordinates, nativeEvent);
          }
        }

        this._previousHits = this._currentHits;
        this._currentHits = {};
      }

      _handleTouchend () {
        this._previousHits = {};
        this._currentHits = {};
      }

      _fireCallback (hit, screenCoordinates, nativeEvent) {
        const localCoordinates = getLocalCoordinates(screenCoordinates, this.interactionManager());

        if (hitIsMark(hit)) {
          const touchoutEvent = createMarkEvent('touchout', {
            screenCoordinates,
            localCoordinates
          }, hit, nativeEvent);

          this._markCallbacks[hit.markId](touchoutEvent);
        }

        if (hitIsInLayer(hit)) {
          const touchoutEvent = createLayerEvent('touchout', {
            screenCoordinates,
            localCoordinates
          }, hit, nativeEvent);

          this._layerCallbacks[hit.layerId](touchoutEvent);
        }
      }
    }

    class TouchdragHandler extends MarkInteractionHandler {
      constructor (interactionManager) {
        super(interactionManager, {
          interactionName: 'touchdrag',
          eventName: ['touchstart', 'touchmove', 'touchend']
        });

        this._currentHits = {};
      }

      _handleEvent (screenCoordinates, nativeEvent) {
        if (numberOfTouches(screenCoordinates) !== 1) {
          return
        }

        if (nativeEvent.eventName === 'touchstart') {
          this._handleTouchstart(screenCoordinates, nativeEvent);
        }

        if (nativeEvent.eventName === 'touchmove') {
          this._handleTouchmove(screenCoordinates, nativeEvent);
        }

        if (nativeEvent.eventName === 'touchend') {
          this._handleTouchend(screenCoordinates, nativeEvent);
        }
      }

      _handleTouchstart (screenCoordinates, nativeEvent) {
        if (!coordinatesAreInsideSection(screenCoordinates, this.section())) {
          return
        }

        const spatialIndex = this._spatialIndex;
        const hits = spatialIndex.queryMouseCoordinates(screenCoordinates);

        for (let i = 0; i < hits.length; i++) {
          const hit = hits[i];
          const hitId = getHitId(hit);

          this._currentHits[hitId] = hit;

          this._fireCallback(hit, screenCoordinates, nativeEvent, 'start');
        }
      }

      _handleTouchmove (screenCoordinates, nativeEvent) {
        if (!coordinatesAreInsideSection(screenCoordinates, this.section())) {
          return
        }

        for (const hitId in this._currentHits) {
          const hit = this._currentHits[hitId];
          this._fireCallback(hit, screenCoordinates, nativeEvent, 'drag');
        }
      }

      _handleTouchend (screenCoordinates, nativeEvent) {
        for (const hitId in this._currentHits) {
          const hit = this._currentHits[hitId];
          this._fireCallback(hit, screenCoordinates, nativeEvent, 'end');
        }

        this._currentHits = {};
      }

      _fireCallback (hit, screenCoordinates, nativeEvent, dragType) {
        const localCoordinates = getLocalCoordinates(screenCoordinates, this.interactionManager());

        if (hitIsMark(hit)) {
          const touchdragEvent = createMarkEvent('touchdrag', {
            screenCoordinates,
            localCoordinates,
            dragType
          }, hit, nativeEvent);

          this._markCallbacks[hit.markId](touchdragEvent);
        }

        if (hitIsInLayer(hit)) {
          const touchdragEvent = createLayerEvent('touchdrag', {
            screenCoordinates,
            localCoordinates,
            dragType
          }, hit, nativeEvent);

          this._layerCallbacks[hit.layerId](touchdragEvent);
        }
      }
    }



    var MarkInteractionHandlers$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        TouchdownHandler: TouchdownHandler,
        TouchupHandler: TouchupHandler,
        TouchoverHandler: TouchoverHandler,
        TouchoutHandler: TouchoutHandler,
        TouchdragHandler: TouchdragHandler
    });

    class TouchdownHandler$1 extends SectionInteractionHandler {
      constructor (interactionManager) {
        super(interactionManager, {
          interactionName: 'touchdown',
          eventName: 'touchstart'
        });
      }

      _handleEvent (screenCoordinates, nativeEvent) {
        if (numberOfTouches(screenCoordinates) !== 1) {
          return
        }

        const interactionManager = this.interactionManager();
        const section = this.section();

        if (coordinatesAreInsideSection(screenCoordinates, section)) {
          const localCoordinates = getLocalCoordinates(screenCoordinates, interactionManager);

          const touchdownEvent = createSectionEvent('touchdown', {
            screenCoordinates,
            localCoordinates
          }, nativeEvent);

          this._callback(touchdownEvent);
        }
      }
    }

    class TouchmoveHandler extends SectionInteractionHandler {
      constructor (interactionManager) {
        super(interactionManager, {
          interactionName: 'touchmove',
          eventName: 'touchmove'
        });
      }

      _handleEvent (screenCoordinates, nativeEvent) {
        if (numberOfTouches(screenCoordinates) !== 1) {
          return
        }

        const interactionManager = this.interactionManager();
        const section = this.section();

        if (coordinatesAreInsideSection(screenCoordinates, section)) {
          const localCoordinates = getLocalCoordinates(screenCoordinates, interactionManager);

          const touchmoveEvent = createSectionEvent('touchmove', {
            screenCoordinates,
            localCoordinates
          }, nativeEvent);

          this._callback(touchmoveEvent);
        }
      }
    }

    class TouchupHandler$1 extends SectionInteractionHandler {
      constructor (interactionManager) {
        super(interactionManager, {
          interactionName: 'touchup',
          eventName: ['touchend', 'touchcancel']
        });
      }

      _handleEvent (screenCoordinates, nativeEvent) {
        if (numberOfTouches(screenCoordinates) !== 1) {
          return
        }

        const interactionManager = this.interactionManager();
        const section = this.section();

        if (coordinatesAreInsideSection(screenCoordinates, section)) {
          const localCoordinates = getLocalCoordinates(screenCoordinates, interactionManager);

          const touchupEvent = createSectionEvent('touchup', {
            screenCoordinates,
            localCoordinates
          }, nativeEvent);

          this._callback(touchupEvent);
        }
      }
    }

    class TouchoverHandler$1 extends SectionInteractionHandler {
      constructor (interactionManager) {
        super(interactionManager, {
          interactionName: 'touchover',
          eventName: ['touchstart', 'touchmove']
        });

        this._fingerCurrentlyOverSection = false;
      }

      _handleEvent (screenCoordinates, nativeEvent) {
        if (numberOfTouches(screenCoordinates) !== 1) {
          return
        }

        if (nativeEvent.eventName === 'touchstart') {
          this._handleTouchstart(screenCoordinates, nativeEvent);
        }

        if (nativeEvent.eventName === 'touchmove') {
          this._handleTouchmove(screenCoordinates, nativeEvent);
        }
      }

      _handleTouchstart (screenCoordinates, nativeEvent) {
        const section = this.section();

        if (coordinatesAreInsideSection(screenCoordinates, section)) {
          this._fingerCurrentlyOverSection = true;
        }
      }

      _handleTouchmove (screenCoordinates, nativeEvent) {
        const interactionManager = this.interactionManager();
        const section = this.section();

        if (coordinatesAreInsideSection(screenCoordinates, section)) {
          if (!this._fingerCurrentlyOverSection) {
            const localCoordinates = getLocalCoordinates(screenCoordinates, interactionManager);

            const touchoverEvent = createSectionEvent('touchover', {
              screenCoordinates,
              localCoordinates
            }, nativeEvent);

            this._callback(touchoverEvent);
            this._fingerCurrentlyOverSection = true;
          }
        } else {
          if (this._fingerCurrentlyOverSection) {
            this._fingerCurrentlyOverSection = false;
          }
        }
      }
    }

    class TouchoutHandler$1 extends SectionInteractionHandler {
      constructor (interactionManager) {
        super(interactionManager, {
          interactionName: 'touchout',
          eventName: ['touchstart', 'touchmove', 'touchend']
        });

        this._fingerCurrentlyOverSection = false;
      }

      _handleEvent (screenCoordinates, nativeEvent) {
        if (numberOfTouches(screenCoordinates) !== 1) {
          return
        }

        if (nativeEvent.eventName === 'touchstart') {
          this._handleTouchstart(screenCoordinates, nativeEvent);
        }

        if (nativeEvent.eventName === 'touchmove') {
          this._handleTouchmove(screenCoordinates, nativeEvent);
        }

        if (nativeEvent.eventName === 'touchend') {
          this._handleTouchend();
        }
      }

      _handleTouchstart (screenCoordinates, nativeEvent) {
        const section = this.section();

        if (coordinatesAreInsideSection(screenCoordinates, section)) {
          this._fingerCurrentlyOverSection = true;
        }
      }

      _handleTouchmove (screenCoordinates, nativeEvent) {
        const interactionManager = this.interactionManager();
        const section = this.section();

        if (coordinatesAreInsideSection(screenCoordinates, section)) {
          if (!this._fingerCurrentlyOverSection) {
            this._fingerCurrentlyOverSection = true;
          }
        } else {
          if (this._fingerCurrentlyOverSection) {
            const localCoordinates = getLocalCoordinates(screenCoordinates, interactionManager);

            const touchoutEvent = createSectionEvent('touchout', {
              screenCoordinates,
              localCoordinates
            }, nativeEvent);

            this._callback(touchoutEvent);
            this._fingerCurrentlyOverSection = false;
          }
        }
      }

      _handleTouchend () {
        this._fingerCurrentlyOverSection = false;
      }
    }

    class PinchHandler extends SectionInteractionHandler {
      constructor (interactionManager) {
        super(interactionManager, {
          interactionName: 'pinch',
          eventName: ['touchstart', 'touchmove', 'touchend']
        });

        this._previousTouchDistance = undefined;
      }

      _handleEvent (screenCoordinatesArray, nativeEvent) {
        if (nativeEvent.type === 'touchstart') {
          this._handleTouchstart(screenCoordinatesArray, nativeEvent);
        }

        if (nativeEvent.type === 'touchmove') {
          this._handleTouchmove(screenCoordinatesArray, nativeEvent);
        }

        if (nativeEvent.type === 'touchend') {
          this._handleTouchend(screenCoordinatesArray, nativeEvent);
        }
      }

      _handleTouchstart (screenCoordinatesArray, nativeEvent) {
        if (numberOfTouches(screenCoordinatesArray) !== 2) {
          return
        }

        const section = this.section();

        if (allCoordinatesAreInsideSection(screenCoordinatesArray, section)) {
          this._previousTouchDistance = getDistance(screenCoordinatesArray);
        }
      }

      _handleTouchmove (screenCoordinatesArray, nativeEvent) {
        if (numberOfTouches(screenCoordinatesArray) !== 2) {
          return
        }

        if (this._previousTouchDistance === undefined) return

        const section = this.section();

        if (allCoordinatesAreInsideSection(screenCoordinatesArray, section)) {
          const sectionHeight = section.maxY - section.minY;

          const center = getCenter(screenCoordinatesArray);

          const touchDistance = getDistance(screenCoordinatesArray);
          const touchDelta = this._previousTouchDistance - touchDistance;
          const relativeTouchDelta = touchDelta / sectionHeight;

          this._previousTouchDistance = touchDistance;
          this._fireCallback(screenCoordinatesArray, nativeEvent, relativeTouchDelta, center);
        }
      }

      _handleTouchend (screenCoordinatesArray, nativeEvent) {
        this._previousTouchDistance = undefined;
      }

      _fireCallback (screenCoordinatesArray, nativeEvent, delta, center) {
        const screenCenter = center;
        const localCenter = getLocalCoordinates(screenCenter, this.interactionManager());
        const screenCoordinates = screenCoordinatesArray;
        const localCoordinates = screenCoordinatesArray.map(screenCoordinates => {
          return getLocalCoordinates(screenCoordinates, this.interactionManager())
        });

        const pinchEvent = createSectionEvent('pinch', {
          screenCenter,
          localCenter,
          screenCoordinates,
          localCoordinates,
          delta
        }, nativeEvent);

        this._callback(pinchEvent);
      }
    }

    function allCoordinatesAreInsideSection (screenCoordinatesArray, section) {
      return screenCoordinatesArray.every(screenCoordinates => {
        return coordinatesAreInsideSection(screenCoordinates, section)
      })
    }

    function getDistance (screenCoordinatesArray) {
      const [coords1, coords2] = screenCoordinatesArray;
      return Math.sqrt((coords2.x - coords1.x) ** 2 + (coords2.y - coords1.y) ** 2)
    }

    function getCenter (screenCoordinatesArray) {
      const [coords1, coords2] = screenCoordinatesArray;
      return { x: (coords2.x + coords1.x) / 2, y: (coords2.y + coords1.y) / 2 }
    }



    var SectionInteractionHandlers$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        TouchdownHandler: TouchdownHandler$1,
        TouchmoveHandler: TouchmoveHandler,
        TouchupHandler: TouchupHandler$1,
        TouchoverHandler: TouchoverHandler$1,
        TouchoutHandler: TouchoutHandler$1,
        PinchHandler: PinchHandler
    });

    class TouchInteractionManager extends BaseInteractionManager {
      constructor () {
        super();

        this._markInteractionInterface = new MarkInteractionInterface(this, MarkInteractionHandlers$1);
        this._sectionInteractionInterface = new SectionInteractionInterface(this, SectionInteractionHandlers$1);
      }
    }

    function bboxPoint (point) {
      return {
        x: [point[0], point[0]],
        y: [point[1], point[1]]
      }
    }

    function indexPoint$1 (markData) {
      const pointAttributes = markData.attributes;

      const bbox = bboxPoint(pointAttributes.pixelGeometry.coordinates);
      const item = createItemFromBbox(bbox);

      item.attributes = pointAttributes;
      item.markType = 'Point';
      item.markId = markData.markId;

      return item
    }

    function indexPointLayer$1 ({ layerAttributes, keyArray, layerId }) {
      const items = [];

      for (let i = 0; i < keyArray.length; i++) {
        const key = keyArray[i];

        const pointAttributes = getPointAttributes$1(layerAttributes, key);
        const bbox = bboxPoint(pointAttributes.pixelGeometry.coordinates);
        const item = createItemFromBbox(bbox);

        item.key = key;
        item.index = i;
        item.attributes = pointAttributes;
        item.markType = 'Point';
        item.layerId = layerId;

        items.push(item);
      }

      return items
    }

    function getPointAttributes$1 (layerAttributes, key) {
      return {
        pixelGeometry: layerAttributes.pixelGeometryObject[key],
        radius: layerAttributes.radiusObject[key]
      }
    }

    function indexRectangle$1 (markData) {
      const rectangleAttributes = markData.attributes;

      const centroid = calculateCentroid(rectangleAttributes.screenGeometry);
      const bbox = bboxPoint(centroid);
      const item = createItemFromBbox(bbox);

      item.attributes = rectangleAttributes;
      item.markType = 'Rectangle';
      item.markId = markData.markId;

      return item
    }

    function indexRectangleLayer$1 ({ layerAttributes, keyArray, layerId }) {
      const items = [];

      for (let i = 0; i < keyArray.length; i++) {
        const key = keyArray[i];

        const rectangleAttributes = getRectangleAttributes$1(layerAttributes, key);

        const centroid = calculateCentroid(rectangleAttributes.screenGeometry);
        const bbox = bboxPoint(centroid);
        const item = createItemFromBbox(bbox);

        item.key = key;
        item.index = i;
        item.attributes = rectangleAttributes;
        item.markType = 'Rectangle';
        item.layerId = layerId;

        items.push(item);
      }

      return items
    }

    function getRectangleAttributes$1 (layerAttributes, key) {
      return { screenGeometry: layerAttributes.screenGeometryObject[key] }
    }

    function indexPolygon$1 (markData) {
      const polygonAttributes = markData.attributes;

      const centroid = calculateCentroid(polygonAttributes.screenGeometry);
      const bbox = bboxPoint(centroid);
      const item = createItemFromBbox(bbox);

      item.attributes = polygonAttributes;
      item.markType = 'Polygon';
      item.markId = markData.markId;

      return item
    }

    function indexPolygonLayer$1 ({ layerAttributes, keyArray, layerId }) {
      const items = [];

      for (let i = 0; i < keyArray.length; i++) {
        const key = keyArray[i];

        const polygonAttributes = getPolygonAttributes$1(layerAttributes, key);

        const centroid = calculateCentroid(polygonAttributes.screenGeometry);
        const bbox = bboxPoint(centroid);
        const item = createItemFromBbox(bbox);

        item.key = key;
        item.index = i;
        item.attributes = polygonAttributes;
        item.markType = 'Polygon';
        item.layerId = layerId;

        items.push(item);
      }

      return items
    }

    function getPolygonAttributes$1 (layerAttributes, key) {
      return { screenGeometry: layerAttributes.screenGeometryObject[key] }
    }

    function indexLine$1 (markData) {
      const lineAttributes = markData.attributes;

      const centroid = calculateCentroid(lineAttributes.pixelGeometry);
      const bbox = bboxPoint(centroid);
      const item = createItemFromBbox(bbox);

      item.attributes = lineAttributes;
      item.markType = 'Line';
      item.markId = markData.markId;

      return item
    }

    function indexLineLayer$1 ({ layerAttributes, keyArray, layerId }) {
      const items = [];

      for (let i = 0; i < keyArray.length; i++) {
        const key = keyArray[i];

        const lineAttributes = getLineAttributes(layerAttributes, key);

        const centroid = calculateCentroid(lineAttributes.screenGeometry);
        const bbox = bboxPoint(centroid);
        const item = createItemFromBbox(bbox);

        item.key = key;
        item.index = i;
        item.attributes = lineAttributes;
        item.markType = 'Line';
        item.layerId = layerId;

        items.push(item);
      }

      return items
    }

    function getLineAttributes (layerAttributes, key) {
      return { screenGeometry: layerAttributes.pixelGeometryObject[key] }
    }

    function indexArea$1 (markData) {
      const areaAttributes = markData.attributes;

      const centroid = calculateCentroid(areaAttributes.screenGeometry);
      const bbox = bboxPoint(centroid);
      const item = createItemFromBbox(bbox);

      item.attributes = areaAttributes;
      item.markType = 'Area';
      item.markId = markData.markId;

      return item
    }

    function indexAreaLayer$1 ({ layerAttributes, keyArray, layerId }) {
      const items = [];

      for (let i = 0; i < keyArray.length; i++) {
        const key = keyArray[i];

        const areaAttributes = getAreaAttributes$1(layerAttributes, key);

        const centroid = calculateCentroid(areaAttributes.screenGeometry);
        const bbox = bboxPoint(centroid);
        const item = createItemFromBbox(bbox);

        item.key = key;
        item.index = i;
        item.attributes = areaAttributes;
        item.markType = 'Area';
        item.layerId = layerId;

        items.push(item);
      }

      return items
    }

    function getAreaAttributes$1 (layerAttributes, key) {
      return { screenGeometry: layerAttributes.screenGeometryObject[key] }
    }

    const markIndexing$1 = {
      Point: indexPoint$1,
      Rectangle: indexRectangle$1,
      Polygon: indexPolygon$1,
      Line: indexLine$1,
      Label: indexPoint$1,
      Area: indexArea$1
    };

    const layerIndexing$1 = {
      Point: indexPointLayer$1,
      Rectangle: indexRectangleLayer$1,
      Polygon: indexPolygonLayer$1,
      Line: indexLineLayer$1,
      Label: indexPointLayer$1,
      Area: indexAreaLayer$1
    };

    class SelectManager {
      constructor () {
        this._selectableMarks = {};
        this._selectableLayers = {};

        this._markCallbacks = {};
        this._layerCallbacks = {};

        this._previousSelection = {};
        this._currentSelection = {};

        const getMark = function (markId) {
          return this._selectableMarks[markId]
        };

        const getLayer = function (layerId) {
          return this._selectableLayers[layerId]
        };

        this._spatialIndex = new SpatialIndex(this, getMark, getLayer);

        this._selectPolygon = { start: undefined, points: [] };
      }

      // Loading/indexing
      loadMark (markType, markData, callbacks) {
        const indexingFunction = markIndexing$1[markType];
        const indexableMark = indexingFunction(markData);

        const markId = markData.markId;

        this._selectableMarks[markId] = indexableMark;
        this._markCallbacks[markId] = callbacks;

        this._spatialIndex.indexMark(markId);
      }

      markIsLoaded (markId) {
        return markId in this._selectableMarks
      }

      removeMark (markId) {
        this._spatialIndex.unindexMark(markId);

        delete this._selectableMarks[markId];
        delete this._markCallbacks[markId];
      }

      loadLayer (layerType, layerData, callbacks) {
        const indexingFunction = layerIndexing$1[layerType];
        const indexableLayer = indexingFunction(layerData);

        const layerId = layerData.layerId;

        this._selectableLayers[layerId] = indexableLayer;
        this._layerCallbacks[layerId] = callbacks;

        this._spatialIndex.indexLayer(layerId);
      }

      layerIsLoaded (layerId) {
        return layerId in this._selectableLayers
      }

      removeLayer (layerId) {
        this._spatialIndex.unindexLayer(layerId);

        delete this._selectableLayers[layerId];
        delete this._layerCallbacks[layerId];
      }

      // Rectangle
      selectRectangle (rectangle) {
        const hits = this._spatialIndex.queryBoundingBox(rectangleToRBushBbox(rectangle));

        for (let i = 0; i < hits.length; i++) {
          const hit = hits[i];
          const hitId = getHitId(hit);

          this._currentSelection[hitId] = hit;

          this._fireSelectCallback(hit);
        }
      }

      updateSelectRectangle (rectangle) {
        this._previousSelection = this._currentSelection;
        this._currentSelection = {};

        const hits = this._spatialIndex.queryBoundingBox(rectangleToRBushBbox(rectangle));

        for (let i = 0; i < hits.length; i++) {
          const hit = hits[i];
          const hitId = getHitId(hit);

          this._currentSelection[hitId] = hit;

          if (!(hitId in this._previousSelection)) {
            this._fireSelectCallback(hit);
          }
        }

        for (const hitId in this._previousSelection) {
          if (!(hitId in this._currentSelection)) {
            const hit = this._previousSelection[hitId];

            this._fireDeselectCallback(hit);
          }
        }
      }

      resetSelectRectangle () {
        for (const hitId in this._currentSelection) {
          const hit = this._currentSelection[hitId];

          this._fireDeselectCallback(hit);
        }

        this._previousSelection = {};
        this._currentSelection = {};
      }

      // Polygon
      startSelectPolygon (startCoordinates) {
        this._selectPolygon.start = parseCoordinates(startCoordinates);
      }

      addPointToSelectPolygon (coordinates) {
        this._selectPolygon.points.push(parseCoordinates(coordinates));

        if (this._selectPolygon.points.length > 1) {
          const lastThreePointsPolygon = this._getLastThreePointsPolygon();
          const bbox = calculateBboxGeometry(lastThreePointsPolygon);

          const hits = this._spatialIndex.queryBoundingBox(bboxToRBushBbox(bbox));

          for (let i = 0; i < hits.length; i++) {
            const hit = hits[i];
            const hitCentroid = [hit.minX, hit.minY];

            if (pointInPolygon(hitCentroid, lastThreePointsPolygon)) {
              const hitId = getHitId(hit);

              if (hitId in this._currentSelection) {
                this._fireDeselectCallback(hit);
                delete this._currentSelection[hitId];
              } else {
                this._fireSelectCallback(hit);
                this._currentSelection[hitId] = hit;
              }
            }
          }
        }
      }

      moveSelectPolygon (_delta) {
        this._previousSelection = this._currentSelection;
        this._currentSelection = {};

        const delta = parseCoordinates(_delta);

        const start = this._selectPolygon.start;
        const points = this._selectPolygon.points;

        this._selectPolygon.start = [start[0] + delta[0], start[1] + delta[1]];
        this._selectPolygon.points = points.map(point => [point[0] + delta[0], point[1] + delta[1]]);

        const polygon = this.getSelectPolygon();
        const bbox = calculateBboxGeometry(polygon);

        const hits = this._spatialIndex.queryBoundingBox(bboxToRBushBbox(bbox));

        for (let i = 0; i < hits.length; i++) {
          const hit = hits[i];
          const hitCentroid = [hit.minX, hit.minY];

          if (pointInPolygon(hitCentroid, polygon)) {
            const hitId = getHitId(hit);

            this._currentSelection[hitId] = hit;

            if (!(hitId in this._previousSelection)) {
              this._fireSelectCallback(hit);
            }
          }
        }

        for (const hitId in this._previousSelection) {
          if (!(hitId in this._currentSelection)) {
            const hit = this._previousSelection[hitId];

            this._fireDeselectCallback(hit);
          }
        }
      }

      getSelectPolygon () {
        if (this._selectPolygon.start) {
          return {
            type: 'Polygon',
            coordinates: [[
              this._selectPolygon.start,
              ...this._selectPolygon.points,
              this._selectPolygon.start
            ]]
          }
        }
      }

      resetSelectPolygon () {
        for (const hitId in this._currentSelection) {
          const hit = this._currentSelection[hitId];

          this._fireDeselectCallback(hit);
        }

        this._selectPolygon = { start: undefined, points: [] };
        this._currentSelection = {};
      }

      _fireSelectCallback (hit) {
        if (hitIsMark(hit)) {
          const selectEvent = createSelectMarkEvent('select', hit);
          const callback = this._markCallbacks[hit.markId].onSelect;

          if (callback) callback(selectEvent);
        }

        if (hitIsInLayer(hit)) {
          const selectEvent = createSelectLayerEvent('select', hit);
          const callback = this._layerCallbacks[hit.layerId].onSelect;

          if (callback) callback(selectEvent);
        }
      }

      _fireDeselectCallback (hit) {
        if (hitIsMark(hit)) {
          const deselectEvent = createSelectMarkEvent('deselect', hit);
          const callback = this._markCallbacks[hit.markId].onDeselect;

          if (callback) callback(deselectEvent);
        }

        if (hitIsInLayer(hit)) {
          const deselectEvent = createSelectLayerEvent('deselect', hit);
          const callback = this._layerCallbacks[hit.layerId].onDeselect;

          if (callback) callback(deselectEvent);
        }
      }

      _getLastThreePointsPolygon () {
        const points = this._selectPolygon.points;
        const lastPointIndex = points.length - 1;
        const start = this._selectPolygon.start;

        return {
          type: 'Polygon',
          coordinates: [
            [start, points[lastPointIndex - 1], points[lastPointIndex], start]
          ]
        }
      }
    }

    function rectangleToRBushBbox (rectangle) {
      return {
        minX: Math.min(rectangle.x1, rectangle.x2),
        maxX: Math.max(rectangle.x1, rectangle.x2),
        minY: Math.min(rectangle.y1, rectangle.y2),
        maxY: Math.max(rectangle.y1, rectangle.y2)
      }
    }

    function parseCoordinates (coordinates) {
      if (is2dArray(coordinates)) return coordinates
      if (isXYObject(coordinates)) return [coordinates.x, coordinates.y]

      throw new Error(`Invalid input: ${coordinates}`)
    }

    function is2dArray (coordinates) {
      return coordinates.constructor === Array &&
        coordinates.length === 2 &&
        coordinates.every(c => c && c.constructor === Number)
    }

    function isXYObject (coordinates) {
      return 'x' in coordinates && 'y' in coordinates &&
        coordinates.x.constructor === Number &&
        coordinates.y.constructor === Number
    }

    function bboxToRBushBbox (bbox) {
      return {
        minX: Math.min(...bbox.x),
        maxX: Math.max(...bbox.x),
        minY: Math.min(...bbox.y),
        maxY: Math.max(...bbox.y)
      }
    }

    class InteractionManager {
      constructor () {
        if (detectIt.hasMouse) {
          this._mouseInteractionManager = new MouseInteractionManager();
        }

        if (detectIt.hasTouch) {
          this._touchInteractionManager = new TouchInteractionManager();
        }

        this._selectManager = new SelectManager();
      }

      // Initialization
      setId (id) {
        this._forEachManager(manager => { manager.setId(id); });
      }

      linkEventManager (eventManager) {
        if (this._mouseInteractionManager) {
          this._mouseInteractionManager.linkEventManager(eventManager.mouse());
        }

        if (this._touchInteractionManager) {
          this._touchInteractionManager.linkEventManager(eventManager.touch());
        }
      }

      // Section context loading
      loadSection (sectionContext) {
        this._forEachManager(manager => { manager.loadSection(sectionContext); });
      }

      mouse () {
        return this._mouseInteractionManager
      }

      touch () {
        return this._touchInteractionManager
      }

      select () {
        return this._selectManager
      }

      _forEachManager (callback) {
        if (this._mouseInteractionManager) callback(this._mouseInteractionManager);
        if (this._touchInteractionManager) callback(this._touchInteractionManager);
      }
    }

    function getClipPropsNoPadding ({ x1, x2, y1, y2 }) {
      return {
        x: Math.min(x1, x2),
        y: Math.min(y1, y2),
        width: Math.abs(x1 - x2),
        height: Math.abs(y1 - y2)
      }
    }

    function getClipPropsPadding ({ x1, x2, y1, y2 }, padding) {
      const { left, right, top, bottom } = parsePadding(padding);

      return {
        x: Math.min(x1, x2) + left,
        y: Math.min(y1, y2) + top,
        width: Math.abs(x1 - x2) - (left + right),
        height: Math.abs(y1 - y2) - (top + bottom)
      }
    }

    /* node_modules/@snlab/florence/src/components/Core/Graphic/Graphic.svelte generated by Svelte v3.21.0 */

    const file = "node_modules/@snlab/florence/src/components/Core/Graphic/Graphic.svelte";

    // (132:2) {#if backgroundColor}
    function create_if_block_1(ctx) {
    	let rect;

    	let rect_levels = [
    		{ class: "content-background" },
    		/*clipPropsPadding*/ ctx[7],
    		{ fill: /*backgroundColor*/ ctx[4] }
    	];

    	let rect_data = {};

    	for (let i = 0; i < rect_levels.length; i += 1) {
    		rect_data = assign(rect_data, rect_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			rect = svg_element("rect");
    			set_svg_attributes(rect, rect_data);
    			add_location(rect, file, 132, 4, 3723);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, rect, anchor);
    		},
    		p: function update(ctx, dirty) {
    			set_svg_attributes(rect, get_spread_update(rect_levels, [
    				{ class: "content-background" },
    				dirty[0] & /*clipPropsPadding*/ 128 && /*clipPropsPadding*/ ctx[7],
    				dirty[0] & /*backgroundColor*/ 16 && { fill: /*backgroundColor*/ ctx[4] }
    			]));
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(rect);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1.name,
    		type: "if",
    		source: "(132:2) {#if backgroundColor}",
    		ctx
    	});

    	return block;
    }

    // (140:2) {#if paddingColor}
    function create_if_block(ctx) {
    	let rect;

    	let rect_levels = [
    		{ class: "padding-background" },
    		{
    			mask: `url(#${/*graphicId*/ ctx[9]}-mask-padding-bg)`
    		},
    		/*clipPropsNoPadding*/ ctx[8],
    		{ fill: /*paddingColor*/ ctx[5] }
    	];

    	let rect_data = {};

    	for (let i = 0; i < rect_levels.length; i += 1) {
    		rect_data = assign(rect_data, rect_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			rect = svg_element("rect");
    			set_svg_attributes(rect, rect_data);
    			add_location(rect, file, 140, 4, 3861);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, rect, anchor);
    		},
    		p: function update(ctx, dirty) {
    			set_svg_attributes(rect, get_spread_update(rect_levels, [
    				{ class: "padding-background" },
    				dirty[0] & /*graphicId*/ 512 && {
    					mask: `url(#${/*graphicId*/ ctx[9]}-mask-padding-bg)`
    				},
    				dirty[0] & /*clipPropsNoPadding*/ 256 && /*clipPropsNoPadding*/ ctx[8],
    				dirty[0] & /*paddingColor*/ 32 && { fill: /*paddingColor*/ ctx[5] }
    			]));
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(rect);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block.name,
    		type: "if",
    		source: "(140:2) {#if paddingColor}",
    		ctx
    	});

    	return block;
    }

    function create_fragment(ctx) {
    	let svg;
    	let defs;
    	let mask;
    	let rect0;
    	let rect1;
    	let mask_id_value;
    	let if_block0_anchor;
    	let if_block1_anchor;
    	let current;
    	let rect0_levels = [/*clipPropsNoPadding*/ ctx[8], { fill: "white" }];
    	let rect0_data = {};

    	for (let i = 0; i < rect0_levels.length; i += 1) {
    		rect0_data = assign(rect0_data, rect0_levels[i]);
    	}

    	let rect1_levels = [/*clipPropsPadding*/ ctx[7], { fill: "black" }];
    	let rect1_data = {};

    	for (let i = 0; i < rect1_levels.length; i += 1) {
    		rect1_data = assign(rect1_data, rect1_levels[i]);
    	}

    	let if_block0 = /*backgroundColor*/ ctx[4] && create_if_block_1(ctx);
    	let if_block1 = /*paddingColor*/ ctx[5] && create_if_block(ctx);
    	const default_slot_template = /*$$slots*/ ctx[33].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[32], null);

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			defs = svg_element("defs");
    			mask = svg_element("mask");
    			rect0 = svg_element("rect");
    			rect1 = svg_element("rect");
    			if (if_block0) if_block0.c();
    			if_block0_anchor = empty();
    			if (if_block1) if_block1.c();
    			if_block1_anchor = empty();
    			if (default_slot) default_slot.c();
    			set_svg_attributes(rect0, rect0_data);
    			add_location(rect0, file, 126, 6, 3576);
    			set_svg_attributes(rect1, rect1_data);
    			add_location(rect1, file, 127, 6, 3628);
    			attr_dev(mask, "id", mask_id_value = `${/*graphicId*/ ctx[9]}-mask-padding-bg`);
    			add_location(mask, file, 125, 4, 3527);
    			add_location(defs, file, 124, 2, 3516);
    			attr_dev(svg, "width", /*width*/ ctx[1]);
    			attr_dev(svg, "height", /*height*/ ctx[2]);
    			attr_dev(svg, "viewBox", /*viewBox*/ ctx[0]);
    			attr_dev(svg, "preserveAspectRatio", /*preserveAspectRatio*/ ctx[3]);
    			add_location(svg, file, 117, 0, 3427);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, defs);
    			append_dev(defs, mask);
    			append_dev(mask, rect0);
    			append_dev(mask, rect1);
    			if (if_block0) if_block0.m(svg, null);
    			append_dev(svg, if_block0_anchor);
    			if (if_block1) if_block1.m(svg, null);
    			append_dev(svg, if_block1_anchor);

    			if (default_slot) {
    				default_slot.m(svg, null);
    			}

    			/*svg_binding*/ ctx[34](svg);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			set_svg_attributes(rect0, get_spread_update(rect0_levels, [
    				dirty[0] & /*clipPropsNoPadding*/ 256 && /*clipPropsNoPadding*/ ctx[8],
    				{ fill: "white" }
    			]));

    			set_svg_attributes(rect1, get_spread_update(rect1_levels, [
    				dirty[0] & /*clipPropsPadding*/ 128 && /*clipPropsPadding*/ ctx[7],
    				{ fill: "black" }
    			]));

    			if (/*backgroundColor*/ ctx[4]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_1(ctx);
    					if_block0.c();
    					if_block0.m(svg, if_block0_anchor);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*paddingColor*/ ctx[5]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block(ctx);
    					if_block1.c();
    					if_block1.m(svg, if_block1_anchor);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (default_slot) {
    				if (default_slot.p && dirty[1] & /*$$scope*/ 2) {
    					default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[32], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[32], dirty, null));
    				}
    			}

    			if (!current || dirty[0] & /*width*/ 2) {
    				attr_dev(svg, "width", /*width*/ ctx[1]);
    			}

    			if (!current || dirty[0] & /*height*/ 4) {
    				attr_dev(svg, "height", /*height*/ ctx[2]);
    			}

    			if (!current || dirty[0] & /*viewBox*/ 1) {
    				attr_dev(svg, "viewBox", /*viewBox*/ ctx[0]);
    			}

    			if (!current || dirty[0] & /*preserveAspectRatio*/ 8) {
    				attr_dev(svg, "preserveAspectRatio", /*preserveAspectRatio*/ ctx[3]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (default_slot) default_slot.d(detaching);
    			/*svg_binding*/ ctx[34](null);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    let idCounter = 0;

    function getId() {
    	return "gr" + idCounter++;
    }

    function instance($$self, $$props, $$invalidate) {
    	let $interactionManagerContext;
    	let $sectionContext;
    	const graphicId = getId();
    	let { renderer = undefined } = $$props;
    	let { width = 500 } = $$props;
    	let { height = 500 } = $$props;
    	let { viewBox = undefined } = $$props;
    	let { preserveAspectRatio = "xMidYMid meet" } = $$props;
    	let { scaleX = undefined } = $$props;
    	let { scaleY = undefined } = $$props;
    	let { transformation = undefined } = $$props;
    	let { flipX = false } = $$props;
    	let { flipY = false } = $$props;
    	let { padding = 0 } = $$props;
    	let { zoomIdentity = undefined } = $$props;
    	let { blockReindexing = false } = $$props;
    	let { backgroundColor = undefined } = $$props;
    	let { paddingColor = undefined } = $$props;
    	const graphicContext = init$1();
    	const sectionContext = init$2();
    	validate_store(sectionContext, "sectionContext");
    	component_subscribe($$self, sectionContext, value => $$invalidate(26, $sectionContext = value));
    	const eventManagerContext = init$3();
    	const interactionManagerContext = init$4();
    	validate_store(interactionManagerContext, "interactionManagerContext");
    	component_subscribe($$self, interactionManagerContext, value => $$invalidate(25, $interactionManagerContext = value));
    	let rootNode;

    	// set up event and interaction manager
    	const eventManager = new EventManager();

    	update$3(eventManagerContext, eventManager);
    	const interactionManager = new InteractionManager();
    	interactionManager.setId(graphicId);
    	interactionManager.linkEventManager(eventManager);
    	update$4(interactionManagerContext, interactionManager);

    	// Keep SectionContext and InteractionManagerContext up to date
    	let numberWidth = width;

    	let numberHeight = height;
    	const originalViewBox = viewBox;
    	let originalViewBoxArray;

    	if (originalViewBox !== undefined) {
    		originalViewBoxArray = originalViewBox.split(" ");
    	}

    	onMount(() => {
    		// only on mount can we bind the svg root node and attach actual event listeners
    		eventManager.addRootNode(rootNode);

    		eventManager.attachEventListeners();
    	});

    	const writable_props = [
    		"renderer",
    		"width",
    		"height",
    		"viewBox",
    		"preserveAspectRatio",
    		"scaleX",
    		"scaleY",
    		"transformation",
    		"flipX",
    		"flipY",
    		"padding",
    		"zoomIdentity",
    		"blockReindexing",
    		"backgroundColor",
    		"paddingColor"
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Graphic> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Graphic", $$slots, ['default']);

    	function svg_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			$$invalidate(6, rootNode = $$value);
    		});
    	}

    	$$self.$set = $$props => {
    		if ("renderer" in $$props) $$invalidate(12, renderer = $$props.renderer);
    		if ("width" in $$props) $$invalidate(1, width = $$props.width);
    		if ("height" in $$props) $$invalidate(2, height = $$props.height);
    		if ("viewBox" in $$props) $$invalidate(0, viewBox = $$props.viewBox);
    		if ("preserveAspectRatio" in $$props) $$invalidate(3, preserveAspectRatio = $$props.preserveAspectRatio);
    		if ("scaleX" in $$props) $$invalidate(13, scaleX = $$props.scaleX);
    		if ("scaleY" in $$props) $$invalidate(14, scaleY = $$props.scaleY);
    		if ("transformation" in $$props) $$invalidate(15, transformation = $$props.transformation);
    		if ("flipX" in $$props) $$invalidate(16, flipX = $$props.flipX);
    		if ("flipY" in $$props) $$invalidate(17, flipY = $$props.flipY);
    		if ("padding" in $$props) $$invalidate(18, padding = $$props.padding);
    		if ("zoomIdentity" in $$props) $$invalidate(19, zoomIdentity = $$props.zoomIdentity);
    		if ("blockReindexing" in $$props) $$invalidate(20, blockReindexing = $$props.blockReindexing);
    		if ("backgroundColor" in $$props) $$invalidate(4, backgroundColor = $$props.backgroundColor);
    		if ("paddingColor" in $$props) $$invalidate(5, paddingColor = $$props.paddingColor);
    		if ("$$scope" in $$props) $$invalidate(32, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		idCounter,
    		getId,
    		onMount,
    		GraphicContext: GraphicContext$1,
    		SectionContext,
    		EventManagerContext,
    		InteractionManagerContext,
    		EventManager,
    		InteractionManager,
    		getClipPropsPadding,
    		getClipPropsNoPadding,
    		graphicId,
    		renderer,
    		width,
    		height,
    		viewBox,
    		preserveAspectRatio,
    		scaleX,
    		scaleY,
    		transformation,
    		flipX,
    		flipY,
    		padding,
    		zoomIdentity,
    		blockReindexing,
    		backgroundColor,
    		paddingColor,
    		graphicContext,
    		sectionContext,
    		eventManagerContext,
    		interactionManagerContext,
    		rootNode,
    		eventManager,
    		interactionManager,
    		numberWidth,
    		numberHeight,
    		originalViewBox,
    		originalViewBoxArray,
    		coordinates,
    		$interactionManagerContext,
    		$sectionContext,
    		clipPropsPadding,
    		clipPropsNoPadding
    	});

    	$$self.$inject_state = $$props => {
    		if ("renderer" in $$props) $$invalidate(12, renderer = $$props.renderer);
    		if ("width" in $$props) $$invalidate(1, width = $$props.width);
    		if ("height" in $$props) $$invalidate(2, height = $$props.height);
    		if ("viewBox" in $$props) $$invalidate(0, viewBox = $$props.viewBox);
    		if ("preserveAspectRatio" in $$props) $$invalidate(3, preserveAspectRatio = $$props.preserveAspectRatio);
    		if ("scaleX" in $$props) $$invalidate(13, scaleX = $$props.scaleX);
    		if ("scaleY" in $$props) $$invalidate(14, scaleY = $$props.scaleY);
    		if ("transformation" in $$props) $$invalidate(15, transformation = $$props.transformation);
    		if ("flipX" in $$props) $$invalidate(16, flipX = $$props.flipX);
    		if ("flipY" in $$props) $$invalidate(17, flipY = $$props.flipY);
    		if ("padding" in $$props) $$invalidate(18, padding = $$props.padding);
    		if ("zoomIdentity" in $$props) $$invalidate(19, zoomIdentity = $$props.zoomIdentity);
    		if ("blockReindexing" in $$props) $$invalidate(20, blockReindexing = $$props.blockReindexing);
    		if ("backgroundColor" in $$props) $$invalidate(4, backgroundColor = $$props.backgroundColor);
    		if ("paddingColor" in $$props) $$invalidate(5, paddingColor = $$props.paddingColor);
    		if ("rootNode" in $$props) $$invalidate(6, rootNode = $$props.rootNode);
    		if ("numberWidth" in $$props) $$invalidate(21, numberWidth = $$props.numberWidth);
    		if ("numberHeight" in $$props) $$invalidate(22, numberHeight = $$props.numberHeight);
    		if ("originalViewBoxArray" in $$props) $$invalidate(23, originalViewBoxArray = $$props.originalViewBoxArray);
    		if ("coordinates" in $$props) $$invalidate(24, coordinates = $$props.coordinates);
    		if ("clipPropsPadding" in $$props) $$invalidate(7, clipPropsPadding = $$props.clipPropsPadding);
    		if ("clipPropsNoPadding" in $$props) $$invalidate(8, clipPropsNoPadding = $$props.clipPropsNoPadding);
    	};

    	let coordinates;
    	let clipPropsPadding;
    	let clipPropsNoPadding;

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*renderer*/ 4096) {
    			 {
    				update$1(graphicContext, { renderer });
    			}
    		}

    		if ($$self.$$.dirty[0] & /*width, height, originalViewBoxArray*/ 8388614) {
    			 {
    				if (width.constructor === Number && height.constructor === Number) {
    					$$invalidate(21, numberWidth = width);
    					$$invalidate(22, numberHeight = height);
    				} else if (originalViewBox !== undefined) {
    					$$invalidate(21, numberWidth = Number(originalViewBoxArray[2]));
    					$$invalidate(22, numberHeight = Number(originalViewBoxArray[3]));
    				} else if (originalViewBox === undefined) {
    					$$invalidate(21, numberWidth = 100);
    					$$invalidate(22, numberHeight = 100);
    				}
    			}
    		}

    		if ($$self.$$.dirty[0] & /*numberWidth, numberHeight*/ 6291456) {
    			 $$invalidate(24, coordinates = {
    				x1: 0,
    				y1: 0,
    				x2: numberWidth,
    				y2: numberHeight
    			});
    		}

    		if ($$self.$$.dirty[0] & /*coordinates, scaleX, scaleY, padding, flipX, flipY, blockReindexing, transformation, zoomIdentity, $interactionManagerContext, $sectionContext*/ 119529472) {
    			 {
    				const sectionData = {
    					sectionId: graphicId,
    					coordinates,
    					scaleX,
    					scaleY,
    					padding,
    					flipX,
    					flipY,
    					blockReindexing,
    					transformation,
    					zoomIdentity
    				};

    				update$2(sectionContext, sectionData);
    				$interactionManagerContext.loadSection($sectionContext);
    			}
    		}

    		if ($$self.$$.dirty[0] & /*coordinates, padding*/ 17039360) {
    			 $$invalidate(7, clipPropsPadding = getClipPropsPadding(coordinates, padding));
    		}

    		if ($$self.$$.dirty[0] & /*coordinates*/ 16777216) {
    			 $$invalidate(8, clipPropsNoPadding = getClipPropsNoPadding(coordinates));
    		}

    		if ($$self.$$.dirty[0] & /*numberWidth, numberHeight*/ 6291456) {
    			 {
    				if (originalViewBox === undefined) {
    					$$invalidate(0, viewBox = `0 0 ${numberWidth} ${numberHeight}`);
    				}
    			}
    		}
    	};

    	return [
    		viewBox,
    		width,
    		height,
    		preserveAspectRatio,
    		backgroundColor,
    		paddingColor,
    		rootNode,
    		clipPropsPadding,
    		clipPropsNoPadding,
    		graphicId,
    		sectionContext,
    		interactionManagerContext,
    		renderer,
    		scaleX,
    		scaleY,
    		transformation,
    		flipX,
    		flipY,
    		padding,
    		zoomIdentity,
    		blockReindexing,
    		numberWidth,
    		numberHeight,
    		originalViewBoxArray,
    		coordinates,
    		$interactionManagerContext,
    		$sectionContext,
    		graphicContext,
    		eventManagerContext,
    		eventManager,
    		interactionManager,
    		originalViewBox,
    		$$scope,
    		$$slots,
    		svg_binding
    	];
    }

    class Graphic extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance,
    			create_fragment,
    			safe_not_equal,
    			{
    				renderer: 12,
    				width: 1,
    				height: 2,
    				viewBox: 0,
    				preserveAspectRatio: 3,
    				scaleX: 13,
    				scaleY: 14,
    				transformation: 15,
    				flipX: 16,
    				flipY: 17,
    				padding: 18,
    				zoomIdentity: 19,
    				blockReindexing: 20,
    				backgroundColor: 4,
    				paddingColor: 5
    			},
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Graphic",
    			options,
    			id: create_fragment.name
    		});
    	}

    	get renderer() {
    		throw new Error("<Graphic>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set renderer(value) {
    		throw new Error("<Graphic>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get width() {
    		throw new Error("<Graphic>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set width(value) {
    		throw new Error("<Graphic>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get height() {
    		throw new Error("<Graphic>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set height(value) {
    		throw new Error("<Graphic>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get viewBox() {
    		throw new Error("<Graphic>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set viewBox(value) {
    		throw new Error("<Graphic>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get preserveAspectRatio() {
    		throw new Error("<Graphic>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set preserveAspectRatio(value) {
    		throw new Error("<Graphic>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get scaleX() {
    		throw new Error("<Graphic>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set scaleX(value) {
    		throw new Error("<Graphic>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get scaleY() {
    		throw new Error("<Graphic>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set scaleY(value) {
    		throw new Error("<Graphic>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get transformation() {
    		throw new Error("<Graphic>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set transformation(value) {
    		throw new Error("<Graphic>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get flipX() {
    		throw new Error("<Graphic>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set flipX(value) {
    		throw new Error("<Graphic>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get flipY() {
    		throw new Error("<Graphic>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set flipY(value) {
    		throw new Error("<Graphic>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get padding() {
    		throw new Error("<Graphic>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set padding(value) {
    		throw new Error("<Graphic>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get zoomIdentity() {
    		throw new Error("<Graphic>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set zoomIdentity(value) {
    		throw new Error("<Graphic>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get blockReindexing() {
    		throw new Error("<Graphic>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set blockReindexing(value) {
    		throw new Error("<Graphic>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get backgroundColor() {
    		throw new Error("<Graphic>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set backgroundColor(value) {
    		throw new Error("<Graphic>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get paddingColor() {
    		throw new Error("<Graphic>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set paddingColor(value) {
    		throw new Error("<Graphic>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    function getKeyArray (keyProp, length) {
      if (keyProp) {
        if (keyProp.constructor !== Array) throw new Error('\'key\' must be Array')
        if (keyProp.length !== length) throw new Error('\'key\' must be of same length as positioning props')

        return keyProp
      } else {
        return new Array(length).fill(0).map((_, i) => i)
      }
    }

    function createPixelGeometryFromGeometry (
      geometry,
      sectionContext,
      renderSettings,
      geometryNeedsScaling
    ) {
      ensureValidGeometry(geometry);

      const interpolationNecessary = (
        sectionContext.transformation === 'polar' &&
        renderSettings.interpolate === true
      );

      if (interpolationNecessary) {
        const scaleTransformation = sectionContext.getScaleTransformation(geometryNeedsScaling);
        const postScaleTransformation = sectionContext.postScaleTransformation;

        return polarGeometry(
          geometry,
          sectionContext,
          { scaleTransformation, postScaleTransformation },
          renderSettings
        )
      }

      if (!interpolationNecessary) {
        const totalTransformation = sectionContext.getTotalTransformation(geometryNeedsScaling);

        return transformGeometry(geometry, totalTransformation, renderSettings)
      }
    }

    function ensureValidGeometry (geometry) {
      if (
        isDefined(geometry) &&
        geometry.constructor === Object &&
        'type' in geometry &&
        'coordinates' in geometry
      ) {
        return
      }

      throw new Error('Invalid geometry')
    }

    function createPixelGeometryObjectFromGeometry (
      geometry,
      keyProp,
      sectionContext,
      renderSettings,
      geometryNeedsScaling
    ) {
      const keyArray = getKeyArray(keyProp, geometry.length);
      const pixelGeometryObject = {};

      for (let i = 0; i < keyArray.length; i++) {
        const key = keyArray[i];

        pixelGeometryObject[key] = createPixelGeometryFromGeometry(
          geometry[i],
          sectionContext,
          renderSettings,
          geometryNeedsScaling
        );
      }

      return pixelGeometryObject
    }

    function createPixelGeometry (
      geometryProps,
      sectionContext,
      renderSettings
    ) {
      const scaledCoordinates = scaleCoordinates(geometryProps, sectionContext);
      const scaledGeometry = createScaledGeometry(scaledCoordinates);

      return createPixelGeometryFromGeometry(
        scaledGeometry,
        sectionContext,
        renderSettings,
        false
      )
    }

    function scaleCoordinates (geometryProps, sectionContext) {
      ensureValidCombination(geometryProps);
      validateTypes(geometryProps);

      const { x1, x2, y1, y2 } = geometryProps;

      const scaledCoordinates = {};

      if (wereSpecified(x1, x2)) {
        scaledCoordinates.x1 = scaleCoordinate(x1, 'x1', sectionContext);
        scaledCoordinates.x2 = scaleCoordinate(x2, 'x2', sectionContext);
      } else {
        scaledCoordinates.x1 = sectionContext.rangeX[0];
        scaledCoordinates.x2 = sectionContext.rangeX[1];
      }

      if (wereSpecified(y1, y2)) {
        scaledCoordinates.y1 = scaleCoordinate(y1, 'y1', sectionContext);
        scaledCoordinates.y2 = scaleCoordinate(y2, 'y2', sectionContext);
      } else {
        scaledCoordinates.y1 = sectionContext.rangeY[0];
        scaledCoordinates.y2 = sectionContext.rangeY[1];
      }

      return scaledCoordinates
    }

    const s = JSON.stringify;

    function ensureValidCombination (c) {
      if (onlyOne(c.x1, c.x2)) {
        throw new Error(`Rectangle: invalid combination of 'x1' and 'x2': ${s(c.x1)}, ${s(c.x2)}. Either provide both or none.`)
      }

      if (onlyOne(c.y1, c.y2)) {
        throw new Error(`Rectangle: invalid combination of 'y1' and 'y2': ${s(c.y1)}, ${s(c.y2)}. Either provide both or none.`)
      }
    }

    function onlyOne (a, b) {
      return isUndefined(a) ? isDefined(b) : isUndefined(b)
    }

    const invalidCoordinateValueError = (value, name) => new Error(`Rectangle: invalid coordinate value for '${name}': ${s(value)}`);

    function validateTypes (geometryProps) {
      for (const coordinateName in geometryProps) {
        const coordinate = geometryProps[coordinateName];

        if (isDefined(coordinate)) {
          if (isInvalid(coordinate)) throw invalidCoordinateValueError(coordinate, coordinateName)

          if (![Number, String, Date, Function].includes(coordinate.constructor)) {
            throw invalidCoordinateValueError(coordinate, coordinateName)
          }
        }
      }
    }

    function wereSpecified (a, b) {
      return isDefined(a) && isDefined(b)
    }

    function scaleCoordinate (coordinate, coordinateName, sectionContext) {
      if (coordinate.constructor === Function) {
        return coordinate(sectionContext)
      } else {
        const scale = ['x1', 'x2'].includes(coordinateName) ? sectionContext.scaleX : sectionContext.scaleY;
        const scaledCoordinate = scale(coordinate);
        throwErrorIfInvalidScaledCoordinate(coordinate, scaledCoordinate, coordinateName);

        return scaledCoordinate
      }
    }

    function throwErrorIfInvalidScaledCoordinate (input, output, coordinateName) {
      const parentScale = ['x1', 'x2'].includes(coordinateName) ? 'scaleX' : 'scaleY';
      if (isInvalid(output)) throw new Error(`Scale '${parentScale}' received '${s(input)}' and returned '${s(output)}`)
    }

    function createScaledGeometry (c) {
      return {
        type: 'Polygon',
        coordinates: [
          [
            [c.x1, c.y1],
            [c.x2, c.y1],
            [c.x2, c.y2],
            [c.x1, c.y2],
            [c.x1, c.y1]
          ]
        ]
      }
    }

    /**
     * Point props default and required or not are defined here.
     */

    var pointAesthetics = {
      x: {
        required: false
      },
      y: {
        required: false
      },
      geometry: {
        required: false
      },
      radius: {
        required: false,
        default: 3
      },
      fill: {
        required: false,
        default: 'black'
      },
      stroke: {
        required: false,
        default: 'none'
      },
      strokeWidth: {
        required: false,
        default: 0
      },
      fillOpacity: {
        required: false
      },
      strokeOpacity: {
        required: false
      },
      opacity: {
        required: false,
        default: 1
      }
    };

    var rectangleAesthetics = {
      x1: {
        required: false
      },
      x2: {
        required: false
      },
      y1: {
        required: false
      },
      y2: {
        required: false
      },
      fill: {
        required: false,
        default: 'black'
      },
      stroke: {
        required: false,
        default: 'none'
      },
      strokeWidth: {
        required: false,
        default: 0
      },
      fillOpacity: {
        required: false
      },
      strokeOpacity: {
        required: false
      },
      opacity: {
        required: false,
        default: 1
      }
    };

    var polygonAesthetics = {
      x: {
        required: false
      },
      y: {
        required: false
      },
      geometry: {
        required: false
      },
      fill: {
        required: false,
        default: 'black'
      },
      stroke: {
        required: false,
        default: 'none'
      },
      strokeWidth: {
        required: false,
        default: 0
      },
      fillOpacity: {
        required: false
      },
      strokeOpacity: {
        required: false
      },
      opacity: {
        required: false,
        default: 1
      }
    };

    var lineAesthetics = {
      x: {
        required: false
      },
      y: {
        required: false
      },
      geometry: {
        required: false
      },
      strokeWidth: {
        required: false,
        default: 3
      },
      stroke: {
        required: false,
        default: 'black'
      },
      opacity: {
        required: false,
        default: 1
      }
    };

    var labelAesthetics = {
      x: {
        required: false
      },
      y: {
        required: false
      },
      geometry: {
        required: false
      },
      fill: {
        required: false,
        default: 'black'
      },
      stroke: {
        required: false,
        default: 'none'
      },
      strokeWidth: {
        required: false,
        default: 0
      },
      fillOpacity: {
        required: false
      },
      strokeOpacity: {
        required: false
      },
      opacity: {
        required: false,
        default: 1
      },
      text: {
        required: false
      },
      fontFamily: {
        required: false,
        default: 'Helvetica'
      },
      fontSize: {
        required: false,
        default: 16
      },
      fontWeight: {
        required: false,
        default: 'normal'
      },
      rotation: {
        required: false,
        default: 0
      },
      anchorPoint: {
        required: false,
        default: 'center'
      }
    };

    var symbolAesthetics = {
      x: {
        required: false
      },
      y: {
        required: false
      },
      geometry: {
        required: false
      },
      shape: {
        required: false
      },
      size: {
        required: false
      },
      fill: {
        required: false,
        default: 'black'
      },
      stroke: {
        required: false,
        default: 'none'
      },
      strokeWidth: {
        required: false,
        default: 0
      },
      fillOpacity: {
        required: false
      },
      strokeOpacity: {
        required: false
      },
      opacity: {
        required: false,
        default: 1
      }
    };

    var areaAesthetics = {
      x1: {
        required: false
      },
      x2: {
        required: false
      },
      y1: {
        required: false
      },
      y2: {
        required: false
      },
      independentAxis: {
        required: false
      },
      fill: {
        required: false,
        default: 'black'
      },
      stroke: {
        required: false,
        default: 'none'
      },
      strokeWidth: {
        required: false,
        default: 0
      },
      strokeOpacity: {
        required: false
      },
      fillOpacity: {
        required: false
      },
      opacity: {
        required: false,
        default: 1
      }
    };

    function validateAesthetics (type, aesthetics) {
      if (type === 'Point') {
        return validateAesthetics$1(aesthetics, pointAesthetics)
      }

      if (type === 'Rectangle') {
        return validateAesthetics$1(aesthetics, rectangleAesthetics)
      }

      if (type === 'Polygon') {
        return validateAesthetics$1(aesthetics, polygonAesthetics)
      }

      if (type === 'Line') {
        return validateAesthetics$1(aesthetics, lineAesthetics)
      }

      if (type === 'Label') {
        return validateAesthetics$1(aesthetics, labelAesthetics)
      }

      if (type === 'Symbol') {
        return validateAesthetics$1(aesthetics, symbolAesthetics)
      }

      if (type === 'Area') {
        return validateAesthetics$1(aesthetics, areaAesthetics)
      }
    }

    function validateAesthetics$1 (passedAesthetics, allowedAesthetics) {
      const aesthetics = {};

      for (const aestheticName in passedAesthetics) {
        const aestheticValue = passedAesthetics[aestheticName];
        const aestheticRequirements = allowedAesthetics[aestheticName];

        if (isDefined(aestheticValue)) {
          if (!(aestheticName in allowedAesthetics)) throw aestheticNotAllowedError(aestheticName)
          aesthetics[aestheticName] = aestheticValue;
        }

        if (isUndefined(aestheticValue)) {
          if (aestheticName in allowedAesthetics) {
            if (aestheticRequirements.required) throw aestheticRequiredError(aestheticName)
            if (isDefined(aestheticRequirements.default)) {
              aesthetics[aestheticName] = aestheticRequirements.default;
            } else {
              aesthetics[aestheticName] = aestheticValue;
            }
          }
        }
      }

      return aesthetics
    }

    const aestheticNotAllowedError = name => {
      return new Error(`Aesthetic '${name}' not allowed`)
    };

    const aestheticRequiredError = name => {
      return new Error(`Required aesthetic '${name}' is missing`)
    };

    function ensureValidGeometryProps ({ x, y, geometry }, markType) {
      if (isDefined(x) && isDefined(y) && isUndefined(geometry)) return

      if (isUndefined(x) && isUndefined(y) && isDefined(geometry)) return

      throw new Error(`${markType}: Invalid combination of 'x', 'y', and 'geometry' props`)
    }

    function getInputType ({ x, y, geometry }) {
      if (isUndefined(geometry)) return 'xy'
      if (isDefined(geometry)) return 'geometry'
    }

    function validateXYProps (x, y) {
      if (![Array, Function].includes(x.constructor)) {
        throw new Error('\'x\' prop must be Array or Function')
      }

      if (![Array, Function].includes(y.constructor)) {
        throw new Error('\'y\' prop must be Array or Function')
      }
    }

    function validateGeometryPropLayer (geometry) {
      if (![Array, Function].includes(geometry.constructor)) {
        throw new Error('\'geometry\' prop must be Array or Function')
      }
    }

    function propNeedsScaling (prop) {
      return prop.constructor !== Function
    }

    function createPixelGeometry$1 (
      geometryProps,
      sectionContext,
      renderSettings
    ) {
      ensureValidGeometryProps(geometryProps);
      const inputType = getInputType(geometryProps);

      if (inputType === 'xy') {
        const xNeedsScaling = propNeedsScaling(geometryProps.x);
        const yNeedsScaling = propNeedsScaling(geometryProps.y);

        const x = xNeedsScaling
          ? geometryProps.x
          : geometryProps.x(sectionContext);

        const y = xNeedsScaling
          ? geometryProps.y
          : geometryProps.y(sectionContext);

        const totalTransformation = sectionContext.getTotalTransformation({ xNeedsScaling, yNeedsScaling });

        return transformGeometry({ type: 'Point', x, y }, totalTransformation, renderSettings)
      }

      if (inputType === 'geometry') {
        const needsScaling = propNeedsScaling(geometryProps.geometry);

        const geometry = needsScaling
          ? geometryProps.geometry
          : geometryProps.geometry(sectionContext);

        const totalTransformation = sectionContext.getTotalTransformation(needsScaling);

        return transformGeometry(geometry, totalTransformation, renderSettings)
      }
    }

    function createPixelGeometryFromXYArrays (
      { x, y },
      sectionContext,
      renderSettings,
      geometryType,
      needsScaling
    ) {
      validateXYArrays(x, y);

      const rendervousInput = createRendervousInput(x, y, geometryType);

      const interpolationNecessary = (
        sectionContext.transformation === 'polar' &&
        renderSettings.interpolate === true
      );

      if (interpolationNecessary) {
        const scaleTransformation = sectionContext.getScaleTransformation(needsScaling);
        const postScaleTransformation = sectionContext.postScaleTransformation;

        return polarGeometry(
          rendervousInput,
          sectionContext,
          { scaleTransformation, postScaleTransformation },
          renderSettings
        )
      }

      if (!interpolationNecessary) {
        const totalTransformation = sectionContext.getTotalTransformation(needsScaling);

        return transformGeometry(rendervousInput, totalTransformation, renderSettings)
      }
    }

    function validateXYArrays (x, y) {
      if (x.constructor !== Array) {
        throw new Error('\'x\' prop must be Array or function that returns array')
      }

      if (y.constructor !== Array) {
        throw new Error('\'y\' prop must be Array or function that returns array')
      }

      if (x.length !== y.length) {
        throw new Error('Arrays passed to \'x\' and \'y\' must have the same length')
      }
    }

    function createRendervousInput (x, y, geometryType) {
      return {
        type: geometryType,
        x,
        y
      }
    }

    function createPixelGeometryObjectFromXYArrays (
      { x, y },
      keyProp,
      sectionContext,
      renderSettings,
      geometryType,
      needsScaling
    ) {
      validateXYArrays(x, y);

      const keyArray = getKeyArray(keyProp, x.length);
      const pixelGeometryObject = {};

      for (let i = 0; i < keyArray.length; i++) {
        const key = keyArray[i];

        pixelGeometryObject[key] = createPixelGeometryFromXYArrays(
          { x: x[i], y: y[i] },
          sectionContext,
          renderSettings,
          geometryType,
          needsScaling
        );
      }

      return pixelGeometryObject
    }

    function createPixelGeometry$2 (
      geometryProps,
      sectionContext,
      renderSettings
    ) {
      ensureValidGeometryProps(geometryProps);
      const inputType = getInputType(geometryProps);

      if (inputType === 'xy') {
        const xNeedsScaling = propNeedsScaling(geometryProps.x);
        const yNeedsScaling = propNeedsScaling(geometryProps.y);

        const x = xNeedsScaling
          ? geometryProps.x
          : geometryProps.x(sectionContext);

        const y = yNeedsScaling
          ? geometryProps.y
          : geometryProps.y(sectionContext);

        return createPixelGeometryFromXYArrays(
          { x, y },
          sectionContext,
          renderSettings,
          'Polygon',
          { xNeedsScaling, yNeedsScaling }
        )
      }

      if (inputType === 'geometry') {
        const needsScaling = propNeedsScaling(geometryProps.geometry);

        const geometry = needsScaling
          ? geometryProps.geometry
          : geometryProps.geometry(sectionContext);

        return createPixelGeometryFromGeometry(
          geometry,
          sectionContext,
          renderSettings,
          needsScaling
        )
      }
    }

    function createPixelGeometry$3 (
      geometryProps,
      sectionContext,
      renderSettings
    ) {
      ensureValidGeometryProps(geometryProps);
      const inputType = getInputType(geometryProps);

      if (inputType === 'xy') {
        const xNeedsScaling = propNeedsScaling(geometryProps.x);
        const yNeedsScaling = propNeedsScaling(geometryProps.y);

        const x = xNeedsScaling
          ? geometryProps.x
          : geometryProps.x(sectionContext);

        const y = yNeedsScaling
          ? geometryProps.y
          : geometryProps.y(sectionContext);

        return createPixelGeometryFromXYArrays(
          { x, y },
          sectionContext,
          renderSettings,
          'LineString',
          { xNeedsScaling, yNeedsScaling }
        )
      }

      if (inputType === 'geometry') {
        const needsScaling = propNeedsScaling(geometryProps.geometry);

        const geometry = needsScaling
          ? geometryProps.geometry
          : geometryProps.geometry(sectionContext);

        return createPixelGeometryFromGeometry(
          geometry,
          sectionContext,
          renderSettings,
          needsScaling
        )
      }
    }

    var geometryAlias = {
      cross: [
        [-0.5, -1], [0.5, -1], [0.5, -0.5], [1, -0.5], [1, 0.5], [0.5, 0.5], [0.5, 1], [-0.5, 1], [-0.5, 0.5], [-1, 0.5], [-1, -0.5], [-0.5, -0.5], [-0.5, -1], [-0.5, -1]
      ],
      'cross-sharp': [
        [0, -1], [0.2, -0.2], [1, 0], [0.2, 0.2], [0, 1], [-0.2, 0.2], [-1, 0], [-0.2, -0.2], [0, -1]
      ],
      diamond: [
        [0, -1], [1, 0], [0, 1], [-1, 0], [0, -1], [0, -1]
      ],
      'triangle-up': [
        [0, -1], [1, 1], [-1, 1], [0, -1], [0, -1]
      ],
      'triangle-down': [
        [1, -1], [0, 1], [-1, -1], [1, -1], [1, -1]
      ],
      'triangle-right': [
        [-1, -1], [1, 0], [-1, 1], [-1, -1], [-1, -1]
      ],
      'triangle-left': [
        [1, -1], [-1, 0], [1, 1], [1, -1], [1, -1]
      ],
      star4: [
        [0, 0.71], [1, 1], [0.71, 0], [1, -1], [0, -0.71], [-1, -1], [-0.71, 0], [-1, 1], [0, 0.71], [0, 0.71]
      ],
      star5: [
        [0, 0.5], [0.6, 0.8], [0.5, 0.1], [1, -0.3], [0.3, -0.4], [0, -1], [-0.3, -0.4], [-1, -0.3], [-0.5, 0.1], [-0.6, 0.8], [0, 0.5], [0, 0.5]
      ],
      star: [
        [0, 0.5], [0.6, 0.8], [0.5, 0.1], [1, -0.3], [0.3, -0.4], [0, -1], [-0.3, -0.4], [-1, -0.3], [-0.5, 0.1], [-0.6, 0.8], [0, 0.5], [0, 0.5]
      ],
      star6: [
        [0, 0.58], [0.5, 1], [0.43, 0.29], [1, 0], [0.43, -0.29], [0.5, -1], [0, -0.58], [-0.5, -1], [-0.43, -0.29], [-1, 0], [-0.43, 0.29], [-0.5, 1], [0, 0.58]
      ],
      star8: [
        [0, 0.54], [0.41, 1], [0.38, 0.38], [1, 0.41], [0.54, 0], [1, -0.41], [0.38, -0.38], [0.41, -1], [0, -0.54], [-0.41, -1], [-0.38, -0.38], [-1, -0.41], [-0.54, 0], [-1, 0.41], [-0.38, 0.38], [-0.41, 1], [0, 0.54]
      ],
      pentagon: [
        [-1, -0.24], [0, -1], [1, -0.24], [0.62, 1], [-0.62, 1], [-1, -0.24], [-1, -0.24]
      ],
      hexagon: [
        [-1, 0], [-0.57, -1], [0.57, -1], [1, 0], [0.57, 1], [-0.57, 1], [-1, 0], [-1, 0]
      ],
      heptagon: [
        [-1, 0.29], [-0.8, -0.6], [0, -1], [0.8, -0.6], [1, 0.29], [0.45, 1], [-0.45, 1], [-1, 0.29], [-1, 0.29]
      ],
      septagon: [
        [-1, 0.29], [-0.8, -0.6], [0, -1], [0.8, -0.6], [1, 0.29], [0.45, 1], [-0.45, 1], [-1, 0.29], [-1, 0.29]
      ],
      octagon: [
        [-1, -0.41], [-0.41, -1], [0.41, -1], [1, -0.41], [1, 0.41], [0.41, 1], [-0.41, 1], [-1, 0.41], [-1, -0.41], [-1, -0.41]
      ],
      nonagon: [
        [0.35, -1], [0.88, -0.55], [1, 0.15], [0.65, 0.76], [0, 1], [-0.65, 0.76], [-1, 0.15], [-0.88, -0.55], [-0.35, -1], [0.35, -1], [0.35, -1]
      ],
      decagon: [
        [-1, 0], [-0.81, -0.62], [-0.31, -1], [0.31, -1], [0.81, -0.62], [1, 0], [0.81, 0.62], [0.31, 1], [-0.31, 1], [-0.81, 0.62], [-1, 0], [-1, 0]
      ]
    };

    // https://stackoverflow.com/a/155678/7237112
    function representPointAsPolygon (point, { radius }) {
      const x = point.coordinates[0];
      const y = point.coordinates[1];

      const circumference = Math.PI * 2 * radius;
      const steps = Math.max(Math.ceil(circumference), 9);

      const polygon = {
        type: 'Polygon',
        coordinates: [[]]
      };

      for (let i = 0; i < steps; i++) {
        polygon.coordinates[0].push(
          [
            x + radius * Math.cos(Math.PI * i / steps * 2 - Math.PI / 2),
            y + radius * Math.sin(Math.PI * i / steps * 2 - Math.PI / 2)
          ]
        );
      }

      // close polygon
      polygon.coordinates[0].push(polygon.coordinates[0][0]);

      return polygon
    }

    function representPointsAsPolygons (points, { radiusObject }) {
      const polygons = {};

      for (const key in points) {
        polygons[key] = representPointAsPolygon(points[key], { radius: radiusObject[key] });
      }

      return polygons
    }

    function createPixelGeometry$4 (
      geometryProps,
      sectionContext,
      renderSettings
    ) {
      const pointGeometry = createPixelGeometry$1(
        geometryProps,
        sectionContext,
        renderSettings
      );

      const symbolGeometry = createSymbolGeometry(pointGeometry, geometryProps);

      return symbolGeometry
    }

    function createSymbolGeometry (pointGeometry, geometryProps) {
      const [cx, cy] = pointGeometry.coordinates;

      const shape = geometryProps.shape || 'circle';
      const size = geometryProps.size || 8;

      if (shape === 'circle') {
        return createPoint(cx, cy, size)
      }

      if (shape === 'square') {
        return createSquare(cx, cy, size)
      }

      if (shape in geometryAlias) {
        const coordinates = [geometryAlias[shape]];
        const geometry = {
          type: 'Polygon',
          coordinates
        };

        return createSymbolFromGeometry(cx, cy, geometry, size)
      }

      return createSymbolFromGeometry(cx, cy, shape, size)
    }

    function createPoint (cx, cy, size) {
      const radius = size / 2;
      const pointGeometry = {
        type: 'Point',
        coordinates: [cx, cy]
      };
      return representPointAsPolygon(pointGeometry, { radius })
    }

    function createSquare (cx, cy, size) {
      const halfSize = size / 2;

      const x1 = cx - halfSize;
      const x2 = cx + halfSize;
      const y1 = cy - halfSize;
      const y2 = cy + halfSize;

      return createScaledGeometry({ x1, x2, y1, y2 })
    }

    function createSymbolFromGeometry (cx, cy, geometry, size) {
      const halfSize = size / 2;
      const transformation = p => [p[0] * halfSize + cx, p[1] * halfSize + cy];

      return transformGeometry(geometry, transformation)
    }

    function createPixelGeometry$5 (
      geometryProps,
      sectionContext,
      renderSettings
    ) {
      // filter for allowed props; leave any undefined props in place
      const allowedProps =
        (({
          x1 = undefined,
          y1 = undefined,
          x2 = undefined,
          y2 = undefined,
          independentAxis = undefined
        }) => ({ x1, y1, x2, y2, independentAxis }))(geometryProps);

      const scaledGeometry = createScaledGeometry$1(scaleCoordinates$1(augmentProps(validateProps(normalize$1(
        allowedProps,
        sectionContext
      ))), sectionContext));

      return createPixelGeometryFromGeometry(
        scaledGeometry,
        sectionContext,
        renderSettings,
        false
      )
    }

    function normalize$1 ({ independentAxis, ...coordinateProps }, sectionContext) {
      const normalized = Object.entries(coordinateProps).reduce((acc, [k, v]) => {
        const extracted = typeof v === 'function' ? v(sectionContext) : v;

        acc[k] = {
          type: extracted === undefined ? 'none' : Array.isArray(extracted) ? 'array' : 'singleton',
          ...(Array.isArray(extracted) && { arrayLength: extracted.length }),
          value: extracted,
          scaled: typeof v === 'function'
        };
        return acc
      }, {});
      normalized.independentAxis = independentAxis && independentAxis.toLowerCase();
      return normalized
    }

    function validateProps (normalized) {
      const { independentAxis, ...coordinateProps } = normalized;

      const definedTypes = ['singleton', 'array'];
      const definedProps = Object.entries(coordinateProps)
        .filter(([k, v]) => definedTypes.includes(v.type))
        .reduce((acc, [k, v]) => {
          acc[k] = coordinateProps[k];
          return acc
        }, {});

      const definedKeys = Object.keys(definedProps);

      // reject if props do not include x1 and y1
      const containsx1y1 = ['x1', 'y1'].every(k => definedKeys.includes(k));
      if (!containsx1y1) { throw new Error('At least x1 and y1 must be provided') }

      // reject if at least x1 or y1 is not an array
      if (definedProps.x1.type === 'singleton' && definedProps.y1.type === 'singleton') {
        throw new Error('At least x1 or y1 must be passed an array')
      }

      // reject if independentAxis does not align with x/y types
      if (!independentAxis || independentAxis === 'x') {
        // check that x is the independent variable
        // reject if x1 is not given an array of at least length 2 - x must not be constant
        // x1 should also be distinct (for all types) and monotonically increasing for Number/Date types, but no checks will be performed for these
        if (definedProps.x1.type === 'singleton' || (definedProps.x1.type === 'array' && definedProps.x1.arrayLength < 2)) {
          throw new Error('x1 must be passed an array of at least length 2 when independentAxis is "x" or undefined')
        }
        // reject if x1, y1 and x2 are provided but independentAxis is not y
        if (definedKeys.includes('x2')) {
          throw new Error('independentAxis must be "y" when x1, y1 and x2 are specified')
        }
      } else if (independentAxis === 'y') {
        // check that y is the independent variable
        // reject if y1 is not given an array of at least length 2 - y must not be constant
        // y1 should also be distinct (for all types) and monotonically increasing for Number/Date types, but no checks will be performed for these
        if (definedProps.y1.type === 'singleton' || (definedProps.y1.type === 'array' && definedProps.y1.arrayLength < 2)) {
          throw new Error('y1 must be passed an array of at least length 2 when independentAxis is "y"')
        }
        // reject if x1, y1 and y2 are provided but independentAxis is not x
        if (definedKeys.includes('y2')) {
          throw new Error('independentAxis must be "x" when x1, y1 and y2 are specified')
        }
      } else {
        // reject if defined independentAxis is passed a value other than X or Y
        throw new Error('independentAxis must be passed "x" or "y" or left blank')
      }

      // reject if arrays given are not of equal length
      const arrayLengths = Object.values(definedProps)
        .filter(v => v.type === 'array')
        .map(v => v.value.length);

      const arrayLengthsEqual = arrayLengths.every((val, idx, arr) => val === arr[0]);
      if (!arrayLengthsEqual) { throw new Error('Arrays given must be of equal length') }

      return normalized
    }

    function augmentProps ({ independentAxis, x1, y1, x2, y2 }) {
      const indAx = !independentAxis || independentAxis === 'x' ? 'x' : 'y';

      const [indKey, indVal] = indAx === 'x' ? ['x1', x1] : ['y1', y1];
      const [depKey1, depVal1] = indAx === 'x' ? ['y1', y1] : ['x1', x1];
      const [depKey2, depVal2] = indAx === 'x' ? ['y2', y2] : ['x2', x2];
      const length = indVal.arrayLength;

      const depVal1Map = {
        singleton: {
          value: Array(length).fill(depVal1.value),
          type: 'array',
          arrayLength: length
        },
        array: depVal1
      };
      const depVal2Map = {
        singleton: {
          value: Array(length).fill(depVal2.value),
          type: 'array',
          arrayLength: length
        },
        none: {
          value: Array(length).fill(0),
          type: 'array',
          arrayLength: length
        },
        array: depVal2
      };

      return {
        independentAxis: indAx,
        [indKey]: indVal,
        [depKey1]: depVal1Map[depVal1.type],
        [depKey2]: depVal2Map[depVal2.type]
      }
    }

    const scaleMap = { x1: 'scaleX', y1: 'scaleY', x2: 'scaleX', y2: 'scaleY' };

    function scaleCoordinates$1 ({ independentAxis, ...coordinateProps }, sectionContext) {
      const scaledProps = Object.entries(coordinateProps).reduce((acc, [k, v]) => {
        if (v.scaled) {
          acc[k] = v.value;
        } else {
          const scale = sectionContext[scaleMap[k]];
          acc[k] = v.value.map(d => scale(d));
        }
        return acc
      }, {});
      return { independentAxis, ...scaledProps }
    }

    function createScaledGeometry$1 ({ x1, y1, x2, y2, independentAxis }) {
      // polygon outer ring is defined counterclockwise

      let bottomPoints, topPoints;

      if (independentAxis === 'x') {
        bottomPoints = y2.map((y2, i) => [x1[i], y2]);
        topPoints = y1.map((y1, i) => [x1[i], y1]).reverse();
      } else { // y independent
        bottomPoints = x2.map((x2, i) => [x2, y1[i]]);
        topPoints = x1.map((x1, i) => [x1, y1[i]]).reverse();
      }

      const origin = [bottomPoints[0]];
      const allPoints = [bottomPoints.concat(topPoints, origin)];

      const scaledGeometryArray = { type: 'Polygon', coordinates: allPoints };
      return scaledGeometryArray
    }

    function createPixelGeometryObject (
      geometryProps,
      keyProp,
      sectionContext,
      renderSettings
    ) {
      ensureValidGeometryProps(geometryProps);

      const inputType = getInputType(geometryProps);

      if (inputType === 'xy') {
        return createPixelGeometryObjectFromCoordinates(
          geometryProps,
          keyProp,
          sectionContext)
      }

      if (inputType === 'geometry') {
        return createPixelGeometryObjectFromGeometry$1(
          geometryProps,
          keyProp,
          sectionContext)
      }
    }

    function createPixelGeometryObjectFromCoordinates (
      { x, y },
      keyProp,
      sectionContext,
      renderSettings
    ) {
      validateXYProps(x, y);

      const xNeedsScaling = propNeedsScaling(x);
      const yNeedsScaling = propNeedsScaling(y);

      const xScaled = xNeedsScaling
        ? x
        : x(sectionContext);

      const yScaled = yNeedsScaling
        ? y
        : y(sectionContext);

      const { xArray, yArray } = applyRecyclingIfNecessary(xScaled, yScaled);
      validateXYArrays(xArray, yArray);

      const keyArray = getKeyArray(keyProp, xArray.length);

      const totalTransformation = sectionContext.getTotalTransformation({ xNeedsScaling, yNeedsScaling });

      return transformXYArraysIntoGeometryObject(xArray, yArray, keyArray, totalTransformation)
    }

    function applyRecyclingIfNecessary (xScaled, yScaled) {
      if (xScaled.constructor !== Array && yScaled.constructor !== Array) {
        throw new Error('Invalid input: cannot recycle all geometry props')
      }

      return {
        xArray: xScaled.constructor === Array ? xScaled : recycle(xScaled, yScaled.length),
        yArray: yScaled.constructor === Array ? yScaled : recycle(yScaled, xScaled.length)
      }
    }

    function recycle (value, length) {
      return new Array(length).fill(value)
    }

    function transformXYArraysIntoGeometryObject (xArray, yArray, keyArray, transformation) {
      const geometryObject = {};

      for (let i = 0; i < keyArray.length; i++) {
        const key = keyArray[i];

        geometryObject[key] = {
          type: 'Point',
          coordinates: transformation([
            xArray[i],
            yArray[i]
          ])
        };
      }

      return geometryObject
    }

    function createPixelGeometryObjectFromGeometry$1 (
      geometryProps,
      keyProp,
      sectionContext,
      renderSettings
    ) {
      validateGeometryPropLayer(geometryProps.geometry);

      const geometryNeedsScaling = propNeedsScaling(geometryProps.geometry);

      const geometry = geometryNeedsScaling
        ? geometryProps.geometry
        : geometryProps.geometry(sectionContext);

      const keyArray = getKeyArray(keyProp, geometry.length);

      const totalTransformation = sectionContext.getTotalTransformation(geometryNeedsScaling);

      return transformGeometryArrayIntoGeometryObject(
        geometry,
        keyArray,
        totalTransformation
      )
    }

    function transformGeometryArrayIntoGeometryObject (geometryArray, keyArray, transformation) {
      const geometryObject = {};

      for (let i = 0; i < keyArray.length; i++) {
        const key = keyArray[i];

        geometryObject[key] = {
          type: 'Point',
          coordinates: transformation(geometryArray[i].coordinates)
        };
      }

      return geometryObject
    }

    function generateArrayOfLength (value, length) {
      return new Array(length).fill(value)
    }

    function createPixelGeometryObject$1 (
      geometryProps,
      keyProp,
      sectionContext,
      renderSettings
    ) {
      const { scaledCoordinates, length } = scaleCoordinates$2(geometryProps, sectionContext);
      const scaledGeometryArray = createScaledGeometryArray(scaledCoordinates, length);

      return createPixelGeometryObjectFromGeometry(
        scaledGeometryArray,
        keyProp,
        sectionContext,
        renderSettings,
        false
      )
    }

    function scaleCoordinates$2 (coordinateProps, sectionContext) {
      ensureValidCombination(coordinateProps);

      const coordinatesThatNeedScaling = whichCoordinatesNeedScaling(coordinateProps);

      const nonMissingCoordinates = getMissingCoordinatesFromContext(coordinateProps, sectionContext);
      const coordinateValues = getCoordinateValues(nonMissingCoordinates, sectionContext);

      const length = getNRectangles(coordinateValues);

      const coordinatesThatArePrimitive = whichCoordinatesArePrimitive(coordinateValues);

      const scaledCoordinates = _scaleCoordinates(
        coordinateValues,
        sectionContext,
        coordinatesThatNeedScaling,
        coordinatesThatArePrimitive,
        length
      );

      return { scaledCoordinates, length }
    }

    const coordinateNames = ['x1', 'x2', 'y1', 'y2'];

    function whichCoordinatesNeedScaling (coordinates) {
      const coordinatesThatNeedScaling = {};

      for (const coordinateName of coordinateNames) {
        const coordinateValue = coordinates[coordinateName];
        coordinatesThatNeedScaling[coordinateName] = isDefined(coordinateValue) && coordinateValue.constructor !== Function;
      }

      return coordinatesThatNeedScaling
    }

    function getMissingCoordinatesFromContext (coordinates, sectionContext) {
      const nonMissingCoordinates = {};

      for (const coordinateName of coordinateNames) {
        const coordinateValue = coordinates[coordinateName];
        nonMissingCoordinates[coordinateName] = isUndefined(coordinateValue)
          ? getMissingCoordinateFromContext(coordinateName, sectionContext)
          : coordinateValue;
      }

      return nonMissingCoordinates
    }

    const coordMap = { x1: 'minX', x2: 'maxX', y1: 'minY', y2: 'maxY' };

    function getMissingCoordinateFromContext (coordinateName, sectionContext) {
      return sectionContext.paddedBbox[coordMap[coordinateName]]
    }

    function getCoordinateValues (nonMissingCoordinates, sectionContext) {
      const coordinateValues = {};

      for (const coordinateName in nonMissingCoordinates) {
        const coordinateValue = nonMissingCoordinates[coordinateName];
        if (coordinateValue.constructor === Function) {
          coordinateValues[coordinateName] = coordinateValue(sectionContext);
        } else {
          coordinateValues[coordinateName] = coordinateValue;
        }
      }

      return coordinateValues
    }

    const invalidCoordinateError = new Error('RectangleLayer: invalid coordinate specification');

    function getNRectangles (coordinateValues) {
      let atLeastOneArray = false;
      let length;

      for (const coordinateName in coordinateValues) {
        const coordinateValue = coordinateValues[coordinateName];

        if (coordinateValue.constructor === Array) {
          atLeastOneArray = true;
          length = length || coordinateValue.length;

          if (length !== coordinateValue.length) throw invalidCoordinateError
        }
      }

      if (!atLeastOneArray) throw invalidCoordinateError

      return length
    }

    function whichCoordinatesArePrimitive (coordinateValues) {
      const coordinatesThatArePrimitive = {};

      for (const coordinateName in coordinateValues) {
        const coordinateValue = coordinateValues[coordinateName];

        coordinatesThatArePrimitive[coordinateName] = coordinateValue.constructor !== Array;
      }

      return coordinatesThatArePrimitive
    }

    function _scaleCoordinates (
      coordinateValues, scales, coordinatesThatNeedScaling, coordinatesThatArePrimitive, length
    ) {
      const scaledCoordinates = {};

      for (const coordinateName in coordinateValues) {
        const coordinateValue = coordinateValues[coordinateName];
        let array;
        const scale = coordinateName.startsWith('x') ? scales.scaleX : scales.scaleY;

        if (coordinatesThatArePrimitive[coordinateName]) array = generateArrayOfLength(coordinateValue, length);
        if (!coordinatesThatArePrimitive[coordinateName]) array = coordinateValue;

        scaledCoordinates[coordinateName] = coordinatesThatNeedScaling[coordinateName]
          ? array.map(scale)
          : array;
      }

      return scaledCoordinates
    }

    function createScaledGeometryArray (scaledCoordinates, length) {
      const scaledGeometryArray = [];

      for (let i = 0; i < length; i++) {
        scaledGeometryArray.push(
          createScaledGeometry({
            x1: scaledCoordinates.x1[i],
            x2: scaledCoordinates.x2[i],
            y1: scaledCoordinates.y1[i],
            y2: scaledCoordinates.y2[i]
          })
        );
      }

      return scaledGeometryArray
    }

    function createPixelGeometry$6 (
      geometryProps,
      keyProp,
      sectionContext,
      renderSettings
    ) {
      ensureValidGeometryProps(geometryProps);
      const inputType = getInputType(geometryProps);

      if (inputType === 'xy') {
        const xNeedsScaling = propNeedsScaling(geometryProps.x);
        const yNeedsScaling = propNeedsScaling(geometryProps.y);

        const x = xNeedsScaling
          ? geometryProps.x
          : geometryProps.x(sectionContext);

        const y = yNeedsScaling
          ? geometryProps.y
          : geometryProps.y(sectionContext);

        return createPixelGeometryObjectFromXYArrays(
          { x, y },
          keyProp,
          sectionContext,
          renderSettings,
          'Polygon',
          { xNeedsScaling, yNeedsScaling }
        )
      }

      if (inputType === 'geometry') {
        const needsScaling = propNeedsScaling(geometryProps.geometry);

        const geometry = needsScaling
          ? geometryProps.geometry
          : geometryProps.geometry(sectionContext);

        return createPixelGeometryObjectFromGeometry(
          geometry,
          keyProp,
          sectionContext,
          renderSettings,
          needsScaling
        )
      }
    }

    function createPixelGeometry$7 (
      geometryProps,
      keyProp,
      sectionContext,
      renderSettings
    ) {
      ensureValidGeometryProps(geometryProps);
      const inputType = getInputType(geometryProps);

      if (inputType === 'xy') {
        const xNeedsScaling = propNeedsScaling(geometryProps.x);
        const yNeedsScaling = propNeedsScaling(geometryProps.y);

        const x = xNeedsScaling
          ? geometryProps.x
          : geometryProps.x(sectionContext);

        const y = yNeedsScaling
          ? geometryProps.y
          : geometryProps.y(sectionContext);

        return createPixelGeometryObjectFromXYArrays(
          { x, y },
          keyProp,
          sectionContext,
          renderSettings,
          'LineString',
          { xNeedsScaling, yNeedsScaling }
        )
      }

      if (inputType === 'geometry') {
        const needsScaling = propNeedsScaling(geometryProps.geometry);

        const geometry = needsScaling
          ? geometryProps.geometry
          : geometryProps.geometry(sectionContext);

        return createPixelGeometryObjectFromGeometry(
          geometry,
          keyProp,
          sectionContext,
          renderSettings,
          needsScaling
        )
      }
    }

    function createPixelGeometryObject$2 (
      geometryProps,
      keyProp,
      sectionContext,
      renderSettings
    ) {
      const pointGeometryObject = createPixelGeometryObject(
        geometryProps,
        keyProp,
        sectionContext);

      const symbolGeometryObject = createSymbolGeometryObject(pointGeometryObject, geometryProps);

      return symbolGeometryObject
    }

    function createSymbolGeometryObject (pointGeometryObject, geometryProps) {
      const keys = Object.keys(pointGeometryObject);

      const shapeGetter = createPropGetter(geometryProps.shape, keys);
      const sizeGetter = createPropGetter(geometryProps.size, keys);

      const symbolGeometryObject = {};

      for (const key in pointGeometryObject) {
        const shape = shapeGetter(key);
        const size = sizeGetter(key);

        symbolGeometryObject[key] = createSymbolGeometry(pointGeometryObject[key], { shape, size });
      }

      return symbolGeometryObject
    }

    function createPropGetter (prop, keys) {
      if (prop === undefined) return () => {}

      if (prop.constructor === Function) {
        return prop
      }

      const propObject = createPropObject(prop, keys);
      return key => propObject[key]
    }

    function createPropObject (prop, keys) {
      const length = keys.length;
      const propObject = {};

      if (prop.constructor === Array) {
        validatePropArrayLength(prop, length);

        for (let i = 0; i < length; i++) {
          const key = keys[i];
          propObject[key] = prop[i];
        }
      } else {
        for (let i = 0; i < length; i++) {
          const key = keys[i];
          propObject[key] = prop;
        }
      }

      return propObject
    }

    function validatePropArrayLength (prop, length) {
      if (prop.length !== length) {
        throw new Error('If provided as Arrays, all positioning props must be the same length')
      }
    }

    function createPixelGeometryObject$3 (
      geometryProps,
      keyProp,
      sectionContext,
      renderSettings
    ) {
      // filter for allowed props; leave any undefined props in place
      const allowedProps =
        (({
          x1 = undefined,
          y1 = undefined,
          x2 = undefined,
          y2 = undefined,
          independentAxis = undefined
        }) => ({ x1, y1, x2, y2, independentAxis }))(geometryProps);

      const { numAreas, independentAxis, ...augmentedAreas } =
        augmentAreas(
          validateAreas(
            normalizeAreas(
              allowedProps,
              sectionContext)));

      // pivot data for use with area mark methods
      const areasAsArray = [...Array(numAreas).keys()].map(areaIndex =>
        Object.entries(augmentedAreas).reduce((acc, [k, v]) => {
          const isNestedArray = v.type === 'array of arrays';

          acc[k] = {
            type: isNestedArray ? 'array' : 'none',
            value: isNestedArray ? v.value[areaIndex] : v.value,
            ...(isNestedArray && { arrayLength: v.value[areaIndex].length }),
            scaled: v.scaled
          };

          acc.independentAxis = independentAxis;
          return acc
        }, {})
      );

      const scaledGeometryArray = areasAsArray.map(area => {
        return createScaledGeometry$1(
          scaleCoordinates$1(
            augmentProps(
              validateProps(
                area)),
            sectionContext))
      });

      return createPixelGeometryObjectFromGeometry(
        scaledGeometryArray,
        keyProp,
        sectionContext,
        renderSettings,
        false
      )
    }

    function normalizeAreas ({ independentAxis, ...coordinateProps }, sectionContext) {
      const normalized = Object.entries(coordinateProps).reduce((acc, [k, v]) => {
        const extracted = typeof v === 'function' ? v(sectionContext) : v;

        const isUndefined = (x) => typeof x === 'undefined';
        const isSingleton = (x) => !isUndefined(x) && !Array.isArray(x);
        const isNestedArray = (xs) => !isUndefined(xs) && !isSingleton(xs) && xs.every(x => Array.isArray(x));

        acc[k] = {
          type: isUndefined(extracted)
            ? 'none'
            : isSingleton(extracted)
              ? 'singleton'
              : isNestedArray(extracted)
                ? 'array of arrays'
                : 'array',
          ...(isNestedArray(extracted) && { numAreas: extracted.length }),
          value: extracted,
          scaled: typeof v === 'function'
        };
        return acc
      }, {});

      normalized.independentAxis = independentAxis && independentAxis.toLowerCase();
      return normalized
    }

    function validateAreas (normalizedAreas) {
      const { independentAxis, ...coordinateProps } = normalizedAreas;
      const { x1, x2, y1, y2 } = coordinateProps;

      // reject singletons
      Object.values(coordinateProps).forEach(v => {
        if (v.type === 'singleton') {
          throw new Error('Props passed to the AreaLayer must be either an array or an array of arrays')
        }
      });

      const indAx = !independentAxis || independentAxis === 'x' ? 'x' : 'y';
      const [depKey1, depVal1] = indAx === 'x' ? ['y1', y1] : ['x1', x1];
      const [depKey2, depVal2] = indAx === 'x' ? ['y2', y2] : ['x2', x2];

      // only x1 can be broadcasted when x is the independent variable
      // only y1 can be broadcasted when y is the independent variable
      if (depVal1.type === 'array' || depVal2.type === 'array') {
        throw new Error(`${depKey1} and ${depKey2} must be passed an array of arrays when independentAxis is "${indAx}"`)
      }

      // reject if number of areas per prop are not equal
      const numAreasAll = Object.values(coordinateProps)
        .filter(v => v.type === 'array of arrays')
        .map(v => v.numAreas);

      const numAreasEqual = numAreasAll.every((val, idx, arr) => val === arr[0]);
      if (!numAreasEqual) {
        throw new Error('Number of areas declared per prop must be equal')
      }

      const numAreas = numAreasAll[0];
      return { numAreas, independentAxis, ...normalizedAreas }
    }

    function augmentAreas ({ numAreas, independentAxis, x1, y1, x2, y2 }) {
      const indAx = !independentAxis || independentAxis === 'x' ? 'x' : 'y';
      const [indKey1, indVal1] = indAx === 'x' ? ['x1', x1] : ['y1', y1];
      const [indKey2, indVal2] = indAx === 'x' ? ['x2', x2] : ['y2', y2];
      const [depKey1, depVal1] = indAx === 'x' ? ['y1', y1] : ['x1', x1];
      const [depKey2, depVal2] = indAx === 'x' ? ['y2', y2] : ['x2', x2];

      const indValMap = {
        array: {
          value: Array(numAreas).fill(indVal1.value),
          type: 'array of arrays',
          numAreas: numAreas,
          scaled: indVal1.scaled
        },
        'array of arrays': indVal1
      };

      return {
        numAreas: numAreas,
        independentAxis: indAx,
        [indKey1]: indValMap[indVal1.type],
        [indKey2]: indVal2,
        [depKey1]: depVal1,
        [depKey2]: depVal2
      }
    }

    const markPixelGeometryFuncs = new Proxy({
      Point: createPixelGeometry$1,
      Rectangle: createPixelGeometry,
      Polygon: createPixelGeometry$2,
      Line: createPixelGeometry$3,
      Label: createPixelGeometry$1,
      Symbol: createPixelGeometry$4,
      Area: createPixelGeometry$5
    }, {
      get: (obj, prop) => {
        if (prop in obj) {
          return obj[prop]
        } else {
          throw new Error(`Invalid Mark type: '${prop}'`)
        }
      }
    });

    const layerPixelGeometryFuncs = new Proxy({
      Point: createPixelGeometryObject,
      Rectangle: createPixelGeometryObject$1,
      Polygon: createPixelGeometry$6,
      Line: createPixelGeometry$7,
      Label: createPixelGeometryObject,
      Symbol: createPixelGeometryObject$2,
      Area: createPixelGeometryObject$3
    }, {
      get: (obj, prop) => {
        if (prop in obj) {
          return obj[prop]
        } else {
          throw new Error(`Invalid Layer type: '${prop}'`)
        }
      }
    });

    function representLineAsPolygon (lineString, { strokeWidth }) {
      const lineCoordinates = lineString.coordinates;

      if (lineString.type === 'LineString') {
        const outerRing = createOuterRing(lineCoordinates, strokeWidth);

        return {
          type: 'Polygon',
          coordinates: [outerRing]
        }
      }

      if (lineString.type === 'MultiLineString') {
        const polygons = [];

        for (let i = 0; i < lineCoordinates.length; i++) {
          polygons.push(
            [createOuterRing(lineCoordinates[i], strokeWidth)]
          );
        }

        return {
          type: 'MultiPolygon',
          coordinates: polygons
        }
      }
    }

    function createOuterRing (lineCoordinates, strokeWidth) {
      const length = lineCoordinates.length;
      const lastIndex = length - 1;
      const distance = strokeWidth / 2;

      const coordinatesBottom = new Array(length);
      const coordinatesTop = new Array(length);

      for (let i = 0; i < length; i++) {
        if (i === 0) {
          const [bottomPoint, topPoint] = getCornerPointsStart(lineCoordinates, distance);
          coordinatesBottom[0] = bottomPoint;
          coordinatesTop[lastIndex] = topPoint;
        }

        if (i === lastIndex) {
          const [bottomPoint, topPoint] = getCornerPointsEnd(lineCoordinates, distance);
          coordinatesBottom[lastIndex] = bottomPoint;
          coordinatesTop[0] = topPoint;
        }

        if (i > 0 && i < lastIndex) {
          const [bottomPoint, topPoint] = getCornerPointsIndex(lineCoordinates, i, distance);
          coordinatesBottom[i] = bottomPoint;
          coordinatesTop[lastIndex - i] = topPoint;
        }
      }

      const outerRing = coordinatesBottom.concat(coordinatesTop);

      // Close ring if necessary
      if (ringIsNotClosed(outerRing)) {
        outerRing.push(outerRing[0]);
      }

      return outerRing
    }

    function representLinesAsPolygons (lines, { strokeWidthObject }) {
      const polygons = {};

      for (const key in lines) {
        polygons[key] = representLineAsPolygon(lines[key], { strokeWidth: strokeWidthObject[key] });
      }

      return polygons
    }

    function getCornerPointsStart (lineCoordinates, distance) {
      const segment = getNextSegment(0, lineCoordinates);
      const cornerPoint = segment[0];

      return getParallelPoints(segment, cornerPoint, distance)
    }

    function getCornerPointsEnd (lineCoordinates, distance) {
      const segment = getPreviousSegment(lineCoordinates.length - 1, lineCoordinates);
      const cornerPoint = segment[1];

      return getParallelPoints(segment, cornerPoint, distance)
    }

    function getCornerPointsIndex (lineCoordinates, index, distance) {
      const previousSegment = getPreviousSegment(index, lineCoordinates);
      const nextSegment = getNextSegment(index, lineCoordinates);

      const previousUnitVector = getUnitVector$1(previousSegment);
      const nextUnitVector = getUnitVector$1(nextSegment);

      if (previousUnitVector[0] === nextUnitVector[0] && previousUnitVector[1] === nextUnitVector[1]) {
        // unit vectors are the same, we can just use the existing line point

        const currentCornerPerpendicularPoints = getParallelPoints(
          previousSegment, previousSegment[1], distance
        );

        return currentCornerPerpendicularPoints
      } else {
        const previousCornerPerpendicularPoints = getParallelPoints(
          previousSegment, previousSegment[0], distance
        );
        const nextCornerPerpendicularPoints = getParallelPoints(
          nextSegment, nextSegment[1], distance
        );

        const bottomPoint = findIntersection(
          previousCornerPerpendicularPoints[0],
          previousUnitVector,
          nextCornerPerpendicularPoints[0],
          nextUnitVector
        );
        const topPoint = findIntersection(
          previousCornerPerpendicularPoints[1],
          previousUnitVector,
          nextCornerPerpendicularPoints[1],
          nextUnitVector
        );

        return [bottomPoint, topPoint]
      }
    }

    const getPreviousSegment = (i, coordinates) => [coordinates[i - 1], coordinates[i]];
    const getNextSegment = (i, coordinates) => [coordinates[i], coordinates[i + 1]];

    function getUnitVector$1 (segment) {
      const [a, b] = segment;

      const magnitude = pointDistance(a, b);
      const dx = b[0] - a[0];
      const dy = b[1] - a[1];

      return [dx / magnitude, dy / magnitude]
    }

    const getNormalVector = vector => [-vector[1], vector[0]];

    function movePoint$1 (point, unitVector, distance) {
      return [
        point[0] + unitVector[0] * distance,
        point[1] + unitVector[1] * distance
      ]
    }

    function getParallelPoints (segment, point, distance) {
      const unitVector = getUnitVector$1(segment);
      const normalVector = getNormalVector(unitVector);

      const bottomPoint = movePoint$1(point, normalVector, distance);
      const topPoint = movePoint$1(point, normalVector, -distance);

      return [bottomPoint, topPoint]
    }

    function findIntersection (point1, vector1, point2, vector2) {
      const lambda1 = findLambda(point1, vector1, point2, vector2);
      return [
        point1[0] + (vector1[0] * lambda1),
        point1[1] + (vector1[1] * lambda1)
      ]
    }

    function findLambda (p1, v1, p2, v2) {
      const deltaX = p1[0] - p2[0];
      const deltaY = p1[1] - p2[1];
      const v1x = v1[0];
      const v2x = v2[0];
      const v1y = v1[1];
      const v2y = v2[1];

      const lambda1 = ((v2x * deltaY) - (deltaX * v2y)) /
        ((v1x * v2y) - (v2x * v1y));
      return lambda1
    }

    function ringIsNotClosed (ring) {
      const first = ring[0];
      const last = ring[ring.length - 1];

      const closed = first[0] === last[0] && first[1] === last[1];

      return !closed
    }

    const markRepresentAsPolygonFuncs = {
      Point: representPointAsPolygon,
      Line: representLineAsPolygon
    };

    const layerRepresentAsPolygonFuncs = {
      Point: representPointsAsPolygons,
      Line: representLinesAsPolygons
    };

    function createDataNecessaryForIndexingMark (type, markId, geometryTypes, aesthetics) {
      const markData = { markId };
      let attributes;

      if (type === 'Point') {
        attributes = {
          pixelGeometry: geometryTypes.pixelGeometry,
          radius: aesthetics.radius
        };
      }

      if (type === 'Label') {
        attributes = {
          pixelGeometry: geometryTypes.pixelGeometry,
          radius: aesthetics.fontSize
        };
      }

      if (type === 'Rectangle') {
        attributes = { screenGeometry: geometryTypes.screenGeometry };
      }

      if (type === 'Polygon') {
        attributes = { screenGeometry: geometryTypes.screenGeometry };
      }

      if (type === 'Line') {
        attributes = {
          pixelGeometry: geometryTypes.pixelGeometry,
          strokeWidth: aesthetics.strokeWidth
        };
      }

      if (type === 'Symbol') {
        attributes = { screenGeometry: geometryTypes.screenGeometry };
      }

      if (type === 'Area') {
        attributes = { screenGeometry: geometryTypes.screenGeometry };
      }

      markData.attributes = attributes;

      return markData
    }

    function createDataNecessaryForIndexingLayer (
      type, layerId, keyArray, geometryObjects, aestheticsObjects
    ) {
      const layerData = { layerId, keyArray };
      let layerAttributes;

      if (type === 'Point') {
        layerAttributes = {
          pixelGeometryObject: geometryObjects.pixelGeometryObject,
          radiusObject: aestheticsObjects.radiusObject
        };
      }

      if (type === 'Label') {
        layerAttributes = {
          pixelGeometryObject: geometryObjects.pixelGeometryObject,
          radiusObject: aestheticsObjects.fontSizeObject
        };
      }

      if (type === 'Rectangle') {
        layerAttributes = { screenGeometryObject: geometryObjects.screenGeometryObject };
      }

      if (type === 'Polygon') {
        layerAttributes = { screenGeometryObject: geometryObjects.screenGeometryObject };
      }

      if (type === 'Line') {
        layerAttributes = {
          pixelGeometryObject: geometryObjects.pixelGeometryObject,
          strokeWidthObject: aestheticsObjects.strokeWidthObject
        };
      }

      if (type === 'Symbol') {
        layerAttributes = { screenGeometryObject: geometryObjects.screenGeometryObject };
      }

      if (type === 'Area') {
        layerAttributes = { screenGeometryObject: geometryObjects.screenGeometryObject };
      }

      layerData.layerAttributes = layerAttributes;

      return layerData
    }

    function cubicOut(t) {
        const f = t - 1.0;
        return f * f * f + 1.0;
    }

    function is_date(obj) {
        return Object.prototype.toString.call(obj) === '[object Date]';
    }

    function get_interpolator(a, b) {
        if (a === b || a !== a)
            return () => a;
        const type = typeof a;
        if (type !== typeof b || Array.isArray(a) !== Array.isArray(b)) {
            throw new Error('Cannot interpolate values of different type');
        }
        if (Array.isArray(a)) {
            const arr = b.map((bi, i) => {
                return get_interpolator(a[i], bi);
            });
            return t => arr.map(fn => fn(t));
        }
        if (type === 'object') {
            if (!a || !b)
                throw new Error('Object cannot be null');
            if (is_date(a) && is_date(b)) {
                a = a.getTime();
                b = b.getTime();
                const delta = b - a;
                return t => new Date(a + t * delta);
            }
            const keys = Object.keys(b);
            const interpolators = {};
            keys.forEach(key => {
                interpolators[key] = get_interpolator(a[key], b[key]);
            });
            return t => {
                const result = {};
                keys.forEach(key => {
                    result[key] = interpolators[key](t);
                });
                return result;
            };
        }
        if (type === 'number') {
            const delta = b - a;
            return t => a + t * delta;
        }
        throw new Error(`Cannot interpolate ${type} values`);
    }
    function tweened(value, defaults = {}) {
        const store = writable(value);
        let task;
        let target_value = value;
        function set(new_value, opts) {
            if (value == null) {
                store.set(value = new_value);
                return Promise.resolve();
            }
            target_value = new_value;
            let previous_task = task;
            let started = false;
            let { delay = 0, duration = 400, easing = identity, interpolate = get_interpolator } = assign(assign({}, defaults), opts);
            const start = now() + delay;
            let fn;
            task = loop(now => {
                if (now < start)
                    return true;
                if (!started) {
                    fn = interpolate(value, new_value);
                    if (typeof duration === 'function')
                        duration = duration(value, new_value);
                    started = true;
                }
                if (previous_task) {
                    previous_task.abort();
                    previous_task = null;
                }
                const elapsed = now - start;
                if (elapsed > duration) {
                    store.set(value = new_value);
                    return false;
                }
                // @ts-ignore
                store.set(value = fn(easing(elapsed / duration)));
                return true;
            });
            return task.promise;
        }
        return {
            set,
            update: (fn, opts) => set(fn(target_value, value), opts),
            subscribe: store.subscribe
        };
    }

    /**
     * Returns either a Svelte store, or a Svelte 'tweened' store,
     * depending on whether the user specified transition options.
     * The way the tweened store is set up depends on the type of aesthetic,
     * and which options the user has chosen.
     *
     * @param {String} aestheticName The name of the aesthetic a store is created for.
     * @param {*} aestheticValue The initial value of the store.
     * @param {Number|Object} transitionOptions A number indicating the transtion duration, or an Object
     * with aesthetic names as keys, and Numbers OR Objects as values.
     * @returns {writable|tweened}
     */
    function createTransitionable (aestheticName, aestheticValue, transitionOptions) {
      if (isUndefined(transitionOptions) || isUndefined(aestheticValue)) {
        return writable(aestheticValue)
      }

      if (transitionOptions.constructor === Number) {
        const options = createOptionsFromDuration(aestheticName, transitionOptions);
        return tweened(aestheticValue, options)
      }

      if (transitionOptions.constructor === Object) {
        if (!(aestheticName in transitionOptions)) return writable(aestheticValue)

        const aestheticTransition = transitionOptions[aestheticName];

        if (aestheticTransition && aestheticTransition.constructor === Number) {
          const options = createOptionsFromDuration(aestheticName, aestheticTransition);
          return tweened(aestheticValue, options)
        }

        if (aestheticTransition && aestheticTransition.constructor === Object) {
          const options = createOptionsFromOptions(aestheticName, aestheticTransition);
          return tweened(aestheticValue, options)
        }
      }

      throw new Error(`Invalid transition for ${aestheticName}`)
    }

    function createOptionsFromDuration (aestheticName, duration) {
      if (aestheticName === 'geometry') {
        return { duration, easing: cubicOut, interpolate: transitionGeometry }
      } else {
        return { duration, easing: cubicOut, interpolate }
      }
    }

    function transitionsEqual (a, b) {
      if (a === undefined || b === undefined) return a === b

      if (a.constructor !== Object) return a === b

      return transitionObjectsEqual(a, b)
    }

    function transitionObjectsEqual (a, b) {
      if (b.constructor !== Object) return false

      if (numberOfKeys(a) !== numberOfKeys(b)) return false

      for (const aesthetic in a) {
        const aestheticA = a[aesthetic];
        const aestheticB = b[aesthetic];
        if (aestheticA.constructor !== Object) return aestheticA === aestheticB
        if (!aestheticTransitionObjectsEqual(aestheticA, aestheticB)) return false
      }

      return true
    }

    function aestheticTransitionObjectsEqual (a, b) {
      if (b.constructor !== Object) return false

      if (numberOfKeys(a) !== numberOfKeys(b)) return false

      for (const key in a) {
        if (a[key] !== b[key]) return false
      }

      return true
    }

    function numberOfKeys (obj) {
      return Object.keys(obj).length
    }

    function createOptionsFromOptions (aestheticName, transitionOptions) {
      if (aestheticName === 'geometry') {
        const defaultOptions = {
          delay: 0,
          duration: 400,
          easing: cubicOut,
          interpolate: transitionGeometry
        };

        return Object.assign(defaultOptions, transitionOptions)
      } else {
        const defaultOptions = {
          delay: 0,
          duration: 400,
          easing: cubicOut,
          interpolate
        };

        return Object.assign(defaultOptions, transitionOptions)
      }
    }

    /**
     * Like createTransitionable, returns either a Svelte store, or a Svelte 'tweened' store,
     * depending on whether the user specified transition options.
     * But instead of for a single Mark, the store is created for an entire layer.
     *
     * @param {String} aestheticName The name of the aesthetic a store is created for.
     * @param {*} aestheticValue The initial value of the store.
     * @param {Number|Object} transitionOptions A number indicating the transtion duration, or an Object
     * with aesthetic names as keys, and Numbers OR Objects as values.
     * @returns {writable|tweened}
     */
    function createTransitionableLayer (aestheticName, aestheticValue, transitionOptions) {
      if (isUndefined(transitionOptions) || isUndefined(aestheticValue)) {
        return writable(aestheticValue)
      }

      if (transitionOptions.constructor === Number) {
        const options = createOptionsFromDuration$1(aestheticName, transitionOptions);
        return tweened(aestheticValue, options)
      }

      if (transitionOptions.constructor === Object) {
        if (!(aestheticName in transitionOptions)) return writable(aestheticValue)

        const aestheticTransition = transitionOptions[aestheticName];

        if (aestheticTransition && aestheticTransition.constructor === Number) {
          const options = createOptionsFromDuration$1(aestheticName, aestheticTransition);
          return tweened(aestheticValue, options)
        }

        if (aestheticTransition && aestheticTransition.constructor === Object) {
          const options = createOptionsFromOptions$1(aestheticName, aestheticTransition);
          return tweened(aestheticValue, options)
        }
      }

      throw new Error(`Invalid transition for ${aestheticName}`)
    }

    function createOptionsFromDuration$1 (aestheticName, duration) {
      if (aestheticName === 'geometry') {
        return { duration, easing: cubicOut, interpolate: transitionGeometries }
      } else {
        return { duration, easing: cubicOut, interpolate: interpolateLayer }
      }
    }

    function createOptionsFromOptions$1 (aestheticName, transitionOptions) {
      if (aestheticName === 'geometry') {
        return Object.assign({ interpolate: transitionGeometries }, transitionOptions)
      } else {
        return Object.assign({ interpolate: interpolateLayer }, transitionOptions)
      }
    }

    function interpolateLayer (a, b) {
      const aWithoutObsoleteKeys = {};

      for (const key in a) {
        if (key in b) {
          aWithoutObsoleteKeys[key] = a[key];
        }
      }

      return interpolate(aWithoutObsoleteKeys, b)
    }

    function any (...args) {
      for (const arg of args) {
        if (arg !== undefined) return true
      }

      return false
    }

    function parseRenderSettings (renderSettings) {
      const defaultRenderSettings = {
        simplify: false,
        simplificationTreshold: 1,
        interpolate: true,
        interpolationTreshold: 5,
        decimals: 2
      };

      const parsedRenderSettings = Object.assign(defaultRenderSettings, renderSettings);

      return parsedRenderSettings
    }

    const geoPathGenerator = geoPath();

    function generatePath (geometry) {
      return geoPathGenerator(geometry)
    }

    function textAnchorPoint (anchorPoint) {
    // For setting the anchor point on a SVG text element
      switch (anchorPoint) {
        case 'center':
          return { textAnchor: 'middle', dominantBaseline: 'middle' }
        case 'lb':
          return { textAnchor: 'start', dominantBaseline: 'alphabetic' }
        case 'lt':
          return { textAnchor: 'start', dominantBaseline: 'hanging' }
        case 'rt':
          return { textAnchor: 'end', dominantBaseline: 'hanging' }
        case 'rb':
          return { textAnchor: 'end', dominantBaseline: 'alphabetic' }
        case 'l':
          return { textAnchor: 'start', dominantBaseline: 'middle' }
        case 'r':
          return { textAnchor: 'end', dominantBaseline: 'middle' }
        case 'b':
          return { textAnchor: 'middle', dominantBaseline: 'alphabetic' }
        case 't':
          return { textAnchor: 'middle', dominantBaseline: 'hanging' }
        default: {
          return { textAnchor: 'middle', dominantBaseline: 'middle' }
        }
      }
    }

    /* node_modules/@snlab/florence/src/components/Marks/Mark/Mark.svelte generated by Svelte v3.21.0 */
    const file$1 = "node_modules/@snlab/florence/src/components/Marks/Mark/Mark.svelte";

    // (417:0) {#if $graphicContext.output() === 'svg'}
    function create_if_block$1(ctx) {
    	let t0;
    	let t1;
    	let t2;
    	let if_block3_anchor;
    	let if_block0 = /*renderPolygon*/ ctx[26] && create_if_block_4(ctx);
    	let if_block1 = /*renderCircle*/ ctx[27] && create_if_block_3(ctx);
    	let if_block2 = /*renderLine*/ ctx[28] && create_if_block_2(ctx);
    	let if_block3 = /*renderLabel*/ ctx[29] && create_if_block_1$1(ctx);

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			if (if_block2) if_block2.c();
    			t2 = space();
    			if (if_block3) if_block3.c();
    			if_block3_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t0, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, t1, anchor);
    			if (if_block2) if_block2.m(target, anchor);
    			insert_dev(target, t2, anchor);
    			if (if_block3) if_block3.m(target, anchor);
    			insert_dev(target, if_block3_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (/*renderPolygon*/ ctx[26]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_4(ctx);
    					if_block0.c();
    					if_block0.m(t0.parentNode, t0);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*renderCircle*/ ctx[27]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_3(ctx);
    					if_block1.c();
    					if_block1.m(t1.parentNode, t1);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (/*renderLine*/ ctx[28]) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block_2(ctx);
    					if_block2.c();
    					if_block2.m(t2.parentNode, t2);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}

    			if (/*renderLabel*/ ctx[29]) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);
    				} else {
    					if_block3 = create_if_block_1$1(ctx);
    					if_block3.c();
    					if_block3.m(if_block3_anchor.parentNode, if_block3_anchor);
    				}
    			} else if (if_block3) {
    				if_block3.d(1);
    				if_block3 = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t0);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(t1);
    			if (if_block2) if_block2.d(detaching);
    			if (detaching) detach_dev(t2);
    			if (if_block3) if_block3.d(detaching);
    			if (detaching) detach_dev(if_block3_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$1.name,
    		type: "if",
    		source: "(417:0) {#if $graphicContext.output() === 'svg'}",
    		ctx
    	});

    	return block;
    }

    // (419:2) {#if renderPolygon}
    function create_if_block_4(ctx) {
    	let path;
    	let path_class_value;
    	let path_d_value;

    	const block = {
    		c: function create() {
    			path = svg_element("path");
    			attr_dev(path, "class", path_class_value = /*type*/ ctx[0].toLowerCase());
    			attr_dev(path, "d", path_d_value = generatePath(/*$tr_screenGeometry*/ ctx[16]));
    			attr_dev(path, "fill", /*$tr_fill*/ ctx[18]);
    			attr_dev(path, "stroke", /*$tr_stroke*/ ctx[19]);
    			attr_dev(path, "stroke-width", /*$tr_strokeWidth*/ ctx[20]);
    			attr_dev(path, "fill-opacity", /*$tr_fillOpacity*/ ctx[21]);
    			attr_dev(path, "stroke-opacity", /*$tr_strokeOpacity*/ ctx[22]);
    			attr_dev(path, "opacity", /*$tr_opacity*/ ctx[23]);
    			add_location(path, file$1, 420, 4, 13416);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, path, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*type*/ 1 && path_class_value !== (path_class_value = /*type*/ ctx[0].toLowerCase())) {
    				attr_dev(path, "class", path_class_value);
    			}

    			if (dirty[0] & /*$tr_screenGeometry*/ 65536 && path_d_value !== (path_d_value = generatePath(/*$tr_screenGeometry*/ ctx[16]))) {
    				attr_dev(path, "d", path_d_value);
    			}

    			if (dirty[0] & /*$tr_fill*/ 262144) {
    				attr_dev(path, "fill", /*$tr_fill*/ ctx[18]);
    			}

    			if (dirty[0] & /*$tr_stroke*/ 524288) {
    				attr_dev(path, "stroke", /*$tr_stroke*/ ctx[19]);
    			}

    			if (dirty[0] & /*$tr_strokeWidth*/ 1048576) {
    				attr_dev(path, "stroke-width", /*$tr_strokeWidth*/ ctx[20]);
    			}

    			if (dirty[0] & /*$tr_fillOpacity*/ 2097152) {
    				attr_dev(path, "fill-opacity", /*$tr_fillOpacity*/ ctx[21]);
    			}

    			if (dirty[0] & /*$tr_strokeOpacity*/ 4194304) {
    				attr_dev(path, "stroke-opacity", /*$tr_strokeOpacity*/ ctx[22]);
    			}

    			if (dirty[0] & /*$tr_opacity*/ 8388608) {
    				attr_dev(path, "opacity", /*$tr_opacity*/ ctx[23]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(path);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4.name,
    		type: "if",
    		source: "(419:2) {#if renderPolygon}",
    		ctx
    	});

    	return block;
    }

    // (434:2) {#if renderCircle}
    function create_if_block_3(ctx) {
    	let circle;
    	let circle_cx_value;
    	let circle_cy_value;

    	const block = {
    		c: function create() {
    			circle = svg_element("circle");
    			attr_dev(circle, "class", "point");
    			attr_dev(circle, "cx", circle_cx_value = /*$tr_screenGeometry*/ ctx[16].coordinates[0]);
    			attr_dev(circle, "cy", circle_cy_value = /*$tr_screenGeometry*/ ctx[16].coordinates[1]);
    			attr_dev(circle, "r", /*$tr_radius*/ ctx[17]);
    			attr_dev(circle, "fill", /*$tr_fill*/ ctx[18]);
    			attr_dev(circle, "stroke", /*$tr_stroke*/ ctx[19]);
    			attr_dev(circle, "stroke-width", /*$tr_strokeWidth*/ ctx[20]);
    			attr_dev(circle, "fill-opacity", /*$tr_fillOpacity*/ ctx[21]);
    			attr_dev(circle, "stroke-opacity", /*$tr_strokeOpacity*/ ctx[22]);
    			attr_dev(circle, "opacity", /*$tr_opacity*/ ctx[23]);
    			add_location(circle, file$1, 435, 4, 13732);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, circle, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*$tr_screenGeometry*/ 65536 && circle_cx_value !== (circle_cx_value = /*$tr_screenGeometry*/ ctx[16].coordinates[0])) {
    				attr_dev(circle, "cx", circle_cx_value);
    			}

    			if (dirty[0] & /*$tr_screenGeometry*/ 65536 && circle_cy_value !== (circle_cy_value = /*$tr_screenGeometry*/ ctx[16].coordinates[1])) {
    				attr_dev(circle, "cy", circle_cy_value);
    			}

    			if (dirty[0] & /*$tr_radius*/ 131072) {
    				attr_dev(circle, "r", /*$tr_radius*/ ctx[17]);
    			}

    			if (dirty[0] & /*$tr_fill*/ 262144) {
    				attr_dev(circle, "fill", /*$tr_fill*/ ctx[18]);
    			}

    			if (dirty[0] & /*$tr_stroke*/ 524288) {
    				attr_dev(circle, "stroke", /*$tr_stroke*/ ctx[19]);
    			}

    			if (dirty[0] & /*$tr_strokeWidth*/ 1048576) {
    				attr_dev(circle, "stroke-width", /*$tr_strokeWidth*/ ctx[20]);
    			}

    			if (dirty[0] & /*$tr_fillOpacity*/ 2097152) {
    				attr_dev(circle, "fill-opacity", /*$tr_fillOpacity*/ ctx[21]);
    			}

    			if (dirty[0] & /*$tr_strokeOpacity*/ 4194304) {
    				attr_dev(circle, "stroke-opacity", /*$tr_strokeOpacity*/ ctx[22]);
    			}

    			if (dirty[0] & /*$tr_opacity*/ 8388608) {
    				attr_dev(circle, "opacity", /*$tr_opacity*/ ctx[23]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(circle);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3.name,
    		type: "if",
    		source: "(434:2) {#if renderCircle}",
    		ctx
    	});

    	return block;
    }

    // (451:2) {#if renderLine}
    function create_if_block_2(ctx) {
    	let path;
    	let path_d_value;

    	const block = {
    		c: function create() {
    			path = svg_element("path");
    			attr_dev(path, "class", "line");
    			attr_dev(path, "d", path_d_value = generatePath(/*$tr_screenGeometry*/ ctx[16]));
    			attr_dev(path, "fill", "none");
    			attr_dev(path, "stroke-width", /*$tr_strokeWidth*/ ctx[20]);
    			attr_dev(path, "stroke", /*$tr_stroke*/ ctx[19]);
    			attr_dev(path, "opacity", /*$tr_opacity*/ ctx[23]);
    			add_location(path, file$1, 452, 4, 14104);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, path, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*$tr_screenGeometry*/ 65536 && path_d_value !== (path_d_value = generatePath(/*$tr_screenGeometry*/ ctx[16]))) {
    				attr_dev(path, "d", path_d_value);
    			}

    			if (dirty[0] & /*$tr_strokeWidth*/ 1048576) {
    				attr_dev(path, "stroke-width", /*$tr_strokeWidth*/ ctx[20]);
    			}

    			if (dirty[0] & /*$tr_stroke*/ 524288) {
    				attr_dev(path, "stroke", /*$tr_stroke*/ ctx[19]);
    			}

    			if (dirty[0] & /*$tr_opacity*/ 8388608) {
    				attr_dev(path, "opacity", /*$tr_opacity*/ ctx[23]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(path);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2.name,
    		type: "if",
    		source: "(451:2) {#if renderLine}",
    		ctx
    	});

    	return block;
    }

    // (464:2) {#if renderLabel}
    function create_if_block_1$1(ctx) {
    	let text_1;
    	let t_value = /*aesthetics*/ ctx[2].text + "";
    	let t;
    	let text_1_x_value;
    	let text_1_y_value;
    	let text_1_font_size_value;
    	let text_1_text_anchor_value;
    	let text_1_dominant_baseline_value;

    	const block = {
    		c: function create() {
    			text_1 = svg_element("text");
    			t = text(t_value);
    			attr_dev(text_1, "class", "label");
    			attr_dev(text_1, "x", text_1_x_value = /*$tr_screenGeometry*/ ctx[16].coordinates[0]);
    			attr_dev(text_1, "y", text_1_y_value = /*$tr_screenGeometry*/ ctx[16].coordinates[1]);
    			attr_dev(text_1, "fill", /*$tr_fill*/ ctx[18]);
    			attr_dev(text_1, "stroke", /*$tr_stroke*/ ctx[19]);
    			attr_dev(text_1, "stroke-width", /*$tr_strokeWidth*/ ctx[20]);
    			attr_dev(text_1, "fill-opacity", /*$tr_fillOpacity*/ ctx[21]);
    			attr_dev(text_1, "stroke-opacity", /*$tr_strokeOpacity*/ ctx[22]);
    			attr_dev(text_1, "opacity", /*$tr_opacity*/ ctx[23]);
    			attr_dev(text_1, "transform", /*rotateTransform*/ ctx[14]);
    			attr_dev(text_1, "font-family", /*fontFamily*/ ctx[1]);
    			attr_dev(text_1, "font-size", text_1_font_size_value = /*$tr_fontSize*/ ctx[24] + "px");
    			attr_dev(text_1, "font-weight", /*$tr_fontWeight*/ ctx[25]);
    			attr_dev(text_1, "text-anchor", text_1_text_anchor_value = /*parsedTextAnchorPoint*/ ctx[15].textAnchor);
    			attr_dev(text_1, "dominant-baseline", text_1_dominant_baseline_value = /*parsedTextAnchorPoint*/ ctx[15].dominantBaseline);
    			add_location(text_1, file$1, 465, 4, 14325);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, text_1, anchor);
    			append_dev(text_1, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*aesthetics*/ 4 && t_value !== (t_value = /*aesthetics*/ ctx[2].text + "")) set_data_dev(t, t_value);

    			if (dirty[0] & /*$tr_screenGeometry*/ 65536 && text_1_x_value !== (text_1_x_value = /*$tr_screenGeometry*/ ctx[16].coordinates[0])) {
    				attr_dev(text_1, "x", text_1_x_value);
    			}

    			if (dirty[0] & /*$tr_screenGeometry*/ 65536 && text_1_y_value !== (text_1_y_value = /*$tr_screenGeometry*/ ctx[16].coordinates[1])) {
    				attr_dev(text_1, "y", text_1_y_value);
    			}

    			if (dirty[0] & /*$tr_fill*/ 262144) {
    				attr_dev(text_1, "fill", /*$tr_fill*/ ctx[18]);
    			}

    			if (dirty[0] & /*$tr_stroke*/ 524288) {
    				attr_dev(text_1, "stroke", /*$tr_stroke*/ ctx[19]);
    			}

    			if (dirty[0] & /*$tr_strokeWidth*/ 1048576) {
    				attr_dev(text_1, "stroke-width", /*$tr_strokeWidth*/ ctx[20]);
    			}

    			if (dirty[0] & /*$tr_fillOpacity*/ 2097152) {
    				attr_dev(text_1, "fill-opacity", /*$tr_fillOpacity*/ ctx[21]);
    			}

    			if (dirty[0] & /*$tr_strokeOpacity*/ 4194304) {
    				attr_dev(text_1, "stroke-opacity", /*$tr_strokeOpacity*/ ctx[22]);
    			}

    			if (dirty[0] & /*$tr_opacity*/ 8388608) {
    				attr_dev(text_1, "opacity", /*$tr_opacity*/ ctx[23]);
    			}

    			if (dirty[0] & /*rotateTransform*/ 16384) {
    				attr_dev(text_1, "transform", /*rotateTransform*/ ctx[14]);
    			}

    			if (dirty[0] & /*fontFamily*/ 2) {
    				attr_dev(text_1, "font-family", /*fontFamily*/ ctx[1]);
    			}

    			if (dirty[0] & /*$tr_fontSize*/ 16777216 && text_1_font_size_value !== (text_1_font_size_value = /*$tr_fontSize*/ ctx[24] + "px")) {
    				attr_dev(text_1, "font-size", text_1_font_size_value);
    			}

    			if (dirty[0] & /*$tr_fontWeight*/ 33554432) {
    				attr_dev(text_1, "font-weight", /*$tr_fontWeight*/ ctx[25]);
    			}

    			if (dirty[0] & /*parsedTextAnchorPoint*/ 32768 && text_1_text_anchor_value !== (text_1_text_anchor_value = /*parsedTextAnchorPoint*/ ctx[15].textAnchor)) {
    				attr_dev(text_1, "text-anchor", text_1_text_anchor_value);
    			}

    			if (dirty[0] & /*parsedTextAnchorPoint*/ 32768 && text_1_dominant_baseline_value !== (text_1_dominant_baseline_value = /*parsedTextAnchorPoint*/ ctx[15].dominantBaseline)) {
    				attr_dev(text_1, "dominant-baseline", text_1_dominant_baseline_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(text_1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$1.name,
    		type: "if",
    		source: "(464:2) {#if renderLabel}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1(ctx) {
    	let show_if = /*$graphicContext*/ ctx[30].output() === "svg";
    	let if_block_anchor;
    	let if_block = show_if && create_if_block$1(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*$graphicContext*/ 1073741824) show_if = /*$graphicContext*/ ctx[30].output() === "svg";

    			if (show_if) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$1(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    let idCounter$1 = 0;

    function getId$1() {
    	return "mark" + idCounter$1++;
    }

    function instance$1($$self, $$props, $$invalidate) {
    	let $sectionContext;

    	let $tr_rotation,
    		$$unsubscribe_tr_rotation = noop,
    		$$subscribe_tr_rotation = () => ($$unsubscribe_tr_rotation(), $$unsubscribe_tr_rotation = subscribe(tr_rotation, $$value => $$invalidate(84, $tr_rotation = $$value)), tr_rotation);

    	let $tr_screenGeometry,
    		$$unsubscribe_tr_screenGeometry = noop,
    		$$subscribe_tr_screenGeometry = () => ($$unsubscribe_tr_screenGeometry(), $$unsubscribe_tr_screenGeometry = subscribe(tr_screenGeometry, $$value => $$invalidate(16, $tr_screenGeometry = $$value)), tr_screenGeometry);

    	let $tr_radius,
    		$$unsubscribe_tr_radius = noop,
    		$$subscribe_tr_radius = () => ($$unsubscribe_tr_radius(), $$unsubscribe_tr_radius = subscribe(tr_radius, $$value => $$invalidate(17, $tr_radius = $$value)), tr_radius);

    	let $tr_fill,
    		$$unsubscribe_tr_fill = noop,
    		$$subscribe_tr_fill = () => ($$unsubscribe_tr_fill(), $$unsubscribe_tr_fill = subscribe(tr_fill, $$value => $$invalidate(18, $tr_fill = $$value)), tr_fill);

    	let $tr_stroke,
    		$$unsubscribe_tr_stroke = noop,
    		$$subscribe_tr_stroke = () => ($$unsubscribe_tr_stroke(), $$unsubscribe_tr_stroke = subscribe(tr_stroke, $$value => $$invalidate(19, $tr_stroke = $$value)), tr_stroke);

    	let $tr_strokeWidth,
    		$$unsubscribe_tr_strokeWidth = noop,
    		$$subscribe_tr_strokeWidth = () => ($$unsubscribe_tr_strokeWidth(), $$unsubscribe_tr_strokeWidth = subscribe(tr_strokeWidth, $$value => $$invalidate(20, $tr_strokeWidth = $$value)), tr_strokeWidth);

    	let $tr_fillOpacity,
    		$$unsubscribe_tr_fillOpacity = noop,
    		$$subscribe_tr_fillOpacity = () => ($$unsubscribe_tr_fillOpacity(), $$unsubscribe_tr_fillOpacity = subscribe(tr_fillOpacity, $$value => $$invalidate(21, $tr_fillOpacity = $$value)), tr_fillOpacity);

    	let $tr_strokeOpacity,
    		$$unsubscribe_tr_strokeOpacity = noop,
    		$$subscribe_tr_strokeOpacity = () => ($$unsubscribe_tr_strokeOpacity(), $$unsubscribe_tr_strokeOpacity = subscribe(tr_strokeOpacity, $$value => $$invalidate(22, $tr_strokeOpacity = $$value)), tr_strokeOpacity);

    	let $tr_opacity,
    		$$unsubscribe_tr_opacity = noop,
    		$$subscribe_tr_opacity = () => ($$unsubscribe_tr_opacity(), $$unsubscribe_tr_opacity = subscribe(tr_opacity, $$value => $$invalidate(23, $tr_opacity = $$value)), tr_opacity);

    	let $tr_fontSize,
    		$$unsubscribe_tr_fontSize = noop,
    		$$subscribe_tr_fontSize = () => ($$unsubscribe_tr_fontSize(), $$unsubscribe_tr_fontSize = subscribe(tr_fontSize, $$value => $$invalidate(24, $tr_fontSize = $$value)), tr_fontSize);

    	let $tr_fontWeight,
    		$$unsubscribe_tr_fontWeight = noop,
    		$$subscribe_tr_fontWeight = () => ($$unsubscribe_tr_fontWeight(), $$unsubscribe_tr_fontWeight = subscribe(tr_fontWeight, $$value => $$invalidate(25, $tr_fontWeight = $$value)), tr_fontWeight);

    	let $interactionManagerContext;
    	let $graphicContext;
    	$$self.$$.on_destroy.push(() => $$unsubscribe_tr_rotation());
    	$$self.$$.on_destroy.push(() => $$unsubscribe_tr_screenGeometry());
    	$$self.$$.on_destroy.push(() => $$unsubscribe_tr_radius());
    	$$self.$$.on_destroy.push(() => $$unsubscribe_tr_fill());
    	$$self.$$.on_destroy.push(() => $$unsubscribe_tr_stroke());
    	$$self.$$.on_destroy.push(() => $$unsubscribe_tr_strokeWidth());
    	$$self.$$.on_destroy.push(() => $$unsubscribe_tr_fillOpacity());
    	$$self.$$.on_destroy.push(() => $$unsubscribe_tr_strokeOpacity());
    	$$self.$$.on_destroy.push(() => $$unsubscribe_tr_opacity());
    	$$self.$$.on_destroy.push(() => $$unsubscribe_tr_fontSize());
    	$$self.$$.on_destroy.push(() => $$unsubscribe_tr_fontWeight());
    	const markId = getId$1();
    	let initPhase = true;
    	const initDone = () => !initPhase;
    	let { type } = $$props;
    	let { x = undefined } = $$props;
    	let { y = undefined } = $$props;
    	let { x1 = undefined } = $$props;
    	let { x2 = undefined } = $$props;
    	let { y1 = undefined } = $$props;
    	let { y2 = undefined } = $$props;
    	let { geometry = undefined } = $$props;
    	let { shape = undefined } = $$props;
    	let { size = undefined } = $$props;
    	let { independentAxis = undefined } = $$props;
    	let { radius = undefined } = $$props;
    	let { fill = undefined } = $$props;
    	let { stroke = undefined } = $$props;
    	let { strokeWidth = undefined } = $$props;
    	let { strokeOpacity = undefined } = $$props;
    	let { fillOpacity = undefined } = $$props;
    	let { opacity = undefined } = $$props;
    	let { text = undefined } = $$props;
    	let { fontFamily = undefined } = $$props;
    	let { fontSize = undefined } = $$props;
    	let { fontWeight = undefined } = $$props;
    	let { rotation = undefined } = $$props;
    	let { anchorPoint = undefined } = $$props;
    	let { transition = undefined } = $$props;
    	let { onClick = undefined } = $$props;
    	let { onMousedown = undefined } = $$props;
    	let { onMouseup = undefined } = $$props;
    	let { onMouseover = undefined } = $$props;
    	let { onMouseout = undefined } = $$props;
    	let { onMousedrag = undefined } = $$props;
    	let { onTouchdown = undefined } = $$props;
    	let { onTouchup = undefined } = $$props;
    	let { onTouchover = undefined } = $$props;
    	let { onTouchout = undefined } = $$props;
    	let { onTouchdrag = undefined } = $$props;
    	let { onSelect = undefined } = $$props;
    	let { onDeselect = undefined } = $$props;
    	let { renderSettings = undefined } = $$props;
    	let { blockReindexing = false } = $$props;
    	let { _asPolygon = true } = $$props;

    	// Validate aesthetics every time input changes
    	let aesthetics = validateAesthetics(type, {
    		x,
    		y,
    		x1,
    		x2,
    		y1,
    		y2,
    		geometry,
    		shape,
    		size,
    		independentAxis,
    		radius,
    		fill,
    		stroke,
    		strokeWidth,
    		strokeOpacity,
    		fillOpacity,
    		opacity,
    		text,
    		fontFamily,
    		fontSize,
    		fontWeight,
    		rotation,
    		anchorPoint
    	});

    	// Create 'positioning' aesthetics object
    	let positioningAesthetics = {
    		x,
    		y,
    		x1,
    		x2,
    		y1,
    		y2,
    		geometry,
    		shape,
    		size,
    		independentAxis
    	};

    	// Select appriopriate geometry conversion functions
    	let createPixelGeometry = markPixelGeometryFuncs[type];

    	let representAsPolygon = markRepresentAsPolygonFuncs[type];

    	// Check if mark must be represented as polygon
    	let asPolygon = _asPolygon === true && markRepresentAsPolygonFuncs[type] !== undefined;

    	// Contexts
    	const graphicContext = subscribe$1();

    	validate_store(graphicContext, "graphicContext");
    	component_subscribe($$self, graphicContext, value => $$invalidate(30, $graphicContext = value));
    	const sectionContext = subscribe$2();
    	validate_store(sectionContext, "sectionContext");
    	component_subscribe($$self, sectionContext, value => $$invalidate(83, $sectionContext = value));
    	const interactionManagerContext = subscribe$4();
    	validate_store(interactionManagerContext, "interactionManagerContext");
    	component_subscribe($$self, interactionManagerContext, value => $$invalidate(88, $interactionManagerContext = value));

    	// Initiate geometries
    	let pixelGeometry;

    	let screenGeometry;
    	updatePixelGeometry();
    	updateScreenGeometry();

    	// Initiate transitionables
    	let tr_screenGeometry = createTransitionable("geometry", screenGeometry, transition);

    	validate_store(tr_screenGeometry, "tr_screenGeometry");
    	$$subscribe_tr_screenGeometry();
    	let tr_radius = createTransitionable("radius", aesthetics.radius, transition);
    	validate_store(tr_radius, "tr_radius");
    	$$subscribe_tr_radius();
    	let tr_fill = createTransitionable("fill", aesthetics.fill, transition);
    	validate_store(tr_fill, "tr_fill");
    	$$subscribe_tr_fill();
    	let tr_stroke = createTransitionable("stroke", aesthetics.stroke, transition);
    	validate_store(tr_stroke, "tr_stroke");
    	$$subscribe_tr_stroke();
    	let tr_strokeWidth = createTransitionable("strokeWidth", aesthetics.strokeWidth, transition);
    	validate_store(tr_strokeWidth, "tr_strokeWidth");
    	$$subscribe_tr_strokeWidth();
    	let tr_fillOpacity = createTransitionable("fillOpacity", aesthetics.fillOpacity, transition);
    	validate_store(tr_fillOpacity, "tr_fillOpacity");
    	$$subscribe_tr_fillOpacity();
    	let tr_strokeOpacity = createTransitionable("strokeOpacity", aesthetics.strokeOpacity, transition);
    	validate_store(tr_strokeOpacity, "tr_strokeOpacity");
    	$$subscribe_tr_strokeOpacity();
    	let tr_opacity = createTransitionable("opacity", aesthetics.opacity, transition);
    	validate_store(tr_opacity, "tr_opacity");
    	$$subscribe_tr_opacity();

    	// text transtitionables
    	let tr_fontSize = createTransitionable("fontSize", aesthetics.fontSize, transition);

    	validate_store(tr_fontSize, "tr_fontSize");
    	$$subscribe_tr_fontSize();
    	let tr_fontWeight = createTransitionable("fontWeight", aesthetics.fontWeight, transition);
    	validate_store(tr_fontWeight, "tr_fontWeight");
    	$$subscribe_tr_fontWeight();
    	let tr_rotation = createTransitionable("rotation", aesthetics.rotation, transition);
    	validate_store(tr_rotation, "tr_rotation");
    	$$subscribe_tr_rotation();

    	// non-transitionable aesthetics that need additional calculation
    	let rotateTransform = `rotate(${$tr_rotation}, ${$tr_screenGeometry.coordinates[0]}, ${$tr_screenGeometry.coordinates[1]})`;

    	let parsedTextAnchorPoint = textAnchorPoint(aesthetics.anchorPoint);
    	let previousTransition;
    	let pixelGeometryRecalculationNecessary = false;
    	let screenGeometryRecalculationNecessary = false;
    	

    	// Update transitionables when transition settings change
    	beforeUpdate(() => {
    		if (!transitionsEqual(previousTransition, transition)) {
    			previousTransition = transition;
    			$$subscribe_tr_screenGeometry($$invalidate(3, tr_screenGeometry = createTransitionable("geometry", $tr_screenGeometry, transition)));
    			$$subscribe_tr_radius($$invalidate(4, tr_radius = createTransitionable("radius", $tr_radius, transition)));
    			$$subscribe_tr_fill($$invalidate(5, tr_fill = createTransitionable("fill", $tr_fill, transition)));
    			$$subscribe_tr_stroke($$invalidate(6, tr_stroke = createTransitionable("stroke", $tr_stroke, transition)));
    			$$subscribe_tr_strokeWidth($$invalidate(7, tr_strokeWidth = createTransitionable("strokeWidth", $tr_strokeWidth, transition)));
    			$$subscribe_tr_fillOpacity($$invalidate(8, tr_fillOpacity = createTransitionable("fillOpacity", $tr_fillOpacity, transition)));
    			$$subscribe_tr_strokeOpacity($$invalidate(9, tr_strokeOpacity = createTransitionable("strokeOpacity", $tr_strokeOpacity, transition)));
    			$$subscribe_tr_opacity($$invalidate(10, tr_opacity = createTransitionable("opacity", $tr_opacity, transition)));
    			$$subscribe_tr_fontSize($$invalidate(11, tr_fontSize = createTransitionable("fontSize", $tr_fontSize, transition)));
    			$$subscribe_tr_fontWeight($$invalidate(12, tr_fontWeight = createTransitionable("fontWeight", $tr_fontWeight, transition)));
    			$$subscribe_tr_rotation($$invalidate(13, tr_rotation = createTransitionable("rotation", $tr_rotation, transition)));
    		}
    	});

    	afterUpdate(() => {
    		initPhase = false;
    	});

    	onMount(() => {
    		updateInteractionManagerIfNecessary();
    	});

    	onDestroy(() => {
    		removeMarkFromSpatialIndexIfNecessary();
    	});

    	// Helpers
    	function scheduleUpdatePixelGeometry() {
    		$$invalidate(81, pixelGeometryRecalculationNecessary = true);
    		$$invalidate(82, screenGeometryRecalculationNecessary = true);
    	}

    	function updatePixelGeometry() {
    		pixelGeometry = createPixelGeometry(positioningAesthetics, $sectionContext, parseRenderSettings(renderSettings));
    	}

    	function scheduleUpdateScreenGeometry() {
    		$$invalidate(82, screenGeometryRecalculationNecessary = true);
    	}

    	function updateScreenGeometry() {
    		if (asPolygon) {
    			$$invalidate(79, screenGeometry = representAsPolygon(pixelGeometry, aesthetics));
    		} else {
    			$$invalidate(79, screenGeometry = pixelGeometry);
    		}
    	}

    	function updateInteractionManagerIfNecessary() {
    		if (initPhase || !(blockReindexing || $sectionContext.blockReindexing)) {
    			removeMarkFromSpatialIndexIfNecessary();

    			if (isInteractiveMouse) {
    				const markInterface = $interactionManagerContext.mouse().marks();
    				markInterface.loadMark(type, createDataNecessaryForIndexing());
    				if (onClick) markInterface.addMarkInteraction("click", markId, onClick);
    				if (onMousedown) markInterface.addMarkInteraction("mousedown", markId, onMousedown);
    				if (onMouseup) markInterface.addMarkInteraction("mouseup", markId, onMouseup);
    				if (onMouseout) markInterface.addMarkInteraction("mouseout", markId, onMouseout);
    				if (onMouseover) markInterface.addMarkInteraction("mouseover", markId, onMouseover);
    				if (onMousedrag) markInterface.addMarkInteraction("mousedrag", markId, onMousedrag);
    			}

    			if (isInteractiveTouch) {
    				const markInterface = $interactionManagerContext.touch().marks();
    				markInterface.loadMark(type, createDataNecessaryForIndexing());
    				if (onTouchdown) markInterface.addMarkInteraction("touchdown", markId, onTouchdown);
    				if (onTouchup) markInterface.addMarkInteraction("touchup", markId, onTouchup);
    				if (onTouchover) markInterface.addMarkInteraction("touchover", markId, onTouchover);
    				if (onTouchout) markInterface.addMarkInteraction("touchout", markId, onTouchout);
    				if (onTouchdrag) markInterface.addMarkInteraction("touchdrag", markId, onTouchdrag);
    			}
    		}

    		removeMarkFromSelectIfNecessary();

    		if (isSelectable) {
    			const selectManager = $interactionManagerContext.select();
    			selectManager.loadMark(type, createDataNecessaryForIndexing(), { onSelect, onDeselect });
    		}
    	}

    	function removeMarkFromSpatialIndexIfNecessary() {
    		if (detectIt.hasMouse) {
    			const markMouseInterface = $interactionManagerContext.mouse().marks();

    			if (markMouseInterface.markIsLoaded(markId)) {
    				markMouseInterface.removeAllMarkInteractions(markId);
    				markMouseInterface.removeMark(markId);
    			}
    		}

    		if (detectIt.hasTouch) {
    			const markTouchInterface = $interactionManagerContext.touch().marks();

    			if (markTouchInterface.markIsLoaded(markId)) {
    				markTouchInterface.removeAllMarkInteractions(markId);
    				markTouchInterface.removeMark(markId);
    			}
    		}
    	}

    	function removeMarkFromSelectIfNecessary() {
    		const selectManager = $interactionManagerContext.select();

    		if (selectManager.markIsLoaded(markId)) {
    			selectManager.removeMark(markId);
    		}
    	}

    	function createDataNecessaryForIndexing() {
    		return createDataNecessaryForIndexingMark(type, markId, { screenGeometry, pixelGeometry }, aesthetics);
    	}

    	const writable_props = [
    		"type",
    		"x",
    		"y",
    		"x1",
    		"x2",
    		"y1",
    		"y2",
    		"geometry",
    		"shape",
    		"size",
    		"independentAxis",
    		"radius",
    		"fill",
    		"stroke",
    		"strokeWidth",
    		"strokeOpacity",
    		"fillOpacity",
    		"opacity",
    		"text",
    		"fontFamily",
    		"fontSize",
    		"fontWeight",
    		"rotation",
    		"anchorPoint",
    		"transition",
    		"onClick",
    		"onMousedown",
    		"onMouseup",
    		"onMouseover",
    		"onMouseout",
    		"onMousedrag",
    		"onTouchdown",
    		"onTouchup",
    		"onTouchover",
    		"onTouchout",
    		"onTouchdrag",
    		"onSelect",
    		"onDeselect",
    		"renderSettings",
    		"blockReindexing",
    		"_asPolygon"
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Mark> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Mark", $$slots, []);

    	$$self.$set = $$props => {
    		if ("type" in $$props) $$invalidate(0, type = $$props.type);
    		if ("x" in $$props) $$invalidate(34, x = $$props.x);
    		if ("y" in $$props) $$invalidate(35, y = $$props.y);
    		if ("x1" in $$props) $$invalidate(36, x1 = $$props.x1);
    		if ("x2" in $$props) $$invalidate(37, x2 = $$props.x2);
    		if ("y1" in $$props) $$invalidate(38, y1 = $$props.y1);
    		if ("y2" in $$props) $$invalidate(39, y2 = $$props.y2);
    		if ("geometry" in $$props) $$invalidate(40, geometry = $$props.geometry);
    		if ("shape" in $$props) $$invalidate(41, shape = $$props.shape);
    		if ("size" in $$props) $$invalidate(42, size = $$props.size);
    		if ("independentAxis" in $$props) $$invalidate(43, independentAxis = $$props.independentAxis);
    		if ("radius" in $$props) $$invalidate(44, radius = $$props.radius);
    		if ("fill" in $$props) $$invalidate(45, fill = $$props.fill);
    		if ("stroke" in $$props) $$invalidate(46, stroke = $$props.stroke);
    		if ("strokeWidth" in $$props) $$invalidate(47, strokeWidth = $$props.strokeWidth);
    		if ("strokeOpacity" in $$props) $$invalidate(48, strokeOpacity = $$props.strokeOpacity);
    		if ("fillOpacity" in $$props) $$invalidate(49, fillOpacity = $$props.fillOpacity);
    		if ("opacity" in $$props) $$invalidate(50, opacity = $$props.opacity);
    		if ("text" in $$props) $$invalidate(51, text = $$props.text);
    		if ("fontFamily" in $$props) $$invalidate(1, fontFamily = $$props.fontFamily);
    		if ("fontSize" in $$props) $$invalidate(52, fontSize = $$props.fontSize);
    		if ("fontWeight" in $$props) $$invalidate(53, fontWeight = $$props.fontWeight);
    		if ("rotation" in $$props) $$invalidate(54, rotation = $$props.rotation);
    		if ("anchorPoint" in $$props) $$invalidate(55, anchorPoint = $$props.anchorPoint);
    		if ("transition" in $$props) $$invalidate(56, transition = $$props.transition);
    		if ("onClick" in $$props) $$invalidate(57, onClick = $$props.onClick);
    		if ("onMousedown" in $$props) $$invalidate(58, onMousedown = $$props.onMousedown);
    		if ("onMouseup" in $$props) $$invalidate(59, onMouseup = $$props.onMouseup);
    		if ("onMouseover" in $$props) $$invalidate(60, onMouseover = $$props.onMouseover);
    		if ("onMouseout" in $$props) $$invalidate(61, onMouseout = $$props.onMouseout);
    		if ("onMousedrag" in $$props) $$invalidate(62, onMousedrag = $$props.onMousedrag);
    		if ("onTouchdown" in $$props) $$invalidate(63, onTouchdown = $$props.onTouchdown);
    		if ("onTouchup" in $$props) $$invalidate(64, onTouchup = $$props.onTouchup);
    		if ("onTouchover" in $$props) $$invalidate(65, onTouchover = $$props.onTouchover);
    		if ("onTouchout" in $$props) $$invalidate(66, onTouchout = $$props.onTouchout);
    		if ("onTouchdrag" in $$props) $$invalidate(67, onTouchdrag = $$props.onTouchdrag);
    		if ("onSelect" in $$props) $$invalidate(68, onSelect = $$props.onSelect);
    		if ("onDeselect" in $$props) $$invalidate(69, onDeselect = $$props.onDeselect);
    		if ("renderSettings" in $$props) $$invalidate(70, renderSettings = $$props.renderSettings);
    		if ("blockReindexing" in $$props) $$invalidate(71, blockReindexing = $$props.blockReindexing);
    		if ("_asPolygon" in $$props) $$invalidate(72, _asPolygon = $$props._asPolygon);
    	};

    	$$self.$capture_state = () => ({
    		idCounter: idCounter$1,
    		getId: getId$1,
    		beforeUpdate,
    		afterUpdate,
    		onMount,
    		onDestroy,
    		detectIt,
    		GraphicContext: GraphicContext$1,
    		SectionContext,
    		InteractionManagerContext,
    		validateAesthetics,
    		markPixelGeometryFuncs,
    		markRepresentAsPolygonFuncs,
    		createDataNecessaryForIndexingMark,
    		createTransitionable,
    		transitionsEqual,
    		any,
    		parseRenderSettings,
    		generatePath,
    		textAnchorPoint,
    		markId,
    		initPhase,
    		initDone,
    		type,
    		x,
    		y,
    		x1,
    		x2,
    		y1,
    		y2,
    		geometry,
    		shape,
    		size,
    		independentAxis,
    		radius,
    		fill,
    		stroke,
    		strokeWidth,
    		strokeOpacity,
    		fillOpacity,
    		opacity,
    		text,
    		fontFamily,
    		fontSize,
    		fontWeight,
    		rotation,
    		anchorPoint,
    		transition,
    		onClick,
    		onMousedown,
    		onMouseup,
    		onMouseover,
    		onMouseout,
    		onMousedrag,
    		onTouchdown,
    		onTouchup,
    		onTouchover,
    		onTouchout,
    		onTouchdrag,
    		onSelect,
    		onDeselect,
    		renderSettings,
    		blockReindexing,
    		_asPolygon,
    		aesthetics,
    		positioningAesthetics,
    		createPixelGeometry,
    		representAsPolygon,
    		asPolygon,
    		graphicContext,
    		sectionContext,
    		interactionManagerContext,
    		pixelGeometry,
    		screenGeometry,
    		tr_screenGeometry,
    		tr_radius,
    		tr_fill,
    		tr_stroke,
    		tr_strokeWidth,
    		tr_fillOpacity,
    		tr_strokeOpacity,
    		tr_opacity,
    		tr_fontSize,
    		tr_fontWeight,
    		tr_rotation,
    		rotateTransform,
    		parsedTextAnchorPoint,
    		previousTransition,
    		pixelGeometryRecalculationNecessary,
    		screenGeometryRecalculationNecessary,
    		scheduleUpdatePixelGeometry,
    		updatePixelGeometry,
    		scheduleUpdateScreenGeometry,
    		updateScreenGeometry,
    		updateInteractionManagerIfNecessary,
    		removeMarkFromSpatialIndexIfNecessary,
    		removeMarkFromSelectIfNecessary,
    		createDataNecessaryForIndexing,
    		$sectionContext,
    		$tr_rotation,
    		$tr_screenGeometry,
    		$tr_radius,
    		$tr_fill,
    		$tr_stroke,
    		$tr_strokeWidth,
    		$tr_fillOpacity,
    		$tr_strokeOpacity,
    		$tr_opacity,
    		$tr_fontSize,
    		$tr_fontWeight,
    		isInteractiveMouse,
    		isInteractiveTouch,
    		isSelectable,
    		$interactionManagerContext,
    		renderPolygon,
    		renderCircle,
    		renderLine,
    		renderLabel,
    		$graphicContext
    	});

    	$$self.$inject_state = $$props => {
    		if ("initPhase" in $$props) initPhase = $$props.initPhase;
    		if ("type" in $$props) $$invalidate(0, type = $$props.type);
    		if ("x" in $$props) $$invalidate(34, x = $$props.x);
    		if ("y" in $$props) $$invalidate(35, y = $$props.y);
    		if ("x1" in $$props) $$invalidate(36, x1 = $$props.x1);
    		if ("x2" in $$props) $$invalidate(37, x2 = $$props.x2);
    		if ("y1" in $$props) $$invalidate(38, y1 = $$props.y1);
    		if ("y2" in $$props) $$invalidate(39, y2 = $$props.y2);
    		if ("geometry" in $$props) $$invalidate(40, geometry = $$props.geometry);
    		if ("shape" in $$props) $$invalidate(41, shape = $$props.shape);
    		if ("size" in $$props) $$invalidate(42, size = $$props.size);
    		if ("independentAxis" in $$props) $$invalidate(43, independentAxis = $$props.independentAxis);
    		if ("radius" in $$props) $$invalidate(44, radius = $$props.radius);
    		if ("fill" in $$props) $$invalidate(45, fill = $$props.fill);
    		if ("stroke" in $$props) $$invalidate(46, stroke = $$props.stroke);
    		if ("strokeWidth" in $$props) $$invalidate(47, strokeWidth = $$props.strokeWidth);
    		if ("strokeOpacity" in $$props) $$invalidate(48, strokeOpacity = $$props.strokeOpacity);
    		if ("fillOpacity" in $$props) $$invalidate(49, fillOpacity = $$props.fillOpacity);
    		if ("opacity" in $$props) $$invalidate(50, opacity = $$props.opacity);
    		if ("text" in $$props) $$invalidate(51, text = $$props.text);
    		if ("fontFamily" in $$props) $$invalidate(1, fontFamily = $$props.fontFamily);
    		if ("fontSize" in $$props) $$invalidate(52, fontSize = $$props.fontSize);
    		if ("fontWeight" in $$props) $$invalidate(53, fontWeight = $$props.fontWeight);
    		if ("rotation" in $$props) $$invalidate(54, rotation = $$props.rotation);
    		if ("anchorPoint" in $$props) $$invalidate(55, anchorPoint = $$props.anchorPoint);
    		if ("transition" in $$props) $$invalidate(56, transition = $$props.transition);
    		if ("onClick" in $$props) $$invalidate(57, onClick = $$props.onClick);
    		if ("onMousedown" in $$props) $$invalidate(58, onMousedown = $$props.onMousedown);
    		if ("onMouseup" in $$props) $$invalidate(59, onMouseup = $$props.onMouseup);
    		if ("onMouseover" in $$props) $$invalidate(60, onMouseover = $$props.onMouseover);
    		if ("onMouseout" in $$props) $$invalidate(61, onMouseout = $$props.onMouseout);
    		if ("onMousedrag" in $$props) $$invalidate(62, onMousedrag = $$props.onMousedrag);
    		if ("onTouchdown" in $$props) $$invalidate(63, onTouchdown = $$props.onTouchdown);
    		if ("onTouchup" in $$props) $$invalidate(64, onTouchup = $$props.onTouchup);
    		if ("onTouchover" in $$props) $$invalidate(65, onTouchover = $$props.onTouchover);
    		if ("onTouchout" in $$props) $$invalidate(66, onTouchout = $$props.onTouchout);
    		if ("onTouchdrag" in $$props) $$invalidate(67, onTouchdrag = $$props.onTouchdrag);
    		if ("onSelect" in $$props) $$invalidate(68, onSelect = $$props.onSelect);
    		if ("onDeselect" in $$props) $$invalidate(69, onDeselect = $$props.onDeselect);
    		if ("renderSettings" in $$props) $$invalidate(70, renderSettings = $$props.renderSettings);
    		if ("blockReindexing" in $$props) $$invalidate(71, blockReindexing = $$props.blockReindexing);
    		if ("_asPolygon" in $$props) $$invalidate(72, _asPolygon = $$props._asPolygon);
    		if ("aesthetics" in $$props) $$invalidate(2, aesthetics = $$props.aesthetics);
    		if ("positioningAesthetics" in $$props) $$invalidate(74, positioningAesthetics = $$props.positioningAesthetics);
    		if ("createPixelGeometry" in $$props) createPixelGeometry = $$props.createPixelGeometry;
    		if ("representAsPolygon" in $$props) representAsPolygon = $$props.representAsPolygon;
    		if ("asPolygon" in $$props) $$invalidate(77, asPolygon = $$props.asPolygon);
    		if ("pixelGeometry" in $$props) pixelGeometry = $$props.pixelGeometry;
    		if ("screenGeometry" in $$props) $$invalidate(79, screenGeometry = $$props.screenGeometry);
    		if ("tr_screenGeometry" in $$props) $$subscribe_tr_screenGeometry($$invalidate(3, tr_screenGeometry = $$props.tr_screenGeometry));
    		if ("tr_radius" in $$props) $$subscribe_tr_radius($$invalidate(4, tr_radius = $$props.tr_radius));
    		if ("tr_fill" in $$props) $$subscribe_tr_fill($$invalidate(5, tr_fill = $$props.tr_fill));
    		if ("tr_stroke" in $$props) $$subscribe_tr_stroke($$invalidate(6, tr_stroke = $$props.tr_stroke));
    		if ("tr_strokeWidth" in $$props) $$subscribe_tr_strokeWidth($$invalidate(7, tr_strokeWidth = $$props.tr_strokeWidth));
    		if ("tr_fillOpacity" in $$props) $$subscribe_tr_fillOpacity($$invalidate(8, tr_fillOpacity = $$props.tr_fillOpacity));
    		if ("tr_strokeOpacity" in $$props) $$subscribe_tr_strokeOpacity($$invalidate(9, tr_strokeOpacity = $$props.tr_strokeOpacity));
    		if ("tr_opacity" in $$props) $$subscribe_tr_opacity($$invalidate(10, tr_opacity = $$props.tr_opacity));
    		if ("tr_fontSize" in $$props) $$subscribe_tr_fontSize($$invalidate(11, tr_fontSize = $$props.tr_fontSize));
    		if ("tr_fontWeight" in $$props) $$subscribe_tr_fontWeight($$invalidate(12, tr_fontWeight = $$props.tr_fontWeight));
    		if ("tr_rotation" in $$props) $$subscribe_tr_rotation($$invalidate(13, tr_rotation = $$props.tr_rotation));
    		if ("rotateTransform" in $$props) $$invalidate(14, rotateTransform = $$props.rotateTransform);
    		if ("parsedTextAnchorPoint" in $$props) $$invalidate(15, parsedTextAnchorPoint = $$props.parsedTextAnchorPoint);
    		if ("previousTransition" in $$props) previousTransition = $$props.previousTransition;
    		if ("pixelGeometryRecalculationNecessary" in $$props) $$invalidate(81, pixelGeometryRecalculationNecessary = $$props.pixelGeometryRecalculationNecessary);
    		if ("screenGeometryRecalculationNecessary" in $$props) $$invalidate(82, screenGeometryRecalculationNecessary = $$props.screenGeometryRecalculationNecessary);
    		if ("isInteractiveMouse" in $$props) isInteractiveMouse = $$props.isInteractiveMouse;
    		if ("isInteractiveTouch" in $$props) isInteractiveTouch = $$props.isInteractiveTouch;
    		if ("isSelectable" in $$props) isSelectable = $$props.isSelectable;
    		if ("renderPolygon" in $$props) $$invalidate(26, renderPolygon = $$props.renderPolygon);
    		if ("renderCircle" in $$props) $$invalidate(27, renderCircle = $$props.renderCircle);
    		if ("renderLine" in $$props) $$invalidate(28, renderLine = $$props.renderLine);
    		if ("renderLabel" in $$props) $$invalidate(29, renderLabel = $$props.renderLabel);
    	};

    	let isInteractiveMouse;
    	let isInteractiveTouch;
    	let isSelectable;
    	let renderPolygon;
    	let renderCircle;
    	let renderLine;
    	let renderLabel;

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*type, fontFamily*/ 3 | $$self.$$.dirty[1] & /*x, y, x1, x2, y1, y2, geometry, shape, size, independentAxis, radius, fill, stroke, strokeWidth, strokeOpacity, fillOpacity, opacity, text, fontSize, fontWeight, rotation, anchorPoint*/ 33554424) {
    			 {
    				if (initDone()) {
    					$$invalidate(2, aesthetics = validateAesthetics(type, {
    						x,
    						y,
    						x1,
    						x2,
    						y1,
    						y2,
    						geometry,
    						shape,
    						size,
    						independentAxis,
    						radius,
    						fill,
    						stroke,
    						strokeWidth,
    						strokeOpacity,
    						fillOpacity,
    						opacity,
    						text,
    						fontFamily,
    						fontSize,
    						fontWeight,
    						rotation,
    						anchorPoint
    					}));
    				}
    			}
    		}

    		if ($$self.$$.dirty[1] & /*x, y, x1, x2, y1, y2, geometry, shape, size, independentAxis*/ 8184) {
    			 {
    				if (initDone()) {
    					$$invalidate(74, positioningAesthetics = {
    						x,
    						y,
    						x1,
    						x2,
    						y1,
    						y2,
    						geometry,
    						shape,
    						size,
    						independentAxis
    					});
    				}
    			}
    		}

    		if ($$self.$$.dirty[0] & /*type*/ 1) {
    			 {
    				if (initDone()) {
    					createPixelGeometry = markPixelGeometryFuncs[type];
    					representAsPolygon = markRepresentAsPolygonFuncs[type];
    				}
    			}
    		}

    		if ($$self.$$.dirty[0] & /*type*/ 1 | $$self.$$.dirty[2] & /*_asPolygon*/ 1024) {
    			 {
    				if (initDone()) {
    					$$invalidate(77, asPolygon = _asPolygon === true && markRepresentAsPolygonFuncs[type] !== undefined);
    				}
    			}
    		}

    		if ($$self.$$.dirty[2] & /*positioningAesthetics, $sectionContext, renderSettings*/ 2101504) {
    			// Handle changes to geometry
    			 {
    				if (initDone()) {
    					scheduleUpdatePixelGeometry(positioningAesthetics, $sectionContext, parseRenderSettings(renderSettings));
    				}
    			}
    		}

    		if ($$self.$$.dirty[0] & /*tr_radius, aesthetics, tr_strokeWidth*/ 148 | $$self.$$.dirty[2] & /*asPolygon*/ 32768) {
    			// Handle radius and strokeWidth changes if Point or Line is not represented as Polygon
    			 {
    				if (initDone()) {
    					if (!asPolygon) {
    						tr_radius.set(aesthetics.radius);
    						tr_strokeWidth.set(aesthetics.strokeWidth);
    					}

    					if (asPolygon) {
    						scheduleUpdateScreenGeometry();
    					}
    				}
    			}
    		}

    		if ($$self.$$.dirty[0] & /*tr_fill, aesthetics*/ 36) {
    			// Handle other changes
    			 {
    				if (initDone()) tr_fill.set(aesthetics.fill);
    			}
    		}

    		if ($$self.$$.dirty[0] & /*tr_stroke, aesthetics*/ 68) {
    			 {
    				if (initDone()) tr_stroke.set(aesthetics.stroke);
    			}
    		}

    		if ($$self.$$.dirty[0] & /*tr_strokeWidth, aesthetics*/ 132) {
    			 {
    				if (initDone()) tr_strokeWidth.set(aesthetics.strokeWidth);
    			}
    		}

    		if ($$self.$$.dirty[0] & /*tr_fillOpacity, aesthetics*/ 260) {
    			 {
    				if (initDone()) tr_fillOpacity.set(aesthetics.fillOpacity);
    			}
    		}

    		if ($$self.$$.dirty[0] & /*tr_strokeOpacity, aesthetics*/ 516) {
    			 {
    				if (initDone()) tr_strokeOpacity.set(aesthetics.strokeOpacity);
    			}
    		}

    		if ($$self.$$.dirty[0] & /*tr_opacity, aesthetics*/ 1028) {
    			 {
    				if (initDone()) tr_opacity.set(aesthetics.opacity);
    			}
    		}

    		if ($$self.$$.dirty[0] & /*tr_fontSize, aesthetics*/ 2052) {
    			// text aes changes
    			 {
    				if (initDone()) tr_fontSize.set(aesthetics.fontSize);
    			}
    		}

    		if ($$self.$$.dirty[0] & /*tr_fontWeight, aesthetics*/ 4100) {
    			 {
    				if (initDone()) tr_fontWeight.set(aesthetics.fontWeight);
    			}
    		}

    		if ($$self.$$.dirty[0] & /*tr_rotation, aesthetics*/ 8196) {
    			 {
    				if (initDone()) tr_rotation.set(aesthetics.rotation);
    			}
    		}

    		if ($$self.$$.dirty[0] & /*tr_screenGeometry*/ 8 | $$self.$$.dirty[2] & /*pixelGeometryRecalculationNecessary, screenGeometryRecalculationNecessary, screenGeometry*/ 1703936) {
    			 {
    				if (initDone()) {
    					if (pixelGeometryRecalculationNecessary) updatePixelGeometry();

    					if (screenGeometryRecalculationNecessary) {
    						updateScreenGeometry();
    						tr_screenGeometry.set(screenGeometry);
    						updateInteractionManagerIfNecessary();
    					}

    					$$invalidate(81, pixelGeometryRecalculationNecessary = false);
    					$$invalidate(82, screenGeometryRecalculationNecessary = false);
    				}
    			}
    		}

    		if ($$self.$$.dirty[0] & /*$tr_screenGeometry*/ 65536 | $$self.$$.dirty[2] & /*$tr_rotation*/ 4194304) {
    			 {
    				if (initDone()) $$invalidate(14, rotateTransform = `rotate(${$tr_rotation}, ${$tr_screenGeometry.coordinates[0]}, ${$tr_screenGeometry.coordinates[1]})`);
    			}
    		}

    		if ($$self.$$.dirty[0] & /*aesthetics*/ 4) {
    			 {
    				if (initDone()) $$invalidate(15, parsedTextAnchorPoint = textAnchorPoint(aesthetics.anchorPoint));
    			}
    		}

    		if ($$self.$$.dirty[1] & /*onClick, onMousedown, onMouseup, onMouseover, onMouseout*/ 2080374784 | $$self.$$.dirty[2] & /*onMousedrag*/ 1) {
    			// Interactivity
    			 isInteractiveMouse = detectIt.hasMouse && any(onClick, onMousedown, onMouseup, onMouseover, onMouseout, onMousedrag);
    		}

    		if ($$self.$$.dirty[2] & /*onTouchdown, onTouchup, onTouchover, onTouchout, onTouchdrag*/ 62) {
    			 isInteractiveTouch = detectIt.hasTouch && any(onTouchdown, onTouchup, onTouchover, onTouchout, onTouchdrag);
    		}

    		if ($$self.$$.dirty[2] & /*onSelect, onDeselect*/ 192) {
    			 isSelectable = onSelect !== undefined || onDeselect !== undefined;
    		}

    		if ($$self.$$.dirty[0] & /*type*/ 1 | $$self.$$.dirty[2] & /*asPolygon*/ 32768) {
    			 $$invalidate(26, renderPolygon = !["Point", "Line", "Label"].includes(type) || asPolygon);
    		}

    		if ($$self.$$.dirty[0] & /*type*/ 1 | $$self.$$.dirty[2] & /*asPolygon*/ 32768) {
    			 $$invalidate(27, renderCircle = type === "Point" && !asPolygon);
    		}

    		if ($$self.$$.dirty[0] & /*type*/ 1 | $$self.$$.dirty[2] & /*asPolygon*/ 32768) {
    			 $$invalidate(28, renderLine = type === "Line" && !asPolygon);
    		}

    		if ($$self.$$.dirty[0] & /*type*/ 1) {
    			 $$invalidate(29, renderLabel = type === "Label");
    		}
    	};

    	return [
    		type,
    		fontFamily,
    		aesthetics,
    		tr_screenGeometry,
    		tr_radius,
    		tr_fill,
    		tr_stroke,
    		tr_strokeWidth,
    		tr_fillOpacity,
    		tr_strokeOpacity,
    		tr_opacity,
    		tr_fontSize,
    		tr_fontWeight,
    		tr_rotation,
    		rotateTransform,
    		parsedTextAnchorPoint,
    		$tr_screenGeometry,
    		$tr_radius,
    		$tr_fill,
    		$tr_stroke,
    		$tr_strokeWidth,
    		$tr_fillOpacity,
    		$tr_strokeOpacity,
    		$tr_opacity,
    		$tr_fontSize,
    		$tr_fontWeight,
    		renderPolygon,
    		renderCircle,
    		renderLine,
    		renderLabel,
    		$graphicContext,
    		graphicContext,
    		sectionContext,
    		interactionManagerContext,
    		x,
    		y,
    		x1,
    		x2,
    		y1,
    		y2,
    		geometry,
    		shape,
    		size,
    		independentAxis,
    		radius,
    		fill,
    		stroke,
    		strokeWidth,
    		strokeOpacity,
    		fillOpacity,
    		opacity,
    		text,
    		fontSize,
    		fontWeight,
    		rotation,
    		anchorPoint,
    		transition,
    		onClick,
    		onMousedown,
    		onMouseup,
    		onMouseover,
    		onMouseout,
    		onMousedrag,
    		onTouchdown,
    		onTouchup,
    		onTouchover,
    		onTouchout,
    		onTouchdrag,
    		onSelect,
    		onDeselect,
    		renderSettings,
    		blockReindexing,
    		_asPolygon
    	];
    }

    class Mark extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance$1,
    			create_fragment$1,
    			safe_not_equal,
    			{
    				type: 0,
    				x: 34,
    				y: 35,
    				x1: 36,
    				x2: 37,
    				y1: 38,
    				y2: 39,
    				geometry: 40,
    				shape: 41,
    				size: 42,
    				independentAxis: 43,
    				radius: 44,
    				fill: 45,
    				stroke: 46,
    				strokeWidth: 47,
    				strokeOpacity: 48,
    				fillOpacity: 49,
    				opacity: 50,
    				text: 51,
    				fontFamily: 1,
    				fontSize: 52,
    				fontWeight: 53,
    				rotation: 54,
    				anchorPoint: 55,
    				transition: 56,
    				onClick: 57,
    				onMousedown: 58,
    				onMouseup: 59,
    				onMouseover: 60,
    				onMouseout: 61,
    				onMousedrag: 62,
    				onTouchdown: 63,
    				onTouchup: 64,
    				onTouchover: 65,
    				onTouchout: 66,
    				onTouchdrag: 67,
    				onSelect: 68,
    				onDeselect: 69,
    				renderSettings: 70,
    				blockReindexing: 71,
    				_asPolygon: 72
    			},
    			[-1, -1, -1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Mark",
    			options,
    			id: create_fragment$1.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*type*/ ctx[0] === undefined && !("type" in props)) {
    			console.warn("<Mark> was created without expected prop 'type'");
    		}
    	}

    	get type() {
    		throw new Error("<Mark>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set type(value) {
    		throw new Error("<Mark>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get x() {
    		throw new Error("<Mark>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set x(value) {
    		throw new Error("<Mark>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get y() {
    		throw new Error("<Mark>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set y(value) {
    		throw new Error("<Mark>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get x1() {
    		throw new Error("<Mark>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set x1(value) {
    		throw new Error("<Mark>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get x2() {
    		throw new Error("<Mark>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set x2(value) {
    		throw new Error("<Mark>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get y1() {
    		throw new Error("<Mark>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set y1(value) {
    		throw new Error("<Mark>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get y2() {
    		throw new Error("<Mark>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set y2(value) {
    		throw new Error("<Mark>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get geometry() {
    		throw new Error("<Mark>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set geometry(value) {
    		throw new Error("<Mark>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get shape() {
    		throw new Error("<Mark>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set shape(value) {
    		throw new Error("<Mark>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get size() {
    		throw new Error("<Mark>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set size(value) {
    		throw new Error("<Mark>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get independentAxis() {
    		throw new Error("<Mark>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set independentAxis(value) {
    		throw new Error("<Mark>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get radius() {
    		throw new Error("<Mark>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set radius(value) {
    		throw new Error("<Mark>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fill() {
    		throw new Error("<Mark>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fill(value) {
    		throw new Error("<Mark>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get stroke() {
    		throw new Error("<Mark>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set stroke(value) {
    		throw new Error("<Mark>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get strokeWidth() {
    		throw new Error("<Mark>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set strokeWidth(value) {
    		throw new Error("<Mark>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get strokeOpacity() {
    		throw new Error("<Mark>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set strokeOpacity(value) {
    		throw new Error("<Mark>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fillOpacity() {
    		throw new Error("<Mark>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fillOpacity(value) {
    		throw new Error("<Mark>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get opacity() {
    		throw new Error("<Mark>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set opacity(value) {
    		throw new Error("<Mark>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get text() {
    		throw new Error("<Mark>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set text(value) {
    		throw new Error("<Mark>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fontFamily() {
    		throw new Error("<Mark>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fontFamily(value) {
    		throw new Error("<Mark>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fontSize() {
    		throw new Error("<Mark>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fontSize(value) {
    		throw new Error("<Mark>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fontWeight() {
    		throw new Error("<Mark>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fontWeight(value) {
    		throw new Error("<Mark>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rotation() {
    		throw new Error("<Mark>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rotation(value) {
    		throw new Error("<Mark>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get anchorPoint() {
    		throw new Error("<Mark>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set anchorPoint(value) {
    		throw new Error("<Mark>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get transition() {
    		throw new Error("<Mark>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set transition(value) {
    		throw new Error("<Mark>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onClick() {
    		throw new Error("<Mark>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onClick(value) {
    		throw new Error("<Mark>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onMousedown() {
    		throw new Error("<Mark>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onMousedown(value) {
    		throw new Error("<Mark>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onMouseup() {
    		throw new Error("<Mark>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onMouseup(value) {
    		throw new Error("<Mark>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onMouseover() {
    		throw new Error("<Mark>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onMouseover(value) {
    		throw new Error("<Mark>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onMouseout() {
    		throw new Error("<Mark>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onMouseout(value) {
    		throw new Error("<Mark>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onMousedrag() {
    		throw new Error("<Mark>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onMousedrag(value) {
    		throw new Error("<Mark>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onTouchdown() {
    		throw new Error("<Mark>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onTouchdown(value) {
    		throw new Error("<Mark>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onTouchup() {
    		throw new Error("<Mark>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onTouchup(value) {
    		throw new Error("<Mark>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onTouchover() {
    		throw new Error("<Mark>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onTouchover(value) {
    		throw new Error("<Mark>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onTouchout() {
    		throw new Error("<Mark>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onTouchout(value) {
    		throw new Error("<Mark>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onTouchdrag() {
    		throw new Error("<Mark>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onTouchdrag(value) {
    		throw new Error("<Mark>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onSelect() {
    		throw new Error("<Mark>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onSelect(value) {
    		throw new Error("<Mark>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onDeselect() {
    		throw new Error("<Mark>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onDeselect(value) {
    		throw new Error("<Mark>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get renderSettings() {
    		throw new Error("<Mark>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set renderSettings(value) {
    		throw new Error("<Mark>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get blockReindexing() {
    		throw new Error("<Mark>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set blockReindexing(value) {
    		throw new Error("<Mark>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get _asPolygon() {
    		throw new Error("<Mark>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set _asPolygon(value) {
    		throw new Error("<Mark>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@snlab/florence/src/components/Marks/Point/Point.svelte generated by Svelte v3.21.0 */

    function create_fragment$2(ctx) {
    	let current;

    	const mark = new Mark({
    			props: {
    				type: "Point",
    				x: /*x*/ ctx[0],
    				y: /*y*/ ctx[1],
    				geometry: /*geometry*/ ctx[2],
    				radius: /*radius*/ ctx[3],
    				fill: /*fill*/ ctx[4],
    				stroke: /*stroke*/ ctx[5],
    				strokeWidth: /*strokeWidth*/ ctx[6],
    				strokeOpacity: /*strokeOpacity*/ ctx[7],
    				fillOpacity: /*fillOpacity*/ ctx[8],
    				opacity: /*opacity*/ ctx[9],
    				transition: /*transition*/ ctx[10],
    				onClick: /*onClick*/ ctx[11],
    				onMousedown: /*onMousedown*/ ctx[12],
    				onMouseup: /*onMouseup*/ ctx[13],
    				onMouseover: /*onMouseover*/ ctx[14],
    				onMouseout: /*onMouseout*/ ctx[15],
    				onMousedrag: /*onMousedrag*/ ctx[16],
    				onTouchdown: /*onTouchdown*/ ctx[17],
    				onTouchup: /*onTouchup*/ ctx[18],
    				onTouchover: /*onTouchover*/ ctx[19],
    				onTouchout: /*onTouchout*/ ctx[20],
    				onTouchdrag: /*onTouchdrag*/ ctx[21],
    				onSelect: /*onSelect*/ ctx[22],
    				onDeselect: /*onDeselect*/ ctx[23],
    				renderSettings: /*renderSettings*/ ctx[24],
    				blockReindexing: /*blockReindexing*/ ctx[25],
    				_asPolygon: false
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mark.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(mark, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const mark_changes = {};
    			if (dirty & /*x*/ 1) mark_changes.x = /*x*/ ctx[0];
    			if (dirty & /*y*/ 2) mark_changes.y = /*y*/ ctx[1];
    			if (dirty & /*geometry*/ 4) mark_changes.geometry = /*geometry*/ ctx[2];
    			if (dirty & /*radius*/ 8) mark_changes.radius = /*radius*/ ctx[3];
    			if (dirty & /*fill*/ 16) mark_changes.fill = /*fill*/ ctx[4];
    			if (dirty & /*stroke*/ 32) mark_changes.stroke = /*stroke*/ ctx[5];
    			if (dirty & /*strokeWidth*/ 64) mark_changes.strokeWidth = /*strokeWidth*/ ctx[6];
    			if (dirty & /*strokeOpacity*/ 128) mark_changes.strokeOpacity = /*strokeOpacity*/ ctx[7];
    			if (dirty & /*fillOpacity*/ 256) mark_changes.fillOpacity = /*fillOpacity*/ ctx[8];
    			if (dirty & /*opacity*/ 512) mark_changes.opacity = /*opacity*/ ctx[9];
    			if (dirty & /*transition*/ 1024) mark_changes.transition = /*transition*/ ctx[10];
    			if (dirty & /*onClick*/ 2048) mark_changes.onClick = /*onClick*/ ctx[11];
    			if (dirty & /*onMousedown*/ 4096) mark_changes.onMousedown = /*onMousedown*/ ctx[12];
    			if (dirty & /*onMouseup*/ 8192) mark_changes.onMouseup = /*onMouseup*/ ctx[13];
    			if (dirty & /*onMouseover*/ 16384) mark_changes.onMouseover = /*onMouseover*/ ctx[14];
    			if (dirty & /*onMouseout*/ 32768) mark_changes.onMouseout = /*onMouseout*/ ctx[15];
    			if (dirty & /*onMousedrag*/ 65536) mark_changes.onMousedrag = /*onMousedrag*/ ctx[16];
    			if (dirty & /*onTouchdown*/ 131072) mark_changes.onTouchdown = /*onTouchdown*/ ctx[17];
    			if (dirty & /*onTouchup*/ 262144) mark_changes.onTouchup = /*onTouchup*/ ctx[18];
    			if (dirty & /*onTouchover*/ 524288) mark_changes.onTouchover = /*onTouchover*/ ctx[19];
    			if (dirty & /*onTouchout*/ 1048576) mark_changes.onTouchout = /*onTouchout*/ ctx[20];
    			if (dirty & /*onTouchdrag*/ 2097152) mark_changes.onTouchdrag = /*onTouchdrag*/ ctx[21];
    			if (dirty & /*onSelect*/ 4194304) mark_changes.onSelect = /*onSelect*/ ctx[22];
    			if (dirty & /*onDeselect*/ 8388608) mark_changes.onDeselect = /*onDeselect*/ ctx[23];
    			if (dirty & /*renderSettings*/ 16777216) mark_changes.renderSettings = /*renderSettings*/ ctx[24];
    			if (dirty & /*blockReindexing*/ 33554432) mark_changes.blockReindexing = /*blockReindexing*/ ctx[25];
    			mark.$set(mark_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mark.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mark.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mark, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$2.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$2($$self, $$props, $$invalidate) {
    	let { x = undefined } = $$props;
    	let { y = undefined } = $$props;
    	let { geometry = undefined } = $$props;
    	let { radius = undefined } = $$props;
    	let { fill = undefined } = $$props;
    	let { stroke = undefined } = $$props;
    	let { strokeWidth = undefined } = $$props;
    	let { strokeOpacity = undefined } = $$props;
    	let { fillOpacity = undefined } = $$props;
    	let { opacity = undefined } = $$props;
    	let { transition = undefined } = $$props;
    	let { onClick = undefined } = $$props;
    	let { onMousedown = undefined } = $$props;
    	let { onMouseup = undefined } = $$props;
    	let { onMouseover = undefined } = $$props;
    	let { onMouseout = undefined } = $$props;
    	let { onMousedrag = undefined } = $$props;
    	let { onTouchdown = undefined } = $$props;
    	let { onTouchup = undefined } = $$props;
    	let { onTouchover = undefined } = $$props;
    	let { onTouchout = undefined } = $$props;
    	let { onTouchdrag = undefined } = $$props;
    	let { onSelect = undefined } = $$props;
    	let { onDeselect = undefined } = $$props;
    	let { renderSettings = undefined } = $$props;
    	let { blockReindexing = false } = $$props;

    	const writable_props = [
    		"x",
    		"y",
    		"geometry",
    		"radius",
    		"fill",
    		"stroke",
    		"strokeWidth",
    		"strokeOpacity",
    		"fillOpacity",
    		"opacity",
    		"transition",
    		"onClick",
    		"onMousedown",
    		"onMouseup",
    		"onMouseover",
    		"onMouseout",
    		"onMousedrag",
    		"onTouchdown",
    		"onTouchup",
    		"onTouchover",
    		"onTouchout",
    		"onTouchdrag",
    		"onSelect",
    		"onDeselect",
    		"renderSettings",
    		"blockReindexing"
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Point> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Point", $$slots, []);

    	$$self.$set = $$props => {
    		if ("x" in $$props) $$invalidate(0, x = $$props.x);
    		if ("y" in $$props) $$invalidate(1, y = $$props.y);
    		if ("geometry" in $$props) $$invalidate(2, geometry = $$props.geometry);
    		if ("radius" in $$props) $$invalidate(3, radius = $$props.radius);
    		if ("fill" in $$props) $$invalidate(4, fill = $$props.fill);
    		if ("stroke" in $$props) $$invalidate(5, stroke = $$props.stroke);
    		if ("strokeWidth" in $$props) $$invalidate(6, strokeWidth = $$props.strokeWidth);
    		if ("strokeOpacity" in $$props) $$invalidate(7, strokeOpacity = $$props.strokeOpacity);
    		if ("fillOpacity" in $$props) $$invalidate(8, fillOpacity = $$props.fillOpacity);
    		if ("opacity" in $$props) $$invalidate(9, opacity = $$props.opacity);
    		if ("transition" in $$props) $$invalidate(10, transition = $$props.transition);
    		if ("onClick" in $$props) $$invalidate(11, onClick = $$props.onClick);
    		if ("onMousedown" in $$props) $$invalidate(12, onMousedown = $$props.onMousedown);
    		if ("onMouseup" in $$props) $$invalidate(13, onMouseup = $$props.onMouseup);
    		if ("onMouseover" in $$props) $$invalidate(14, onMouseover = $$props.onMouseover);
    		if ("onMouseout" in $$props) $$invalidate(15, onMouseout = $$props.onMouseout);
    		if ("onMousedrag" in $$props) $$invalidate(16, onMousedrag = $$props.onMousedrag);
    		if ("onTouchdown" in $$props) $$invalidate(17, onTouchdown = $$props.onTouchdown);
    		if ("onTouchup" in $$props) $$invalidate(18, onTouchup = $$props.onTouchup);
    		if ("onTouchover" in $$props) $$invalidate(19, onTouchover = $$props.onTouchover);
    		if ("onTouchout" in $$props) $$invalidate(20, onTouchout = $$props.onTouchout);
    		if ("onTouchdrag" in $$props) $$invalidate(21, onTouchdrag = $$props.onTouchdrag);
    		if ("onSelect" in $$props) $$invalidate(22, onSelect = $$props.onSelect);
    		if ("onDeselect" in $$props) $$invalidate(23, onDeselect = $$props.onDeselect);
    		if ("renderSettings" in $$props) $$invalidate(24, renderSettings = $$props.renderSettings);
    		if ("blockReindexing" in $$props) $$invalidate(25, blockReindexing = $$props.blockReindexing);
    	};

    	$$self.$capture_state = () => ({
    		Mark,
    		x,
    		y,
    		geometry,
    		radius,
    		fill,
    		stroke,
    		strokeWidth,
    		strokeOpacity,
    		fillOpacity,
    		opacity,
    		transition,
    		onClick,
    		onMousedown,
    		onMouseup,
    		onMouseover,
    		onMouseout,
    		onMousedrag,
    		onTouchdown,
    		onTouchup,
    		onTouchover,
    		onTouchout,
    		onTouchdrag,
    		onSelect,
    		onDeselect,
    		renderSettings,
    		blockReindexing
    	});

    	$$self.$inject_state = $$props => {
    		if ("x" in $$props) $$invalidate(0, x = $$props.x);
    		if ("y" in $$props) $$invalidate(1, y = $$props.y);
    		if ("geometry" in $$props) $$invalidate(2, geometry = $$props.geometry);
    		if ("radius" in $$props) $$invalidate(3, radius = $$props.radius);
    		if ("fill" in $$props) $$invalidate(4, fill = $$props.fill);
    		if ("stroke" in $$props) $$invalidate(5, stroke = $$props.stroke);
    		if ("strokeWidth" in $$props) $$invalidate(6, strokeWidth = $$props.strokeWidth);
    		if ("strokeOpacity" in $$props) $$invalidate(7, strokeOpacity = $$props.strokeOpacity);
    		if ("fillOpacity" in $$props) $$invalidate(8, fillOpacity = $$props.fillOpacity);
    		if ("opacity" in $$props) $$invalidate(9, opacity = $$props.opacity);
    		if ("transition" in $$props) $$invalidate(10, transition = $$props.transition);
    		if ("onClick" in $$props) $$invalidate(11, onClick = $$props.onClick);
    		if ("onMousedown" in $$props) $$invalidate(12, onMousedown = $$props.onMousedown);
    		if ("onMouseup" in $$props) $$invalidate(13, onMouseup = $$props.onMouseup);
    		if ("onMouseover" in $$props) $$invalidate(14, onMouseover = $$props.onMouseover);
    		if ("onMouseout" in $$props) $$invalidate(15, onMouseout = $$props.onMouseout);
    		if ("onMousedrag" in $$props) $$invalidate(16, onMousedrag = $$props.onMousedrag);
    		if ("onTouchdown" in $$props) $$invalidate(17, onTouchdown = $$props.onTouchdown);
    		if ("onTouchup" in $$props) $$invalidate(18, onTouchup = $$props.onTouchup);
    		if ("onTouchover" in $$props) $$invalidate(19, onTouchover = $$props.onTouchover);
    		if ("onTouchout" in $$props) $$invalidate(20, onTouchout = $$props.onTouchout);
    		if ("onTouchdrag" in $$props) $$invalidate(21, onTouchdrag = $$props.onTouchdrag);
    		if ("onSelect" in $$props) $$invalidate(22, onSelect = $$props.onSelect);
    		if ("onDeselect" in $$props) $$invalidate(23, onDeselect = $$props.onDeselect);
    		if ("renderSettings" in $$props) $$invalidate(24, renderSettings = $$props.renderSettings);
    		if ("blockReindexing" in $$props) $$invalidate(25, blockReindexing = $$props.blockReindexing);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		x,
    		y,
    		geometry,
    		radius,
    		fill,
    		stroke,
    		strokeWidth,
    		strokeOpacity,
    		fillOpacity,
    		opacity,
    		transition,
    		onClick,
    		onMousedown,
    		onMouseup,
    		onMouseover,
    		onMouseout,
    		onMousedrag,
    		onTouchdown,
    		onTouchup,
    		onTouchover,
    		onTouchout,
    		onTouchdrag,
    		onSelect,
    		onDeselect,
    		renderSettings,
    		blockReindexing
    	];
    }

    class Point extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$2, create_fragment$2, safe_not_equal, {
    			x: 0,
    			y: 1,
    			geometry: 2,
    			radius: 3,
    			fill: 4,
    			stroke: 5,
    			strokeWidth: 6,
    			strokeOpacity: 7,
    			fillOpacity: 8,
    			opacity: 9,
    			transition: 10,
    			onClick: 11,
    			onMousedown: 12,
    			onMouseup: 13,
    			onMouseover: 14,
    			onMouseout: 15,
    			onMousedrag: 16,
    			onTouchdown: 17,
    			onTouchup: 18,
    			onTouchover: 19,
    			onTouchout: 20,
    			onTouchdrag: 21,
    			onSelect: 22,
    			onDeselect: 23,
    			renderSettings: 24,
    			blockReindexing: 25
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Point",
    			options,
    			id: create_fragment$2.name
    		});
    	}

    	get x() {
    		throw new Error("<Point>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set x(value) {
    		throw new Error("<Point>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get y() {
    		throw new Error("<Point>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set y(value) {
    		throw new Error("<Point>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get geometry() {
    		throw new Error("<Point>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set geometry(value) {
    		throw new Error("<Point>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get radius() {
    		throw new Error("<Point>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set radius(value) {
    		throw new Error("<Point>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fill() {
    		throw new Error("<Point>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fill(value) {
    		throw new Error("<Point>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get stroke() {
    		throw new Error("<Point>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set stroke(value) {
    		throw new Error("<Point>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get strokeWidth() {
    		throw new Error("<Point>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set strokeWidth(value) {
    		throw new Error("<Point>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get strokeOpacity() {
    		throw new Error("<Point>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set strokeOpacity(value) {
    		throw new Error("<Point>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fillOpacity() {
    		throw new Error("<Point>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fillOpacity(value) {
    		throw new Error("<Point>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get opacity() {
    		throw new Error("<Point>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set opacity(value) {
    		throw new Error("<Point>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get transition() {
    		throw new Error("<Point>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set transition(value) {
    		throw new Error("<Point>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onClick() {
    		throw new Error("<Point>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onClick(value) {
    		throw new Error("<Point>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onMousedown() {
    		throw new Error("<Point>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onMousedown(value) {
    		throw new Error("<Point>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onMouseup() {
    		throw new Error("<Point>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onMouseup(value) {
    		throw new Error("<Point>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onMouseover() {
    		throw new Error("<Point>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onMouseover(value) {
    		throw new Error("<Point>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onMouseout() {
    		throw new Error("<Point>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onMouseout(value) {
    		throw new Error("<Point>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onMousedrag() {
    		throw new Error("<Point>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onMousedrag(value) {
    		throw new Error("<Point>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onTouchdown() {
    		throw new Error("<Point>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onTouchdown(value) {
    		throw new Error("<Point>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onTouchup() {
    		throw new Error("<Point>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onTouchup(value) {
    		throw new Error("<Point>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onTouchover() {
    		throw new Error("<Point>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onTouchover(value) {
    		throw new Error("<Point>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onTouchout() {
    		throw new Error("<Point>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onTouchout(value) {
    		throw new Error("<Point>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onTouchdrag() {
    		throw new Error("<Point>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onTouchdrag(value) {
    		throw new Error("<Point>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onSelect() {
    		throw new Error("<Point>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onSelect(value) {
    		throw new Error("<Point>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onDeselect() {
    		throw new Error("<Point>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onDeselect(value) {
    		throw new Error("<Point>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get renderSettings() {
    		throw new Error("<Point>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set renderSettings(value) {
    		throw new Error("<Point>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get blockReindexing() {
    		throw new Error("<Point>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set blockReindexing(value) {
    		throw new Error("<Point>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@snlab/florence/src/components/Marks/Rectangle/Rectangle.svelte generated by Svelte v3.21.0 */

    function create_fragment$3(ctx) {
    	let current;

    	const mark = new Mark({
    			props: {
    				type: "Rectangle",
    				x1: /*x1*/ ctx[0],
    				x2: /*x2*/ ctx[1],
    				y1: /*y1*/ ctx[2],
    				y2: /*y2*/ ctx[3],
    				fill: /*fill*/ ctx[4],
    				stroke: /*stroke*/ ctx[5],
    				strokeWidth: /*strokeWidth*/ ctx[6],
    				strokeOpacity: /*strokeOpacity*/ ctx[7],
    				fillOpacity: /*fillOpacity*/ ctx[8],
    				opacity: /*opacity*/ ctx[9],
    				transition: /*transition*/ ctx[10],
    				onClick: /*onClick*/ ctx[11],
    				onMousedown: /*onMousedown*/ ctx[12],
    				onMouseup: /*onMouseup*/ ctx[13],
    				onMouseover: /*onMouseover*/ ctx[14],
    				onMouseout: /*onMouseout*/ ctx[15],
    				onMousedrag: /*onMousedrag*/ ctx[16],
    				onTouchdown: /*onTouchdown*/ ctx[17],
    				onTouchup: /*onTouchup*/ ctx[18],
    				onTouchover: /*onTouchover*/ ctx[19],
    				onTouchout: /*onTouchout*/ ctx[20],
    				onTouchdrag: /*onTouchdrag*/ ctx[21],
    				onSelect: /*onSelect*/ ctx[22],
    				onDeselect: /*onDeselect*/ ctx[23],
    				renderSettings: /*renderSettings*/ ctx[24],
    				blockReindexing: /*blockReindexing*/ ctx[25],
    				_asPolygon: false
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mark.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(mark, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const mark_changes = {};
    			if (dirty & /*x1*/ 1) mark_changes.x1 = /*x1*/ ctx[0];
    			if (dirty & /*x2*/ 2) mark_changes.x2 = /*x2*/ ctx[1];
    			if (dirty & /*y1*/ 4) mark_changes.y1 = /*y1*/ ctx[2];
    			if (dirty & /*y2*/ 8) mark_changes.y2 = /*y2*/ ctx[3];
    			if (dirty & /*fill*/ 16) mark_changes.fill = /*fill*/ ctx[4];
    			if (dirty & /*stroke*/ 32) mark_changes.stroke = /*stroke*/ ctx[5];
    			if (dirty & /*strokeWidth*/ 64) mark_changes.strokeWidth = /*strokeWidth*/ ctx[6];
    			if (dirty & /*strokeOpacity*/ 128) mark_changes.strokeOpacity = /*strokeOpacity*/ ctx[7];
    			if (dirty & /*fillOpacity*/ 256) mark_changes.fillOpacity = /*fillOpacity*/ ctx[8];
    			if (dirty & /*opacity*/ 512) mark_changes.opacity = /*opacity*/ ctx[9];
    			if (dirty & /*transition*/ 1024) mark_changes.transition = /*transition*/ ctx[10];
    			if (dirty & /*onClick*/ 2048) mark_changes.onClick = /*onClick*/ ctx[11];
    			if (dirty & /*onMousedown*/ 4096) mark_changes.onMousedown = /*onMousedown*/ ctx[12];
    			if (dirty & /*onMouseup*/ 8192) mark_changes.onMouseup = /*onMouseup*/ ctx[13];
    			if (dirty & /*onMouseover*/ 16384) mark_changes.onMouseover = /*onMouseover*/ ctx[14];
    			if (dirty & /*onMouseout*/ 32768) mark_changes.onMouseout = /*onMouseout*/ ctx[15];
    			if (dirty & /*onMousedrag*/ 65536) mark_changes.onMousedrag = /*onMousedrag*/ ctx[16];
    			if (dirty & /*onTouchdown*/ 131072) mark_changes.onTouchdown = /*onTouchdown*/ ctx[17];
    			if (dirty & /*onTouchup*/ 262144) mark_changes.onTouchup = /*onTouchup*/ ctx[18];
    			if (dirty & /*onTouchover*/ 524288) mark_changes.onTouchover = /*onTouchover*/ ctx[19];
    			if (dirty & /*onTouchout*/ 1048576) mark_changes.onTouchout = /*onTouchout*/ ctx[20];
    			if (dirty & /*onTouchdrag*/ 2097152) mark_changes.onTouchdrag = /*onTouchdrag*/ ctx[21];
    			if (dirty & /*onSelect*/ 4194304) mark_changes.onSelect = /*onSelect*/ ctx[22];
    			if (dirty & /*onDeselect*/ 8388608) mark_changes.onDeselect = /*onDeselect*/ ctx[23];
    			if (dirty & /*renderSettings*/ 16777216) mark_changes.renderSettings = /*renderSettings*/ ctx[24];
    			if (dirty & /*blockReindexing*/ 33554432) mark_changes.blockReindexing = /*blockReindexing*/ ctx[25];
    			mark.$set(mark_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mark.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mark.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mark, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$3.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$3($$self, $$props, $$invalidate) {
    	let { x1 = undefined } = $$props;
    	let { x2 = undefined } = $$props;
    	let { y1 = undefined } = $$props;
    	let { y2 = undefined } = $$props;
    	let { fill = undefined } = $$props;
    	let { stroke = undefined } = $$props;
    	let { strokeWidth = undefined } = $$props;
    	let { strokeOpacity = undefined } = $$props;
    	let { fillOpacity = undefined } = $$props;
    	let { opacity = undefined } = $$props;
    	let { transition = undefined } = $$props;
    	let { onClick = undefined } = $$props;
    	let { onMousedown = undefined } = $$props;
    	let { onMouseup = undefined } = $$props;
    	let { onMouseover = undefined } = $$props;
    	let { onMouseout = undefined } = $$props;
    	let { onMousedrag = undefined } = $$props;
    	let { onTouchdown = undefined } = $$props;
    	let { onTouchup = undefined } = $$props;
    	let { onTouchover = undefined } = $$props;
    	let { onTouchout = undefined } = $$props;
    	let { onTouchdrag = undefined } = $$props;
    	let { onSelect = undefined } = $$props;
    	let { onDeselect = undefined } = $$props;
    	let { renderSettings = undefined } = $$props;
    	let { blockReindexing = false } = $$props;

    	const writable_props = [
    		"x1",
    		"x2",
    		"y1",
    		"y2",
    		"fill",
    		"stroke",
    		"strokeWidth",
    		"strokeOpacity",
    		"fillOpacity",
    		"opacity",
    		"transition",
    		"onClick",
    		"onMousedown",
    		"onMouseup",
    		"onMouseover",
    		"onMouseout",
    		"onMousedrag",
    		"onTouchdown",
    		"onTouchup",
    		"onTouchover",
    		"onTouchout",
    		"onTouchdrag",
    		"onSelect",
    		"onDeselect",
    		"renderSettings",
    		"blockReindexing"
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Rectangle> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Rectangle", $$slots, []);

    	$$self.$set = $$props => {
    		if ("x1" in $$props) $$invalidate(0, x1 = $$props.x1);
    		if ("x2" in $$props) $$invalidate(1, x2 = $$props.x2);
    		if ("y1" in $$props) $$invalidate(2, y1 = $$props.y1);
    		if ("y2" in $$props) $$invalidate(3, y2 = $$props.y2);
    		if ("fill" in $$props) $$invalidate(4, fill = $$props.fill);
    		if ("stroke" in $$props) $$invalidate(5, stroke = $$props.stroke);
    		if ("strokeWidth" in $$props) $$invalidate(6, strokeWidth = $$props.strokeWidth);
    		if ("strokeOpacity" in $$props) $$invalidate(7, strokeOpacity = $$props.strokeOpacity);
    		if ("fillOpacity" in $$props) $$invalidate(8, fillOpacity = $$props.fillOpacity);
    		if ("opacity" in $$props) $$invalidate(9, opacity = $$props.opacity);
    		if ("transition" in $$props) $$invalidate(10, transition = $$props.transition);
    		if ("onClick" in $$props) $$invalidate(11, onClick = $$props.onClick);
    		if ("onMousedown" in $$props) $$invalidate(12, onMousedown = $$props.onMousedown);
    		if ("onMouseup" in $$props) $$invalidate(13, onMouseup = $$props.onMouseup);
    		if ("onMouseover" in $$props) $$invalidate(14, onMouseover = $$props.onMouseover);
    		if ("onMouseout" in $$props) $$invalidate(15, onMouseout = $$props.onMouseout);
    		if ("onMousedrag" in $$props) $$invalidate(16, onMousedrag = $$props.onMousedrag);
    		if ("onTouchdown" in $$props) $$invalidate(17, onTouchdown = $$props.onTouchdown);
    		if ("onTouchup" in $$props) $$invalidate(18, onTouchup = $$props.onTouchup);
    		if ("onTouchover" in $$props) $$invalidate(19, onTouchover = $$props.onTouchover);
    		if ("onTouchout" in $$props) $$invalidate(20, onTouchout = $$props.onTouchout);
    		if ("onTouchdrag" in $$props) $$invalidate(21, onTouchdrag = $$props.onTouchdrag);
    		if ("onSelect" in $$props) $$invalidate(22, onSelect = $$props.onSelect);
    		if ("onDeselect" in $$props) $$invalidate(23, onDeselect = $$props.onDeselect);
    		if ("renderSettings" in $$props) $$invalidate(24, renderSettings = $$props.renderSettings);
    		if ("blockReindexing" in $$props) $$invalidate(25, blockReindexing = $$props.blockReindexing);
    	};

    	$$self.$capture_state = () => ({
    		Mark,
    		x1,
    		x2,
    		y1,
    		y2,
    		fill,
    		stroke,
    		strokeWidth,
    		strokeOpacity,
    		fillOpacity,
    		opacity,
    		transition,
    		onClick,
    		onMousedown,
    		onMouseup,
    		onMouseover,
    		onMouseout,
    		onMousedrag,
    		onTouchdown,
    		onTouchup,
    		onTouchover,
    		onTouchout,
    		onTouchdrag,
    		onSelect,
    		onDeselect,
    		renderSettings,
    		blockReindexing
    	});

    	$$self.$inject_state = $$props => {
    		if ("x1" in $$props) $$invalidate(0, x1 = $$props.x1);
    		if ("x2" in $$props) $$invalidate(1, x2 = $$props.x2);
    		if ("y1" in $$props) $$invalidate(2, y1 = $$props.y1);
    		if ("y2" in $$props) $$invalidate(3, y2 = $$props.y2);
    		if ("fill" in $$props) $$invalidate(4, fill = $$props.fill);
    		if ("stroke" in $$props) $$invalidate(5, stroke = $$props.stroke);
    		if ("strokeWidth" in $$props) $$invalidate(6, strokeWidth = $$props.strokeWidth);
    		if ("strokeOpacity" in $$props) $$invalidate(7, strokeOpacity = $$props.strokeOpacity);
    		if ("fillOpacity" in $$props) $$invalidate(8, fillOpacity = $$props.fillOpacity);
    		if ("opacity" in $$props) $$invalidate(9, opacity = $$props.opacity);
    		if ("transition" in $$props) $$invalidate(10, transition = $$props.transition);
    		if ("onClick" in $$props) $$invalidate(11, onClick = $$props.onClick);
    		if ("onMousedown" in $$props) $$invalidate(12, onMousedown = $$props.onMousedown);
    		if ("onMouseup" in $$props) $$invalidate(13, onMouseup = $$props.onMouseup);
    		if ("onMouseover" in $$props) $$invalidate(14, onMouseover = $$props.onMouseover);
    		if ("onMouseout" in $$props) $$invalidate(15, onMouseout = $$props.onMouseout);
    		if ("onMousedrag" in $$props) $$invalidate(16, onMousedrag = $$props.onMousedrag);
    		if ("onTouchdown" in $$props) $$invalidate(17, onTouchdown = $$props.onTouchdown);
    		if ("onTouchup" in $$props) $$invalidate(18, onTouchup = $$props.onTouchup);
    		if ("onTouchover" in $$props) $$invalidate(19, onTouchover = $$props.onTouchover);
    		if ("onTouchout" in $$props) $$invalidate(20, onTouchout = $$props.onTouchout);
    		if ("onTouchdrag" in $$props) $$invalidate(21, onTouchdrag = $$props.onTouchdrag);
    		if ("onSelect" in $$props) $$invalidate(22, onSelect = $$props.onSelect);
    		if ("onDeselect" in $$props) $$invalidate(23, onDeselect = $$props.onDeselect);
    		if ("renderSettings" in $$props) $$invalidate(24, renderSettings = $$props.renderSettings);
    		if ("blockReindexing" in $$props) $$invalidate(25, blockReindexing = $$props.blockReindexing);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		x1,
    		x2,
    		y1,
    		y2,
    		fill,
    		stroke,
    		strokeWidth,
    		strokeOpacity,
    		fillOpacity,
    		opacity,
    		transition,
    		onClick,
    		onMousedown,
    		onMouseup,
    		onMouseover,
    		onMouseout,
    		onMousedrag,
    		onTouchdown,
    		onTouchup,
    		onTouchover,
    		onTouchout,
    		onTouchdrag,
    		onSelect,
    		onDeselect,
    		renderSettings,
    		blockReindexing
    	];
    }

    class Rectangle extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$3, create_fragment$3, safe_not_equal, {
    			x1: 0,
    			x2: 1,
    			y1: 2,
    			y2: 3,
    			fill: 4,
    			stroke: 5,
    			strokeWidth: 6,
    			strokeOpacity: 7,
    			fillOpacity: 8,
    			opacity: 9,
    			transition: 10,
    			onClick: 11,
    			onMousedown: 12,
    			onMouseup: 13,
    			onMouseover: 14,
    			onMouseout: 15,
    			onMousedrag: 16,
    			onTouchdown: 17,
    			onTouchup: 18,
    			onTouchover: 19,
    			onTouchout: 20,
    			onTouchdrag: 21,
    			onSelect: 22,
    			onDeselect: 23,
    			renderSettings: 24,
    			blockReindexing: 25
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Rectangle",
    			options,
    			id: create_fragment$3.name
    		});
    	}

    	get x1() {
    		throw new Error("<Rectangle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set x1(value) {
    		throw new Error("<Rectangle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get x2() {
    		throw new Error("<Rectangle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set x2(value) {
    		throw new Error("<Rectangle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get y1() {
    		throw new Error("<Rectangle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set y1(value) {
    		throw new Error("<Rectangle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get y2() {
    		throw new Error("<Rectangle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set y2(value) {
    		throw new Error("<Rectangle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fill() {
    		throw new Error("<Rectangle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fill(value) {
    		throw new Error("<Rectangle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get stroke() {
    		throw new Error("<Rectangle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set stroke(value) {
    		throw new Error("<Rectangle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get strokeWidth() {
    		throw new Error("<Rectangle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set strokeWidth(value) {
    		throw new Error("<Rectangle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get strokeOpacity() {
    		throw new Error("<Rectangle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set strokeOpacity(value) {
    		throw new Error("<Rectangle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fillOpacity() {
    		throw new Error("<Rectangle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fillOpacity(value) {
    		throw new Error("<Rectangle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get opacity() {
    		throw new Error("<Rectangle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set opacity(value) {
    		throw new Error("<Rectangle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get transition() {
    		throw new Error("<Rectangle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set transition(value) {
    		throw new Error("<Rectangle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onClick() {
    		throw new Error("<Rectangle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onClick(value) {
    		throw new Error("<Rectangle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onMousedown() {
    		throw new Error("<Rectangle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onMousedown(value) {
    		throw new Error("<Rectangle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onMouseup() {
    		throw new Error("<Rectangle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onMouseup(value) {
    		throw new Error("<Rectangle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onMouseover() {
    		throw new Error("<Rectangle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onMouseover(value) {
    		throw new Error("<Rectangle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onMouseout() {
    		throw new Error("<Rectangle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onMouseout(value) {
    		throw new Error("<Rectangle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onMousedrag() {
    		throw new Error("<Rectangle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onMousedrag(value) {
    		throw new Error("<Rectangle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onTouchdown() {
    		throw new Error("<Rectangle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onTouchdown(value) {
    		throw new Error("<Rectangle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onTouchup() {
    		throw new Error("<Rectangle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onTouchup(value) {
    		throw new Error("<Rectangle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onTouchover() {
    		throw new Error("<Rectangle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onTouchover(value) {
    		throw new Error("<Rectangle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onTouchout() {
    		throw new Error("<Rectangle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onTouchout(value) {
    		throw new Error("<Rectangle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onTouchdrag() {
    		throw new Error("<Rectangle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onTouchdrag(value) {
    		throw new Error("<Rectangle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onSelect() {
    		throw new Error("<Rectangle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onSelect(value) {
    		throw new Error("<Rectangle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onDeselect() {
    		throw new Error("<Rectangle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onDeselect(value) {
    		throw new Error("<Rectangle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get renderSettings() {
    		throw new Error("<Rectangle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set renderSettings(value) {
    		throw new Error("<Rectangle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get blockReindexing() {
    		throw new Error("<Rectangle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set blockReindexing(value) {
    		throw new Error("<Rectangle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@snlab/florence/src/components/Marks/Line/Line.svelte generated by Svelte v3.21.0 */

    function create_fragment$4(ctx) {
    	let current;

    	const mark = new Mark({
    			props: {
    				type: "Line",
    				x: /*x*/ ctx[0],
    				y: /*y*/ ctx[1],
    				geometry: /*geometry*/ ctx[2],
    				strokeWidth: /*strokeWidth*/ ctx[3],
    				stroke: /*stroke*/ ctx[4],
    				opacity: /*opacity*/ ctx[5],
    				transition: /*transition*/ ctx[6],
    				onClick: /*onClick*/ ctx[7],
    				onMousedown: /*onMousedown*/ ctx[8],
    				onMouseup: /*onMouseup*/ ctx[9],
    				onMouseover: /*onMouseover*/ ctx[10],
    				onMouseout: /*onMouseout*/ ctx[11],
    				onMousedrag: /*onMousedrag*/ ctx[12],
    				onTouchdown: /*onTouchdown*/ ctx[13],
    				onTouchup: /*onTouchup*/ ctx[14],
    				onTouchover: /*onTouchover*/ ctx[15],
    				onTouchout: /*onTouchout*/ ctx[16],
    				onTouchdrag: /*onTouchdrag*/ ctx[17],
    				onSelect: /*onSelect*/ ctx[18],
    				onDeselect: /*onDeselect*/ ctx[19],
    				renderSettings: /*renderSettings*/ ctx[20],
    				blockReindexing: /*blockReindexing*/ ctx[21],
    				_asPolygon: false
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mark.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(mark, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const mark_changes = {};
    			if (dirty & /*x*/ 1) mark_changes.x = /*x*/ ctx[0];
    			if (dirty & /*y*/ 2) mark_changes.y = /*y*/ ctx[1];
    			if (dirty & /*geometry*/ 4) mark_changes.geometry = /*geometry*/ ctx[2];
    			if (dirty & /*strokeWidth*/ 8) mark_changes.strokeWidth = /*strokeWidth*/ ctx[3];
    			if (dirty & /*stroke*/ 16) mark_changes.stroke = /*stroke*/ ctx[4];
    			if (dirty & /*opacity*/ 32) mark_changes.opacity = /*opacity*/ ctx[5];
    			if (dirty & /*transition*/ 64) mark_changes.transition = /*transition*/ ctx[6];
    			if (dirty & /*onClick*/ 128) mark_changes.onClick = /*onClick*/ ctx[7];
    			if (dirty & /*onMousedown*/ 256) mark_changes.onMousedown = /*onMousedown*/ ctx[8];
    			if (dirty & /*onMouseup*/ 512) mark_changes.onMouseup = /*onMouseup*/ ctx[9];
    			if (dirty & /*onMouseover*/ 1024) mark_changes.onMouseover = /*onMouseover*/ ctx[10];
    			if (dirty & /*onMouseout*/ 2048) mark_changes.onMouseout = /*onMouseout*/ ctx[11];
    			if (dirty & /*onMousedrag*/ 4096) mark_changes.onMousedrag = /*onMousedrag*/ ctx[12];
    			if (dirty & /*onTouchdown*/ 8192) mark_changes.onTouchdown = /*onTouchdown*/ ctx[13];
    			if (dirty & /*onTouchup*/ 16384) mark_changes.onTouchup = /*onTouchup*/ ctx[14];
    			if (dirty & /*onTouchover*/ 32768) mark_changes.onTouchover = /*onTouchover*/ ctx[15];
    			if (dirty & /*onTouchout*/ 65536) mark_changes.onTouchout = /*onTouchout*/ ctx[16];
    			if (dirty & /*onTouchdrag*/ 131072) mark_changes.onTouchdrag = /*onTouchdrag*/ ctx[17];
    			if (dirty & /*onSelect*/ 262144) mark_changes.onSelect = /*onSelect*/ ctx[18];
    			if (dirty & /*onDeselect*/ 524288) mark_changes.onDeselect = /*onDeselect*/ ctx[19];
    			if (dirty & /*renderSettings*/ 1048576) mark_changes.renderSettings = /*renderSettings*/ ctx[20];
    			if (dirty & /*blockReindexing*/ 2097152) mark_changes.blockReindexing = /*blockReindexing*/ ctx[21];
    			mark.$set(mark_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mark.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mark.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mark, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$4.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$4($$self, $$props, $$invalidate) {
    	let { x = undefined } = $$props;
    	let { y = undefined } = $$props;
    	let { geometry = undefined } = $$props;
    	let { strokeWidth = undefined } = $$props;
    	let { stroke = undefined } = $$props;
    	let { opacity = undefined } = $$props;
    	let { transition = undefined } = $$props;
    	let { onClick = undefined } = $$props;
    	let { onMousedown = undefined } = $$props;
    	let { onMouseup = undefined } = $$props;
    	let { onMouseover = undefined } = $$props;
    	let { onMouseout = undefined } = $$props;
    	let { onMousedrag = undefined } = $$props;
    	let { onTouchdown = undefined } = $$props;
    	let { onTouchup = undefined } = $$props;
    	let { onTouchover = undefined } = $$props;
    	let { onTouchout = undefined } = $$props;
    	let { onTouchdrag = undefined } = $$props;
    	let { onSelect = undefined } = $$props;
    	let { onDeselect = undefined } = $$props;
    	let { renderSettings = undefined } = $$props;
    	let { blockReindexing = false } = $$props;

    	const writable_props = [
    		"x",
    		"y",
    		"geometry",
    		"strokeWidth",
    		"stroke",
    		"opacity",
    		"transition",
    		"onClick",
    		"onMousedown",
    		"onMouseup",
    		"onMouseover",
    		"onMouseout",
    		"onMousedrag",
    		"onTouchdown",
    		"onTouchup",
    		"onTouchover",
    		"onTouchout",
    		"onTouchdrag",
    		"onSelect",
    		"onDeselect",
    		"renderSettings",
    		"blockReindexing"
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Line> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Line", $$slots, []);

    	$$self.$set = $$props => {
    		if ("x" in $$props) $$invalidate(0, x = $$props.x);
    		if ("y" in $$props) $$invalidate(1, y = $$props.y);
    		if ("geometry" in $$props) $$invalidate(2, geometry = $$props.geometry);
    		if ("strokeWidth" in $$props) $$invalidate(3, strokeWidth = $$props.strokeWidth);
    		if ("stroke" in $$props) $$invalidate(4, stroke = $$props.stroke);
    		if ("opacity" in $$props) $$invalidate(5, opacity = $$props.opacity);
    		if ("transition" in $$props) $$invalidate(6, transition = $$props.transition);
    		if ("onClick" in $$props) $$invalidate(7, onClick = $$props.onClick);
    		if ("onMousedown" in $$props) $$invalidate(8, onMousedown = $$props.onMousedown);
    		if ("onMouseup" in $$props) $$invalidate(9, onMouseup = $$props.onMouseup);
    		if ("onMouseover" in $$props) $$invalidate(10, onMouseover = $$props.onMouseover);
    		if ("onMouseout" in $$props) $$invalidate(11, onMouseout = $$props.onMouseout);
    		if ("onMousedrag" in $$props) $$invalidate(12, onMousedrag = $$props.onMousedrag);
    		if ("onTouchdown" in $$props) $$invalidate(13, onTouchdown = $$props.onTouchdown);
    		if ("onTouchup" in $$props) $$invalidate(14, onTouchup = $$props.onTouchup);
    		if ("onTouchover" in $$props) $$invalidate(15, onTouchover = $$props.onTouchover);
    		if ("onTouchout" in $$props) $$invalidate(16, onTouchout = $$props.onTouchout);
    		if ("onTouchdrag" in $$props) $$invalidate(17, onTouchdrag = $$props.onTouchdrag);
    		if ("onSelect" in $$props) $$invalidate(18, onSelect = $$props.onSelect);
    		if ("onDeselect" in $$props) $$invalidate(19, onDeselect = $$props.onDeselect);
    		if ("renderSettings" in $$props) $$invalidate(20, renderSettings = $$props.renderSettings);
    		if ("blockReindexing" in $$props) $$invalidate(21, blockReindexing = $$props.blockReindexing);
    	};

    	$$self.$capture_state = () => ({
    		Mark,
    		x,
    		y,
    		geometry,
    		strokeWidth,
    		stroke,
    		opacity,
    		transition,
    		onClick,
    		onMousedown,
    		onMouseup,
    		onMouseover,
    		onMouseout,
    		onMousedrag,
    		onTouchdown,
    		onTouchup,
    		onTouchover,
    		onTouchout,
    		onTouchdrag,
    		onSelect,
    		onDeselect,
    		renderSettings,
    		blockReindexing
    	});

    	$$self.$inject_state = $$props => {
    		if ("x" in $$props) $$invalidate(0, x = $$props.x);
    		if ("y" in $$props) $$invalidate(1, y = $$props.y);
    		if ("geometry" in $$props) $$invalidate(2, geometry = $$props.geometry);
    		if ("strokeWidth" in $$props) $$invalidate(3, strokeWidth = $$props.strokeWidth);
    		if ("stroke" in $$props) $$invalidate(4, stroke = $$props.stroke);
    		if ("opacity" in $$props) $$invalidate(5, opacity = $$props.opacity);
    		if ("transition" in $$props) $$invalidate(6, transition = $$props.transition);
    		if ("onClick" in $$props) $$invalidate(7, onClick = $$props.onClick);
    		if ("onMousedown" in $$props) $$invalidate(8, onMousedown = $$props.onMousedown);
    		if ("onMouseup" in $$props) $$invalidate(9, onMouseup = $$props.onMouseup);
    		if ("onMouseover" in $$props) $$invalidate(10, onMouseover = $$props.onMouseover);
    		if ("onMouseout" in $$props) $$invalidate(11, onMouseout = $$props.onMouseout);
    		if ("onMousedrag" in $$props) $$invalidate(12, onMousedrag = $$props.onMousedrag);
    		if ("onTouchdown" in $$props) $$invalidate(13, onTouchdown = $$props.onTouchdown);
    		if ("onTouchup" in $$props) $$invalidate(14, onTouchup = $$props.onTouchup);
    		if ("onTouchover" in $$props) $$invalidate(15, onTouchover = $$props.onTouchover);
    		if ("onTouchout" in $$props) $$invalidate(16, onTouchout = $$props.onTouchout);
    		if ("onTouchdrag" in $$props) $$invalidate(17, onTouchdrag = $$props.onTouchdrag);
    		if ("onSelect" in $$props) $$invalidate(18, onSelect = $$props.onSelect);
    		if ("onDeselect" in $$props) $$invalidate(19, onDeselect = $$props.onDeselect);
    		if ("renderSettings" in $$props) $$invalidate(20, renderSettings = $$props.renderSettings);
    		if ("blockReindexing" in $$props) $$invalidate(21, blockReindexing = $$props.blockReindexing);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		x,
    		y,
    		geometry,
    		strokeWidth,
    		stroke,
    		opacity,
    		transition,
    		onClick,
    		onMousedown,
    		onMouseup,
    		onMouseover,
    		onMouseout,
    		onMousedrag,
    		onTouchdown,
    		onTouchup,
    		onTouchover,
    		onTouchout,
    		onTouchdrag,
    		onSelect,
    		onDeselect,
    		renderSettings,
    		blockReindexing
    	];
    }

    class Line extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$4, create_fragment$4, safe_not_equal, {
    			x: 0,
    			y: 1,
    			geometry: 2,
    			strokeWidth: 3,
    			stroke: 4,
    			opacity: 5,
    			transition: 6,
    			onClick: 7,
    			onMousedown: 8,
    			onMouseup: 9,
    			onMouseover: 10,
    			onMouseout: 11,
    			onMousedrag: 12,
    			onTouchdown: 13,
    			onTouchup: 14,
    			onTouchover: 15,
    			onTouchout: 16,
    			onTouchdrag: 17,
    			onSelect: 18,
    			onDeselect: 19,
    			renderSettings: 20,
    			blockReindexing: 21
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Line",
    			options,
    			id: create_fragment$4.name
    		});
    	}

    	get x() {
    		throw new Error("<Line>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set x(value) {
    		throw new Error("<Line>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get y() {
    		throw new Error("<Line>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set y(value) {
    		throw new Error("<Line>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get geometry() {
    		throw new Error("<Line>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set geometry(value) {
    		throw new Error("<Line>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get strokeWidth() {
    		throw new Error("<Line>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set strokeWidth(value) {
    		throw new Error("<Line>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get stroke() {
    		throw new Error("<Line>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set stroke(value) {
    		throw new Error("<Line>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get opacity() {
    		throw new Error("<Line>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set opacity(value) {
    		throw new Error("<Line>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get transition() {
    		throw new Error("<Line>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set transition(value) {
    		throw new Error("<Line>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onClick() {
    		throw new Error("<Line>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onClick(value) {
    		throw new Error("<Line>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onMousedown() {
    		throw new Error("<Line>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onMousedown(value) {
    		throw new Error("<Line>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onMouseup() {
    		throw new Error("<Line>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onMouseup(value) {
    		throw new Error("<Line>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onMouseover() {
    		throw new Error("<Line>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onMouseover(value) {
    		throw new Error("<Line>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onMouseout() {
    		throw new Error("<Line>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onMouseout(value) {
    		throw new Error("<Line>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onMousedrag() {
    		throw new Error("<Line>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onMousedrag(value) {
    		throw new Error("<Line>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onTouchdown() {
    		throw new Error("<Line>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onTouchdown(value) {
    		throw new Error("<Line>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onTouchup() {
    		throw new Error("<Line>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onTouchup(value) {
    		throw new Error("<Line>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onTouchover() {
    		throw new Error("<Line>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onTouchover(value) {
    		throw new Error("<Line>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onTouchout() {
    		throw new Error("<Line>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onTouchout(value) {
    		throw new Error("<Line>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onTouchdrag() {
    		throw new Error("<Line>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onTouchdrag(value) {
    		throw new Error("<Line>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onSelect() {
    		throw new Error("<Line>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onSelect(value) {
    		throw new Error("<Line>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onDeselect() {
    		throw new Error("<Line>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onDeselect(value) {
    		throw new Error("<Line>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get renderSettings() {
    		throw new Error("<Line>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set renderSettings(value) {
    		throw new Error("<Line>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get blockReindexing() {
    		throw new Error("<Line>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set blockReindexing(value) {
    		throw new Error("<Line>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@snlab/florence/src/components/Marks/Label/Label.svelte generated by Svelte v3.21.0 */

    function create_fragment$5(ctx) {
    	let current;

    	const mark = new Mark({
    			props: {
    				type: "Label",
    				x: /*x*/ ctx[0],
    				y: /*y*/ ctx[1],
    				geometry: /*geometry*/ ctx[2],
    				fill: /*fill*/ ctx[3],
    				stroke: /*stroke*/ ctx[4],
    				strokeWidth: /*strokeWidth*/ ctx[5],
    				strokeOpacity: /*strokeOpacity*/ ctx[6],
    				fillOpacity: /*fillOpacity*/ ctx[7],
    				opacity: /*opacity*/ ctx[8],
    				text: /*text*/ ctx[9],
    				fontFamily: /*fontFamily*/ ctx[10],
    				fontSize: /*fontSize*/ ctx[11],
    				fontWeight: /*fontWeight*/ ctx[12],
    				rotation: /*rotation*/ ctx[13],
    				anchorPoint: /*anchorPoint*/ ctx[14],
    				transition: /*transition*/ ctx[15],
    				onClick: /*onClick*/ ctx[16],
    				onMousedown: /*onMousedown*/ ctx[17],
    				onMouseup: /*onMouseup*/ ctx[18],
    				onMouseover: /*onMouseover*/ ctx[19],
    				onMouseout: /*onMouseout*/ ctx[20],
    				onMousedrag: /*onMousedrag*/ ctx[21],
    				onTouchdown: /*onTouchdown*/ ctx[22],
    				onTouchup: /*onTouchup*/ ctx[23],
    				onTouchover: /*onTouchover*/ ctx[24],
    				onTouchout: /*onTouchout*/ ctx[25],
    				onTouchdrag: /*onTouchdrag*/ ctx[26],
    				onSelect: /*onSelect*/ ctx[27],
    				onDeselect: /*onDeselect*/ ctx[28],
    				renderSettings: /*renderSettings*/ ctx[29],
    				blockReindexing: /*blockReindexing*/ ctx[30],
    				_asPolygon: false
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mark.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(mark, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const mark_changes = {};
    			if (dirty & /*x*/ 1) mark_changes.x = /*x*/ ctx[0];
    			if (dirty & /*y*/ 2) mark_changes.y = /*y*/ ctx[1];
    			if (dirty & /*geometry*/ 4) mark_changes.geometry = /*geometry*/ ctx[2];
    			if (dirty & /*fill*/ 8) mark_changes.fill = /*fill*/ ctx[3];
    			if (dirty & /*stroke*/ 16) mark_changes.stroke = /*stroke*/ ctx[4];
    			if (dirty & /*strokeWidth*/ 32) mark_changes.strokeWidth = /*strokeWidth*/ ctx[5];
    			if (dirty & /*strokeOpacity*/ 64) mark_changes.strokeOpacity = /*strokeOpacity*/ ctx[6];
    			if (dirty & /*fillOpacity*/ 128) mark_changes.fillOpacity = /*fillOpacity*/ ctx[7];
    			if (dirty & /*opacity*/ 256) mark_changes.opacity = /*opacity*/ ctx[8];
    			if (dirty & /*text*/ 512) mark_changes.text = /*text*/ ctx[9];
    			if (dirty & /*fontFamily*/ 1024) mark_changes.fontFamily = /*fontFamily*/ ctx[10];
    			if (dirty & /*fontSize*/ 2048) mark_changes.fontSize = /*fontSize*/ ctx[11];
    			if (dirty & /*fontWeight*/ 4096) mark_changes.fontWeight = /*fontWeight*/ ctx[12];
    			if (dirty & /*rotation*/ 8192) mark_changes.rotation = /*rotation*/ ctx[13];
    			if (dirty & /*anchorPoint*/ 16384) mark_changes.anchorPoint = /*anchorPoint*/ ctx[14];
    			if (dirty & /*transition*/ 32768) mark_changes.transition = /*transition*/ ctx[15];
    			if (dirty & /*onClick*/ 65536) mark_changes.onClick = /*onClick*/ ctx[16];
    			if (dirty & /*onMousedown*/ 131072) mark_changes.onMousedown = /*onMousedown*/ ctx[17];
    			if (dirty & /*onMouseup*/ 262144) mark_changes.onMouseup = /*onMouseup*/ ctx[18];
    			if (dirty & /*onMouseover*/ 524288) mark_changes.onMouseover = /*onMouseover*/ ctx[19];
    			if (dirty & /*onMouseout*/ 1048576) mark_changes.onMouseout = /*onMouseout*/ ctx[20];
    			if (dirty & /*onMousedrag*/ 2097152) mark_changes.onMousedrag = /*onMousedrag*/ ctx[21];
    			if (dirty & /*onTouchdown*/ 4194304) mark_changes.onTouchdown = /*onTouchdown*/ ctx[22];
    			if (dirty & /*onTouchup*/ 8388608) mark_changes.onTouchup = /*onTouchup*/ ctx[23];
    			if (dirty & /*onTouchover*/ 16777216) mark_changes.onTouchover = /*onTouchover*/ ctx[24];
    			if (dirty & /*onTouchout*/ 33554432) mark_changes.onTouchout = /*onTouchout*/ ctx[25];
    			if (dirty & /*onTouchdrag*/ 67108864) mark_changes.onTouchdrag = /*onTouchdrag*/ ctx[26];
    			if (dirty & /*onSelect*/ 134217728) mark_changes.onSelect = /*onSelect*/ ctx[27];
    			if (dirty & /*onDeselect*/ 268435456) mark_changes.onDeselect = /*onDeselect*/ ctx[28];
    			if (dirty & /*renderSettings*/ 536870912) mark_changes.renderSettings = /*renderSettings*/ ctx[29];
    			if (dirty & /*blockReindexing*/ 1073741824) mark_changes.blockReindexing = /*blockReindexing*/ ctx[30];
    			mark.$set(mark_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mark.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mark.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mark, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$5.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$5($$self, $$props, $$invalidate) {
    	let { x = undefined } = $$props;
    	let { y = undefined } = $$props;
    	let { geometry = undefined } = $$props;
    	let { fill = undefined } = $$props;
    	let { stroke = undefined } = $$props;
    	let { strokeWidth = undefined } = $$props;
    	let { strokeOpacity = undefined } = $$props;
    	let { fillOpacity = undefined } = $$props;
    	let { opacity = undefined } = $$props;
    	let { text = undefined } = $$props;
    	let { fontFamily = undefined } = $$props;
    	let { fontSize = undefined } = $$props;
    	let { fontWeight = undefined } = $$props;
    	let { rotation = undefined } = $$props;
    	let { anchorPoint = undefined } = $$props;
    	let { transition = undefined } = $$props;
    	let { onClick = undefined } = $$props;
    	let { onMousedown = undefined } = $$props;
    	let { onMouseup = undefined } = $$props;
    	let { onMouseover = undefined } = $$props;
    	let { onMouseout = undefined } = $$props;
    	let { onMousedrag = undefined } = $$props;
    	let { onTouchdown = undefined } = $$props;
    	let { onTouchup = undefined } = $$props;
    	let { onTouchover = undefined } = $$props;
    	let { onTouchout = undefined } = $$props;
    	let { onTouchdrag = undefined } = $$props;
    	let { onSelect = undefined } = $$props;
    	let { onDeselect = undefined } = $$props;
    	let { renderSettings = undefined } = $$props;
    	let { blockReindexing = false } = $$props;

    	const writable_props = [
    		"x",
    		"y",
    		"geometry",
    		"fill",
    		"stroke",
    		"strokeWidth",
    		"strokeOpacity",
    		"fillOpacity",
    		"opacity",
    		"text",
    		"fontFamily",
    		"fontSize",
    		"fontWeight",
    		"rotation",
    		"anchorPoint",
    		"transition",
    		"onClick",
    		"onMousedown",
    		"onMouseup",
    		"onMouseover",
    		"onMouseout",
    		"onMousedrag",
    		"onTouchdown",
    		"onTouchup",
    		"onTouchover",
    		"onTouchout",
    		"onTouchdrag",
    		"onSelect",
    		"onDeselect",
    		"renderSettings",
    		"blockReindexing"
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Label> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Label", $$slots, []);

    	$$self.$set = $$props => {
    		if ("x" in $$props) $$invalidate(0, x = $$props.x);
    		if ("y" in $$props) $$invalidate(1, y = $$props.y);
    		if ("geometry" in $$props) $$invalidate(2, geometry = $$props.geometry);
    		if ("fill" in $$props) $$invalidate(3, fill = $$props.fill);
    		if ("stroke" in $$props) $$invalidate(4, stroke = $$props.stroke);
    		if ("strokeWidth" in $$props) $$invalidate(5, strokeWidth = $$props.strokeWidth);
    		if ("strokeOpacity" in $$props) $$invalidate(6, strokeOpacity = $$props.strokeOpacity);
    		if ("fillOpacity" in $$props) $$invalidate(7, fillOpacity = $$props.fillOpacity);
    		if ("opacity" in $$props) $$invalidate(8, opacity = $$props.opacity);
    		if ("text" in $$props) $$invalidate(9, text = $$props.text);
    		if ("fontFamily" in $$props) $$invalidate(10, fontFamily = $$props.fontFamily);
    		if ("fontSize" in $$props) $$invalidate(11, fontSize = $$props.fontSize);
    		if ("fontWeight" in $$props) $$invalidate(12, fontWeight = $$props.fontWeight);
    		if ("rotation" in $$props) $$invalidate(13, rotation = $$props.rotation);
    		if ("anchorPoint" in $$props) $$invalidate(14, anchorPoint = $$props.anchorPoint);
    		if ("transition" in $$props) $$invalidate(15, transition = $$props.transition);
    		if ("onClick" in $$props) $$invalidate(16, onClick = $$props.onClick);
    		if ("onMousedown" in $$props) $$invalidate(17, onMousedown = $$props.onMousedown);
    		if ("onMouseup" in $$props) $$invalidate(18, onMouseup = $$props.onMouseup);
    		if ("onMouseover" in $$props) $$invalidate(19, onMouseover = $$props.onMouseover);
    		if ("onMouseout" in $$props) $$invalidate(20, onMouseout = $$props.onMouseout);
    		if ("onMousedrag" in $$props) $$invalidate(21, onMousedrag = $$props.onMousedrag);
    		if ("onTouchdown" in $$props) $$invalidate(22, onTouchdown = $$props.onTouchdown);
    		if ("onTouchup" in $$props) $$invalidate(23, onTouchup = $$props.onTouchup);
    		if ("onTouchover" in $$props) $$invalidate(24, onTouchover = $$props.onTouchover);
    		if ("onTouchout" in $$props) $$invalidate(25, onTouchout = $$props.onTouchout);
    		if ("onTouchdrag" in $$props) $$invalidate(26, onTouchdrag = $$props.onTouchdrag);
    		if ("onSelect" in $$props) $$invalidate(27, onSelect = $$props.onSelect);
    		if ("onDeselect" in $$props) $$invalidate(28, onDeselect = $$props.onDeselect);
    		if ("renderSettings" in $$props) $$invalidate(29, renderSettings = $$props.renderSettings);
    		if ("blockReindexing" in $$props) $$invalidate(30, blockReindexing = $$props.blockReindexing);
    	};

    	$$self.$capture_state = () => ({
    		Mark,
    		x,
    		y,
    		geometry,
    		fill,
    		stroke,
    		strokeWidth,
    		strokeOpacity,
    		fillOpacity,
    		opacity,
    		text,
    		fontFamily,
    		fontSize,
    		fontWeight,
    		rotation,
    		anchorPoint,
    		transition,
    		onClick,
    		onMousedown,
    		onMouseup,
    		onMouseover,
    		onMouseout,
    		onMousedrag,
    		onTouchdown,
    		onTouchup,
    		onTouchover,
    		onTouchout,
    		onTouchdrag,
    		onSelect,
    		onDeselect,
    		renderSettings,
    		blockReindexing
    	});

    	$$self.$inject_state = $$props => {
    		if ("x" in $$props) $$invalidate(0, x = $$props.x);
    		if ("y" in $$props) $$invalidate(1, y = $$props.y);
    		if ("geometry" in $$props) $$invalidate(2, geometry = $$props.geometry);
    		if ("fill" in $$props) $$invalidate(3, fill = $$props.fill);
    		if ("stroke" in $$props) $$invalidate(4, stroke = $$props.stroke);
    		if ("strokeWidth" in $$props) $$invalidate(5, strokeWidth = $$props.strokeWidth);
    		if ("strokeOpacity" in $$props) $$invalidate(6, strokeOpacity = $$props.strokeOpacity);
    		if ("fillOpacity" in $$props) $$invalidate(7, fillOpacity = $$props.fillOpacity);
    		if ("opacity" in $$props) $$invalidate(8, opacity = $$props.opacity);
    		if ("text" in $$props) $$invalidate(9, text = $$props.text);
    		if ("fontFamily" in $$props) $$invalidate(10, fontFamily = $$props.fontFamily);
    		if ("fontSize" in $$props) $$invalidate(11, fontSize = $$props.fontSize);
    		if ("fontWeight" in $$props) $$invalidate(12, fontWeight = $$props.fontWeight);
    		if ("rotation" in $$props) $$invalidate(13, rotation = $$props.rotation);
    		if ("anchorPoint" in $$props) $$invalidate(14, anchorPoint = $$props.anchorPoint);
    		if ("transition" in $$props) $$invalidate(15, transition = $$props.transition);
    		if ("onClick" in $$props) $$invalidate(16, onClick = $$props.onClick);
    		if ("onMousedown" in $$props) $$invalidate(17, onMousedown = $$props.onMousedown);
    		if ("onMouseup" in $$props) $$invalidate(18, onMouseup = $$props.onMouseup);
    		if ("onMouseover" in $$props) $$invalidate(19, onMouseover = $$props.onMouseover);
    		if ("onMouseout" in $$props) $$invalidate(20, onMouseout = $$props.onMouseout);
    		if ("onMousedrag" in $$props) $$invalidate(21, onMousedrag = $$props.onMousedrag);
    		if ("onTouchdown" in $$props) $$invalidate(22, onTouchdown = $$props.onTouchdown);
    		if ("onTouchup" in $$props) $$invalidate(23, onTouchup = $$props.onTouchup);
    		if ("onTouchover" in $$props) $$invalidate(24, onTouchover = $$props.onTouchover);
    		if ("onTouchout" in $$props) $$invalidate(25, onTouchout = $$props.onTouchout);
    		if ("onTouchdrag" in $$props) $$invalidate(26, onTouchdrag = $$props.onTouchdrag);
    		if ("onSelect" in $$props) $$invalidate(27, onSelect = $$props.onSelect);
    		if ("onDeselect" in $$props) $$invalidate(28, onDeselect = $$props.onDeselect);
    		if ("renderSettings" in $$props) $$invalidate(29, renderSettings = $$props.renderSettings);
    		if ("blockReindexing" in $$props) $$invalidate(30, blockReindexing = $$props.blockReindexing);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		x,
    		y,
    		geometry,
    		fill,
    		stroke,
    		strokeWidth,
    		strokeOpacity,
    		fillOpacity,
    		opacity,
    		text,
    		fontFamily,
    		fontSize,
    		fontWeight,
    		rotation,
    		anchorPoint,
    		transition,
    		onClick,
    		onMousedown,
    		onMouseup,
    		onMouseover,
    		onMouseout,
    		onMousedrag,
    		onTouchdown,
    		onTouchup,
    		onTouchover,
    		onTouchout,
    		onTouchdrag,
    		onSelect,
    		onDeselect,
    		renderSettings,
    		blockReindexing
    	];
    }

    class Label extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$5, create_fragment$5, safe_not_equal, {
    			x: 0,
    			y: 1,
    			geometry: 2,
    			fill: 3,
    			stroke: 4,
    			strokeWidth: 5,
    			strokeOpacity: 6,
    			fillOpacity: 7,
    			opacity: 8,
    			text: 9,
    			fontFamily: 10,
    			fontSize: 11,
    			fontWeight: 12,
    			rotation: 13,
    			anchorPoint: 14,
    			transition: 15,
    			onClick: 16,
    			onMousedown: 17,
    			onMouseup: 18,
    			onMouseover: 19,
    			onMouseout: 20,
    			onMousedrag: 21,
    			onTouchdown: 22,
    			onTouchup: 23,
    			onTouchover: 24,
    			onTouchout: 25,
    			onTouchdrag: 26,
    			onSelect: 27,
    			onDeselect: 28,
    			renderSettings: 29,
    			blockReindexing: 30
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Label",
    			options,
    			id: create_fragment$5.name
    		});
    	}

    	get x() {
    		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set x(value) {
    		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get y() {
    		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set y(value) {
    		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get geometry() {
    		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set geometry(value) {
    		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fill() {
    		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fill(value) {
    		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get stroke() {
    		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set stroke(value) {
    		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get strokeWidth() {
    		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set strokeWidth(value) {
    		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get strokeOpacity() {
    		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set strokeOpacity(value) {
    		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fillOpacity() {
    		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fillOpacity(value) {
    		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get opacity() {
    		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set opacity(value) {
    		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get text() {
    		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set text(value) {
    		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fontFamily() {
    		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fontFamily(value) {
    		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fontSize() {
    		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fontSize(value) {
    		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fontWeight() {
    		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fontWeight(value) {
    		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rotation() {
    		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rotation(value) {
    		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get anchorPoint() {
    		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set anchorPoint(value) {
    		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get transition() {
    		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set transition(value) {
    		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onClick() {
    		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onClick(value) {
    		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onMousedown() {
    		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onMousedown(value) {
    		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onMouseup() {
    		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onMouseup(value) {
    		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onMouseover() {
    		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onMouseover(value) {
    		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onMouseout() {
    		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onMouseout(value) {
    		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onMousedrag() {
    		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onMousedrag(value) {
    		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onTouchdown() {
    		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onTouchdown(value) {
    		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onTouchup() {
    		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onTouchup(value) {
    		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onTouchover() {
    		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onTouchover(value) {
    		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onTouchout() {
    		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onTouchout(value) {
    		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onTouchdrag() {
    		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onTouchdrag(value) {
    		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onSelect() {
    		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onSelect(value) {
    		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onDeselect() {
    		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onDeselect(value) {
    		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get renderSettings() {
    		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set renderSettings(value) {
    		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get blockReindexing() {
    		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set blockReindexing(value) {
    		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /**
     * This function is only used when dealing with layers.
     * For layers, most 'aesthetic' props can be specified in two ways:
     *  - An Array of values is passed to the prop
     *  - A single value is passed to the prop
     * In both cases, we need to convert whatever was passed to an Object.
     * The keys will be whatever the user used as 'key' Array, and the values
     * are whatever the user used passed to the prop in question.
     * If the user passed an Array, the values of the Object correspond to the values in the Array.
     * If the user passed a single value, every value in the Object will be that value.
     * The object structure is necessary to do transitions later.
     *
     * @param {*} propValue Whatever was passed to the prop
     * @param {*} keyArray The array of indices to be used as keys
     * @returns {Object.<Number, *>} The 'prop Object'
     */
    function generatePropObject (propValue, keyArray) {
      const propObj = {};

      if (isDefined(propValue)) {
        if (propValue.constructor === Array) {
          for (let i = 0; i < keyArray.length; i++) {
            const key = keyArray[i];
            propObj[key] = propValue[i];
          }
        } else if (propValue.constructor === Function) {
          for (let i = 0; i < keyArray.length; i++) {
            const key = keyArray[i];
            propObj[key] = propValue(key, i);
          }
        } else {
          for (let i = 0; i < keyArray.length; i++) {
            const key = keyArray[i];
            propObj[key] = propValue;
          }
        }
      }

      return propObj
    }

    /* node_modules/@snlab/florence/src/components/Marks/Mark/Layer.svelte generated by Svelte v3.21.0 */

    const { Object: Object_1 } = globals;
    const file$2 = "node_modules/@snlab/florence/src/components/Marks/Mark/Layer.svelte";

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[114] = list[i];
    	return child_ctx;
    }

    function get_each_context_1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[114] = list[i];
    	return child_ctx;
    }

    function get_each_context_2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[114] = list[i];
    	return child_ctx;
    }

    function get_each_context_3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[114] = list[i];
    	return child_ctx;
    }

    // (447:0) {#if $graphicContext.output() === 'svg'}
    function create_if_block_1$2(ctx) {
    	let t0;
    	let t1;
    	let if_block2_anchor;
    	let if_block0 = /*renderPolygon*/ ctx[26] && create_if_block_4$1(ctx);
    	let if_block1 = /*renderCircle*/ ctx[27] && create_if_block_3$1(ctx);
    	let if_block2 = /*renderLine*/ ctx[28] && create_if_block_2$1(ctx);

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			if (if_block2) if_block2.c();
    			if_block2_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t0, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, t1, anchor);
    			if (if_block2) if_block2.m(target, anchor);
    			insert_dev(target, if_block2_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (/*renderPolygon*/ ctx[26]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_4$1(ctx);
    					if_block0.c();
    					if_block0.m(t0.parentNode, t0);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*renderCircle*/ ctx[27]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_3$1(ctx);
    					if_block1.c();
    					if_block1.m(t1.parentNode, t1);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (/*renderLine*/ ctx[28]) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block_2$1(ctx);
    					if_block2.c();
    					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t0);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(t1);
    			if (if_block2) if_block2.d(detaching);
    			if (detaching) detach_dev(if_block2_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$2.name,
    		type: "if",
    		source: "(447:0) {#if $graphicContext.output() === 'svg'}",
    		ctx
    	});

    	return block;
    }

    // (449:2) {#if renderPolygon}
    function create_if_block_4$1(ctx) {
    	let g;
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let g_class_value;
    	let each_value_3 = Object.keys(/*$tr_screenGeometryObject*/ ctx[15]);
    	validate_each_argument(each_value_3);
    	const get_key = ctx => /*$key*/ ctx[114];
    	validate_each_keys(ctx, each_value_3, get_each_context_3, get_key);

    	for (let i = 0; i < each_value_3.length; i += 1) {
    		let child_ctx = get_each_context_3(ctx, each_value_3, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block_3(key, child_ctx));
    	}

    	const block = {
    		c: function create() {
    			g = svg_element("g");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(g, "class", g_class_value = `${/*type*/ ctx[0].toLowerCase()}-layer`);
    			add_location(g, file$2, 449, 4, 15742);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(g, null);
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*type, $tr_screenGeometryObject, $tr_fillObject, $tr_strokeObject, $tr_strokeWidthObject, $tr_fillOpacityObject, $tr_strokeOpacityObject, $tr_opacityObject*/ 8290305) {
    				const each_value_3 = Object.keys(/*$tr_screenGeometryObject*/ ctx[15]);
    				validate_each_argument(each_value_3);
    				validate_each_keys(ctx, each_value_3, get_each_context_3, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value_3, each_1_lookup, g, destroy_block, create_each_block_3, null, get_each_context_3);
    			}

    			if (dirty[0] & /*type*/ 1 && g_class_value !== (g_class_value = `${/*type*/ ctx[0].toLowerCase()}-layer`)) {
    				attr_dev(g, "class", g_class_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d();
    			}
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$1.name,
    		type: "if",
    		source: "(449:2) {#if renderPolygon}",
    		ctx
    	});

    	return block;
    }

    // (451:6) {#each Object.keys($tr_screenGeometryObject) as $key ($key)}
    function create_each_block_3(key_2, ctx) {
    	let path;
    	let path_class_value;
    	let path_d_value;
    	let path_fill_value;
    	let path_stroke_value;
    	let path_stroke_width_value;
    	let path_fill_opacity_value;
    	let path_stroke_opacity_value;
    	let path_opacity_value;

    	const block = {
    		key: key_2,
    		first: null,
    		c: function create() {
    			path = svg_element("path");
    			attr_dev(path, "class", path_class_value = /*type*/ ctx[0].toLowerCase());
    			attr_dev(path, "d", path_d_value = generatePath(/*$tr_screenGeometryObject*/ ctx[15][/*$key*/ ctx[114]]));
    			attr_dev(path, "fill", path_fill_value = /*$tr_fillObject*/ ctx[17][/*$key*/ ctx[114]]);
    			attr_dev(path, "stroke", path_stroke_value = /*$tr_strokeObject*/ ctx[18][/*$key*/ ctx[114]]);
    			attr_dev(path, "stroke-width", path_stroke_width_value = /*$tr_strokeWidthObject*/ ctx[19][/*$key*/ ctx[114]]);
    			attr_dev(path, "fill-opacity", path_fill_opacity_value = /*$tr_fillOpacityObject*/ ctx[21][/*$key*/ ctx[114]]);
    			attr_dev(path, "stroke-opacity", path_stroke_opacity_value = /*$tr_strokeOpacityObject*/ ctx[20][/*$key*/ ctx[114]]);
    			attr_dev(path, "opacity", path_opacity_value = /*$tr_opacityObject*/ ctx[22][/*$key*/ ctx[114]]);
    			add_location(path, file$2, 452, 8, 15860);
    			this.first = path;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, path, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*type*/ 1 && path_class_value !== (path_class_value = /*type*/ ctx[0].toLowerCase())) {
    				attr_dev(path, "class", path_class_value);
    			}

    			if (dirty[0] & /*$tr_screenGeometryObject*/ 32768 && path_d_value !== (path_d_value = generatePath(/*$tr_screenGeometryObject*/ ctx[15][/*$key*/ ctx[114]]))) {
    				attr_dev(path, "d", path_d_value);
    			}

    			if (dirty[0] & /*$tr_fillObject, $tr_screenGeometryObject*/ 163840 && path_fill_value !== (path_fill_value = /*$tr_fillObject*/ ctx[17][/*$key*/ ctx[114]])) {
    				attr_dev(path, "fill", path_fill_value);
    			}

    			if (dirty[0] & /*$tr_strokeObject, $tr_screenGeometryObject*/ 294912 && path_stroke_value !== (path_stroke_value = /*$tr_strokeObject*/ ctx[18][/*$key*/ ctx[114]])) {
    				attr_dev(path, "stroke", path_stroke_value);
    			}

    			if (dirty[0] & /*$tr_strokeWidthObject, $tr_screenGeometryObject*/ 557056 && path_stroke_width_value !== (path_stroke_width_value = /*$tr_strokeWidthObject*/ ctx[19][/*$key*/ ctx[114]])) {
    				attr_dev(path, "stroke-width", path_stroke_width_value);
    			}

    			if (dirty[0] & /*$tr_fillOpacityObject, $tr_screenGeometryObject*/ 2129920 && path_fill_opacity_value !== (path_fill_opacity_value = /*$tr_fillOpacityObject*/ ctx[21][/*$key*/ ctx[114]])) {
    				attr_dev(path, "fill-opacity", path_fill_opacity_value);
    			}

    			if (dirty[0] & /*$tr_strokeOpacityObject, $tr_screenGeometryObject*/ 1081344 && path_stroke_opacity_value !== (path_stroke_opacity_value = /*$tr_strokeOpacityObject*/ ctx[20][/*$key*/ ctx[114]])) {
    				attr_dev(path, "stroke-opacity", path_stroke_opacity_value);
    			}

    			if (dirty[0] & /*$tr_opacityObject, $tr_screenGeometryObject*/ 4227072 && path_opacity_value !== (path_opacity_value = /*$tr_opacityObject*/ ctx[22][/*$key*/ ctx[114]])) {
    				attr_dev(path, "opacity", path_opacity_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(path);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_3.name,
    		type: "each",
    		source: "(451:6) {#each Object.keys($tr_screenGeometryObject) as $key ($key)}",
    		ctx
    	});

    	return block;
    }

    // (469:2) {#if renderCircle}
    function create_if_block_3$1(ctx) {
    	let g;
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let each_value_2 = Object.keys(/*$tr_screenGeometryObject*/ ctx[15]);
    	validate_each_argument(each_value_2);
    	const get_key = ctx => /*$key*/ ctx[114];
    	validate_each_keys(ctx, each_value_2, get_each_context_2, get_key);

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		let child_ctx = get_each_context_2(ctx, each_value_2, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block_2(key, child_ctx));
    	}

    	const block = {
    		c: function create() {
    			g = svg_element("g");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(g, "class", "point-layer");
    			add_location(g, file$2, 469, 4, 16319);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(g, null);
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*$tr_screenGeometryObject, $tr_radiusObject, $tr_fillObject, $tr_strokeObject, $tr_strokeWidthObject, $tr_fillOpacityObject, $tr_strokeOpacityObject, $tr_opacityObject*/ 8355840) {
    				const each_value_2 = Object.keys(/*$tr_screenGeometryObject*/ ctx[15]);
    				validate_each_argument(each_value_2);
    				validate_each_keys(ctx, each_value_2, get_each_context_2, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value_2, each_1_lookup, g, destroy_block, create_each_block_2, null, get_each_context_2);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d();
    			}
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$1.name,
    		type: "if",
    		source: "(469:2) {#if renderCircle}",
    		ctx
    	});

    	return block;
    }

    // (471:6) {#each Object.keys($tr_screenGeometryObject) as $key ($key)}
    function create_each_block_2(key_2, ctx) {
    	let circle;
    	let circle_cx_value;
    	let circle_cy_value;
    	let circle_r_value;
    	let circle_fill_value;
    	let circle_stroke_value;
    	let circle_stroke_width_value;
    	let circle_fill_opacity_value;
    	let circle_stroke_opacity_value;
    	let circle_opacity_value;

    	const block = {
    		key: key_2,
    		first: null,
    		c: function create() {
    			circle = svg_element("circle");
    			attr_dev(circle, "class", "point");
    			attr_dev(circle, "cx", circle_cx_value = /*$tr_screenGeometryObject*/ ctx[15][/*$key*/ ctx[114]].coordinates[0]);
    			attr_dev(circle, "cy", circle_cy_value = /*$tr_screenGeometryObject*/ ctx[15][/*$key*/ ctx[114]].coordinates[1]);
    			attr_dev(circle, "r", circle_r_value = /*$tr_radiusObject*/ ctx[16][/*$key*/ ctx[114]]);
    			attr_dev(circle, "fill", circle_fill_value = /*$tr_fillObject*/ ctx[17][/*$key*/ ctx[114]]);
    			attr_dev(circle, "stroke", circle_stroke_value = /*$tr_strokeObject*/ ctx[18][/*$key*/ ctx[114]]);
    			attr_dev(circle, "stroke-width", circle_stroke_width_value = /*$tr_strokeWidthObject*/ ctx[19][/*$key*/ ctx[114]]);
    			attr_dev(circle, "fill-opacity", circle_fill_opacity_value = /*$tr_fillOpacityObject*/ ctx[21][/*$key*/ ctx[114]]);
    			attr_dev(circle, "stroke-opacity", circle_stroke_opacity_value = /*$tr_strokeOpacityObject*/ ctx[20][/*$key*/ ctx[114]]);
    			attr_dev(circle, "opacity", circle_opacity_value = /*$tr_opacityObject*/ ctx[22][/*$key*/ ctx[114]]);
    			add_location(circle, file$2, 472, 8, 16419);
    			this.first = circle;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, circle, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*$tr_screenGeometryObject*/ 32768 && circle_cx_value !== (circle_cx_value = /*$tr_screenGeometryObject*/ ctx[15][/*$key*/ ctx[114]].coordinates[0])) {
    				attr_dev(circle, "cx", circle_cx_value);
    			}

    			if (dirty[0] & /*$tr_screenGeometryObject*/ 32768 && circle_cy_value !== (circle_cy_value = /*$tr_screenGeometryObject*/ ctx[15][/*$key*/ ctx[114]].coordinates[1])) {
    				attr_dev(circle, "cy", circle_cy_value);
    			}

    			if (dirty[0] & /*$tr_radiusObject, $tr_screenGeometryObject*/ 98304 && circle_r_value !== (circle_r_value = /*$tr_radiusObject*/ ctx[16][/*$key*/ ctx[114]])) {
    				attr_dev(circle, "r", circle_r_value);
    			}

    			if (dirty[0] & /*$tr_fillObject, $tr_screenGeometryObject*/ 163840 && circle_fill_value !== (circle_fill_value = /*$tr_fillObject*/ ctx[17][/*$key*/ ctx[114]])) {
    				attr_dev(circle, "fill", circle_fill_value);
    			}

    			if (dirty[0] & /*$tr_strokeObject, $tr_screenGeometryObject*/ 294912 && circle_stroke_value !== (circle_stroke_value = /*$tr_strokeObject*/ ctx[18][/*$key*/ ctx[114]])) {
    				attr_dev(circle, "stroke", circle_stroke_value);
    			}

    			if (dirty[0] & /*$tr_strokeWidthObject, $tr_screenGeometryObject*/ 557056 && circle_stroke_width_value !== (circle_stroke_width_value = /*$tr_strokeWidthObject*/ ctx[19][/*$key*/ ctx[114]])) {
    				attr_dev(circle, "stroke-width", circle_stroke_width_value);
    			}

    			if (dirty[0] & /*$tr_fillOpacityObject, $tr_screenGeometryObject*/ 2129920 && circle_fill_opacity_value !== (circle_fill_opacity_value = /*$tr_fillOpacityObject*/ ctx[21][/*$key*/ ctx[114]])) {
    				attr_dev(circle, "fill-opacity", circle_fill_opacity_value);
    			}

    			if (dirty[0] & /*$tr_strokeOpacityObject, $tr_screenGeometryObject*/ 1081344 && circle_stroke_opacity_value !== (circle_stroke_opacity_value = /*$tr_strokeOpacityObject*/ ctx[20][/*$key*/ ctx[114]])) {
    				attr_dev(circle, "stroke-opacity", circle_stroke_opacity_value);
    			}

    			if (dirty[0] & /*$tr_opacityObject, $tr_screenGeometryObject*/ 4227072 && circle_opacity_value !== (circle_opacity_value = /*$tr_opacityObject*/ ctx[22][/*$key*/ ctx[114]])) {
    				attr_dev(circle, "opacity", circle_opacity_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(circle);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2.name,
    		type: "each",
    		source: "(471:6) {#each Object.keys($tr_screenGeometryObject) as $key ($key)}",
    		ctx
    	});

    	return block;
    }

    // (490:2) {#if renderLine}
    function create_if_block_2$1(ctx) {
    	let g;
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let each_value_1 = Object.keys(/*$tr_screenGeometryObject*/ ctx[15]);
    	validate_each_argument(each_value_1);
    	const get_key = ctx => /*$key*/ ctx[114];
    	validate_each_keys(ctx, each_value_1, get_each_context_1, get_key);

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		let child_ctx = get_each_context_1(ctx, each_value_1, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block_1(key, child_ctx));
    	}

    	const block = {
    		c: function create() {
    			g = svg_element("g");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(g, "class", "line-layer");
    			add_location(g, file$2, 490, 4, 16964);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(g, null);
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*$tr_screenGeometryObject, $tr_strokeWidthObject, $tr_strokeObject, $tr_opacityObject*/ 5013504) {
    				const each_value_1 = Object.keys(/*$tr_screenGeometryObject*/ ctx[15]);
    				validate_each_argument(each_value_1);
    				validate_each_keys(ctx, each_value_1, get_each_context_1, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value_1, each_1_lookup, g, destroy_block, create_each_block_1, null, get_each_context_1);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d();
    			}
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$1.name,
    		type: "if",
    		source: "(490:2) {#if renderLine}",
    		ctx
    	});

    	return block;
    }

    // (492:6) {#each Object.keys($tr_screenGeometryObject) as $key ($key)}
    function create_each_block_1(key_2, ctx) {
    	let path;
    	let path_d_value;
    	let path_stroke_width_value;
    	let path_stroke_value;
    	let path_style_value;

    	const block = {
    		key: key_2,
    		first: null,
    		c: function create() {
    			path = svg_element("path");
    			attr_dev(path, "class", "line");
    			attr_dev(path, "d", path_d_value = generatePath(/*$tr_screenGeometryObject*/ ctx[15][/*$key*/ ctx[114]]));
    			attr_dev(path, "fill", "none");
    			attr_dev(path, "stroke-width", path_stroke_width_value = /*$tr_strokeWidthObject*/ ctx[19][/*$key*/ ctx[114]]);
    			attr_dev(path, "stroke", path_stroke_value = /*$tr_strokeObject*/ ctx[18][/*$key*/ ctx[114]]);
    			attr_dev(path, "style", path_style_value = `opacity: ${/*$tr_opacityObject*/ ctx[22][/*$key*/ ctx[114]]}`);
    			add_location(path, file$2, 493, 8, 17063);
    			this.first = path;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, path, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*$tr_screenGeometryObject*/ 32768 && path_d_value !== (path_d_value = generatePath(/*$tr_screenGeometryObject*/ ctx[15][/*$key*/ ctx[114]]))) {
    				attr_dev(path, "d", path_d_value);
    			}

    			if (dirty[0] & /*$tr_strokeWidthObject, $tr_screenGeometryObject*/ 557056 && path_stroke_width_value !== (path_stroke_width_value = /*$tr_strokeWidthObject*/ ctx[19][/*$key*/ ctx[114]])) {
    				attr_dev(path, "stroke-width", path_stroke_width_value);
    			}

    			if (dirty[0] & /*$tr_strokeObject, $tr_screenGeometryObject*/ 294912 && path_stroke_value !== (path_stroke_value = /*$tr_strokeObject*/ ctx[18][/*$key*/ ctx[114]])) {
    				attr_dev(path, "stroke", path_stroke_value);
    			}

    			if (dirty[0] & /*$tr_opacityObject, $tr_screenGeometryObject*/ 4227072 && path_style_value !== (path_style_value = `opacity: ${/*$tr_opacityObject*/ ctx[22][/*$key*/ ctx[114]]}`)) {
    				attr_dev(path, "style", path_style_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(path);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1.name,
    		type: "each",
    		source: "(492:6) {#each Object.keys($tr_screenGeometryObject) as $key ($key)}",
    		ctx
    	});

    	return block;
    }

    // (509:0) {#if renderLabel}
    function create_if_block$2(ctx) {
    	let g;
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let each_value = Object.keys(/*$tr_screenGeometryObject*/ ctx[15]);
    	validate_each_argument(each_value);
    	const get_key = ctx => /*$key*/ ctx[114];
    	validate_each_keys(ctx, each_value, get_each_context, get_key);

    	for (let i = 0; i < each_value.length; i += 1) {
    		let child_ctx = get_each_context(ctx, each_value, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
    	}

    	const block = {
    		c: function create() {
    			g = svg_element("g");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(g, "class", "label-layer");
    			add_location(g, file$2, 509, 2, 17395);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(g, null);
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*$tr_screenGeometryObject, $tr_fillObject, $tr_strokeObject, $tr_strokeWidthObject, $tr_fillOpacityObject, $tr_strokeOpacityObject, $tr_opacityObject, $tr_rotationObject, fontFamilyObject, $tr_fontSizeObject, $tr_fontWeightObject, anchorPointObject, textObject*/ 67010574) {
    				const each_value = Object.keys(/*$tr_screenGeometryObject*/ ctx[15]);
    				validate_each_argument(each_value);
    				validate_each_keys(ctx, each_value, get_each_context, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, g, destroy_block, create_each_block, null, get_each_context);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d();
    			}
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$2.name,
    		type: "if",
    		source: "(509:0) {#if renderLabel}",
    		ctx
    	});

    	return block;
    }

    // (511:4) {#each Object.keys($tr_screenGeometryObject) as $key ($key)}
    function create_each_block(key_2, ctx) {
    	let text_1;
    	let t_value = /*textObject*/ ctx[1][/*$key*/ ctx[114]] + "";
    	let t;
    	let text_1_x_value;
    	let text_1_y_value;
    	let text_1_fill_value;
    	let text_1_stroke_value;
    	let text_1_stroke_width_value;
    	let text_1_fill_opacity_value;
    	let text_1_stroke_opacity_value;
    	let text_1_opacity_value;
    	let text_1_transform_value;
    	let text_1_font_family_value;
    	let text_1_font_size_value;
    	let text_1_font_weight_value;
    	let text_1_text_anchor_value;
    	let text_1_dominant_baseline_value;

    	const block = {
    		key: key_2,
    		first: null,
    		c: function create() {
    			text_1 = svg_element("text");
    			t = text(t_value);
    			attr_dev(text_1, "class", "label");
    			attr_dev(text_1, "x", text_1_x_value = /*$tr_screenGeometryObject*/ ctx[15][/*$key*/ ctx[114]].coordinates[0]);
    			attr_dev(text_1, "y", text_1_y_value = /*$tr_screenGeometryObject*/ ctx[15][/*$key*/ ctx[114]].coordinates[1]);
    			attr_dev(text_1, "fill", text_1_fill_value = /*$tr_fillObject*/ ctx[17][/*$key*/ ctx[114]]);
    			attr_dev(text_1, "stroke", text_1_stroke_value = /*$tr_strokeObject*/ ctx[18][/*$key*/ ctx[114]]);
    			attr_dev(text_1, "stroke-width", text_1_stroke_width_value = /*$tr_strokeWidthObject*/ ctx[19][/*$key*/ ctx[114]]);
    			attr_dev(text_1, "fill-opacity", text_1_fill_opacity_value = /*$tr_fillOpacityObject*/ ctx[21][/*$key*/ ctx[114]]);
    			attr_dev(text_1, "stroke-opacity", text_1_stroke_opacity_value = /*$tr_strokeOpacityObject*/ ctx[20][/*$key*/ ctx[114]]);
    			attr_dev(text_1, "opacity", text_1_opacity_value = /*$tr_opacityObject*/ ctx[22][/*$key*/ ctx[114]]);

    			attr_dev(text_1, "transform", text_1_transform_value = `
          rotate(${/*$tr_rotationObject*/ ctx[25][/*$key*/ ctx[114]]}, 
          ${/*$tr_screenGeometryObject*/ ctx[15][/*$key*/ ctx[114]].coordinates[0]}, 
          ${/*$tr_screenGeometryObject*/ ctx[15][/*$key*/ ctx[114]].coordinates[1]})
        `);

    			attr_dev(text_1, "font-family", text_1_font_family_value = /*fontFamilyObject*/ ctx[2][/*$key*/ ctx[114]]);
    			attr_dev(text_1, "font-size", text_1_font_size_value = /*$tr_fontSizeObject*/ ctx[23][/*$key*/ ctx[114]] + "px");
    			attr_dev(text_1, "font-weight", text_1_font_weight_value = /*$tr_fontWeightObject*/ ctx[24][/*$key*/ ctx[114]]);
    			attr_dev(text_1, "text-anchor", text_1_text_anchor_value = textAnchorPoint(/*anchorPointObject*/ ctx[3][/*$key*/ ctx[114]]).textAnchor);
    			attr_dev(text_1, "dominant-baseline", text_1_dominant_baseline_value = textAnchorPoint(/*anchorPointObject*/ ctx[3][/*$key*/ ctx[114]]).dominantBaseline);
    			add_location(text_1, file$2, 512, 6, 17491);
    			this.first = text_1;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, text_1, anchor);
    			append_dev(text_1, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*textObject, $tr_screenGeometryObject*/ 32770 && t_value !== (t_value = /*textObject*/ ctx[1][/*$key*/ ctx[114]] + "")) set_data_dev(t, t_value);

    			if (dirty[0] & /*$tr_screenGeometryObject*/ 32768 && text_1_x_value !== (text_1_x_value = /*$tr_screenGeometryObject*/ ctx[15][/*$key*/ ctx[114]].coordinates[0])) {
    				attr_dev(text_1, "x", text_1_x_value);
    			}

    			if (dirty[0] & /*$tr_screenGeometryObject*/ 32768 && text_1_y_value !== (text_1_y_value = /*$tr_screenGeometryObject*/ ctx[15][/*$key*/ ctx[114]].coordinates[1])) {
    				attr_dev(text_1, "y", text_1_y_value);
    			}

    			if (dirty[0] & /*$tr_fillObject, $tr_screenGeometryObject*/ 163840 && text_1_fill_value !== (text_1_fill_value = /*$tr_fillObject*/ ctx[17][/*$key*/ ctx[114]])) {
    				attr_dev(text_1, "fill", text_1_fill_value);
    			}

    			if (dirty[0] & /*$tr_strokeObject, $tr_screenGeometryObject*/ 294912 && text_1_stroke_value !== (text_1_stroke_value = /*$tr_strokeObject*/ ctx[18][/*$key*/ ctx[114]])) {
    				attr_dev(text_1, "stroke", text_1_stroke_value);
    			}

    			if (dirty[0] & /*$tr_strokeWidthObject, $tr_screenGeometryObject*/ 557056 && text_1_stroke_width_value !== (text_1_stroke_width_value = /*$tr_strokeWidthObject*/ ctx[19][/*$key*/ ctx[114]])) {
    				attr_dev(text_1, "stroke-width", text_1_stroke_width_value);
    			}

    			if (dirty[0] & /*$tr_fillOpacityObject, $tr_screenGeometryObject*/ 2129920 && text_1_fill_opacity_value !== (text_1_fill_opacity_value = /*$tr_fillOpacityObject*/ ctx[21][/*$key*/ ctx[114]])) {
    				attr_dev(text_1, "fill-opacity", text_1_fill_opacity_value);
    			}

    			if (dirty[0] & /*$tr_strokeOpacityObject, $tr_screenGeometryObject*/ 1081344 && text_1_stroke_opacity_value !== (text_1_stroke_opacity_value = /*$tr_strokeOpacityObject*/ ctx[20][/*$key*/ ctx[114]])) {
    				attr_dev(text_1, "stroke-opacity", text_1_stroke_opacity_value);
    			}

    			if (dirty[0] & /*$tr_opacityObject, $tr_screenGeometryObject*/ 4227072 && text_1_opacity_value !== (text_1_opacity_value = /*$tr_opacityObject*/ ctx[22][/*$key*/ ctx[114]])) {
    				attr_dev(text_1, "opacity", text_1_opacity_value);
    			}

    			if (dirty[0] & /*$tr_rotationObject, $tr_screenGeometryObject*/ 33587200 && text_1_transform_value !== (text_1_transform_value = `
          rotate(${/*$tr_rotationObject*/ ctx[25][/*$key*/ ctx[114]]}, 
          ${/*$tr_screenGeometryObject*/ ctx[15][/*$key*/ ctx[114]].coordinates[0]}, 
          ${/*$tr_screenGeometryObject*/ ctx[15][/*$key*/ ctx[114]].coordinates[1]})
        `)) {
    				attr_dev(text_1, "transform", text_1_transform_value);
    			}

    			if (dirty[0] & /*fontFamilyObject, $tr_screenGeometryObject*/ 32772 && text_1_font_family_value !== (text_1_font_family_value = /*fontFamilyObject*/ ctx[2][/*$key*/ ctx[114]])) {
    				attr_dev(text_1, "font-family", text_1_font_family_value);
    			}

    			if (dirty[0] & /*$tr_fontSizeObject, $tr_screenGeometryObject*/ 8421376 && text_1_font_size_value !== (text_1_font_size_value = /*$tr_fontSizeObject*/ ctx[23][/*$key*/ ctx[114]] + "px")) {
    				attr_dev(text_1, "font-size", text_1_font_size_value);
    			}

    			if (dirty[0] & /*$tr_fontWeightObject, $tr_screenGeometryObject*/ 16809984 && text_1_font_weight_value !== (text_1_font_weight_value = /*$tr_fontWeightObject*/ ctx[24][/*$key*/ ctx[114]])) {
    				attr_dev(text_1, "font-weight", text_1_font_weight_value);
    			}

    			if (dirty[0] & /*anchorPointObject, $tr_screenGeometryObject*/ 32776 && text_1_text_anchor_value !== (text_1_text_anchor_value = textAnchorPoint(/*anchorPointObject*/ ctx[3][/*$key*/ ctx[114]]).textAnchor)) {
    				attr_dev(text_1, "text-anchor", text_1_text_anchor_value);
    			}

    			if (dirty[0] & /*anchorPointObject, $tr_screenGeometryObject*/ 32776 && text_1_dominant_baseline_value !== (text_1_dominant_baseline_value = textAnchorPoint(/*anchorPointObject*/ ctx[3][/*$key*/ ctx[114]]).dominantBaseline)) {
    				attr_dev(text_1, "dominant-baseline", text_1_dominant_baseline_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(text_1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block.name,
    		type: "each",
    		source: "(511:4) {#each Object.keys($tr_screenGeometryObject) as $key ($key)}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$6(ctx) {
    	let show_if = /*$graphicContext*/ ctx[30].output() === "svg";
    	let t;
    	let if_block1_anchor;
    	let if_block0 = show_if && create_if_block_1$2(ctx);
    	let if_block1 = /*renderLabel*/ ctx[29] && create_if_block$2(ctx);

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t = space();
    			if (if_block1) if_block1.c();
    			if_block1_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, if_block1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*$graphicContext*/ 1073741824) show_if = /*$graphicContext*/ ctx[30].output() === "svg";

    			if (show_if) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_1$2(ctx);
    					if_block0.c();
    					if_block0.m(t.parentNode, t);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*renderLabel*/ ctx[29]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block$2(ctx);
    					if_block1.c();
    					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(if_block1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$6.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    let idCounter$2 = 0;

    function getId$2() {
    	return "layer" + idCounter$2++;
    }

    function instance$6($$self, $$props, $$invalidate) {
    	let $sectionContext;

    	let $tr_screenGeometryObject,
    		$$unsubscribe_tr_screenGeometryObject = noop,
    		$$subscribe_tr_screenGeometryObject = () => ($$unsubscribe_tr_screenGeometryObject(), $$unsubscribe_tr_screenGeometryObject = subscribe(tr_screenGeometryObject, $$value => $$invalidate(15, $tr_screenGeometryObject = $$value)), tr_screenGeometryObject);

    	let $tr_radiusObject,
    		$$unsubscribe_tr_radiusObject = noop,
    		$$subscribe_tr_radiusObject = () => ($$unsubscribe_tr_radiusObject(), $$unsubscribe_tr_radiusObject = subscribe(tr_radiusObject, $$value => $$invalidate(16, $tr_radiusObject = $$value)), tr_radiusObject);

    	let $tr_fillObject,
    		$$unsubscribe_tr_fillObject = noop,
    		$$subscribe_tr_fillObject = () => ($$unsubscribe_tr_fillObject(), $$unsubscribe_tr_fillObject = subscribe(tr_fillObject, $$value => $$invalidate(17, $tr_fillObject = $$value)), tr_fillObject);

    	let $tr_strokeObject,
    		$$unsubscribe_tr_strokeObject = noop,
    		$$subscribe_tr_strokeObject = () => ($$unsubscribe_tr_strokeObject(), $$unsubscribe_tr_strokeObject = subscribe(tr_strokeObject, $$value => $$invalidate(18, $tr_strokeObject = $$value)), tr_strokeObject);

    	let $tr_strokeWidthObject,
    		$$unsubscribe_tr_strokeWidthObject = noop,
    		$$subscribe_tr_strokeWidthObject = () => ($$unsubscribe_tr_strokeWidthObject(), $$unsubscribe_tr_strokeWidthObject = subscribe(tr_strokeWidthObject, $$value => $$invalidate(19, $tr_strokeWidthObject = $$value)), tr_strokeWidthObject);

    	let $tr_strokeOpacityObject,
    		$$unsubscribe_tr_strokeOpacityObject = noop,
    		$$subscribe_tr_strokeOpacityObject = () => ($$unsubscribe_tr_strokeOpacityObject(), $$unsubscribe_tr_strokeOpacityObject = subscribe(tr_strokeOpacityObject, $$value => $$invalidate(20, $tr_strokeOpacityObject = $$value)), tr_strokeOpacityObject);

    	let $tr_fillOpacityObject,
    		$$unsubscribe_tr_fillOpacityObject = noop,
    		$$subscribe_tr_fillOpacityObject = () => ($$unsubscribe_tr_fillOpacityObject(), $$unsubscribe_tr_fillOpacityObject = subscribe(tr_fillOpacityObject, $$value => $$invalidate(21, $tr_fillOpacityObject = $$value)), tr_fillOpacityObject);

    	let $tr_opacityObject,
    		$$unsubscribe_tr_opacityObject = noop,
    		$$subscribe_tr_opacityObject = () => ($$unsubscribe_tr_opacityObject(), $$unsubscribe_tr_opacityObject = subscribe(tr_opacityObject, $$value => $$invalidate(22, $tr_opacityObject = $$value)), tr_opacityObject);

    	let $tr_fontSizeObject,
    		$$unsubscribe_tr_fontSizeObject = noop,
    		$$subscribe_tr_fontSizeObject = () => ($$unsubscribe_tr_fontSizeObject(), $$unsubscribe_tr_fontSizeObject = subscribe(tr_fontSizeObject, $$value => $$invalidate(23, $tr_fontSizeObject = $$value)), tr_fontSizeObject);

    	let $tr_fontWeightObject,
    		$$unsubscribe_tr_fontWeightObject = noop,
    		$$subscribe_tr_fontWeightObject = () => ($$unsubscribe_tr_fontWeightObject(), $$unsubscribe_tr_fontWeightObject = subscribe(tr_fontWeightObject, $$value => $$invalidate(24, $tr_fontWeightObject = $$value)), tr_fontWeightObject);

    	let $tr_rotationObject,
    		$$unsubscribe_tr_rotationObject = noop,
    		$$subscribe_tr_rotationObject = () => ($$unsubscribe_tr_rotationObject(), $$unsubscribe_tr_rotationObject = subscribe(tr_rotationObject, $$value => $$invalidate(25, $tr_rotationObject = $$value)), tr_rotationObject);

    	let $interactionManagerContext;
    	let $graphicContext;
    	$$self.$$.on_destroy.push(() => $$unsubscribe_tr_screenGeometryObject());
    	$$self.$$.on_destroy.push(() => $$unsubscribe_tr_radiusObject());
    	$$self.$$.on_destroy.push(() => $$unsubscribe_tr_fillObject());
    	$$self.$$.on_destroy.push(() => $$unsubscribe_tr_strokeObject());
    	$$self.$$.on_destroy.push(() => $$unsubscribe_tr_strokeWidthObject());
    	$$self.$$.on_destroy.push(() => $$unsubscribe_tr_strokeOpacityObject());
    	$$self.$$.on_destroy.push(() => $$unsubscribe_tr_fillOpacityObject());
    	$$self.$$.on_destroy.push(() => $$unsubscribe_tr_opacityObject());
    	$$self.$$.on_destroy.push(() => $$unsubscribe_tr_fontSizeObject());
    	$$self.$$.on_destroy.push(() => $$unsubscribe_tr_fontWeightObject());
    	$$self.$$.on_destroy.push(() => $$unsubscribe_tr_rotationObject());
    	const layerId = getId$2();
    	let initPhase = true;
    	const initDone = () => !initPhase;
    	let { type } = $$props;
    	let { x = undefined } = $$props;
    	let { y = undefined } = $$props;
    	let { x1 = undefined } = $$props;
    	let { x2 = undefined } = $$props;
    	let { y1 = undefined } = $$props;
    	let { y2 = undefined } = $$props;
    	let { geometry = undefined } = $$props;
    	let { shape = undefined } = $$props;
    	let { size = undefined } = $$props;
    	let { independentAxis = undefined } = $$props;
    	let { radius = undefined } = $$props;
    	let { fill = undefined } = $$props;
    	let { stroke = undefined } = $$props;
    	let { strokeWidth = undefined } = $$props;
    	let { strokeOpacity = undefined } = $$props;
    	let { fillOpacity = undefined } = $$props;
    	let { opacity = undefined } = $$props;
    	let { text = undefined } = $$props;
    	let { fontFamily = undefined } = $$props;
    	let { fontSize = undefined } = $$props;
    	let { fontWeight = undefined } = $$props;
    	let { rotation = undefined } = $$props;
    	let { anchorPoint = undefined } = $$props;
    	let { transition = undefined } = $$props;
    	let { onClick = undefined } = $$props;
    	let { onMousedown = undefined } = $$props;
    	let { onMouseup = undefined } = $$props;
    	let { onMouseover = undefined } = $$props;
    	let { onMouseout = undefined } = $$props;
    	let { onMousedrag = undefined } = $$props;
    	let { onTouchdown = undefined } = $$props;
    	let { onTouchup = undefined } = $$props;
    	let { onTouchover = undefined } = $$props;
    	let { onTouchout = undefined } = $$props;
    	let { onTouchdrag = undefined } = $$props;
    	let { onSelect = undefined } = $$props;
    	let { onDeselect = undefined } = $$props;
    	let { key = undefined } = $$props;
    	let { renderSettings = undefined } = $$props;
    	let { blockReindexing = false } = $$props;
    	let { _asPolygon = true } = $$props;

    	// Validate aesthetics every time input changes
    	let aesthetics = validateAesthetics(type, {
    		x,
    		y,
    		x1,
    		x2,
    		y1,
    		y2,
    		geometry,
    		shape,
    		size,
    		independentAxis,
    		radius,
    		fill,
    		stroke,
    		strokeWidth,
    		strokeOpacity,
    		fillOpacity,
    		opacity,
    		text,
    		fontFamily,
    		fontSize,
    		fontWeight,
    		rotation,
    		anchorPoint
    	});

    	// Create 'positioning' aesthetics object
    	let positioningAesthetics = {
    		x,
    		y,
    		x1,
    		x2,
    		y1,
    		y2,
    		geometry,
    		shape,
    		size,
    		independentAxis
    	};

    	// Select appriopriate geometry conversion functions
    	let createPixelGeometryObject = layerPixelGeometryFuncs[type];

    	let representAsPolygonObject = layerRepresentAsPolygonFuncs[type];
    	let asPolygon = _asPolygon === true && layerRepresentAsPolygonFuncs[type] !== undefined;

    	// Contexts
    	const graphicContext = subscribe$1();

    	validate_store(graphicContext, "graphicContext");
    	component_subscribe($$self, graphicContext, value => $$invalidate(30, $graphicContext = value));
    	const sectionContext = subscribe$2();
    	validate_store(sectionContext, "sectionContext");
    	component_subscribe($$self, sectionContext, value => $$invalidate(89, $sectionContext = value));
    	const interactionManagerContext = subscribe$4();
    	validate_store(interactionManagerContext, "interactionManagerContext");
    	component_subscribe($$self, interactionManagerContext, value => $$invalidate(93, $interactionManagerContext = value));

    	// Initiate geometry objects and key array
    	let pixelGeometryObject;

    	let screenGeometryObject;
    	updatePixelGeometryObject();
    	let keyArray = Object.keys(pixelGeometryObject);

    	// Generate other prop objects
    	let radiusObject = generatePropObject(aesthetics.radius, keyArray);

    	const fillObject = generatePropObject(aesthetics.fill, keyArray);
    	const strokeObject = generatePropObject(aesthetics.stroke, keyArray);
    	let strokeWidthObject = generatePropObject(aesthetics.strokeWidth, keyArray);
    	const strokeOpacityObject = generatePropObject(aesthetics.strokeOpacity, keyArray);
    	const fillOpacityObject = generatePropObject(aesthetics.fillOpacity, keyArray);
    	const opacityObject = generatePropObject(aesthetics.opacity, keyArray);
    	let textObject = generatePropObject(aesthetics.text, keyArray);
    	let fontFamilyObject = generatePropObject(aesthetics.fontFamily, keyArray);
    	const fontSizeObject = generatePropObject(aesthetics.fontSize, keyArray);
    	const fontWeightObject = generatePropObject(aesthetics.fontWeight, keyArray);
    	const rotationObject = generatePropObject(aesthetics.rotation, keyArray);
    	let anchorPointObject = generatePropObject(aesthetics.anchorPoint, keyArray);

    	// This uses the radiusObject/strokeWidthObject in some cases, so must be done after the prop objects
    	updateScreenGeometryObject();

    	// Initiate transitionables
    	let tr_screenGeometryObject = createTransitionableLayer("geometry", screenGeometryObject, transition);

    	validate_store(tr_screenGeometryObject, "tr_screenGeometryObject");
    	$$subscribe_tr_screenGeometryObject();
    	let tr_radiusObject = createTransitionableLayer("radius", radiusObject, transition);
    	validate_store(tr_radiusObject, "tr_radiusObject");
    	$$subscribe_tr_radiusObject();
    	let tr_fillObject = createTransitionableLayer("fill", fillObject, transition);
    	validate_store(tr_fillObject, "tr_fillObject");
    	$$subscribe_tr_fillObject();
    	let tr_strokeObject = createTransitionableLayer("stroke", strokeObject, transition);
    	validate_store(tr_strokeObject, "tr_strokeObject");
    	$$subscribe_tr_strokeObject();
    	let tr_strokeWidthObject = createTransitionableLayer("strokeWidth", strokeWidthObject, transition);
    	validate_store(tr_strokeWidthObject, "tr_strokeWidthObject");
    	$$subscribe_tr_strokeWidthObject();
    	let tr_strokeOpacityObject = createTransitionableLayer("strokeOpacity", strokeOpacityObject, transition);
    	validate_store(tr_strokeOpacityObject, "tr_strokeOpacityObject");
    	$$subscribe_tr_strokeOpacityObject();
    	let tr_fillOpacityObject = createTransitionableLayer("fillOpacity", fillOpacityObject, transition);
    	validate_store(tr_fillOpacityObject, "tr_fillOpacityObject");
    	$$subscribe_tr_fillOpacityObject();
    	let tr_opacityObject = createTransitionableLayer("opacity", opacityObject, transition);
    	validate_store(tr_opacityObject, "tr_opacityObject");
    	$$subscribe_tr_opacityObject();

    	// text transtitionables
    	let tr_fontSizeObject = createTransitionableLayer("fontSize", fontSizeObject, transition);

    	validate_store(tr_fontSizeObject, "tr_fontSizeObject");
    	$$subscribe_tr_fontSizeObject();
    	let tr_fontWeightObject = createTransitionableLayer("fontWeight", fontWeightObject, transition);
    	validate_store(tr_fontWeightObject, "tr_fontWeightObject");
    	$$subscribe_tr_fontWeightObject();
    	let tr_rotationObject = createTransitionableLayer("rotation", rotationObject, transition);
    	validate_store(tr_rotationObject, "tr_rotationObject");
    	$$subscribe_tr_rotationObject();
    	let previousTransition;
    	let pixelGeometryObjectRecalculationNecessary = false;
    	let screenGeometryObjectRecalculationNecessary = false;

    	beforeUpdate(() => {
    		// Update transitionables
    		if (!transitionsEqual(previousTransition, transition) && initDone()) {
    			$$subscribe_tr_screenGeometryObject($$invalidate(4, tr_screenGeometryObject = createTransitionableLayer("geometry", $tr_screenGeometryObject, transition)));
    			$$subscribe_tr_radiusObject($$invalidate(5, tr_radiusObject = createTransitionableLayer("radius", $tr_radiusObject, transition)));
    			$$subscribe_tr_fillObject($$invalidate(6, tr_fillObject = createTransitionableLayer("fill", $tr_fillObject, transition)));
    			$$subscribe_tr_strokeObject($$invalidate(7, tr_strokeObject = createTransitionableLayer("stroke", $tr_strokeObject, transition)));
    			$$subscribe_tr_strokeWidthObject($$invalidate(8, tr_strokeWidthObject = createTransitionableLayer("strokeWidth", $tr_strokeWidthObject, transition)));
    			$$subscribe_tr_strokeOpacityObject($$invalidate(9, tr_strokeOpacityObject = createTransitionableLayer("strokeOpacity", $tr_strokeOpacityObject, transition)));
    			$$subscribe_tr_fillOpacityObject($$invalidate(10, tr_fillOpacityObject = createTransitionableLayer("fillOpacity", $tr_fillOpacityObject, transition)));
    			$$subscribe_tr_opacityObject($$invalidate(11, tr_opacityObject = createTransitionableLayer("opacity", $tr_opacityObject, transition)));
    			$$subscribe_tr_fontSizeObject($$invalidate(12, tr_fontSizeObject = createTransitionableLayer("fontSize", $tr_fontSizeObject, transition)));
    			$$subscribe_tr_fontWeightObject($$invalidate(13, tr_fontWeightObject = createTransitionableLayer("fontWeight", $tr_fontWeightObject, transition)));
    			$$subscribe_tr_rotationObject($$invalidate(14, tr_rotationObject = createTransitionableLayer("rotation", $tr_rotationObject, transition)));
    		}

    		previousTransition = transition;
    	});

    	afterUpdate(() => {
    		initPhase = false;
    	});

    	onMount(() => {
    		updateInteractionManagerIfNecessary();
    	});

    	onDestroy(() => {
    		removeLayerFromSpatialIndexIfNecessary();
    	});

    	// Helpers
    	function scheduleUpdatePixelGeometryObject() {
    		$$invalidate(87, pixelGeometryObjectRecalculationNecessary = true);
    		$$invalidate(88, screenGeometryObjectRecalculationNecessary = true);
    	}

    	function updatePixelGeometryObject() {
    		$$invalidate(81, pixelGeometryObject = createPixelGeometryObject(positioningAesthetics, key, $sectionContext, parseRenderSettings(renderSettings)));
    	}

    	function scheduleUpdateScreenGeometryObject() {
    		$$invalidate(88, screenGeometryObjectRecalculationNecessary = true);
    	}

    	function updateScreenGeometryObject() {
    		if (asPolygon) {
    			screenGeometryObject = representAsPolygonObject(pixelGeometryObject, { radiusObject, strokeWidthObject });
    		} else {
    			screenGeometryObject = pixelGeometryObject;
    		}
    	}

    	function updateScreenGeometryObjectTransitionable() {
    		tr_screenGeometryObject.set(screenGeometryObject);
    	}

    	function updateRadiusAndStrokeWidth() {
    		radiusObject = generatePropObject(aesthetics.radius, keyArray);
    		strokeWidthObject = generatePropObject(aesthetics.strokeWidth, keyArray);
    	}

    	function updateInteractionManagerIfNecessary() {
    		if (initPhase || !(blockReindexing || $sectionContext.blockReindexing)) {
    			removeLayerFromSpatialIndexIfNecessary();

    			if (isInteractiveMouse) {
    				const markInterface = $interactionManagerContext.mouse().marks();
    				markInterface.loadLayer(type, createDataNecessaryForIndexing());
    				if (onClick) markInterface.addLayerInteraction("click", layerId, onClick);
    				if (onMousedown) markInterface.addLayerInteraction("mousedown", layerId, onMousedown);
    				if (onMouseup) markInterface.addLayerInteraction("mouseup", layerId, onMouseup);
    				if (onMouseout) markInterface.addLayerInteraction("mouseout", layerId, onMouseout);
    				if (onMouseover) markInterface.addLayerInteraction("mouseover", layerId, onMouseover);
    				if (onMousedrag) markInterface.addLayerInteraction("mousedrag", layerId, onMousedrag);
    			}

    			if (isInteractiveTouch) {
    				const markInterface = $interactionManagerContext.touch().marks();
    				markInterface.loadLayer(type, createDataNecessaryForIndexing());
    				if (onTouchdown) markInterface.addLayerInteraction("touchdown", layerId, onTouchdown);
    				if (onTouchup) markInterface.addLayerInteraction("touchup", layerId, onTouchup);
    				if (onTouchover) markInterface.addLayerInteraction("touchover", layerId, onTouchover);
    				if (onTouchout) markInterface.addLayerInteraction("touchout", layerId, onTouchout);
    				if (onTouchdrag) markInterface.addLayerInteraction("touchdrag", layerId, onTouchdrag);
    			}
    		}

    		removeLayerFromSelectIfNecessary();

    		if (isSelectable) {
    			const selectManager = $interactionManagerContext.select();
    			selectManager.loadLayer(type, createDataNecessaryForIndexing(), { onSelect, onDeselect });
    		}
    	}

    	function removeLayerFromSpatialIndexIfNecessary() {
    		if (detectIt.hasMouse) {
    			const markMouseInterface = $interactionManagerContext.mouse().marks();

    			if (markMouseInterface.layerIsLoaded(layerId)) {
    				markMouseInterface.removeAllLayerInteractions(layerId);
    				markMouseInterface.removeLayer(layerId);
    			}
    		}

    		if (detectIt.hasTouch) {
    			const markTouchInterface = $interactionManagerContext.touch().marks();

    			if (markTouchInterface.layerIsLoaded(layerId)) {
    				markTouchInterface.removeAllLayerInteractions(layerId);
    				markTouchInterface.removeLayer(layerId);
    			}
    		}
    	}

    	function removeLayerFromSelectIfNecessary() {
    		const selectManager = $interactionManagerContext.select();

    		if (selectManager.layerIsLoaded(layerId)) {
    			selectManager.removeLayer(layerId);
    		}
    	}

    	function createDataNecessaryForIndexing() {
    		return createDataNecessaryForIndexingLayer(
    			type,
    			layerId,
    			keyArray,
    			{
    				pixelGeometryObject,
    				screenGeometryObject
    			},
    			{ radiusObject, strokeWidthObject }
    		);
    	}

    	const writable_props = [
    		"type",
    		"x",
    		"y",
    		"x1",
    		"x2",
    		"y1",
    		"y2",
    		"geometry",
    		"shape",
    		"size",
    		"independentAxis",
    		"radius",
    		"fill",
    		"stroke",
    		"strokeWidth",
    		"strokeOpacity",
    		"fillOpacity",
    		"opacity",
    		"text",
    		"fontFamily",
    		"fontSize",
    		"fontWeight",
    		"rotation",
    		"anchorPoint",
    		"transition",
    		"onClick",
    		"onMousedown",
    		"onMouseup",
    		"onMouseover",
    		"onMouseout",
    		"onMousedrag",
    		"onTouchdown",
    		"onTouchup",
    		"onTouchover",
    		"onTouchout",
    		"onTouchdrag",
    		"onSelect",
    		"onDeselect",
    		"key",
    		"renderSettings",
    		"blockReindexing",
    		"_asPolygon"
    	];

    	Object_1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Layer> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Layer", $$slots, []);

    	$$self.$set = $$props => {
    		if ("type" in $$props) $$invalidate(0, type = $$props.type);
    		if ("x" in $$props) $$invalidate(34, x = $$props.x);
    		if ("y" in $$props) $$invalidate(35, y = $$props.y);
    		if ("x1" in $$props) $$invalidate(36, x1 = $$props.x1);
    		if ("x2" in $$props) $$invalidate(37, x2 = $$props.x2);
    		if ("y1" in $$props) $$invalidate(38, y1 = $$props.y1);
    		if ("y2" in $$props) $$invalidate(39, y2 = $$props.y2);
    		if ("geometry" in $$props) $$invalidate(40, geometry = $$props.geometry);
    		if ("shape" in $$props) $$invalidate(41, shape = $$props.shape);
    		if ("size" in $$props) $$invalidate(42, size = $$props.size);
    		if ("independentAxis" in $$props) $$invalidate(43, independentAxis = $$props.independentAxis);
    		if ("radius" in $$props) $$invalidate(44, radius = $$props.radius);
    		if ("fill" in $$props) $$invalidate(45, fill = $$props.fill);
    		if ("stroke" in $$props) $$invalidate(46, stroke = $$props.stroke);
    		if ("strokeWidth" in $$props) $$invalidate(47, strokeWidth = $$props.strokeWidth);
    		if ("strokeOpacity" in $$props) $$invalidate(48, strokeOpacity = $$props.strokeOpacity);
    		if ("fillOpacity" in $$props) $$invalidate(49, fillOpacity = $$props.fillOpacity);
    		if ("opacity" in $$props) $$invalidate(50, opacity = $$props.opacity);
    		if ("text" in $$props) $$invalidate(51, text = $$props.text);
    		if ("fontFamily" in $$props) $$invalidate(52, fontFamily = $$props.fontFamily);
    		if ("fontSize" in $$props) $$invalidate(53, fontSize = $$props.fontSize);
    		if ("fontWeight" in $$props) $$invalidate(54, fontWeight = $$props.fontWeight);
    		if ("rotation" in $$props) $$invalidate(55, rotation = $$props.rotation);
    		if ("anchorPoint" in $$props) $$invalidate(56, anchorPoint = $$props.anchorPoint);
    		if ("transition" in $$props) $$invalidate(57, transition = $$props.transition);
    		if ("onClick" in $$props) $$invalidate(58, onClick = $$props.onClick);
    		if ("onMousedown" in $$props) $$invalidate(59, onMousedown = $$props.onMousedown);
    		if ("onMouseup" in $$props) $$invalidate(60, onMouseup = $$props.onMouseup);
    		if ("onMouseover" in $$props) $$invalidate(61, onMouseover = $$props.onMouseover);
    		if ("onMouseout" in $$props) $$invalidate(62, onMouseout = $$props.onMouseout);
    		if ("onMousedrag" in $$props) $$invalidate(63, onMousedrag = $$props.onMousedrag);
    		if ("onTouchdown" in $$props) $$invalidate(64, onTouchdown = $$props.onTouchdown);
    		if ("onTouchup" in $$props) $$invalidate(65, onTouchup = $$props.onTouchup);
    		if ("onTouchover" in $$props) $$invalidate(66, onTouchover = $$props.onTouchover);
    		if ("onTouchout" in $$props) $$invalidate(67, onTouchout = $$props.onTouchout);
    		if ("onTouchdrag" in $$props) $$invalidate(68, onTouchdrag = $$props.onTouchdrag);
    		if ("onSelect" in $$props) $$invalidate(69, onSelect = $$props.onSelect);
    		if ("onDeselect" in $$props) $$invalidate(70, onDeselect = $$props.onDeselect);
    		if ("key" in $$props) $$invalidate(71, key = $$props.key);
    		if ("renderSettings" in $$props) $$invalidate(72, renderSettings = $$props.renderSettings);
    		if ("blockReindexing" in $$props) $$invalidate(73, blockReindexing = $$props.blockReindexing);
    		if ("_asPolygon" in $$props) $$invalidate(74, _asPolygon = $$props._asPolygon);
    	};

    	$$self.$capture_state = () => ({
    		idCounter: idCounter$2,
    		getId: getId$2,
    		beforeUpdate,
    		afterUpdate,
    		onMount,
    		onDestroy,
    		tick,
    		detectIt,
    		GraphicContext: GraphicContext$1,
    		SectionContext,
    		InteractionManagerContext,
    		validateAesthetics,
    		layerPixelGeometryFuncs,
    		layerRepresentAsPolygonFuncs,
    		createTransitionableLayer,
    		transitionsEqual,
    		generatePropObject,
    		createDataNecessaryForIndexingLayer,
    		generatePath,
    		textAnchorPoint,
    		any,
    		parseRenderSettings,
    		layerId,
    		initPhase,
    		initDone,
    		type,
    		x,
    		y,
    		x1,
    		x2,
    		y1,
    		y2,
    		geometry,
    		shape,
    		size,
    		independentAxis,
    		radius,
    		fill,
    		stroke,
    		strokeWidth,
    		strokeOpacity,
    		fillOpacity,
    		opacity,
    		text,
    		fontFamily,
    		fontSize,
    		fontWeight,
    		rotation,
    		anchorPoint,
    		transition,
    		onClick,
    		onMousedown,
    		onMouseup,
    		onMouseover,
    		onMouseout,
    		onMousedrag,
    		onTouchdown,
    		onTouchup,
    		onTouchover,
    		onTouchout,
    		onTouchdrag,
    		onSelect,
    		onDeselect,
    		key,
    		renderSettings,
    		blockReindexing,
    		_asPolygon,
    		aesthetics,
    		positioningAesthetics,
    		createPixelGeometryObject,
    		representAsPolygonObject,
    		asPolygon,
    		graphicContext,
    		sectionContext,
    		interactionManagerContext,
    		pixelGeometryObject,
    		screenGeometryObject,
    		keyArray,
    		radiusObject,
    		fillObject,
    		strokeObject,
    		strokeWidthObject,
    		strokeOpacityObject,
    		fillOpacityObject,
    		opacityObject,
    		textObject,
    		fontFamilyObject,
    		fontSizeObject,
    		fontWeightObject,
    		rotationObject,
    		anchorPointObject,
    		tr_screenGeometryObject,
    		tr_radiusObject,
    		tr_fillObject,
    		tr_strokeObject,
    		tr_strokeWidthObject,
    		tr_strokeOpacityObject,
    		tr_fillOpacityObject,
    		tr_opacityObject,
    		tr_fontSizeObject,
    		tr_fontWeightObject,
    		tr_rotationObject,
    		previousTransition,
    		pixelGeometryObjectRecalculationNecessary,
    		screenGeometryObjectRecalculationNecessary,
    		scheduleUpdatePixelGeometryObject,
    		updatePixelGeometryObject,
    		scheduleUpdateScreenGeometryObject,
    		updateScreenGeometryObject,
    		updateScreenGeometryObjectTransitionable,
    		updateRadiusAndStrokeWidth,
    		updateInteractionManagerIfNecessary,
    		removeLayerFromSpatialIndexIfNecessary,
    		removeLayerFromSelectIfNecessary,
    		createDataNecessaryForIndexing,
    		$sectionContext,
    		$tr_screenGeometryObject,
    		$tr_radiusObject,
    		$tr_fillObject,
    		$tr_strokeObject,
    		$tr_strokeWidthObject,
    		$tr_strokeOpacityObject,
    		$tr_fillOpacityObject,
    		$tr_opacityObject,
    		$tr_fontSizeObject,
    		$tr_fontWeightObject,
    		$tr_rotationObject,
    		isInteractiveMouse,
    		isInteractiveTouch,
    		isSelectable,
    		$interactionManagerContext,
    		renderPolygon,
    		renderCircle,
    		renderLine,
    		renderLabel,
    		$graphicContext
    	});

    	$$self.$inject_state = $$props => {
    		if ("initPhase" in $$props) initPhase = $$props.initPhase;
    		if ("type" in $$props) $$invalidate(0, type = $$props.type);
    		if ("x" in $$props) $$invalidate(34, x = $$props.x);
    		if ("y" in $$props) $$invalidate(35, y = $$props.y);
    		if ("x1" in $$props) $$invalidate(36, x1 = $$props.x1);
    		if ("x2" in $$props) $$invalidate(37, x2 = $$props.x2);
    		if ("y1" in $$props) $$invalidate(38, y1 = $$props.y1);
    		if ("y2" in $$props) $$invalidate(39, y2 = $$props.y2);
    		if ("geometry" in $$props) $$invalidate(40, geometry = $$props.geometry);
    		if ("shape" in $$props) $$invalidate(41, shape = $$props.shape);
    		if ("size" in $$props) $$invalidate(42, size = $$props.size);
    		if ("independentAxis" in $$props) $$invalidate(43, independentAxis = $$props.independentAxis);
    		if ("radius" in $$props) $$invalidate(44, radius = $$props.radius);
    		if ("fill" in $$props) $$invalidate(45, fill = $$props.fill);
    		if ("stroke" in $$props) $$invalidate(46, stroke = $$props.stroke);
    		if ("strokeWidth" in $$props) $$invalidate(47, strokeWidth = $$props.strokeWidth);
    		if ("strokeOpacity" in $$props) $$invalidate(48, strokeOpacity = $$props.strokeOpacity);
    		if ("fillOpacity" in $$props) $$invalidate(49, fillOpacity = $$props.fillOpacity);
    		if ("opacity" in $$props) $$invalidate(50, opacity = $$props.opacity);
    		if ("text" in $$props) $$invalidate(51, text = $$props.text);
    		if ("fontFamily" in $$props) $$invalidate(52, fontFamily = $$props.fontFamily);
    		if ("fontSize" in $$props) $$invalidate(53, fontSize = $$props.fontSize);
    		if ("fontWeight" in $$props) $$invalidate(54, fontWeight = $$props.fontWeight);
    		if ("rotation" in $$props) $$invalidate(55, rotation = $$props.rotation);
    		if ("anchorPoint" in $$props) $$invalidate(56, anchorPoint = $$props.anchorPoint);
    		if ("transition" in $$props) $$invalidate(57, transition = $$props.transition);
    		if ("onClick" in $$props) $$invalidate(58, onClick = $$props.onClick);
    		if ("onMousedown" in $$props) $$invalidate(59, onMousedown = $$props.onMousedown);
    		if ("onMouseup" in $$props) $$invalidate(60, onMouseup = $$props.onMouseup);
    		if ("onMouseover" in $$props) $$invalidate(61, onMouseover = $$props.onMouseover);
    		if ("onMouseout" in $$props) $$invalidate(62, onMouseout = $$props.onMouseout);
    		if ("onMousedrag" in $$props) $$invalidate(63, onMousedrag = $$props.onMousedrag);
    		if ("onTouchdown" in $$props) $$invalidate(64, onTouchdown = $$props.onTouchdown);
    		if ("onTouchup" in $$props) $$invalidate(65, onTouchup = $$props.onTouchup);
    		if ("onTouchover" in $$props) $$invalidate(66, onTouchover = $$props.onTouchover);
    		if ("onTouchout" in $$props) $$invalidate(67, onTouchout = $$props.onTouchout);
    		if ("onTouchdrag" in $$props) $$invalidate(68, onTouchdrag = $$props.onTouchdrag);
    		if ("onSelect" in $$props) $$invalidate(69, onSelect = $$props.onSelect);
    		if ("onDeselect" in $$props) $$invalidate(70, onDeselect = $$props.onDeselect);
    		if ("key" in $$props) $$invalidate(71, key = $$props.key);
    		if ("renderSettings" in $$props) $$invalidate(72, renderSettings = $$props.renderSettings);
    		if ("blockReindexing" in $$props) $$invalidate(73, blockReindexing = $$props.blockReindexing);
    		if ("_asPolygon" in $$props) $$invalidate(74, _asPolygon = $$props._asPolygon);
    		if ("aesthetics" in $$props) $$invalidate(76, aesthetics = $$props.aesthetics);
    		if ("positioningAesthetics" in $$props) $$invalidate(77, positioningAesthetics = $$props.positioningAesthetics);
    		if ("createPixelGeometryObject" in $$props) createPixelGeometryObject = $$props.createPixelGeometryObject;
    		if ("representAsPolygonObject" in $$props) representAsPolygonObject = $$props.representAsPolygonObject;
    		if ("asPolygon" in $$props) $$invalidate(80, asPolygon = $$props.asPolygon);
    		if ("pixelGeometryObject" in $$props) $$invalidate(81, pixelGeometryObject = $$props.pixelGeometryObject);
    		if ("screenGeometryObject" in $$props) screenGeometryObject = $$props.screenGeometryObject;
    		if ("keyArray" in $$props) $$invalidate(83, keyArray = $$props.keyArray);
    		if ("radiusObject" in $$props) radiusObject = $$props.radiusObject;
    		if ("strokeWidthObject" in $$props) strokeWidthObject = $$props.strokeWidthObject;
    		if ("textObject" in $$props) $$invalidate(1, textObject = $$props.textObject);
    		if ("fontFamilyObject" in $$props) $$invalidate(2, fontFamilyObject = $$props.fontFamilyObject);
    		if ("anchorPointObject" in $$props) $$invalidate(3, anchorPointObject = $$props.anchorPointObject);
    		if ("tr_screenGeometryObject" in $$props) $$subscribe_tr_screenGeometryObject($$invalidate(4, tr_screenGeometryObject = $$props.tr_screenGeometryObject));
    		if ("tr_radiusObject" in $$props) $$subscribe_tr_radiusObject($$invalidate(5, tr_radiusObject = $$props.tr_radiusObject));
    		if ("tr_fillObject" in $$props) $$subscribe_tr_fillObject($$invalidate(6, tr_fillObject = $$props.tr_fillObject));
    		if ("tr_strokeObject" in $$props) $$subscribe_tr_strokeObject($$invalidate(7, tr_strokeObject = $$props.tr_strokeObject));
    		if ("tr_strokeWidthObject" in $$props) $$subscribe_tr_strokeWidthObject($$invalidate(8, tr_strokeWidthObject = $$props.tr_strokeWidthObject));
    		if ("tr_strokeOpacityObject" in $$props) $$subscribe_tr_strokeOpacityObject($$invalidate(9, tr_strokeOpacityObject = $$props.tr_strokeOpacityObject));
    		if ("tr_fillOpacityObject" in $$props) $$subscribe_tr_fillOpacityObject($$invalidate(10, tr_fillOpacityObject = $$props.tr_fillOpacityObject));
    		if ("tr_opacityObject" in $$props) $$subscribe_tr_opacityObject($$invalidate(11, tr_opacityObject = $$props.tr_opacityObject));
    		if ("tr_fontSizeObject" in $$props) $$subscribe_tr_fontSizeObject($$invalidate(12, tr_fontSizeObject = $$props.tr_fontSizeObject));
    		if ("tr_fontWeightObject" in $$props) $$subscribe_tr_fontWeightObject($$invalidate(13, tr_fontWeightObject = $$props.tr_fontWeightObject));
    		if ("tr_rotationObject" in $$props) $$subscribe_tr_rotationObject($$invalidate(14, tr_rotationObject = $$props.tr_rotationObject));
    		if ("previousTransition" in $$props) previousTransition = $$props.previousTransition;
    		if ("pixelGeometryObjectRecalculationNecessary" in $$props) $$invalidate(87, pixelGeometryObjectRecalculationNecessary = $$props.pixelGeometryObjectRecalculationNecessary);
    		if ("screenGeometryObjectRecalculationNecessary" in $$props) $$invalidate(88, screenGeometryObjectRecalculationNecessary = $$props.screenGeometryObjectRecalculationNecessary);
    		if ("isInteractiveMouse" in $$props) isInteractiveMouse = $$props.isInteractiveMouse;
    		if ("isInteractiveTouch" in $$props) isInteractiveTouch = $$props.isInteractiveTouch;
    		if ("isSelectable" in $$props) isSelectable = $$props.isSelectable;
    		if ("renderPolygon" in $$props) $$invalidate(26, renderPolygon = $$props.renderPolygon);
    		if ("renderCircle" in $$props) $$invalidate(27, renderCircle = $$props.renderCircle);
    		if ("renderLine" in $$props) $$invalidate(28, renderLine = $$props.renderLine);
    		if ("renderLabel" in $$props) $$invalidate(29, renderLabel = $$props.renderLabel);
    	};

    	let isInteractiveMouse;
    	let isInteractiveTouch;
    	let isSelectable;
    	let renderPolygon;
    	let renderCircle;
    	let renderLine;
    	let renderLabel;

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*type*/ 1 | $$self.$$.dirty[1] & /*x, y, x1, x2, y1, y2, geometry, shape, size, independentAxis, radius, fill, stroke, strokeWidth, strokeOpacity, fillOpacity, opacity, text, fontFamily, fontSize, fontWeight, rotation, anchorPoint*/ 67108856) {
    			 {
    				if (initDone()) {
    					$$invalidate(76, aesthetics = validateAesthetics(type, {
    						x,
    						y,
    						x1,
    						x2,
    						y1,
    						y2,
    						geometry,
    						shape,
    						size,
    						independentAxis,
    						radius,
    						fill,
    						stroke,
    						strokeWidth,
    						strokeOpacity,
    						fillOpacity,
    						opacity,
    						text,
    						fontFamily,
    						fontSize,
    						fontWeight,
    						rotation,
    						anchorPoint
    					}));
    				}
    			}
    		}

    		if ($$self.$$.dirty[1] & /*x, y, x1, x2, y1, y2, geometry, shape, size, independentAxis*/ 8184) {
    			 {
    				if (initDone()) {
    					$$invalidate(77, positioningAesthetics = {
    						x,
    						y,
    						x1,
    						x2,
    						y1,
    						y2,
    						geometry,
    						shape,
    						size,
    						independentAxis
    					});
    				}
    			}
    		}

    		if ($$self.$$.dirty[0] & /*type*/ 1) {
    			 {
    				if (initDone()) {
    					createPixelGeometryObject = layerPixelGeometryFuncs[type];
    					representAsPolygonObject = layerRepresentAsPolygonFuncs[type];
    				}
    			}
    		}

    		if ($$self.$$.dirty[0] & /*type*/ 1 | $$self.$$.dirty[2] & /*_asPolygon*/ 4096) {
    			 {
    				if (initDone()) {
    					$$invalidate(80, asPolygon = _asPolygon === true && layerRepresentAsPolygonFuncs[type] !== undefined);
    				}
    			}
    		}

    		if ($$self.$$.dirty[2] & /*positioningAesthetics, key, $sectionContext, renderSettings*/ 134252032) {
    			// Handle changes to geometry
    			 {
    				if (initDone()) {
    					scheduleUpdatePixelGeometryObject(positioningAesthetics, key, $sectionContext, parseRenderSettings(renderSettings));
    				}
    			}
    		}

    		if ($$self.$$.dirty[2] & /*pixelGeometryObjectRecalculationNecessary, pixelGeometryObject, asPolygon, screenGeometryObjectRecalculationNecessary*/ 101449728) {
    			 {
    				tick().then(() => {
    					if (pixelGeometryObjectRecalculationNecessary) {
    						updatePixelGeometryObject();
    						$$invalidate(83, keyArray = Object.keys(pixelGeometryObject));

    						if (asPolygon) {
    							updateRadiusAndStrokeWidth();
    						}
    					}

    					if (screenGeometryObjectRecalculationNecessary) {
    						updateScreenGeometryObject();
    						updateScreenGeometryObjectTransitionable();
    						updateInteractionManagerIfNecessary();
    					}

    					$$invalidate(87, pixelGeometryObjectRecalculationNecessary = false);
    					$$invalidate(88, screenGeometryObjectRecalculationNecessary = false);
    				});
    			}
    		}

    		if ($$self.$$.dirty[0] & /*tr_radiusObject, tr_strokeWidthObject*/ 288 | $$self.$$.dirty[2] & /*asPolygon, aesthetics, keyArray*/ 2375680) {
    			// Handle radius and strokeWidth changes if Points or Lines are not represented as Polygons
    			 {
    				if (initDone()) {
    					if (!asPolygon) {
    						tr_radiusObject.set(generatePropObject(aesthetics.radius, keyArray));
    						tr_strokeWidthObject.set(generatePropObject(aesthetics.strokeWidth, keyArray));
    					}
    				}
    			}
    		}

    		if ($$self.$$.dirty[0] & /*tr_fillObject*/ 64 | $$self.$$.dirty[2] & /*aesthetics, keyArray*/ 2113536) {
    			// Handle other changes
    			 {
    				if (initDone()) tr_fillObject.set(generatePropObject(aesthetics.fill, keyArray));
    			}
    		}

    		if ($$self.$$.dirty[0] & /*tr_strokeObject*/ 128 | $$self.$$.dirty[2] & /*aesthetics, keyArray*/ 2113536) {
    			 {
    				if (initDone()) tr_strokeObject.set(generatePropObject(aesthetics.stroke, keyArray));
    			}
    		}

    		if ($$self.$$.dirty[0] & /*tr_strokeOpacityObject*/ 512 | $$self.$$.dirty[2] & /*aesthetics, keyArray*/ 2113536) {
    			 {
    				if (initDone()) tr_strokeOpacityObject.set(generatePropObject(aesthetics.strokeOpacity, keyArray));
    			}
    		}

    		if ($$self.$$.dirty[0] & /*tr_fillOpacityObject*/ 1024 | $$self.$$.dirty[2] & /*aesthetics, keyArray*/ 2113536) {
    			 {
    				if (initDone()) tr_fillOpacityObject.set(generatePropObject(aesthetics.fillOpacity, keyArray));
    			}
    		}

    		if ($$self.$$.dirty[0] & /*tr_opacityObject*/ 2048 | $$self.$$.dirty[2] & /*aesthetics, keyArray*/ 2113536) {
    			 {
    				if (initDone()) tr_opacityObject.set(generatePropObject(aesthetics.opacity, keyArray));
    			}
    		}

    		if ($$self.$$.dirty[0] & /*tr_fontSizeObject*/ 4096 | $$self.$$.dirty[2] & /*aesthetics, keyArray*/ 2113536) {
    			// text aes changes
    			 {
    				if (initDone()) tr_fontSizeObject.set(generatePropObject(aesthetics.fontSize, keyArray));
    			}
    		}

    		if ($$self.$$.dirty[0] & /*tr_fontWeightObject*/ 8192 | $$self.$$.dirty[2] & /*aesthetics, keyArray*/ 2113536) {
    			 {
    				if (initDone()) tr_fontWeightObject.set(generatePropObject(aesthetics.fontWeight, keyArray));
    			}
    		}

    		if ($$self.$$.dirty[0] & /*tr_rotationObject*/ 16384 | $$self.$$.dirty[2] & /*aesthetics, keyArray*/ 2113536) {
    			 {
    				if (initDone()) tr_rotationObject.set(generatePropObject(aesthetics.rotation, keyArray));
    			}
    		}

    		if ($$self.$$.dirty[2] & /*aesthetics, keyArray*/ 2113536) {
    			// non-transitionable aesthetics
    			 {
    				if (initDone()) $$invalidate(1, textObject = generatePropObject(aesthetics.text, keyArray));
    			}
    		}

    		if ($$self.$$.dirty[2] & /*aesthetics, keyArray*/ 2113536) {
    			 {
    				if (initDone()) $$invalidate(2, fontFamilyObject = generatePropObject(aesthetics.fontFamily, keyArray));
    			}
    		}

    		if ($$self.$$.dirty[2] & /*aesthetics, keyArray*/ 2113536) {
    			 {
    				if (initDone()) $$invalidate(3, anchorPointObject = generatePropObject(aesthetics.anchorPoint, keyArray));
    			}
    		}

    		if ($$self.$$.dirty[1] & /*onClick, onMousedown, onMouseup, onMouseover*/ 2013265920 | $$self.$$.dirty[2] & /*onMouseout, onMousedrag*/ 3) {
    			// Interactivity
    			 isInteractiveMouse = detectIt.hasMouse && any(onClick, onMousedown, onMouseup, onMouseover, onMouseout, onMousedrag);
    		}

    		if ($$self.$$.dirty[2] & /*onTouchdown, onTouchup, onTouchover, onTouchout, onTouchdrag*/ 124) {
    			 isInteractiveTouch = detectIt.hasTouch && any(onTouchdown, onTouchup, onTouchover, onTouchout, onTouchdrag);
    		}

    		if ($$self.$$.dirty[2] & /*onSelect, onDeselect*/ 384) {
    			 isSelectable = onSelect !== undefined || onDeselect !== undefined;
    		}

    		if ($$self.$$.dirty[0] & /*type*/ 1 | $$self.$$.dirty[2] & /*asPolygon*/ 262144) {
    			 $$invalidate(26, renderPolygon = !["Point", "Line", "Label"].includes(type) || asPolygon);
    		}

    		if ($$self.$$.dirty[0] & /*type*/ 1 | $$self.$$.dirty[2] & /*asPolygon*/ 262144) {
    			 $$invalidate(27, renderCircle = type === "Point" && !asPolygon);
    		}

    		if ($$self.$$.dirty[0] & /*type*/ 1 | $$self.$$.dirty[2] & /*asPolygon*/ 262144) {
    			 $$invalidate(28, renderLine = type === "Line" && !asPolygon);
    		}

    		if ($$self.$$.dirty[0] & /*type*/ 1) {
    			 $$invalidate(29, renderLabel = type === "Label");
    		}
    	};

    	return [
    		type,
    		textObject,
    		fontFamilyObject,
    		anchorPointObject,
    		tr_screenGeometryObject,
    		tr_radiusObject,
    		tr_fillObject,
    		tr_strokeObject,
    		tr_strokeWidthObject,
    		tr_strokeOpacityObject,
    		tr_fillOpacityObject,
    		tr_opacityObject,
    		tr_fontSizeObject,
    		tr_fontWeightObject,
    		tr_rotationObject,
    		$tr_screenGeometryObject,
    		$tr_radiusObject,
    		$tr_fillObject,
    		$tr_strokeObject,
    		$tr_strokeWidthObject,
    		$tr_strokeOpacityObject,
    		$tr_fillOpacityObject,
    		$tr_opacityObject,
    		$tr_fontSizeObject,
    		$tr_fontWeightObject,
    		$tr_rotationObject,
    		renderPolygon,
    		renderCircle,
    		renderLine,
    		renderLabel,
    		$graphicContext,
    		graphicContext,
    		sectionContext,
    		interactionManagerContext,
    		x,
    		y,
    		x1,
    		x2,
    		y1,
    		y2,
    		geometry,
    		shape,
    		size,
    		independentAxis,
    		radius,
    		fill,
    		stroke,
    		strokeWidth,
    		strokeOpacity,
    		fillOpacity,
    		opacity,
    		text,
    		fontFamily,
    		fontSize,
    		fontWeight,
    		rotation,
    		anchorPoint,
    		transition,
    		onClick,
    		onMousedown,
    		onMouseup,
    		onMouseover,
    		onMouseout,
    		onMousedrag,
    		onTouchdown,
    		onTouchup,
    		onTouchover,
    		onTouchout,
    		onTouchdrag,
    		onSelect,
    		onDeselect,
    		key,
    		renderSettings,
    		blockReindexing,
    		_asPolygon
    	];
    }

    class Layer extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance$6,
    			create_fragment$6,
    			safe_not_equal,
    			{
    				type: 0,
    				x: 34,
    				y: 35,
    				x1: 36,
    				x2: 37,
    				y1: 38,
    				y2: 39,
    				geometry: 40,
    				shape: 41,
    				size: 42,
    				independentAxis: 43,
    				radius: 44,
    				fill: 45,
    				stroke: 46,
    				strokeWidth: 47,
    				strokeOpacity: 48,
    				fillOpacity: 49,
    				opacity: 50,
    				text: 51,
    				fontFamily: 52,
    				fontSize: 53,
    				fontWeight: 54,
    				rotation: 55,
    				anchorPoint: 56,
    				transition: 57,
    				onClick: 58,
    				onMousedown: 59,
    				onMouseup: 60,
    				onMouseover: 61,
    				onMouseout: 62,
    				onMousedrag: 63,
    				onTouchdown: 64,
    				onTouchup: 65,
    				onTouchover: 66,
    				onTouchout: 67,
    				onTouchdrag: 68,
    				onSelect: 69,
    				onDeselect: 70,
    				key: 71,
    				renderSettings: 72,
    				blockReindexing: 73,
    				_asPolygon: 74
    			},
    			[-1, -1, -1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Layer",
    			options,
    			id: create_fragment$6.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*type*/ ctx[0] === undefined && !("type" in props)) {
    			console.warn("<Layer> was created without expected prop 'type'");
    		}
    	}

    	get type() {
    		throw new Error("<Layer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set type(value) {
    		throw new Error("<Layer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get x() {
    		throw new Error("<Layer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set x(value) {
    		throw new Error("<Layer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get y() {
    		throw new Error("<Layer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set y(value) {
    		throw new Error("<Layer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get x1() {
    		throw new Error("<Layer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set x1(value) {
    		throw new Error("<Layer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get x2() {
    		throw new Error("<Layer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set x2(value) {
    		throw new Error("<Layer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get y1() {
    		throw new Error("<Layer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set y1(value) {
    		throw new Error("<Layer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get y2() {
    		throw new Error("<Layer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set y2(value) {
    		throw new Error("<Layer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get geometry() {
    		throw new Error("<Layer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set geometry(value) {
    		throw new Error("<Layer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get shape() {
    		throw new Error("<Layer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set shape(value) {
    		throw new Error("<Layer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get size() {
    		throw new Error("<Layer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set size(value) {
    		throw new Error("<Layer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get independentAxis() {
    		throw new Error("<Layer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set independentAxis(value) {
    		throw new Error("<Layer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get radius() {
    		throw new Error("<Layer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set radius(value) {
    		throw new Error("<Layer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fill() {
    		throw new Error("<Layer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fill(value) {
    		throw new Error("<Layer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get stroke() {
    		throw new Error("<Layer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set stroke(value) {
    		throw new Error("<Layer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get strokeWidth() {
    		throw new Error("<Layer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set strokeWidth(value) {
    		throw new Error("<Layer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get strokeOpacity() {
    		throw new Error("<Layer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set strokeOpacity(value) {
    		throw new Error("<Layer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fillOpacity() {
    		throw new Error("<Layer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fillOpacity(value) {
    		throw new Error("<Layer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get opacity() {
    		throw new Error("<Layer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set opacity(value) {
    		throw new Error("<Layer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get text() {
    		throw new Error("<Layer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set text(value) {
    		throw new Error("<Layer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fontFamily() {
    		throw new Error("<Layer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fontFamily(value) {
    		throw new Error("<Layer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fontSize() {
    		throw new Error("<Layer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fontSize(value) {
    		throw new Error("<Layer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fontWeight() {
    		throw new Error("<Layer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fontWeight(value) {
    		throw new Error("<Layer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rotation() {
    		throw new Error("<Layer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rotation(value) {
    		throw new Error("<Layer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get anchorPoint() {
    		throw new Error("<Layer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set anchorPoint(value) {
    		throw new Error("<Layer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get transition() {
    		throw new Error("<Layer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set transition(value) {
    		throw new Error("<Layer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onClick() {
    		throw new Error("<Layer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onClick(value) {
    		throw new Error("<Layer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onMousedown() {
    		throw new Error("<Layer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onMousedown(value) {
    		throw new Error("<Layer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onMouseup() {
    		throw new Error("<Layer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onMouseup(value) {
    		throw new Error("<Layer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onMouseover() {
    		throw new Error("<Layer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onMouseover(value) {
    		throw new Error("<Layer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onMouseout() {
    		throw new Error("<Layer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onMouseout(value) {
    		throw new Error("<Layer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onMousedrag() {
    		throw new Error("<Layer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onMousedrag(value) {
    		throw new Error("<Layer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onTouchdown() {
    		throw new Error("<Layer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onTouchdown(value) {
    		throw new Error("<Layer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onTouchup() {
    		throw new Error("<Layer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onTouchup(value) {
    		throw new Error("<Layer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onTouchover() {
    		throw new Error("<Layer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onTouchover(value) {
    		throw new Error("<Layer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onTouchout() {
    		throw new Error("<Layer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onTouchout(value) {
    		throw new Error("<Layer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onTouchdrag() {
    		throw new Error("<Layer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onTouchdrag(value) {
    		throw new Error("<Layer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onSelect() {
    		throw new Error("<Layer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onSelect(value) {
    		throw new Error("<Layer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onDeselect() {
    		throw new Error("<Layer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onDeselect(value) {
    		throw new Error("<Layer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get key() {
    		throw new Error("<Layer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set key(value) {
    		throw new Error("<Layer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get renderSettings() {
    		throw new Error("<Layer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set renderSettings(value) {
    		throw new Error("<Layer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get blockReindexing() {
    		throw new Error("<Layer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set blockReindexing(value) {
    		throw new Error("<Layer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get _asPolygon() {
    		throw new Error("<Layer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set _asPolygon(value) {
    		throw new Error("<Layer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@snlab/florence/src/components/Marks/Polygon/PolygonLayer.svelte generated by Svelte v3.21.0 */

    function create_fragment$7(ctx) {
    	let current;

    	const layer = new Layer({
    			props: {
    				type: "Polygon",
    				x: /*x*/ ctx[0],
    				y: /*y*/ ctx[1],
    				geometry: /*geometry*/ ctx[2],
    				fill: /*fill*/ ctx[3],
    				stroke: /*stroke*/ ctx[4],
    				strokeWidth: /*strokeWidth*/ ctx[5],
    				strokeOpacity: /*strokeOpacity*/ ctx[6],
    				fillOpacity: /*fillOpacity*/ ctx[7],
    				opacity: /*opacity*/ ctx[8],
    				transition: /*transition*/ ctx[9],
    				onClick: /*onClick*/ ctx[10],
    				onMousedown: /*onMousedown*/ ctx[11],
    				onMouseup: /*onMouseup*/ ctx[12],
    				onMouseover: /*onMouseover*/ ctx[13],
    				onMouseout: /*onMouseout*/ ctx[14],
    				onMousedrag: /*onMousedrag*/ ctx[15],
    				onTouchdown: /*onTouchdown*/ ctx[16],
    				onTouchup: /*onTouchup*/ ctx[17],
    				onTouchover: /*onTouchover*/ ctx[18],
    				onTouchout: /*onTouchout*/ ctx[19],
    				onTouchdrag: /*onTouchdrag*/ ctx[20],
    				onSelect: /*onSelect*/ ctx[21],
    				onDeselect: /*onDeselect*/ ctx[22],
    				key: /*key*/ ctx[24],
    				renderSettings: /*renderSettings*/ ctx[23],
    				blockReindexing: /*blockReindexing*/ ctx[25],
    				_asPolygon: false
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(layer.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(layer, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const layer_changes = {};
    			if (dirty & /*x*/ 1) layer_changes.x = /*x*/ ctx[0];
    			if (dirty & /*y*/ 2) layer_changes.y = /*y*/ ctx[1];
    			if (dirty & /*geometry*/ 4) layer_changes.geometry = /*geometry*/ ctx[2];
    			if (dirty & /*fill*/ 8) layer_changes.fill = /*fill*/ ctx[3];
    			if (dirty & /*stroke*/ 16) layer_changes.stroke = /*stroke*/ ctx[4];
    			if (dirty & /*strokeWidth*/ 32) layer_changes.strokeWidth = /*strokeWidth*/ ctx[5];
    			if (dirty & /*strokeOpacity*/ 64) layer_changes.strokeOpacity = /*strokeOpacity*/ ctx[6];
    			if (dirty & /*fillOpacity*/ 128) layer_changes.fillOpacity = /*fillOpacity*/ ctx[7];
    			if (dirty & /*opacity*/ 256) layer_changes.opacity = /*opacity*/ ctx[8];
    			if (dirty & /*transition*/ 512) layer_changes.transition = /*transition*/ ctx[9];
    			if (dirty & /*onClick*/ 1024) layer_changes.onClick = /*onClick*/ ctx[10];
    			if (dirty & /*onMousedown*/ 2048) layer_changes.onMousedown = /*onMousedown*/ ctx[11];
    			if (dirty & /*onMouseup*/ 4096) layer_changes.onMouseup = /*onMouseup*/ ctx[12];
    			if (dirty & /*onMouseover*/ 8192) layer_changes.onMouseover = /*onMouseover*/ ctx[13];
    			if (dirty & /*onMouseout*/ 16384) layer_changes.onMouseout = /*onMouseout*/ ctx[14];
    			if (dirty & /*onMousedrag*/ 32768) layer_changes.onMousedrag = /*onMousedrag*/ ctx[15];
    			if (dirty & /*onTouchdown*/ 65536) layer_changes.onTouchdown = /*onTouchdown*/ ctx[16];
    			if (dirty & /*onTouchup*/ 131072) layer_changes.onTouchup = /*onTouchup*/ ctx[17];
    			if (dirty & /*onTouchover*/ 262144) layer_changes.onTouchover = /*onTouchover*/ ctx[18];
    			if (dirty & /*onTouchout*/ 524288) layer_changes.onTouchout = /*onTouchout*/ ctx[19];
    			if (dirty & /*onTouchdrag*/ 1048576) layer_changes.onTouchdrag = /*onTouchdrag*/ ctx[20];
    			if (dirty & /*onSelect*/ 2097152) layer_changes.onSelect = /*onSelect*/ ctx[21];
    			if (dirty & /*onDeselect*/ 4194304) layer_changes.onDeselect = /*onDeselect*/ ctx[22];
    			if (dirty & /*key*/ 16777216) layer_changes.key = /*key*/ ctx[24];
    			if (dirty & /*renderSettings*/ 8388608) layer_changes.renderSettings = /*renderSettings*/ ctx[23];
    			if (dirty & /*blockReindexing*/ 33554432) layer_changes.blockReindexing = /*blockReindexing*/ ctx[25];
    			layer.$set(layer_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(layer.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(layer.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(layer, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$7.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$7($$self, $$props, $$invalidate) {
    	let { x = undefined } = $$props;
    	let { y = undefined } = $$props;
    	let { geometry = undefined } = $$props;
    	let { fill = undefined } = $$props;
    	let { stroke = undefined } = $$props;
    	let { strokeWidth = undefined } = $$props;
    	let { strokeOpacity = undefined } = $$props;
    	let { fillOpacity = undefined } = $$props;
    	let { opacity = undefined } = $$props;
    	let { transition = undefined } = $$props;
    	let { onClick = undefined } = $$props;
    	let { onMousedown = undefined } = $$props;
    	let { onMouseup = undefined } = $$props;
    	let { onMouseover = undefined } = $$props;
    	let { onMouseout = undefined } = $$props;
    	let { onMousedrag = undefined } = $$props;
    	let { onTouchdown = undefined } = $$props;
    	let { onTouchup = undefined } = $$props;
    	let { onTouchover = undefined } = $$props;
    	let { onTouchout = undefined } = $$props;
    	let { onTouchdrag = undefined } = $$props;
    	let { onSelect = undefined } = $$props;
    	let { onDeselect = undefined } = $$props;
    	let { renderSettings = undefined } = $$props;
    	let { key = undefined } = $$props;
    	let { blockReindexing = false } = $$props;

    	const writable_props = [
    		"x",
    		"y",
    		"geometry",
    		"fill",
    		"stroke",
    		"strokeWidth",
    		"strokeOpacity",
    		"fillOpacity",
    		"opacity",
    		"transition",
    		"onClick",
    		"onMousedown",
    		"onMouseup",
    		"onMouseover",
    		"onMouseout",
    		"onMousedrag",
    		"onTouchdown",
    		"onTouchup",
    		"onTouchover",
    		"onTouchout",
    		"onTouchdrag",
    		"onSelect",
    		"onDeselect",
    		"renderSettings",
    		"key",
    		"blockReindexing"
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<PolygonLayer> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("PolygonLayer", $$slots, []);

    	$$self.$set = $$props => {
    		if ("x" in $$props) $$invalidate(0, x = $$props.x);
    		if ("y" in $$props) $$invalidate(1, y = $$props.y);
    		if ("geometry" in $$props) $$invalidate(2, geometry = $$props.geometry);
    		if ("fill" in $$props) $$invalidate(3, fill = $$props.fill);
    		if ("stroke" in $$props) $$invalidate(4, stroke = $$props.stroke);
    		if ("strokeWidth" in $$props) $$invalidate(5, strokeWidth = $$props.strokeWidth);
    		if ("strokeOpacity" in $$props) $$invalidate(6, strokeOpacity = $$props.strokeOpacity);
    		if ("fillOpacity" in $$props) $$invalidate(7, fillOpacity = $$props.fillOpacity);
    		if ("opacity" in $$props) $$invalidate(8, opacity = $$props.opacity);
    		if ("transition" in $$props) $$invalidate(9, transition = $$props.transition);
    		if ("onClick" in $$props) $$invalidate(10, onClick = $$props.onClick);
    		if ("onMousedown" in $$props) $$invalidate(11, onMousedown = $$props.onMousedown);
    		if ("onMouseup" in $$props) $$invalidate(12, onMouseup = $$props.onMouseup);
    		if ("onMouseover" in $$props) $$invalidate(13, onMouseover = $$props.onMouseover);
    		if ("onMouseout" in $$props) $$invalidate(14, onMouseout = $$props.onMouseout);
    		if ("onMousedrag" in $$props) $$invalidate(15, onMousedrag = $$props.onMousedrag);
    		if ("onTouchdown" in $$props) $$invalidate(16, onTouchdown = $$props.onTouchdown);
    		if ("onTouchup" in $$props) $$invalidate(17, onTouchup = $$props.onTouchup);
    		if ("onTouchover" in $$props) $$invalidate(18, onTouchover = $$props.onTouchover);
    		if ("onTouchout" in $$props) $$invalidate(19, onTouchout = $$props.onTouchout);
    		if ("onTouchdrag" in $$props) $$invalidate(20, onTouchdrag = $$props.onTouchdrag);
    		if ("onSelect" in $$props) $$invalidate(21, onSelect = $$props.onSelect);
    		if ("onDeselect" in $$props) $$invalidate(22, onDeselect = $$props.onDeselect);
    		if ("renderSettings" in $$props) $$invalidate(23, renderSettings = $$props.renderSettings);
    		if ("key" in $$props) $$invalidate(24, key = $$props.key);
    		if ("blockReindexing" in $$props) $$invalidate(25, blockReindexing = $$props.blockReindexing);
    	};

    	$$self.$capture_state = () => ({
    		Layer,
    		x,
    		y,
    		geometry,
    		fill,
    		stroke,
    		strokeWidth,
    		strokeOpacity,
    		fillOpacity,
    		opacity,
    		transition,
    		onClick,
    		onMousedown,
    		onMouseup,
    		onMouseover,
    		onMouseout,
    		onMousedrag,
    		onTouchdown,
    		onTouchup,
    		onTouchover,
    		onTouchout,
    		onTouchdrag,
    		onSelect,
    		onDeselect,
    		renderSettings,
    		key,
    		blockReindexing
    	});

    	$$self.$inject_state = $$props => {
    		if ("x" in $$props) $$invalidate(0, x = $$props.x);
    		if ("y" in $$props) $$invalidate(1, y = $$props.y);
    		if ("geometry" in $$props) $$invalidate(2, geometry = $$props.geometry);
    		if ("fill" in $$props) $$invalidate(3, fill = $$props.fill);
    		if ("stroke" in $$props) $$invalidate(4, stroke = $$props.stroke);
    		if ("strokeWidth" in $$props) $$invalidate(5, strokeWidth = $$props.strokeWidth);
    		if ("strokeOpacity" in $$props) $$invalidate(6, strokeOpacity = $$props.strokeOpacity);
    		if ("fillOpacity" in $$props) $$invalidate(7, fillOpacity = $$props.fillOpacity);
    		if ("opacity" in $$props) $$invalidate(8, opacity = $$props.opacity);
    		if ("transition" in $$props) $$invalidate(9, transition = $$props.transition);
    		if ("onClick" in $$props) $$invalidate(10, onClick = $$props.onClick);
    		if ("onMousedown" in $$props) $$invalidate(11, onMousedown = $$props.onMousedown);
    		if ("onMouseup" in $$props) $$invalidate(12, onMouseup = $$props.onMouseup);
    		if ("onMouseover" in $$props) $$invalidate(13, onMouseover = $$props.onMouseover);
    		if ("onMouseout" in $$props) $$invalidate(14, onMouseout = $$props.onMouseout);
    		if ("onMousedrag" in $$props) $$invalidate(15, onMousedrag = $$props.onMousedrag);
    		if ("onTouchdown" in $$props) $$invalidate(16, onTouchdown = $$props.onTouchdown);
    		if ("onTouchup" in $$props) $$invalidate(17, onTouchup = $$props.onTouchup);
    		if ("onTouchover" in $$props) $$invalidate(18, onTouchover = $$props.onTouchover);
    		if ("onTouchout" in $$props) $$invalidate(19, onTouchout = $$props.onTouchout);
    		if ("onTouchdrag" in $$props) $$invalidate(20, onTouchdrag = $$props.onTouchdrag);
    		if ("onSelect" in $$props) $$invalidate(21, onSelect = $$props.onSelect);
    		if ("onDeselect" in $$props) $$invalidate(22, onDeselect = $$props.onDeselect);
    		if ("renderSettings" in $$props) $$invalidate(23, renderSettings = $$props.renderSettings);
    		if ("key" in $$props) $$invalidate(24, key = $$props.key);
    		if ("blockReindexing" in $$props) $$invalidate(25, blockReindexing = $$props.blockReindexing);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		x,
    		y,
    		geometry,
    		fill,
    		stroke,
    		strokeWidth,
    		strokeOpacity,
    		fillOpacity,
    		opacity,
    		transition,
    		onClick,
    		onMousedown,
    		onMouseup,
    		onMouseover,
    		onMouseout,
    		onMousedrag,
    		onTouchdown,
    		onTouchup,
    		onTouchover,
    		onTouchout,
    		onTouchdrag,
    		onSelect,
    		onDeselect,
    		renderSettings,
    		key,
    		blockReindexing
    	];
    }

    class PolygonLayer extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$7, create_fragment$7, safe_not_equal, {
    			x: 0,
    			y: 1,
    			geometry: 2,
    			fill: 3,
    			stroke: 4,
    			strokeWidth: 5,
    			strokeOpacity: 6,
    			fillOpacity: 7,
    			opacity: 8,
    			transition: 9,
    			onClick: 10,
    			onMousedown: 11,
    			onMouseup: 12,
    			onMouseover: 13,
    			onMouseout: 14,
    			onMousedrag: 15,
    			onTouchdown: 16,
    			onTouchup: 17,
    			onTouchover: 18,
    			onTouchout: 19,
    			onTouchdrag: 20,
    			onSelect: 21,
    			onDeselect: 22,
    			renderSettings: 23,
    			key: 24,
    			blockReindexing: 25
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "PolygonLayer",
    			options,
    			id: create_fragment$7.name
    		});
    	}

    	get x() {
    		throw new Error("<PolygonLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set x(value) {
    		throw new Error("<PolygonLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get y() {
    		throw new Error("<PolygonLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set y(value) {
    		throw new Error("<PolygonLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get geometry() {
    		throw new Error("<PolygonLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set geometry(value) {
    		throw new Error("<PolygonLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fill() {
    		throw new Error("<PolygonLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fill(value) {
    		throw new Error("<PolygonLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get stroke() {
    		throw new Error("<PolygonLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set stroke(value) {
    		throw new Error("<PolygonLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get strokeWidth() {
    		throw new Error("<PolygonLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set strokeWidth(value) {
    		throw new Error("<PolygonLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get strokeOpacity() {
    		throw new Error("<PolygonLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set strokeOpacity(value) {
    		throw new Error("<PolygonLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fillOpacity() {
    		throw new Error("<PolygonLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fillOpacity(value) {
    		throw new Error("<PolygonLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get opacity() {
    		throw new Error("<PolygonLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set opacity(value) {
    		throw new Error("<PolygonLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get transition() {
    		throw new Error("<PolygonLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set transition(value) {
    		throw new Error("<PolygonLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onClick() {
    		throw new Error("<PolygonLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onClick(value) {
    		throw new Error("<PolygonLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onMousedown() {
    		throw new Error("<PolygonLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onMousedown(value) {
    		throw new Error("<PolygonLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onMouseup() {
    		throw new Error("<PolygonLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onMouseup(value) {
    		throw new Error("<PolygonLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onMouseover() {
    		throw new Error("<PolygonLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onMouseover(value) {
    		throw new Error("<PolygonLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onMouseout() {
    		throw new Error("<PolygonLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onMouseout(value) {
    		throw new Error("<PolygonLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onMousedrag() {
    		throw new Error("<PolygonLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onMousedrag(value) {
    		throw new Error("<PolygonLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onTouchdown() {
    		throw new Error("<PolygonLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onTouchdown(value) {
    		throw new Error("<PolygonLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onTouchup() {
    		throw new Error("<PolygonLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onTouchup(value) {
    		throw new Error("<PolygonLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onTouchover() {
    		throw new Error("<PolygonLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onTouchover(value) {
    		throw new Error("<PolygonLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onTouchout() {
    		throw new Error("<PolygonLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onTouchout(value) {
    		throw new Error("<PolygonLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onTouchdrag() {
    		throw new Error("<PolygonLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onTouchdrag(value) {
    		throw new Error("<PolygonLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onSelect() {
    		throw new Error("<PolygonLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onSelect(value) {
    		throw new Error("<PolygonLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onDeselect() {
    		throw new Error("<PolygonLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onDeselect(value) {
    		throw new Error("<PolygonLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get renderSettings() {
    		throw new Error("<PolygonLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set renderSettings(value) {
    		throw new Error("<PolygonLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get key() {
    		throw new Error("<PolygonLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set key(value) {
    		throw new Error("<PolygonLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get blockReindexing() {
    		throw new Error("<PolygonLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set blockReindexing(value) {
    		throw new Error("<PolygonLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@snlab/florence/src/components/Marks/Line/LineLayer.svelte generated by Svelte v3.21.0 */

    function create_fragment$8(ctx) {
    	let current;

    	const layer = new Layer({
    			props: {
    				type: "Line",
    				x: /*x*/ ctx[0],
    				y: /*y*/ ctx[1],
    				geometry: /*geometry*/ ctx[2],
    				strokeWidth: /*strokeWidth*/ ctx[3],
    				stroke: /*stroke*/ ctx[4],
    				opacity: /*opacity*/ ctx[5],
    				transition: /*transition*/ ctx[6],
    				onClick: /*onClick*/ ctx[7],
    				onMousedown: /*onMousedown*/ ctx[8],
    				onMouseup: /*onMouseup*/ ctx[9],
    				onMouseover: /*onMouseover*/ ctx[10],
    				onMouseout: /*onMouseout*/ ctx[11],
    				onMousedrag: /*onMousedrag*/ ctx[12],
    				onTouchdown: /*onTouchdown*/ ctx[13],
    				onTouchup: /*onTouchup*/ ctx[14],
    				onTouchover: /*onTouchover*/ ctx[15],
    				onTouchout: /*onTouchout*/ ctx[16],
    				onTouchdrag: /*onTouchdrag*/ ctx[17],
    				onSelect: /*onSelect*/ ctx[18],
    				onDeselect: /*onDeselect*/ ctx[19],
    				key: /*key*/ ctx[20],
    				renderSettings: /*renderSettings*/ ctx[21],
    				blockReindexing: /*blockReindexing*/ ctx[22],
    				_asPolygon: false
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(layer.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(layer, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const layer_changes = {};
    			if (dirty & /*x*/ 1) layer_changes.x = /*x*/ ctx[0];
    			if (dirty & /*y*/ 2) layer_changes.y = /*y*/ ctx[1];
    			if (dirty & /*geometry*/ 4) layer_changes.geometry = /*geometry*/ ctx[2];
    			if (dirty & /*strokeWidth*/ 8) layer_changes.strokeWidth = /*strokeWidth*/ ctx[3];
    			if (dirty & /*stroke*/ 16) layer_changes.stroke = /*stroke*/ ctx[4];
    			if (dirty & /*opacity*/ 32) layer_changes.opacity = /*opacity*/ ctx[5];
    			if (dirty & /*transition*/ 64) layer_changes.transition = /*transition*/ ctx[6];
    			if (dirty & /*onClick*/ 128) layer_changes.onClick = /*onClick*/ ctx[7];
    			if (dirty & /*onMousedown*/ 256) layer_changes.onMousedown = /*onMousedown*/ ctx[8];
    			if (dirty & /*onMouseup*/ 512) layer_changes.onMouseup = /*onMouseup*/ ctx[9];
    			if (dirty & /*onMouseover*/ 1024) layer_changes.onMouseover = /*onMouseover*/ ctx[10];
    			if (dirty & /*onMouseout*/ 2048) layer_changes.onMouseout = /*onMouseout*/ ctx[11];
    			if (dirty & /*onMousedrag*/ 4096) layer_changes.onMousedrag = /*onMousedrag*/ ctx[12];
    			if (dirty & /*onTouchdown*/ 8192) layer_changes.onTouchdown = /*onTouchdown*/ ctx[13];
    			if (dirty & /*onTouchup*/ 16384) layer_changes.onTouchup = /*onTouchup*/ ctx[14];
    			if (dirty & /*onTouchover*/ 32768) layer_changes.onTouchover = /*onTouchover*/ ctx[15];
    			if (dirty & /*onTouchout*/ 65536) layer_changes.onTouchout = /*onTouchout*/ ctx[16];
    			if (dirty & /*onTouchdrag*/ 131072) layer_changes.onTouchdrag = /*onTouchdrag*/ ctx[17];
    			if (dirty & /*onSelect*/ 262144) layer_changes.onSelect = /*onSelect*/ ctx[18];
    			if (dirty & /*onDeselect*/ 524288) layer_changes.onDeselect = /*onDeselect*/ ctx[19];
    			if (dirty & /*key*/ 1048576) layer_changes.key = /*key*/ ctx[20];
    			if (dirty & /*renderSettings*/ 2097152) layer_changes.renderSettings = /*renderSettings*/ ctx[21];
    			if (dirty & /*blockReindexing*/ 4194304) layer_changes.blockReindexing = /*blockReindexing*/ ctx[22];
    			layer.$set(layer_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(layer.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(layer.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(layer, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$8.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$8($$self, $$props, $$invalidate) {
    	let { x = undefined } = $$props;
    	let { y = undefined } = $$props;
    	let { geometry = undefined } = $$props;
    	let { strokeWidth = undefined } = $$props;
    	let { stroke = undefined } = $$props;
    	let { opacity = undefined } = $$props;
    	let { transition = undefined } = $$props;
    	let { onClick = undefined } = $$props;
    	let { onMousedown = undefined } = $$props;
    	let { onMouseup = undefined } = $$props;
    	let { onMouseover = undefined } = $$props;
    	let { onMouseout = undefined } = $$props;
    	let { onMousedrag = undefined } = $$props;
    	let { onTouchdown = undefined } = $$props;
    	let { onTouchup = undefined } = $$props;
    	let { onTouchover = undefined } = $$props;
    	let { onTouchout = undefined } = $$props;
    	let { onTouchdrag = undefined } = $$props;
    	let { onSelect = undefined } = $$props;
    	let { onDeselect = undefined } = $$props;
    	let { key = undefined } = $$props;
    	let { renderSettings = undefined } = $$props;
    	let { blockReindexing = false } = $$props;

    	const writable_props = [
    		"x",
    		"y",
    		"geometry",
    		"strokeWidth",
    		"stroke",
    		"opacity",
    		"transition",
    		"onClick",
    		"onMousedown",
    		"onMouseup",
    		"onMouseover",
    		"onMouseout",
    		"onMousedrag",
    		"onTouchdown",
    		"onTouchup",
    		"onTouchover",
    		"onTouchout",
    		"onTouchdrag",
    		"onSelect",
    		"onDeselect",
    		"key",
    		"renderSettings",
    		"blockReindexing"
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<LineLayer> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("LineLayer", $$slots, []);

    	$$self.$set = $$props => {
    		if ("x" in $$props) $$invalidate(0, x = $$props.x);
    		if ("y" in $$props) $$invalidate(1, y = $$props.y);
    		if ("geometry" in $$props) $$invalidate(2, geometry = $$props.geometry);
    		if ("strokeWidth" in $$props) $$invalidate(3, strokeWidth = $$props.strokeWidth);
    		if ("stroke" in $$props) $$invalidate(4, stroke = $$props.stroke);
    		if ("opacity" in $$props) $$invalidate(5, opacity = $$props.opacity);
    		if ("transition" in $$props) $$invalidate(6, transition = $$props.transition);
    		if ("onClick" in $$props) $$invalidate(7, onClick = $$props.onClick);
    		if ("onMousedown" in $$props) $$invalidate(8, onMousedown = $$props.onMousedown);
    		if ("onMouseup" in $$props) $$invalidate(9, onMouseup = $$props.onMouseup);
    		if ("onMouseover" in $$props) $$invalidate(10, onMouseover = $$props.onMouseover);
    		if ("onMouseout" in $$props) $$invalidate(11, onMouseout = $$props.onMouseout);
    		if ("onMousedrag" in $$props) $$invalidate(12, onMousedrag = $$props.onMousedrag);
    		if ("onTouchdown" in $$props) $$invalidate(13, onTouchdown = $$props.onTouchdown);
    		if ("onTouchup" in $$props) $$invalidate(14, onTouchup = $$props.onTouchup);
    		if ("onTouchover" in $$props) $$invalidate(15, onTouchover = $$props.onTouchover);
    		if ("onTouchout" in $$props) $$invalidate(16, onTouchout = $$props.onTouchout);
    		if ("onTouchdrag" in $$props) $$invalidate(17, onTouchdrag = $$props.onTouchdrag);
    		if ("onSelect" in $$props) $$invalidate(18, onSelect = $$props.onSelect);
    		if ("onDeselect" in $$props) $$invalidate(19, onDeselect = $$props.onDeselect);
    		if ("key" in $$props) $$invalidate(20, key = $$props.key);
    		if ("renderSettings" in $$props) $$invalidate(21, renderSettings = $$props.renderSettings);
    		if ("blockReindexing" in $$props) $$invalidate(22, blockReindexing = $$props.blockReindexing);
    	};

    	$$self.$capture_state = () => ({
    		Layer,
    		x,
    		y,
    		geometry,
    		strokeWidth,
    		stroke,
    		opacity,
    		transition,
    		onClick,
    		onMousedown,
    		onMouseup,
    		onMouseover,
    		onMouseout,
    		onMousedrag,
    		onTouchdown,
    		onTouchup,
    		onTouchover,
    		onTouchout,
    		onTouchdrag,
    		onSelect,
    		onDeselect,
    		key,
    		renderSettings,
    		blockReindexing
    	});

    	$$self.$inject_state = $$props => {
    		if ("x" in $$props) $$invalidate(0, x = $$props.x);
    		if ("y" in $$props) $$invalidate(1, y = $$props.y);
    		if ("geometry" in $$props) $$invalidate(2, geometry = $$props.geometry);
    		if ("strokeWidth" in $$props) $$invalidate(3, strokeWidth = $$props.strokeWidth);
    		if ("stroke" in $$props) $$invalidate(4, stroke = $$props.stroke);
    		if ("opacity" in $$props) $$invalidate(5, opacity = $$props.opacity);
    		if ("transition" in $$props) $$invalidate(6, transition = $$props.transition);
    		if ("onClick" in $$props) $$invalidate(7, onClick = $$props.onClick);
    		if ("onMousedown" in $$props) $$invalidate(8, onMousedown = $$props.onMousedown);
    		if ("onMouseup" in $$props) $$invalidate(9, onMouseup = $$props.onMouseup);
    		if ("onMouseover" in $$props) $$invalidate(10, onMouseover = $$props.onMouseover);
    		if ("onMouseout" in $$props) $$invalidate(11, onMouseout = $$props.onMouseout);
    		if ("onMousedrag" in $$props) $$invalidate(12, onMousedrag = $$props.onMousedrag);
    		if ("onTouchdown" in $$props) $$invalidate(13, onTouchdown = $$props.onTouchdown);
    		if ("onTouchup" in $$props) $$invalidate(14, onTouchup = $$props.onTouchup);
    		if ("onTouchover" in $$props) $$invalidate(15, onTouchover = $$props.onTouchover);
    		if ("onTouchout" in $$props) $$invalidate(16, onTouchout = $$props.onTouchout);
    		if ("onTouchdrag" in $$props) $$invalidate(17, onTouchdrag = $$props.onTouchdrag);
    		if ("onSelect" in $$props) $$invalidate(18, onSelect = $$props.onSelect);
    		if ("onDeselect" in $$props) $$invalidate(19, onDeselect = $$props.onDeselect);
    		if ("key" in $$props) $$invalidate(20, key = $$props.key);
    		if ("renderSettings" in $$props) $$invalidate(21, renderSettings = $$props.renderSettings);
    		if ("blockReindexing" in $$props) $$invalidate(22, blockReindexing = $$props.blockReindexing);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		x,
    		y,
    		geometry,
    		strokeWidth,
    		stroke,
    		opacity,
    		transition,
    		onClick,
    		onMousedown,
    		onMouseup,
    		onMouseover,
    		onMouseout,
    		onMousedrag,
    		onTouchdown,
    		onTouchup,
    		onTouchover,
    		onTouchout,
    		onTouchdrag,
    		onSelect,
    		onDeselect,
    		key,
    		renderSettings,
    		blockReindexing
    	];
    }

    class LineLayer extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$8, create_fragment$8, safe_not_equal, {
    			x: 0,
    			y: 1,
    			geometry: 2,
    			strokeWidth: 3,
    			stroke: 4,
    			opacity: 5,
    			transition: 6,
    			onClick: 7,
    			onMousedown: 8,
    			onMouseup: 9,
    			onMouseover: 10,
    			onMouseout: 11,
    			onMousedrag: 12,
    			onTouchdown: 13,
    			onTouchup: 14,
    			onTouchover: 15,
    			onTouchout: 16,
    			onTouchdrag: 17,
    			onSelect: 18,
    			onDeselect: 19,
    			key: 20,
    			renderSettings: 21,
    			blockReindexing: 22
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "LineLayer",
    			options,
    			id: create_fragment$8.name
    		});
    	}

    	get x() {
    		throw new Error("<LineLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set x(value) {
    		throw new Error("<LineLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get y() {
    		throw new Error("<LineLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set y(value) {
    		throw new Error("<LineLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get geometry() {
    		throw new Error("<LineLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set geometry(value) {
    		throw new Error("<LineLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get strokeWidth() {
    		throw new Error("<LineLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set strokeWidth(value) {
    		throw new Error("<LineLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get stroke() {
    		throw new Error("<LineLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set stroke(value) {
    		throw new Error("<LineLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get opacity() {
    		throw new Error("<LineLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set opacity(value) {
    		throw new Error("<LineLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get transition() {
    		throw new Error("<LineLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set transition(value) {
    		throw new Error("<LineLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onClick() {
    		throw new Error("<LineLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onClick(value) {
    		throw new Error("<LineLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onMousedown() {
    		throw new Error("<LineLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onMousedown(value) {
    		throw new Error("<LineLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onMouseup() {
    		throw new Error("<LineLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onMouseup(value) {
    		throw new Error("<LineLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onMouseover() {
    		throw new Error("<LineLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onMouseover(value) {
    		throw new Error("<LineLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onMouseout() {
    		throw new Error("<LineLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onMouseout(value) {
    		throw new Error("<LineLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onMousedrag() {
    		throw new Error("<LineLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onMousedrag(value) {
    		throw new Error("<LineLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onTouchdown() {
    		throw new Error("<LineLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onTouchdown(value) {
    		throw new Error("<LineLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onTouchup() {
    		throw new Error("<LineLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onTouchup(value) {
    		throw new Error("<LineLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onTouchover() {
    		throw new Error("<LineLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onTouchover(value) {
    		throw new Error("<LineLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onTouchout() {
    		throw new Error("<LineLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onTouchout(value) {
    		throw new Error("<LineLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onTouchdrag() {
    		throw new Error("<LineLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onTouchdrag(value) {
    		throw new Error("<LineLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onSelect() {
    		throw new Error("<LineLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onSelect(value) {
    		throw new Error("<LineLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onDeselect() {
    		throw new Error("<LineLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onDeselect(value) {
    		throw new Error("<LineLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get key() {
    		throw new Error("<LineLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set key(value) {
    		throw new Error("<LineLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get renderSettings() {
    		throw new Error("<LineLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set renderSettings(value) {
    		throw new Error("<LineLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get blockReindexing() {
    		throw new Error("<LineLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set blockReindexing(value) {
    		throw new Error("<LineLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@snlab/florence/src/components/Marks/Label/LabelLayer.svelte generated by Svelte v3.21.0 */

    function create_fragment$9(ctx) {
    	let current;

    	const layer = new Layer({
    			props: {
    				type: "Label",
    				x: /*x*/ ctx[0],
    				y: /*y*/ ctx[1],
    				geometry: /*geometry*/ ctx[2],
    				fill: /*fill*/ ctx[3],
    				stroke: /*stroke*/ ctx[4],
    				strokeWidth: /*strokeWidth*/ ctx[5],
    				strokeOpacity: /*strokeOpacity*/ ctx[6],
    				fillOpacity: /*fillOpacity*/ ctx[7],
    				opacity: /*opacity*/ ctx[8],
    				text: /*text*/ ctx[9],
    				fontFamily: /*fontFamily*/ ctx[10],
    				fontSize: /*fontSize*/ ctx[11],
    				fontWeight: /*fontWeight*/ ctx[12],
    				rotation: /*rotation*/ ctx[13],
    				anchorPoint: /*anchorPoint*/ ctx[14],
    				transition: /*transition*/ ctx[15],
    				onClick: /*onClick*/ ctx[16],
    				onMousedown: /*onMousedown*/ ctx[17],
    				onMouseup: /*onMouseup*/ ctx[18],
    				onMouseover: /*onMouseover*/ ctx[19],
    				onMouseout: /*onMouseout*/ ctx[20],
    				onMousedrag: /*onMousedrag*/ ctx[21],
    				onTouchdown: /*onTouchdown*/ ctx[22],
    				onTouchup: /*onTouchup*/ ctx[23],
    				onTouchover: /*onTouchover*/ ctx[24],
    				onTouchout: /*onTouchout*/ ctx[25],
    				onTouchdrag: /*onTouchdrag*/ ctx[26],
    				onSelect: /*onSelect*/ ctx[27],
    				onDeselect: /*onDeselect*/ ctx[28],
    				key: /*key*/ ctx[29],
    				renderSettings: /*renderSettings*/ ctx[30],
    				blockReindexing: /*blockReindexing*/ ctx[31],
    				_asPolygon: false
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(layer.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(layer, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const layer_changes = {};
    			if (dirty[0] & /*x*/ 1) layer_changes.x = /*x*/ ctx[0];
    			if (dirty[0] & /*y*/ 2) layer_changes.y = /*y*/ ctx[1];
    			if (dirty[0] & /*geometry*/ 4) layer_changes.geometry = /*geometry*/ ctx[2];
    			if (dirty[0] & /*fill*/ 8) layer_changes.fill = /*fill*/ ctx[3];
    			if (dirty[0] & /*stroke*/ 16) layer_changes.stroke = /*stroke*/ ctx[4];
    			if (dirty[0] & /*strokeWidth*/ 32) layer_changes.strokeWidth = /*strokeWidth*/ ctx[5];
    			if (dirty[0] & /*strokeOpacity*/ 64) layer_changes.strokeOpacity = /*strokeOpacity*/ ctx[6];
    			if (dirty[0] & /*fillOpacity*/ 128) layer_changes.fillOpacity = /*fillOpacity*/ ctx[7];
    			if (dirty[0] & /*opacity*/ 256) layer_changes.opacity = /*opacity*/ ctx[8];
    			if (dirty[0] & /*text*/ 512) layer_changes.text = /*text*/ ctx[9];
    			if (dirty[0] & /*fontFamily*/ 1024) layer_changes.fontFamily = /*fontFamily*/ ctx[10];
    			if (dirty[0] & /*fontSize*/ 2048) layer_changes.fontSize = /*fontSize*/ ctx[11];
    			if (dirty[0] & /*fontWeight*/ 4096) layer_changes.fontWeight = /*fontWeight*/ ctx[12];
    			if (dirty[0] & /*rotation*/ 8192) layer_changes.rotation = /*rotation*/ ctx[13];
    			if (dirty[0] & /*anchorPoint*/ 16384) layer_changes.anchorPoint = /*anchorPoint*/ ctx[14];
    			if (dirty[0] & /*transition*/ 32768) layer_changes.transition = /*transition*/ ctx[15];
    			if (dirty[0] & /*onClick*/ 65536) layer_changes.onClick = /*onClick*/ ctx[16];
    			if (dirty[0] & /*onMousedown*/ 131072) layer_changes.onMousedown = /*onMousedown*/ ctx[17];
    			if (dirty[0] & /*onMouseup*/ 262144) layer_changes.onMouseup = /*onMouseup*/ ctx[18];
    			if (dirty[0] & /*onMouseover*/ 524288) layer_changes.onMouseover = /*onMouseover*/ ctx[19];
    			if (dirty[0] & /*onMouseout*/ 1048576) layer_changes.onMouseout = /*onMouseout*/ ctx[20];
    			if (dirty[0] & /*onMousedrag*/ 2097152) layer_changes.onMousedrag = /*onMousedrag*/ ctx[21];
    			if (dirty[0] & /*onTouchdown*/ 4194304) layer_changes.onTouchdown = /*onTouchdown*/ ctx[22];
    			if (dirty[0] & /*onTouchup*/ 8388608) layer_changes.onTouchup = /*onTouchup*/ ctx[23];
    			if (dirty[0] & /*onTouchover*/ 16777216) layer_changes.onTouchover = /*onTouchover*/ ctx[24];
    			if (dirty[0] & /*onTouchout*/ 33554432) layer_changes.onTouchout = /*onTouchout*/ ctx[25];
    			if (dirty[0] & /*onTouchdrag*/ 67108864) layer_changes.onTouchdrag = /*onTouchdrag*/ ctx[26];
    			if (dirty[0] & /*onSelect*/ 134217728) layer_changes.onSelect = /*onSelect*/ ctx[27];
    			if (dirty[0] & /*onDeselect*/ 268435456) layer_changes.onDeselect = /*onDeselect*/ ctx[28];
    			if (dirty[0] & /*key*/ 536870912) layer_changes.key = /*key*/ ctx[29];
    			if (dirty[0] & /*renderSettings*/ 1073741824) layer_changes.renderSettings = /*renderSettings*/ ctx[30];
    			if (dirty[1] & /*blockReindexing*/ 1) layer_changes.blockReindexing = /*blockReindexing*/ ctx[31];
    			layer.$set(layer_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(layer.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(layer.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(layer, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$9.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$9($$self, $$props, $$invalidate) {
    	let { x = undefined } = $$props;
    	let { y = undefined } = $$props;
    	let { geometry = undefined } = $$props;
    	let { fill = undefined } = $$props;
    	let { stroke = undefined } = $$props;
    	let { strokeWidth = undefined } = $$props;
    	let { strokeOpacity = undefined } = $$props;
    	let { fillOpacity = undefined } = $$props;
    	let { opacity = undefined } = $$props;
    	let { text = undefined } = $$props;
    	let { fontFamily = undefined } = $$props;
    	let { fontSize = undefined } = $$props;
    	let { fontWeight = undefined } = $$props;
    	let { rotation = undefined } = $$props;
    	let { anchorPoint = undefined } = $$props;
    	let { transition = undefined } = $$props;
    	let { onClick = undefined } = $$props;
    	let { onMousedown = undefined } = $$props;
    	let { onMouseup = undefined } = $$props;
    	let { onMouseover = undefined } = $$props;
    	let { onMouseout = undefined } = $$props;
    	let { onMousedrag = undefined } = $$props;
    	let { onTouchdown = undefined } = $$props;
    	let { onTouchup = undefined } = $$props;
    	let { onTouchover = undefined } = $$props;
    	let { onTouchout = undefined } = $$props;
    	let { onTouchdrag = undefined } = $$props;
    	let { onSelect = undefined } = $$props;
    	let { onDeselect = undefined } = $$props;
    	let { key = undefined } = $$props;
    	let { renderSettings = undefined } = $$props;
    	let { blockReindexing = false } = $$props;

    	const writable_props = [
    		"x",
    		"y",
    		"geometry",
    		"fill",
    		"stroke",
    		"strokeWidth",
    		"strokeOpacity",
    		"fillOpacity",
    		"opacity",
    		"text",
    		"fontFamily",
    		"fontSize",
    		"fontWeight",
    		"rotation",
    		"anchorPoint",
    		"transition",
    		"onClick",
    		"onMousedown",
    		"onMouseup",
    		"onMouseover",
    		"onMouseout",
    		"onMousedrag",
    		"onTouchdown",
    		"onTouchup",
    		"onTouchover",
    		"onTouchout",
    		"onTouchdrag",
    		"onSelect",
    		"onDeselect",
    		"key",
    		"renderSettings",
    		"blockReindexing"
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<LabelLayer> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("LabelLayer", $$slots, []);

    	$$self.$set = $$props => {
    		if ("x" in $$props) $$invalidate(0, x = $$props.x);
    		if ("y" in $$props) $$invalidate(1, y = $$props.y);
    		if ("geometry" in $$props) $$invalidate(2, geometry = $$props.geometry);
    		if ("fill" in $$props) $$invalidate(3, fill = $$props.fill);
    		if ("stroke" in $$props) $$invalidate(4, stroke = $$props.stroke);
    		if ("strokeWidth" in $$props) $$invalidate(5, strokeWidth = $$props.strokeWidth);
    		if ("strokeOpacity" in $$props) $$invalidate(6, strokeOpacity = $$props.strokeOpacity);
    		if ("fillOpacity" in $$props) $$invalidate(7, fillOpacity = $$props.fillOpacity);
    		if ("opacity" in $$props) $$invalidate(8, opacity = $$props.opacity);
    		if ("text" in $$props) $$invalidate(9, text = $$props.text);
    		if ("fontFamily" in $$props) $$invalidate(10, fontFamily = $$props.fontFamily);
    		if ("fontSize" in $$props) $$invalidate(11, fontSize = $$props.fontSize);
    		if ("fontWeight" in $$props) $$invalidate(12, fontWeight = $$props.fontWeight);
    		if ("rotation" in $$props) $$invalidate(13, rotation = $$props.rotation);
    		if ("anchorPoint" in $$props) $$invalidate(14, anchorPoint = $$props.anchorPoint);
    		if ("transition" in $$props) $$invalidate(15, transition = $$props.transition);
    		if ("onClick" in $$props) $$invalidate(16, onClick = $$props.onClick);
    		if ("onMousedown" in $$props) $$invalidate(17, onMousedown = $$props.onMousedown);
    		if ("onMouseup" in $$props) $$invalidate(18, onMouseup = $$props.onMouseup);
    		if ("onMouseover" in $$props) $$invalidate(19, onMouseover = $$props.onMouseover);
    		if ("onMouseout" in $$props) $$invalidate(20, onMouseout = $$props.onMouseout);
    		if ("onMousedrag" in $$props) $$invalidate(21, onMousedrag = $$props.onMousedrag);
    		if ("onTouchdown" in $$props) $$invalidate(22, onTouchdown = $$props.onTouchdown);
    		if ("onTouchup" in $$props) $$invalidate(23, onTouchup = $$props.onTouchup);
    		if ("onTouchover" in $$props) $$invalidate(24, onTouchover = $$props.onTouchover);
    		if ("onTouchout" in $$props) $$invalidate(25, onTouchout = $$props.onTouchout);
    		if ("onTouchdrag" in $$props) $$invalidate(26, onTouchdrag = $$props.onTouchdrag);
    		if ("onSelect" in $$props) $$invalidate(27, onSelect = $$props.onSelect);
    		if ("onDeselect" in $$props) $$invalidate(28, onDeselect = $$props.onDeselect);
    		if ("key" in $$props) $$invalidate(29, key = $$props.key);
    		if ("renderSettings" in $$props) $$invalidate(30, renderSettings = $$props.renderSettings);
    		if ("blockReindexing" in $$props) $$invalidate(31, blockReindexing = $$props.blockReindexing);
    	};

    	$$self.$capture_state = () => ({
    		Layer,
    		x,
    		y,
    		geometry,
    		fill,
    		stroke,
    		strokeWidth,
    		strokeOpacity,
    		fillOpacity,
    		opacity,
    		text,
    		fontFamily,
    		fontSize,
    		fontWeight,
    		rotation,
    		anchorPoint,
    		transition,
    		onClick,
    		onMousedown,
    		onMouseup,
    		onMouseover,
    		onMouseout,
    		onMousedrag,
    		onTouchdown,
    		onTouchup,
    		onTouchover,
    		onTouchout,
    		onTouchdrag,
    		onSelect,
    		onDeselect,
    		key,
    		renderSettings,
    		blockReindexing
    	});

    	$$self.$inject_state = $$props => {
    		if ("x" in $$props) $$invalidate(0, x = $$props.x);
    		if ("y" in $$props) $$invalidate(1, y = $$props.y);
    		if ("geometry" in $$props) $$invalidate(2, geometry = $$props.geometry);
    		if ("fill" in $$props) $$invalidate(3, fill = $$props.fill);
    		if ("stroke" in $$props) $$invalidate(4, stroke = $$props.stroke);
    		if ("strokeWidth" in $$props) $$invalidate(5, strokeWidth = $$props.strokeWidth);
    		if ("strokeOpacity" in $$props) $$invalidate(6, strokeOpacity = $$props.strokeOpacity);
    		if ("fillOpacity" in $$props) $$invalidate(7, fillOpacity = $$props.fillOpacity);
    		if ("opacity" in $$props) $$invalidate(8, opacity = $$props.opacity);
    		if ("text" in $$props) $$invalidate(9, text = $$props.text);
    		if ("fontFamily" in $$props) $$invalidate(10, fontFamily = $$props.fontFamily);
    		if ("fontSize" in $$props) $$invalidate(11, fontSize = $$props.fontSize);
    		if ("fontWeight" in $$props) $$invalidate(12, fontWeight = $$props.fontWeight);
    		if ("rotation" in $$props) $$invalidate(13, rotation = $$props.rotation);
    		if ("anchorPoint" in $$props) $$invalidate(14, anchorPoint = $$props.anchorPoint);
    		if ("transition" in $$props) $$invalidate(15, transition = $$props.transition);
    		if ("onClick" in $$props) $$invalidate(16, onClick = $$props.onClick);
    		if ("onMousedown" in $$props) $$invalidate(17, onMousedown = $$props.onMousedown);
    		if ("onMouseup" in $$props) $$invalidate(18, onMouseup = $$props.onMouseup);
    		if ("onMouseover" in $$props) $$invalidate(19, onMouseover = $$props.onMouseover);
    		if ("onMouseout" in $$props) $$invalidate(20, onMouseout = $$props.onMouseout);
    		if ("onMousedrag" in $$props) $$invalidate(21, onMousedrag = $$props.onMousedrag);
    		if ("onTouchdown" in $$props) $$invalidate(22, onTouchdown = $$props.onTouchdown);
    		if ("onTouchup" in $$props) $$invalidate(23, onTouchup = $$props.onTouchup);
    		if ("onTouchover" in $$props) $$invalidate(24, onTouchover = $$props.onTouchover);
    		if ("onTouchout" in $$props) $$invalidate(25, onTouchout = $$props.onTouchout);
    		if ("onTouchdrag" in $$props) $$invalidate(26, onTouchdrag = $$props.onTouchdrag);
    		if ("onSelect" in $$props) $$invalidate(27, onSelect = $$props.onSelect);
    		if ("onDeselect" in $$props) $$invalidate(28, onDeselect = $$props.onDeselect);
    		if ("key" in $$props) $$invalidate(29, key = $$props.key);
    		if ("renderSettings" in $$props) $$invalidate(30, renderSettings = $$props.renderSettings);
    		if ("blockReindexing" in $$props) $$invalidate(31, blockReindexing = $$props.blockReindexing);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		x,
    		y,
    		geometry,
    		fill,
    		stroke,
    		strokeWidth,
    		strokeOpacity,
    		fillOpacity,
    		opacity,
    		text,
    		fontFamily,
    		fontSize,
    		fontWeight,
    		rotation,
    		anchorPoint,
    		transition,
    		onClick,
    		onMousedown,
    		onMouseup,
    		onMouseover,
    		onMouseout,
    		onMousedrag,
    		onTouchdown,
    		onTouchup,
    		onTouchover,
    		onTouchout,
    		onTouchdrag,
    		onSelect,
    		onDeselect,
    		key,
    		renderSettings,
    		blockReindexing
    	];
    }

    class LabelLayer extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance$9,
    			create_fragment$9,
    			safe_not_equal,
    			{
    				x: 0,
    				y: 1,
    				geometry: 2,
    				fill: 3,
    				stroke: 4,
    				strokeWidth: 5,
    				strokeOpacity: 6,
    				fillOpacity: 7,
    				opacity: 8,
    				text: 9,
    				fontFamily: 10,
    				fontSize: 11,
    				fontWeight: 12,
    				rotation: 13,
    				anchorPoint: 14,
    				transition: 15,
    				onClick: 16,
    				onMousedown: 17,
    				onMouseup: 18,
    				onMouseover: 19,
    				onMouseout: 20,
    				onMousedrag: 21,
    				onTouchdown: 22,
    				onTouchup: 23,
    				onTouchover: 24,
    				onTouchout: 25,
    				onTouchdrag: 26,
    				onSelect: 27,
    				onDeselect: 28,
    				key: 29,
    				renderSettings: 30,
    				blockReindexing: 31
    			},
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "LabelLayer",
    			options,
    			id: create_fragment$9.name
    		});
    	}

    	get x() {
    		throw new Error("<LabelLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set x(value) {
    		throw new Error("<LabelLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get y() {
    		throw new Error("<LabelLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set y(value) {
    		throw new Error("<LabelLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get geometry() {
    		throw new Error("<LabelLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set geometry(value) {
    		throw new Error("<LabelLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fill() {
    		throw new Error("<LabelLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fill(value) {
    		throw new Error("<LabelLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get stroke() {
    		throw new Error("<LabelLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set stroke(value) {
    		throw new Error("<LabelLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get strokeWidth() {
    		throw new Error("<LabelLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set strokeWidth(value) {
    		throw new Error("<LabelLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get strokeOpacity() {
    		throw new Error("<LabelLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set strokeOpacity(value) {
    		throw new Error("<LabelLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fillOpacity() {
    		throw new Error("<LabelLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fillOpacity(value) {
    		throw new Error("<LabelLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get opacity() {
    		throw new Error("<LabelLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set opacity(value) {
    		throw new Error("<LabelLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get text() {
    		throw new Error("<LabelLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set text(value) {
    		throw new Error("<LabelLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fontFamily() {
    		throw new Error("<LabelLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fontFamily(value) {
    		throw new Error("<LabelLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fontSize() {
    		throw new Error("<LabelLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fontSize(value) {
    		throw new Error("<LabelLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fontWeight() {
    		throw new Error("<LabelLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fontWeight(value) {
    		throw new Error("<LabelLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rotation() {
    		throw new Error("<LabelLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rotation(value) {
    		throw new Error("<LabelLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get anchorPoint() {
    		throw new Error("<LabelLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set anchorPoint(value) {
    		throw new Error("<LabelLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get transition() {
    		throw new Error("<LabelLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set transition(value) {
    		throw new Error("<LabelLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onClick() {
    		throw new Error("<LabelLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onClick(value) {
    		throw new Error("<LabelLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onMousedown() {
    		throw new Error("<LabelLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onMousedown(value) {
    		throw new Error("<LabelLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onMouseup() {
    		throw new Error("<LabelLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onMouseup(value) {
    		throw new Error("<LabelLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onMouseover() {
    		throw new Error("<LabelLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onMouseover(value) {
    		throw new Error("<LabelLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onMouseout() {
    		throw new Error("<LabelLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onMouseout(value) {
    		throw new Error("<LabelLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onMousedrag() {
    		throw new Error("<LabelLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onMousedrag(value) {
    		throw new Error("<LabelLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onTouchdown() {
    		throw new Error("<LabelLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onTouchdown(value) {
    		throw new Error("<LabelLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onTouchup() {
    		throw new Error("<LabelLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onTouchup(value) {
    		throw new Error("<LabelLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onTouchover() {
    		throw new Error("<LabelLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onTouchover(value) {
    		throw new Error("<LabelLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onTouchout() {
    		throw new Error("<LabelLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onTouchout(value) {
    		throw new Error("<LabelLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onTouchdrag() {
    		throw new Error("<LabelLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onTouchdrag(value) {
    		throw new Error("<LabelLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onSelect() {
    		throw new Error("<LabelLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onSelect(value) {
    		throw new Error("<LabelLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onDeselect() {
    		throw new Error("<LabelLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onDeselect(value) {
    		throw new Error("<LabelLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get key() {
    		throw new Error("<LabelLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set key(value) {
    		throw new Error("<LabelLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get renderSettings() {
    		throw new Error("<LabelLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set renderSettings(value) {
    		throw new Error("<LabelLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get blockReindexing() {
    		throw new Error("<LabelLayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set blockReindexing(value) {
    		throw new Error("<LabelLayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    function getAbsoluteXPosition (hjust, xOffset, { paddedBbox }) {
      const { minX: x1, maxX: x2 } = paddedBbox;

      if (hjust === 'left') {
        return x1 - xOffset
      }

      if (hjust === 'right') {
        return x2 + xOffset
      }

      if (['center', 'centre'].includes(hjust)) {
        return (x2 - x1) / 2 + x1 + xOffset
      }

      if (hjust.constructor === Number) {
        return (x2 - x1) * hjust + x1
      }
    }

    function getAbsoluteYPosition (vjust, yOffset, { paddedBbox }) {
      const { minY: y1, maxY: y2 } = paddedBbox;

      if (vjust === 'top') {
        return y1 - yOffset
      }

      if (vjust === 'bottom') {
        return y2 + yOffset
      }

      if (['center', 'centre'].includes(vjust)) {
        return (y2 - y1) / 2 + y1 + yOffset
      }

      if (vjust.constructor === Number) {
        return (y2 - y1) * vjust + y1
      }
    }

    function getBaseLineCoordinatesXAxis (yAbsolute, sectionContext) {
      const { paddedBbox, finalScaleX, finalScaleY } = sectionContext;
      const { minX: x1, maxX: x2 } = paddedBbox;

      const x = [x1, x2].map(finalScaleX.invert);
      const y = [yAbsolute, yAbsolute].map(finalScaleY.invert);

      return {
        x: () => x,
        y: () => y
      }
    }

    function getBaseLineCoordinatesYAxis (xAbsolute, sectionContext) {
      const { paddedBbox, finalScaleX, finalScaleY } = sectionContext;
      const { minY: y1, maxY: y2 } = paddedBbox;

      const x = [xAbsolute, xAbsolute].map(finalScaleX.invert);
      const y = [y1, y2].map(finalScaleY.invert);

      return {
        x: () => x,
        y: () => y
      }
    }

    function getTickPositions (tickValuesArray, scale, tickCount, tickExtra, zoomIdentity) {
      let ticks;

      if (Array.isArray(tickValuesArray) && tickValuesArray.length > 0) {
        ticks = tickValuesArray;
      } else if (isContinuous(scale)) {
        ticks = getContinuousTicks(scale, tickCount, zoomIdentity);
      } else if ('domain' in scale) {
        ticks = scale.domain();
      } else {
        throw new Error(`Couldn't construct axis. Please provide 'tickValues' or a scale with
      either a 'ticks' or a 'domain' method.`)
      }

      if (tickExtra && 'domain' in scale && ticks[0] !== scale.domain()[0]) {
        ticks.unshift(scale.domain()[0]);
      }

      return ticks
    }

    function isContinuous (scale) {
      return 'ticks' in scale
    }

    function getContinuousTicks (scale, tickCount, zoomIdentity) {
      if (zoomIdentity) {
        const rescaledDomain = rescale(scale, zoomIdentity);
        return scale.copy().domain(rescaledDomain).ticks(tickCount)
      }

      return scale.ticks(tickCount)
    }

    // https://github.com/d3/d3-zoom#transform_rescaleX
    function rescale (scale, { k, t }) {
      const rescaledRange = scale.range().map(r => (r - t) / k);
      const rescaledDomain = rescaledRange.map(scale.invert);
      return rescaledDomain
    }

    function getTickCoordinatesXAxis (
      ticks,
      yAbsolute,
      scaleX,
      finalScaleY,
      tickSize,
      flip
    ) {
      const offset = flip ? -tickSize : tickSize;
      const bandOffset = scaleX.bandwidth ? scaleX.bandwidth() / 2 : 0;

      const yEndAbsolute = yAbsolute + offset;

      const yCoordsTick = [
        finalScaleY.invert(yAbsolute),
        finalScaleY.invert(yEndAbsolute)
      ];

      const x = ticks.map(t => scaleX(t) + bandOffset).map(t => [t, t]);
      const y = generateArrayOfLength(yCoordsTick, ticks.length);

      return {
        x: () => x,
        y: () => y
      }
    }

    function getTickCoordinatesYAxis (
      ticks,
      xAbsolute,
      scaleY,
      finalScaleX,
      tickSize,
      flip
    ) {
      const offset = flip ? tickSize : -tickSize;
      const bandOffset = scaleY.bandwidth ? scaleY.bandwidth() / 2 : 0;

      const xEndAbsolute = xAbsolute + offset;

      const xCoordsTick = [
        finalScaleX.invert(xAbsolute),
        finalScaleX.invert(xEndAbsolute)
      ];

      const x = generateArrayOfLength(xCoordsTick, ticks.length);
      const y = ticks.map(t => scaleY(t) + bandOffset).map(t => [t, t]);

      return {
        x: () => x,
        y: () => y
      }
    }

    function getFormat (labelFormat, scale, numberOfTicks) {
      if (labelFormat) return labelFormat
      if ('tickFormat' in scale) return scale.tickFormat(numberOfTicks)

      return x => x
    }

    function getTickLabelCoordinatesXAxis (
      tickCoordinates,
      { finalScaleY },
      labelOffset,
      flip
    ) {
      const x = tickCoordinates.x().map(x => x[0]);

      const y = tickCoordinates.y().map(y => {
        const yEnd = y[1];
        const yEndAbsolute = finalScaleY(yEnd);

        const yLabelAbsolute = flip
          ? yEndAbsolute - labelOffset
          : yEndAbsolute + labelOffset;

        return finalScaleY.invert(yLabelAbsolute)
      });

      return {
        x: () => x,
        y: () => y
      }
    }

    function getTickLabelCoordinatesYAxis (
      tickCoordinates,
      { finalScaleX },
      labelOffset,
      flip
    ) {
      const x = tickCoordinates.x().map(x => {
        const xEnd = x[1];
        const xEndAbsolute = finalScaleX(xEnd);

        const xLabelAbsolute = flip
          ? xEndAbsolute + labelOffset
          : xEndAbsolute - labelOffset;

        return finalScaleX.invert(xLabelAbsolute)
      });

      const y = tickCoordinates.y().map(y => y[0]);

      return {
        x: () => x,
        y: () => y
      }
    }

    // from https://stackoverflow.com/a/21015393
    function getTextWidth (text, fontSize, fontFamily) {
      let canvas;
      if (typeof document === 'undefined') {
        // if we don't have document/canvas available
        // assume ratio width to height is 0.8
        const length = text.length;
        return length * 0.8 * fontSize
      } else {
        // re-use canvas object for better performance
        canvas = getTextWidth.canvas || (getTextWidth.canvas = document.createElement('canvas'));
        const context = canvas.getContext('2d');
        context.font = fontSize + ' ' + fontFamily;
        const metrics = context.measureText(text);
        return metrics.width
      }
    }

    function getTitleCoordinatesXAxis (
      hjust,
      xOffset,
      vjust,
      yOffset,
      sectionContext,
      flip,
      axisHeight,
      fontSize,
      yAbsoluteAxis
    ) {
      const heightOffset = getHeightOffset(yOffset, flip, axisHeight, fontSize);

      const xAbsolute = getAbsoluteXPosition(hjust, xOffset, sectionContext);
      const yAbsolute = vjust === 'axis'
        ? yAbsoluteAxis + heightOffset
        : getAbsoluteYPosition(vjust, yOffset, sectionContext) + heightOffset;

      const { finalScaleX, finalScaleY } = sectionContext;

      const x = finalScaleX.invert(xAbsolute);
      const y = finalScaleY.invert(yAbsolute);

      return {
        x: () => x,
        y: () => y
      }
    }

    function getHeightOffset (offset, flip, axisHeight, fontSize) {
      if (offset === 'axis') {
        return flip
          ? -(axisHeight + 1) - fontSize
          : axisHeight + 1
      }

      if (offset.constructor !== Number) {
        throw new Error('yOffset must be a Number')
      }

      return offset
    }

    function getTitleCoordinatesYAxis (
      hjust,
      xOffset,
      vjust,
      yOffset,
      sectionContext,
      flip,
      axisWidth,
      fontSize,
      xAbsoluteAxis
    ) {
      const widthOffset = getWidthOffset(xOffset, flip, axisWidth);
      const xAbsolute = hjust === 'axis'
        ? xAbsoluteAxis + widthOffset
        : getAbsoluteXPosition(hjust, xOffset, sectionContext);
      const yAbsolute = getAbsoluteYPosition(vjust, yOffset, sectionContext);

      const { finalScaleX, finalScaleY } = sectionContext;

      const x = finalScaleX.invert(xAbsolute);
      const y = finalScaleY.invert(yAbsolute);

      return {
        x: () => x,
        y: () => y
      }
    }

    function getWidthOffset (offset, flip, axisWidth, fontSize) {
      if (offset === 'axis') {
        return flip
          ? axisWidth + 5
          : -axisWidth - 5
      }

      if (offset.constructor !== Number) {
        throw new Error('xOffset must be a Number')
      }

      return offset
    }

    /* node_modules/@snlab/florence/src/components/Guides/Axes/XAxis.svelte generated by Svelte v3.21.0 */

    const { Error: Error_1 } = globals;
    const file$3 = "node_modules/@snlab/florence/src/components/Guides/Axes/XAxis.svelte";

    // (125:2) {#if baseLine}
    function create_if_block_2$2(ctx) {
    	let current;

    	const line_spread_levels = [
    		/*baseLineCoordinates*/ ctx[23],
    		{ strokeWidth: /*baseLineWidth*/ ctx[3] },
    		{ opacity: /*baseLineOpacity*/ ctx[2] },
    		{ stroke: /*baseLineColor*/ ctx[1] }
    	];

    	let line_props = {};

    	for (let i = 0; i < line_spread_levels.length; i += 1) {
    		line_props = assign(line_props, line_spread_levels[i]);
    	}

    	const line = new Line({ props: line_props, $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(line.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(line, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const line_changes = (dirty[0] & /*baseLineCoordinates, baseLineWidth, baseLineOpacity, baseLineColor*/ 8388622)
    			? get_spread_update(line_spread_levels, [
    					dirty[0] & /*baseLineCoordinates*/ 8388608 && get_spread_object(/*baseLineCoordinates*/ ctx[23]),
    					dirty[0] & /*baseLineWidth*/ 8 && { strokeWidth: /*baseLineWidth*/ ctx[3] },
    					dirty[0] & /*baseLineOpacity*/ 4 && { opacity: /*baseLineOpacity*/ ctx[2] },
    					dirty[0] & /*baseLineColor*/ 2 && { stroke: /*baseLineColor*/ ctx[1] }
    				])
    			: {};

    			line.$set(line_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(line.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(line.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(line, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$2.name,
    		type: "if",
    		source: "(125:2) {#if baseLine}",
    		ctx
    	});

    	return block;
    }

    // (134:2) {#if ticks}
    function create_if_block_1$3(ctx) {
    	let current;

    	const linelayer_spread_levels = [
    		/*tickCoordinates*/ ctx[24],
    		{ strokeWidth: /*tickWidth*/ ctx[5] },
    		{ opacity: /*tickOpacity*/ ctx[7] },
    		{ stroke: /*tickColor*/ ctx[6] },
    		{ transition: /*transition*/ ctx[22] }
    	];

    	let linelayer_props = {};

    	for (let i = 0; i < linelayer_spread_levels.length; i += 1) {
    		linelayer_props = assign(linelayer_props, linelayer_spread_levels[i]);
    	}

    	const linelayer = new LineLayer({ props: linelayer_props, $$inline: true });

    	const labellayer_spread_levels = [
    		/*tickLabelCoordinates*/ ctx[26],
    		{ text: /*tickLabelText*/ ctx[25] },
    		{
    			anchorPoint: /*labelAnchorPoint*/ ctx[27]
    		},
    		{ rotation: /*labelRotate*/ ctx[8] },
    		{ fontFamily: /*labelFont*/ ctx[9] },
    		{ fontSize: /*labelFontSize*/ ctx[10] },
    		{ fontWeight: /*labelFontWeight*/ ctx[11] },
    		{ opacity: /*labelOpacity*/ ctx[12] },
    		{ fill: /*labelColor*/ ctx[13] },
    		{ transition: /*transition*/ ctx[22] }
    	];

    	let labellayer_props = {};

    	for (let i = 0; i < labellayer_spread_levels.length; i += 1) {
    		labellayer_props = assign(labellayer_props, labellayer_spread_levels[i]);
    	}

    	const labellayer = new LabelLayer({ props: labellayer_props, $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(linelayer.$$.fragment);
    			create_component(labellayer.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(linelayer, target, anchor);
    			mount_component(labellayer, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const linelayer_changes = (dirty[0] & /*tickCoordinates, tickWidth, tickOpacity, tickColor, transition*/ 20971744)
    			? get_spread_update(linelayer_spread_levels, [
    					dirty[0] & /*tickCoordinates*/ 16777216 && get_spread_object(/*tickCoordinates*/ ctx[24]),
    					dirty[0] & /*tickWidth*/ 32 && { strokeWidth: /*tickWidth*/ ctx[5] },
    					dirty[0] & /*tickOpacity*/ 128 && { opacity: /*tickOpacity*/ ctx[7] },
    					dirty[0] & /*tickColor*/ 64 && { stroke: /*tickColor*/ ctx[6] },
    					dirty[0] & /*transition*/ 4194304 && { transition: /*transition*/ ctx[22] }
    				])
    			: {};

    			linelayer.$set(linelayer_changes);

    			const labellayer_changes = (dirty[0] & /*tickLabelCoordinates, tickLabelText, labelAnchorPoint, labelRotate, labelFont, labelFontSize, labelFontWeight, labelOpacity, labelColor, transition*/ 239091456)
    			? get_spread_update(labellayer_spread_levels, [
    					dirty[0] & /*tickLabelCoordinates*/ 67108864 && get_spread_object(/*tickLabelCoordinates*/ ctx[26]),
    					dirty[0] & /*tickLabelText*/ 33554432 && { text: /*tickLabelText*/ ctx[25] },
    					dirty[0] & /*labelAnchorPoint*/ 134217728 && {
    						anchorPoint: /*labelAnchorPoint*/ ctx[27]
    					},
    					dirty[0] & /*labelRotate*/ 256 && { rotation: /*labelRotate*/ ctx[8] },
    					dirty[0] & /*labelFont*/ 512 && { fontFamily: /*labelFont*/ ctx[9] },
    					dirty[0] & /*labelFontSize*/ 1024 && { fontSize: /*labelFontSize*/ ctx[10] },
    					dirty[0] & /*labelFontWeight*/ 2048 && { fontWeight: /*labelFontWeight*/ ctx[11] },
    					dirty[0] & /*labelOpacity*/ 4096 && { opacity: /*labelOpacity*/ ctx[12] },
    					dirty[0] & /*labelColor*/ 8192 && { fill: /*labelColor*/ ctx[13] },
    					dirty[0] & /*transition*/ 4194304 && { transition: /*transition*/ ctx[22] }
    				])
    			: {};

    			labellayer.$set(labellayer_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(linelayer.$$.fragment, local);
    			transition_in(labellayer.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(linelayer.$$.fragment, local);
    			transition_out(labellayer.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(linelayer, detaching);
    			destroy_component(labellayer, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$3.name,
    		type: "if",
    		source: "(134:2) {#if ticks}",
    		ctx
    	});

    	return block;
    }

    // (157:2) {#if title.length > 0}
    function create_if_block$3(ctx) {
    	let current;

    	const label_spread_levels = [
    		/*titleCoordinates*/ ctx[28],
    		{ text: /*title*/ ctx[14] },
    		{
    			anchorPoint: /*titleAnchorPoint*/ ctx[21]
    		},
    		{ rotation: /*titleRotation*/ ctx[20] },
    		{ fontFamily: /*titleFont*/ ctx[16] },
    		{ fontSize: /*titleFontSize*/ ctx[17] },
    		{ fontWeight: /*titleFontWeight*/ ctx[18] },
    		{ opacity: /*titleOpacity*/ ctx[19] },
    		{ fill: /*titleColor*/ ctx[15] }
    	];

    	let label_props = {};

    	for (let i = 0; i < label_spread_levels.length; i += 1) {
    		label_props = assign(label_props, label_spread_levels[i]);
    	}

    	const label = new Label({ props: label_props, $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(label.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(label, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const label_changes = (dirty[0] & /*titleCoordinates, title, titleAnchorPoint, titleRotation, titleFont, titleFontSize, titleFontWeight, titleOpacity, titleColor*/ 272613376)
    			? get_spread_update(label_spread_levels, [
    					dirty[0] & /*titleCoordinates*/ 268435456 && get_spread_object(/*titleCoordinates*/ ctx[28]),
    					dirty[0] & /*title*/ 16384 && { text: /*title*/ ctx[14] },
    					dirty[0] & /*titleAnchorPoint*/ 2097152 && {
    						anchorPoint: /*titleAnchorPoint*/ ctx[21]
    					},
    					dirty[0] & /*titleRotation*/ 1048576 && { rotation: /*titleRotation*/ ctx[20] },
    					dirty[0] & /*titleFont*/ 65536 && { fontFamily: /*titleFont*/ ctx[16] },
    					dirty[0] & /*titleFontSize*/ 131072 && { fontSize: /*titleFontSize*/ ctx[17] },
    					dirty[0] & /*titleFontWeight*/ 262144 && { fontWeight: /*titleFontWeight*/ ctx[18] },
    					dirty[0] & /*titleOpacity*/ 524288 && { opacity: /*titleOpacity*/ ctx[19] },
    					dirty[0] & /*titleColor*/ 32768 && { fill: /*titleColor*/ ctx[15] }
    				])
    			: {};

    			label.$set(label_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(label.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(label.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(label, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$3.name,
    		type: "if",
    		source: "(157:2) {#if title.length > 0}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$a(ctx) {
    	let g;
    	let if_block0_anchor;
    	let if_block1_anchor;
    	let current;
    	let if_block0 = /*baseLine*/ ctx[0] && create_if_block_2$2(ctx);
    	let if_block1 = /*ticks*/ ctx[4] && create_if_block_1$3(ctx);
    	let if_block2 = /*title*/ ctx[14].length > 0 && create_if_block$3(ctx);

    	const block = {
    		c: function create() {
    			g = svg_element("g");
    			if (if_block0) if_block0.c();
    			if_block0_anchor = empty();
    			if (if_block1) if_block1.c();
    			if_block1_anchor = empty();
    			if (if_block2) if_block2.c();
    			attr_dev(g, "class", "x-axis");
    			add_location(g, file$3, 122, 0, 3350);
    		},
    		l: function claim(nodes) {
    			throw new Error_1("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g, anchor);
    			if (if_block0) if_block0.m(g, null);
    			append_dev(g, if_block0_anchor);
    			if (if_block1) if_block1.m(g, null);
    			append_dev(g, if_block1_anchor);
    			if (if_block2) if_block2.m(g, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*baseLine*/ ctx[0]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty[0] & /*baseLine*/ 1) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_2$2(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(g, if_block0_anchor);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (/*ticks*/ ctx[4]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty[0] & /*ticks*/ 16) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_1$3(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(g, if_block1_anchor);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (/*title*/ ctx[14].length > 0) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);

    					if (dirty[0] & /*title*/ 16384) {
    						transition_in(if_block2, 1);
    					}
    				} else {
    					if_block2 = create_if_block$3(ctx);
    					if_block2.c();
    					transition_in(if_block2, 1);
    					if_block2.m(g, null);
    				}
    			} else if (if_block2) {
    				group_outros();

    				transition_out(if_block2, 1, 1, () => {
    					if_block2 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(if_block1);
    			transition_in(if_block2);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(if_block1);
    			transition_out(if_block2);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$a.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$a($$self, $$props, $$invalidate) {
    	let $sectionContext;
    	let { flip = false } = $$props;
    	let { scale = undefined } = $$props;
    	let { baseLine = true } = $$props;
    	let { baseLineColor = "black" } = $$props;
    	let { baseLineOpacity = 1 } = $$props;
    	let { baseLineWidth = 1 } = $$props;
    	let { vjust = "bottom" } = $$props;
    	let { yOffset = 0 } = $$props;
    	let { ticks = true } = $$props;
    	let { tickCount = 10 } = $$props;
    	let { tickExtra = false } = $$props;
    	let { tickValues = undefined } = $$props;
    	let { tickSize = 5 } = $$props;
    	let { tickWidth = 0.5 } = $$props;
    	let { tickColor = "black" } = $$props;
    	let { tickOpacity = 1 } = $$props;
    	let { labelFormat = undefined } = $$props;
    	let { labelOffset = 2 } = $$props;
    	let { labelRotate = 0 } = $$props;
    	let { labelFont = "Helvetica" } = $$props;
    	let { labelFontSize = 10 } = $$props;
    	let { labelFontWeight = "normal" } = $$props;
    	let { labelOpacity = 1 } = $$props;
    	let { labelColor = "black" } = $$props;
    	let { titleHjust = "center" } = $$props;
    	let { titleXOffset = 0 } = $$props;
    	let { titleVjust = "axis" } = $$props;
    	let { titleYOffset = "axis" } = $$props;
    	let { title = "" } = $$props;
    	let { titleColor = "black" } = $$props;
    	let { titleFont = "Helvetica" } = $$props;
    	let { titleFontSize = "12" } = $$props;
    	let { titleFontWeight = "normal" } = $$props;
    	let { titleOpacity = 1 } = $$props;
    	let { titleRotation = 0 } = $$props;
    	let { titleAnchorPoint = "t" } = $$props;
    	let { transition = undefined } = $$props;

    	// Contexts
    	const sectionContext = subscribe$2();

    	validate_store(sectionContext, "sectionContext");
    	component_subscribe($$self, sectionContext, value => $$invalidate(44, $sectionContext = value));

    	const writable_props = [
    		"flip",
    		"scale",
    		"baseLine",
    		"baseLineColor",
    		"baseLineOpacity",
    		"baseLineWidth",
    		"vjust",
    		"yOffset",
    		"ticks",
    		"tickCount",
    		"tickExtra",
    		"tickValues",
    		"tickSize",
    		"tickWidth",
    		"tickColor",
    		"tickOpacity",
    		"labelFormat",
    		"labelOffset",
    		"labelRotate",
    		"labelFont",
    		"labelFontSize",
    		"labelFontWeight",
    		"labelOpacity",
    		"labelColor",
    		"titleHjust",
    		"titleXOffset",
    		"titleVjust",
    		"titleYOffset",
    		"title",
    		"titleColor",
    		"titleFont",
    		"titleFontSize",
    		"titleFontWeight",
    		"titleOpacity",
    		"titleRotation",
    		"titleAnchorPoint",
    		"transition"
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<XAxis> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("XAxis", $$slots, []);

    	$$self.$set = $$props => {
    		if ("flip" in $$props) $$invalidate(30, flip = $$props.flip);
    		if ("scale" in $$props) $$invalidate(31, scale = $$props.scale);
    		if ("baseLine" in $$props) $$invalidate(0, baseLine = $$props.baseLine);
    		if ("baseLineColor" in $$props) $$invalidate(1, baseLineColor = $$props.baseLineColor);
    		if ("baseLineOpacity" in $$props) $$invalidate(2, baseLineOpacity = $$props.baseLineOpacity);
    		if ("baseLineWidth" in $$props) $$invalidate(3, baseLineWidth = $$props.baseLineWidth);
    		if ("vjust" in $$props) $$invalidate(32, vjust = $$props.vjust);
    		if ("yOffset" in $$props) $$invalidate(33, yOffset = $$props.yOffset);
    		if ("ticks" in $$props) $$invalidate(4, ticks = $$props.ticks);
    		if ("tickCount" in $$props) $$invalidate(34, tickCount = $$props.tickCount);
    		if ("tickExtra" in $$props) $$invalidate(35, tickExtra = $$props.tickExtra);
    		if ("tickValues" in $$props) $$invalidate(36, tickValues = $$props.tickValues);
    		if ("tickSize" in $$props) $$invalidate(37, tickSize = $$props.tickSize);
    		if ("tickWidth" in $$props) $$invalidate(5, tickWidth = $$props.tickWidth);
    		if ("tickColor" in $$props) $$invalidate(6, tickColor = $$props.tickColor);
    		if ("tickOpacity" in $$props) $$invalidate(7, tickOpacity = $$props.tickOpacity);
    		if ("labelFormat" in $$props) $$invalidate(38, labelFormat = $$props.labelFormat);
    		if ("labelOffset" in $$props) $$invalidate(39, labelOffset = $$props.labelOffset);
    		if ("labelRotate" in $$props) $$invalidate(8, labelRotate = $$props.labelRotate);
    		if ("labelFont" in $$props) $$invalidate(9, labelFont = $$props.labelFont);
    		if ("labelFontSize" in $$props) $$invalidate(10, labelFontSize = $$props.labelFontSize);
    		if ("labelFontWeight" in $$props) $$invalidate(11, labelFontWeight = $$props.labelFontWeight);
    		if ("labelOpacity" in $$props) $$invalidate(12, labelOpacity = $$props.labelOpacity);
    		if ("labelColor" in $$props) $$invalidate(13, labelColor = $$props.labelColor);
    		if ("titleHjust" in $$props) $$invalidate(40, titleHjust = $$props.titleHjust);
    		if ("titleXOffset" in $$props) $$invalidate(41, titleXOffset = $$props.titleXOffset);
    		if ("titleVjust" in $$props) $$invalidate(42, titleVjust = $$props.titleVjust);
    		if ("titleYOffset" in $$props) $$invalidate(43, titleYOffset = $$props.titleYOffset);
    		if ("title" in $$props) $$invalidate(14, title = $$props.title);
    		if ("titleColor" in $$props) $$invalidate(15, titleColor = $$props.titleColor);
    		if ("titleFont" in $$props) $$invalidate(16, titleFont = $$props.titleFont);
    		if ("titleFontSize" in $$props) $$invalidate(17, titleFontSize = $$props.titleFontSize);
    		if ("titleFontWeight" in $$props) $$invalidate(18, titleFontWeight = $$props.titleFontWeight);
    		if ("titleOpacity" in $$props) $$invalidate(19, titleOpacity = $$props.titleOpacity);
    		if ("titleRotation" in $$props) $$invalidate(20, titleRotation = $$props.titleRotation);
    		if ("titleAnchorPoint" in $$props) $$invalidate(21, titleAnchorPoint = $$props.titleAnchorPoint);
    		if ("transition" in $$props) $$invalidate(22, transition = $$props.transition);
    	};

    	$$self.$capture_state = () => ({
    		Line,
    		LineLayer,
    		Label,
    		LabelLayer,
    		SectionContext,
    		getAbsoluteYPosition,
    		getBaseLineCoordinatesXAxis,
    		getTickPositions,
    		getTickCoordinatesXAxis,
    		getFormat,
    		getTickLabelCoordinatesXAxis,
    		getTitleCoordinatesXAxis,
    		flip,
    		scale,
    		baseLine,
    		baseLineColor,
    		baseLineOpacity,
    		baseLineWidth,
    		vjust,
    		yOffset,
    		ticks,
    		tickCount,
    		tickExtra,
    		tickValues,
    		tickSize,
    		tickWidth,
    		tickColor,
    		tickOpacity,
    		labelFormat,
    		labelOffset,
    		labelRotate,
    		labelFont,
    		labelFontSize,
    		labelFontWeight,
    		labelOpacity,
    		labelColor,
    		titleHjust,
    		titleXOffset,
    		titleVjust,
    		titleYOffset,
    		title,
    		titleColor,
    		titleFont,
    		titleFontSize,
    		titleFontWeight,
    		titleOpacity,
    		titleRotation,
    		titleAnchorPoint,
    		transition,
    		sectionContext,
    		$sectionContext,
    		scaleX,
    		yAbsolute,
    		baseLineCoordinates,
    		tickPositions,
    		tickCoordinates,
    		format,
    		tickLabelText,
    		tickLabelCoordinates,
    		labelAnchorPoint,
    		axisHeight,
    		titleCoordinates
    	});

    	$$self.$inject_state = $$props => {
    		if ("flip" in $$props) $$invalidate(30, flip = $$props.flip);
    		if ("scale" in $$props) $$invalidate(31, scale = $$props.scale);
    		if ("baseLine" in $$props) $$invalidate(0, baseLine = $$props.baseLine);
    		if ("baseLineColor" in $$props) $$invalidate(1, baseLineColor = $$props.baseLineColor);
    		if ("baseLineOpacity" in $$props) $$invalidate(2, baseLineOpacity = $$props.baseLineOpacity);
    		if ("baseLineWidth" in $$props) $$invalidate(3, baseLineWidth = $$props.baseLineWidth);
    		if ("vjust" in $$props) $$invalidate(32, vjust = $$props.vjust);
    		if ("yOffset" in $$props) $$invalidate(33, yOffset = $$props.yOffset);
    		if ("ticks" in $$props) $$invalidate(4, ticks = $$props.ticks);
    		if ("tickCount" in $$props) $$invalidate(34, tickCount = $$props.tickCount);
    		if ("tickExtra" in $$props) $$invalidate(35, tickExtra = $$props.tickExtra);
    		if ("tickValues" in $$props) $$invalidate(36, tickValues = $$props.tickValues);
    		if ("tickSize" in $$props) $$invalidate(37, tickSize = $$props.tickSize);
    		if ("tickWidth" in $$props) $$invalidate(5, tickWidth = $$props.tickWidth);
    		if ("tickColor" in $$props) $$invalidate(6, tickColor = $$props.tickColor);
    		if ("tickOpacity" in $$props) $$invalidate(7, tickOpacity = $$props.tickOpacity);
    		if ("labelFormat" in $$props) $$invalidate(38, labelFormat = $$props.labelFormat);
    		if ("labelOffset" in $$props) $$invalidate(39, labelOffset = $$props.labelOffset);
    		if ("labelRotate" in $$props) $$invalidate(8, labelRotate = $$props.labelRotate);
    		if ("labelFont" in $$props) $$invalidate(9, labelFont = $$props.labelFont);
    		if ("labelFontSize" in $$props) $$invalidate(10, labelFontSize = $$props.labelFontSize);
    		if ("labelFontWeight" in $$props) $$invalidate(11, labelFontWeight = $$props.labelFontWeight);
    		if ("labelOpacity" in $$props) $$invalidate(12, labelOpacity = $$props.labelOpacity);
    		if ("labelColor" in $$props) $$invalidate(13, labelColor = $$props.labelColor);
    		if ("titleHjust" in $$props) $$invalidate(40, titleHjust = $$props.titleHjust);
    		if ("titleXOffset" in $$props) $$invalidate(41, titleXOffset = $$props.titleXOffset);
    		if ("titleVjust" in $$props) $$invalidate(42, titleVjust = $$props.titleVjust);
    		if ("titleYOffset" in $$props) $$invalidate(43, titleYOffset = $$props.titleYOffset);
    		if ("title" in $$props) $$invalidate(14, title = $$props.title);
    		if ("titleColor" in $$props) $$invalidate(15, titleColor = $$props.titleColor);
    		if ("titleFont" in $$props) $$invalidate(16, titleFont = $$props.titleFont);
    		if ("titleFontSize" in $$props) $$invalidate(17, titleFontSize = $$props.titleFontSize);
    		if ("titleFontWeight" in $$props) $$invalidate(18, titleFontWeight = $$props.titleFontWeight);
    		if ("titleOpacity" in $$props) $$invalidate(19, titleOpacity = $$props.titleOpacity);
    		if ("titleRotation" in $$props) $$invalidate(20, titleRotation = $$props.titleRotation);
    		if ("titleAnchorPoint" in $$props) $$invalidate(21, titleAnchorPoint = $$props.titleAnchorPoint);
    		if ("transition" in $$props) $$invalidate(22, transition = $$props.transition);
    		if ("scaleX" in $$props) $$invalidate(45, scaleX = $$props.scaleX);
    		if ("yAbsolute" in $$props) $$invalidate(46, yAbsolute = $$props.yAbsolute);
    		if ("baseLineCoordinates" in $$props) $$invalidate(23, baseLineCoordinates = $$props.baseLineCoordinates);
    		if ("tickPositions" in $$props) $$invalidate(47, tickPositions = $$props.tickPositions);
    		if ("tickCoordinates" in $$props) $$invalidate(24, tickCoordinates = $$props.tickCoordinates);
    		if ("format" in $$props) $$invalidate(48, format = $$props.format);
    		if ("tickLabelText" in $$props) $$invalidate(25, tickLabelText = $$props.tickLabelText);
    		if ("tickLabelCoordinates" in $$props) $$invalidate(26, tickLabelCoordinates = $$props.tickLabelCoordinates);
    		if ("labelAnchorPoint" in $$props) $$invalidate(27, labelAnchorPoint = $$props.labelAnchorPoint);
    		if ("axisHeight" in $$props) $$invalidate(49, axisHeight = $$props.axisHeight);
    		if ("titleCoordinates" in $$props) $$invalidate(28, titleCoordinates = $$props.titleCoordinates);
    	};

    	let scaleX;
    	let yAbsolute;
    	let baseLineCoordinates;
    	let tickPositions;
    	let tickCoordinates;
    	let format;
    	let tickLabelText;
    	let tickLabelCoordinates;
    	let labelAnchorPoint;
    	let axisHeight;
    	let titleCoordinates;

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[1] & /*$sectionContext*/ 8192) {
    			// Make sure not polar
    			 {
    				if ($sectionContext.transformation === "polar") {
    					throw new Error("Axes do'nt work with polar coordinates (for now)");
    				}
    			}
    		}

    		if ($$self.$$.dirty[1] & /*scale, $sectionContext*/ 8193) {
    			// Scale
    			 $$invalidate(45, scaleX = scale
    			? scale.copy().range($sectionContext.rangeX)
    			: $sectionContext.scaleX);
    		}

    		if ($$self.$$.dirty[1] & /*vjust, yOffset, $sectionContext*/ 8198) {
    			// Absolute position (in pixels)
    			 $$invalidate(46, yAbsolute = getAbsoluteYPosition(vjust, yOffset, $sectionContext));
    		}

    		if ($$self.$$.dirty[1] & /*yAbsolute, $sectionContext*/ 40960) {
    			// Baseline
    			 $$invalidate(23, baseLineCoordinates = getBaseLineCoordinatesXAxis(yAbsolute, $sectionContext));
    		}

    		if ($$self.$$.dirty[1] & /*tickValues, scaleX, tickCount, tickExtra, $sectionContext*/ 24632) {
    			// Ticks
    			 $$invalidate(47, tickPositions = getTickPositions(tickValues, scaleX, tickCount, tickExtra, $sectionContext.zoomIdentity
    			? {
    					t: $sectionContext.zoomIdentity.x,
    					k: $sectionContext.zoomIdentity.kx
    				}
    			: undefined));
    		}

    		if ($$self.$$.dirty[0] & /*flip*/ 1073741824 | $$self.$$.dirty[1] & /*tickPositions, yAbsolute, scaleX, $sectionContext, tickSize*/ 122944) {
    			 $$invalidate(24, tickCoordinates = getTickCoordinatesXAxis(tickPositions, yAbsolute, scaleX, $sectionContext.finalScaleY, tickSize, flip));
    		}

    		if ($$self.$$.dirty[0] & /*ticks*/ 16 | $$self.$$.dirty[1] & /*labelFormat, $sectionContext*/ 8320) {
    			// Tick labels
    			 $$invalidate(48, format = getFormat(labelFormat, $sectionContext.scaleX, ticks.length));
    		}

    		if ($$self.$$.dirty[1] & /*tickPositions, format*/ 196608) {
    			 $$invalidate(25, tickLabelText = tickPositions.map(format));
    		}

    		if ($$self.$$.dirty[0] & /*tickCoordinates, flip*/ 1090519040 | $$self.$$.dirty[1] & /*$sectionContext, labelOffset*/ 8448) {
    			 $$invalidate(26, tickLabelCoordinates = getTickLabelCoordinatesXAxis(tickCoordinates, $sectionContext, labelOffset, flip));
    		}

    		if ($$self.$$.dirty[0] & /*flip*/ 1073741824) {
    			 $$invalidate(27, labelAnchorPoint = flip ? "b" : "t");
    		}

    		if ($$self.$$.dirty[0] & /*baseLineWidth, labelFontSize*/ 1032 | $$self.$$.dirty[1] & /*tickSize, labelOffset*/ 320) {
    			// Title
    			 $$invalidate(49, axisHeight = baseLineWidth + tickSize + labelOffset + labelFontSize);
    		}

    		if ($$self.$$.dirty[0] & /*flip, titleFontSize*/ 1073872896 | $$self.$$.dirty[1] & /*titleHjust, titleXOffset, titleVjust, titleYOffset, $sectionContext, axisHeight, yAbsolute*/ 310784) {
    			 $$invalidate(28, titleCoordinates = getTitleCoordinatesXAxis(titleHjust, titleXOffset, titleVjust, titleYOffset, $sectionContext, flip, axisHeight, titleFontSize, yAbsolute));
    		}
    	};

    	return [
    		baseLine,
    		baseLineColor,
    		baseLineOpacity,
    		baseLineWidth,
    		ticks,
    		tickWidth,
    		tickColor,
    		tickOpacity,
    		labelRotate,
    		labelFont,
    		labelFontSize,
    		labelFontWeight,
    		labelOpacity,
    		labelColor,
    		title,
    		titleColor,
    		titleFont,
    		titleFontSize,
    		titleFontWeight,
    		titleOpacity,
    		titleRotation,
    		titleAnchorPoint,
    		transition,
    		baseLineCoordinates,
    		tickCoordinates,
    		tickLabelText,
    		tickLabelCoordinates,
    		labelAnchorPoint,
    		titleCoordinates,
    		sectionContext,
    		flip,
    		scale,
    		vjust,
    		yOffset,
    		tickCount,
    		tickExtra,
    		tickValues,
    		tickSize,
    		labelFormat,
    		labelOffset,
    		titleHjust,
    		titleXOffset,
    		titleVjust,
    		titleYOffset
    	];
    }

    class XAxis extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance$a,
    			create_fragment$a,
    			safe_not_equal,
    			{
    				flip: 30,
    				scale: 31,
    				baseLine: 0,
    				baseLineColor: 1,
    				baseLineOpacity: 2,
    				baseLineWidth: 3,
    				vjust: 32,
    				yOffset: 33,
    				ticks: 4,
    				tickCount: 34,
    				tickExtra: 35,
    				tickValues: 36,
    				tickSize: 37,
    				tickWidth: 5,
    				tickColor: 6,
    				tickOpacity: 7,
    				labelFormat: 38,
    				labelOffset: 39,
    				labelRotate: 8,
    				labelFont: 9,
    				labelFontSize: 10,
    				labelFontWeight: 11,
    				labelOpacity: 12,
    				labelColor: 13,
    				titleHjust: 40,
    				titleXOffset: 41,
    				titleVjust: 42,
    				titleYOffset: 43,
    				title: 14,
    				titleColor: 15,
    				titleFont: 16,
    				titleFontSize: 17,
    				titleFontWeight: 18,
    				titleOpacity: 19,
    				titleRotation: 20,
    				titleAnchorPoint: 21,
    				transition: 22
    			},
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "XAxis",
    			options,
    			id: create_fragment$a.name
    		});
    	}

    	get flip() {
    		throw new Error_1("<XAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set flip(value) {
    		throw new Error_1("<XAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get scale() {
    		throw new Error_1("<XAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set scale(value) {
    		throw new Error_1("<XAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get baseLine() {
    		throw new Error_1("<XAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set baseLine(value) {
    		throw new Error_1("<XAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get baseLineColor() {
    		throw new Error_1("<XAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set baseLineColor(value) {
    		throw new Error_1("<XAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get baseLineOpacity() {
    		throw new Error_1("<XAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set baseLineOpacity(value) {
    		throw new Error_1("<XAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get baseLineWidth() {
    		throw new Error_1("<XAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set baseLineWidth(value) {
    		throw new Error_1("<XAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get vjust() {
    		throw new Error_1("<XAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set vjust(value) {
    		throw new Error_1("<XAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get yOffset() {
    		throw new Error_1("<XAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set yOffset(value) {
    		throw new Error_1("<XAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ticks() {
    		throw new Error_1("<XAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ticks(value) {
    		throw new Error_1("<XAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get tickCount() {
    		throw new Error_1("<XAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set tickCount(value) {
    		throw new Error_1("<XAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get tickExtra() {
    		throw new Error_1("<XAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set tickExtra(value) {
    		throw new Error_1("<XAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get tickValues() {
    		throw new Error_1("<XAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set tickValues(value) {
    		throw new Error_1("<XAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get tickSize() {
    		throw new Error_1("<XAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set tickSize(value) {
    		throw new Error_1("<XAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get tickWidth() {
    		throw new Error_1("<XAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set tickWidth(value) {
    		throw new Error_1("<XAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get tickColor() {
    		throw new Error_1("<XAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set tickColor(value) {
    		throw new Error_1("<XAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get tickOpacity() {
    		throw new Error_1("<XAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set tickOpacity(value) {
    		throw new Error_1("<XAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get labelFormat() {
    		throw new Error_1("<XAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set labelFormat(value) {
    		throw new Error_1("<XAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get labelOffset() {
    		throw new Error_1("<XAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set labelOffset(value) {
    		throw new Error_1("<XAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get labelRotate() {
    		throw new Error_1("<XAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set labelRotate(value) {
    		throw new Error_1("<XAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get labelFont() {
    		throw new Error_1("<XAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set labelFont(value) {
    		throw new Error_1("<XAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get labelFontSize() {
    		throw new Error_1("<XAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set labelFontSize(value) {
    		throw new Error_1("<XAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get labelFontWeight() {
    		throw new Error_1("<XAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set labelFontWeight(value) {
    		throw new Error_1("<XAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get labelOpacity() {
    		throw new Error_1("<XAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set labelOpacity(value) {
    		throw new Error_1("<XAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get labelColor() {
    		throw new Error_1("<XAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set labelColor(value) {
    		throw new Error_1("<XAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get titleHjust() {
    		throw new Error_1("<XAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set titleHjust(value) {
    		throw new Error_1("<XAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get titleXOffset() {
    		throw new Error_1("<XAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set titleXOffset(value) {
    		throw new Error_1("<XAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get titleVjust() {
    		throw new Error_1("<XAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set titleVjust(value) {
    		throw new Error_1("<XAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get titleYOffset() {
    		throw new Error_1("<XAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set titleYOffset(value) {
    		throw new Error_1("<XAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get title() {
    		throw new Error_1("<XAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set title(value) {
    		throw new Error_1("<XAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get titleColor() {
    		throw new Error_1("<XAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set titleColor(value) {
    		throw new Error_1("<XAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get titleFont() {
    		throw new Error_1("<XAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set titleFont(value) {
    		throw new Error_1("<XAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get titleFontSize() {
    		throw new Error_1("<XAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set titleFontSize(value) {
    		throw new Error_1("<XAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get titleFontWeight() {
    		throw new Error_1("<XAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set titleFontWeight(value) {
    		throw new Error_1("<XAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get titleOpacity() {
    		throw new Error_1("<XAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set titleOpacity(value) {
    		throw new Error_1("<XAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get titleRotation() {
    		throw new Error_1("<XAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set titleRotation(value) {
    		throw new Error_1("<XAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get titleAnchorPoint() {
    		throw new Error_1("<XAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set titleAnchorPoint(value) {
    		throw new Error_1("<XAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get transition() {
    		throw new Error_1("<XAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set transition(value) {
    		throw new Error_1("<XAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@snlab/florence/src/components/Guides/Axes/YAxis.svelte generated by Svelte v3.21.0 */

    const { Error: Error_1$1 } = globals;
    const file$4 = "node_modules/@snlab/florence/src/components/Guides/Axes/YAxis.svelte";

    // (126:2) {#if baseLine}
    function create_if_block_2$3(ctx) {
    	let current;

    	const line_spread_levels = [
    		/*baseLineCoordinates*/ ctx[23],
    		{ strokeWidth: /*baseLineWidth*/ ctx[3] },
    		{ opacity: /*baseLineOpacity*/ ctx[2] },
    		{ stroke: /*baseLineColor*/ ctx[1] }
    	];

    	let line_props = {};

    	for (let i = 0; i < line_spread_levels.length; i += 1) {
    		line_props = assign(line_props, line_spread_levels[i]);
    	}

    	const line = new Line({ props: line_props, $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(line.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(line, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const line_changes = (dirty[0] & /*baseLineCoordinates, baseLineWidth, baseLineOpacity, baseLineColor*/ 8388622)
    			? get_spread_update(line_spread_levels, [
    					dirty[0] & /*baseLineCoordinates*/ 8388608 && get_spread_object(/*baseLineCoordinates*/ ctx[23]),
    					dirty[0] & /*baseLineWidth*/ 8 && { strokeWidth: /*baseLineWidth*/ ctx[3] },
    					dirty[0] & /*baseLineOpacity*/ 4 && { opacity: /*baseLineOpacity*/ ctx[2] },
    					dirty[0] & /*baseLineColor*/ 2 && { stroke: /*baseLineColor*/ ctx[1] }
    				])
    			: {};

    			line.$set(line_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(line.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(line.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(line, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$3.name,
    		type: "if",
    		source: "(126:2) {#if baseLine}",
    		ctx
    	});

    	return block;
    }

    // (135:2) {#if ticks}
    function create_if_block_1$4(ctx) {
    	let current;

    	const linelayer_spread_levels = [
    		/*tickCoordinates*/ ctx[24],
    		{ strokeWidth: /*tickWidth*/ ctx[5] },
    		{ opacity: /*tickOpacity*/ ctx[7] },
    		{ stroke: /*tickColor*/ ctx[6] },
    		{ transition: /*transition*/ ctx[22] }
    	];

    	let linelayer_props = {};

    	for (let i = 0; i < linelayer_spread_levels.length; i += 1) {
    		linelayer_props = assign(linelayer_props, linelayer_spread_levels[i]);
    	}

    	const linelayer = new LineLayer({ props: linelayer_props, $$inline: true });

    	const labellayer_spread_levels = [
    		/*tickLabelCoordinates*/ ctx[26],
    		{ text: /*tickLabelText*/ ctx[25] },
    		{
    			anchorPoint: /*labelAnchorPoint*/ ctx[27]
    		},
    		{ rotation: /*labelRotate*/ ctx[8] },
    		{ fontFamily: /*labelFont*/ ctx[9] },
    		{ fontSize: /*labelFontSize*/ ctx[10] },
    		{ fontWeight: /*labelFontWeight*/ ctx[11] },
    		{ opacity: /*labelOpacity*/ ctx[12] },
    		{ fill: /*labelColor*/ ctx[13] },
    		{ transition: /*transition*/ ctx[22] }
    	];

    	let labellayer_props = {};

    	for (let i = 0; i < labellayer_spread_levels.length; i += 1) {
    		labellayer_props = assign(labellayer_props, labellayer_spread_levels[i]);
    	}

    	const labellayer = new LabelLayer({ props: labellayer_props, $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(linelayer.$$.fragment);
    			create_component(labellayer.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(linelayer, target, anchor);
    			mount_component(labellayer, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const linelayer_changes = (dirty[0] & /*tickCoordinates, tickWidth, tickOpacity, tickColor, transition*/ 20971744)
    			? get_spread_update(linelayer_spread_levels, [
    					dirty[0] & /*tickCoordinates*/ 16777216 && get_spread_object(/*tickCoordinates*/ ctx[24]),
    					dirty[0] & /*tickWidth*/ 32 && { strokeWidth: /*tickWidth*/ ctx[5] },
    					dirty[0] & /*tickOpacity*/ 128 && { opacity: /*tickOpacity*/ ctx[7] },
    					dirty[0] & /*tickColor*/ 64 && { stroke: /*tickColor*/ ctx[6] },
    					dirty[0] & /*transition*/ 4194304 && { transition: /*transition*/ ctx[22] }
    				])
    			: {};

    			linelayer.$set(linelayer_changes);

    			const labellayer_changes = (dirty[0] & /*tickLabelCoordinates, tickLabelText, labelAnchorPoint, labelRotate, labelFont, labelFontSize, labelFontWeight, labelOpacity, labelColor, transition*/ 239091456)
    			? get_spread_update(labellayer_spread_levels, [
    					dirty[0] & /*tickLabelCoordinates*/ 67108864 && get_spread_object(/*tickLabelCoordinates*/ ctx[26]),
    					dirty[0] & /*tickLabelText*/ 33554432 && { text: /*tickLabelText*/ ctx[25] },
    					dirty[0] & /*labelAnchorPoint*/ 134217728 && {
    						anchorPoint: /*labelAnchorPoint*/ ctx[27]
    					},
    					dirty[0] & /*labelRotate*/ 256 && { rotation: /*labelRotate*/ ctx[8] },
    					dirty[0] & /*labelFont*/ 512 && { fontFamily: /*labelFont*/ ctx[9] },
    					dirty[0] & /*labelFontSize*/ 1024 && { fontSize: /*labelFontSize*/ ctx[10] },
    					dirty[0] & /*labelFontWeight*/ 2048 && { fontWeight: /*labelFontWeight*/ ctx[11] },
    					dirty[0] & /*labelOpacity*/ 4096 && { opacity: /*labelOpacity*/ ctx[12] },
    					dirty[0] & /*labelColor*/ 8192 && { fill: /*labelColor*/ ctx[13] },
    					dirty[0] & /*transition*/ 4194304 && { transition: /*transition*/ ctx[22] }
    				])
    			: {};

    			labellayer.$set(labellayer_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(linelayer.$$.fragment, local);
    			transition_in(labellayer.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(linelayer.$$.fragment, local);
    			transition_out(labellayer.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(linelayer, detaching);
    			destroy_component(labellayer, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$4.name,
    		type: "if",
    		source: "(135:2) {#if ticks}",
    		ctx
    	});

    	return block;
    }

    // (158:2) {#if title.length > 0}
    function create_if_block$4(ctx) {
    	let current;

    	const label_spread_levels = [
    		/*titleCoordinates*/ ctx[28],
    		{ text: /*title*/ ctx[14] },
    		{
    			anchorPoint: /*titleAnchorPoint*/ ctx[21]
    		},
    		{ rotation: /*titleRotation*/ ctx[20] },
    		{ fontFamily: /*titleFont*/ ctx[16] },
    		{ fontSize: /*titleFontSize*/ ctx[17] },
    		{ fontWeight: /*titleFontWeight*/ ctx[18] },
    		{ opacity: /*titleOpacity*/ ctx[19] },
    		{ fill: /*titleColor*/ ctx[15] }
    	];

    	let label_props = {};

    	for (let i = 0; i < label_spread_levels.length; i += 1) {
    		label_props = assign(label_props, label_spread_levels[i]);
    	}

    	const label = new Label({ props: label_props, $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(label.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(label, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const label_changes = (dirty[0] & /*titleCoordinates, title, titleAnchorPoint, titleRotation, titleFont, titleFontSize, titleFontWeight, titleOpacity, titleColor*/ 272613376)
    			? get_spread_update(label_spread_levels, [
    					dirty[0] & /*titleCoordinates*/ 268435456 && get_spread_object(/*titleCoordinates*/ ctx[28]),
    					dirty[0] & /*title*/ 16384 && { text: /*title*/ ctx[14] },
    					dirty[0] & /*titleAnchorPoint*/ 2097152 && {
    						anchorPoint: /*titleAnchorPoint*/ ctx[21]
    					},
    					dirty[0] & /*titleRotation*/ 1048576 && { rotation: /*titleRotation*/ ctx[20] },
    					dirty[0] & /*titleFont*/ 65536 && { fontFamily: /*titleFont*/ ctx[16] },
    					dirty[0] & /*titleFontSize*/ 131072 && { fontSize: /*titleFontSize*/ ctx[17] },
    					dirty[0] & /*titleFontWeight*/ 262144 && { fontWeight: /*titleFontWeight*/ ctx[18] },
    					dirty[0] & /*titleOpacity*/ 524288 && { opacity: /*titleOpacity*/ ctx[19] },
    					dirty[0] & /*titleColor*/ 32768 && { fill: /*titleColor*/ ctx[15] }
    				])
    			: {};

    			label.$set(label_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(label.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(label.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(label, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$4.name,
    		type: "if",
    		source: "(158:2) {#if title.length > 0}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$b(ctx) {
    	let g;
    	let if_block0_anchor;
    	let if_block1_anchor;
    	let current;
    	let if_block0 = /*baseLine*/ ctx[0] && create_if_block_2$3(ctx);
    	let if_block1 = /*ticks*/ ctx[4] && create_if_block_1$4(ctx);
    	let if_block2 = /*title*/ ctx[14].length > 0 && create_if_block$4(ctx);

    	const block = {
    		c: function create() {
    			g = svg_element("g");
    			if (if_block0) if_block0.c();
    			if_block0_anchor = empty();
    			if (if_block1) if_block1.c();
    			if_block1_anchor = empty();
    			if (if_block2) if_block2.c();
    			attr_dev(g, "class", "y-axis");
    			add_location(g, file$4, 123, 0, 3469);
    		},
    		l: function claim(nodes) {
    			throw new Error_1$1("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g, anchor);
    			if (if_block0) if_block0.m(g, null);
    			append_dev(g, if_block0_anchor);
    			if (if_block1) if_block1.m(g, null);
    			append_dev(g, if_block1_anchor);
    			if (if_block2) if_block2.m(g, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*baseLine*/ ctx[0]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty[0] & /*baseLine*/ 1) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_2$3(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(g, if_block0_anchor);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (/*ticks*/ ctx[4]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty[0] & /*ticks*/ 16) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_1$4(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(g, if_block1_anchor);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (/*title*/ ctx[14].length > 0) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);

    					if (dirty[0] & /*title*/ 16384) {
    						transition_in(if_block2, 1);
    					}
    				} else {
    					if_block2 = create_if_block$4(ctx);
    					if_block2.c();
    					transition_in(if_block2, 1);
    					if_block2.m(g, null);
    				}
    			} else if (if_block2) {
    				group_outros();

    				transition_out(if_block2, 1, 1, () => {
    					if_block2 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(if_block1);
    			transition_in(if_block2);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(if_block1);
    			transition_out(if_block2);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$b.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$b($$self, $$props, $$invalidate) {
    	let $sectionContext;
    	let { flip = false } = $$props;
    	let { scale = undefined } = $$props;
    	let { baseLine = true } = $$props;
    	let { baseLineColor = "black" } = $$props;
    	let { baseLineOpacity = 1 } = $$props;
    	let { baseLineWidth = 1 } = $$props;
    	let { hjust = "left" } = $$props;
    	let { xOffset = 0 } = $$props;
    	let { ticks = true } = $$props;
    	let { tickCount = 10 } = $$props;
    	let { tickExtra = false } = $$props;
    	let { tickValues = undefined } = $$props;
    	let { tickSize = 5 } = $$props;
    	let { tickWidth = 0.5 } = $$props;
    	let { tickColor = "black" } = $$props;
    	let { tickOpacity = 1 } = $$props;
    	let { labelFormat = undefined } = $$props;
    	let { labelOffset = 2 } = $$props;
    	let { labelRotate = 0 } = $$props;
    	let { labelFont = "Helvetica" } = $$props;
    	let { labelFontSize = 10 } = $$props;
    	let { labelFontWeight = "normal" } = $$props;
    	let { labelOpacity = 1 } = $$props;
    	let { labelColor = "black" } = $$props;
    	let { titleHjust = "axis" } = $$props;
    	let { titleXOffset = "axis" } = $$props;
    	let { titleVjust = "center" } = $$props;
    	let { titleYOffset = 0 } = $$props;
    	let { title = "" } = $$props;
    	let { titleColor = "black" } = $$props;
    	let { titleFont = "Helvetica" } = $$props;
    	let { titleFontSize = "12" } = $$props;
    	let { titleFontWeight = "normal" } = $$props;
    	let { titleOpacity = 1 } = $$props;
    	let { titleRotation = -90 } = $$props;
    	let { titleAnchorPoint = "center" } = $$props;
    	let { transition = undefined } = $$props;

    	// Contexts
    	const sectionContext = subscribe$2();

    	validate_store(sectionContext, "sectionContext");
    	component_subscribe($$self, sectionContext, value => $$invalidate(44, $sectionContext = value));

    	const writable_props = [
    		"flip",
    		"scale",
    		"baseLine",
    		"baseLineColor",
    		"baseLineOpacity",
    		"baseLineWidth",
    		"hjust",
    		"xOffset",
    		"ticks",
    		"tickCount",
    		"tickExtra",
    		"tickValues",
    		"tickSize",
    		"tickWidth",
    		"tickColor",
    		"tickOpacity",
    		"labelFormat",
    		"labelOffset",
    		"labelRotate",
    		"labelFont",
    		"labelFontSize",
    		"labelFontWeight",
    		"labelOpacity",
    		"labelColor",
    		"titleHjust",
    		"titleXOffset",
    		"titleVjust",
    		"titleYOffset",
    		"title",
    		"titleColor",
    		"titleFont",
    		"titleFontSize",
    		"titleFontWeight",
    		"titleOpacity",
    		"titleRotation",
    		"titleAnchorPoint",
    		"transition"
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<YAxis> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("YAxis", $$slots, []);

    	$$self.$set = $$props => {
    		if ("flip" in $$props) $$invalidate(30, flip = $$props.flip);
    		if ("scale" in $$props) $$invalidate(31, scale = $$props.scale);
    		if ("baseLine" in $$props) $$invalidate(0, baseLine = $$props.baseLine);
    		if ("baseLineColor" in $$props) $$invalidate(1, baseLineColor = $$props.baseLineColor);
    		if ("baseLineOpacity" in $$props) $$invalidate(2, baseLineOpacity = $$props.baseLineOpacity);
    		if ("baseLineWidth" in $$props) $$invalidate(3, baseLineWidth = $$props.baseLineWidth);
    		if ("hjust" in $$props) $$invalidate(32, hjust = $$props.hjust);
    		if ("xOffset" in $$props) $$invalidate(33, xOffset = $$props.xOffset);
    		if ("ticks" in $$props) $$invalidate(4, ticks = $$props.ticks);
    		if ("tickCount" in $$props) $$invalidate(34, tickCount = $$props.tickCount);
    		if ("tickExtra" in $$props) $$invalidate(35, tickExtra = $$props.tickExtra);
    		if ("tickValues" in $$props) $$invalidate(36, tickValues = $$props.tickValues);
    		if ("tickSize" in $$props) $$invalidate(37, tickSize = $$props.tickSize);
    		if ("tickWidth" in $$props) $$invalidate(5, tickWidth = $$props.tickWidth);
    		if ("tickColor" in $$props) $$invalidate(6, tickColor = $$props.tickColor);
    		if ("tickOpacity" in $$props) $$invalidate(7, tickOpacity = $$props.tickOpacity);
    		if ("labelFormat" in $$props) $$invalidate(38, labelFormat = $$props.labelFormat);
    		if ("labelOffset" in $$props) $$invalidate(39, labelOffset = $$props.labelOffset);
    		if ("labelRotate" in $$props) $$invalidate(8, labelRotate = $$props.labelRotate);
    		if ("labelFont" in $$props) $$invalidate(9, labelFont = $$props.labelFont);
    		if ("labelFontSize" in $$props) $$invalidate(10, labelFontSize = $$props.labelFontSize);
    		if ("labelFontWeight" in $$props) $$invalidate(11, labelFontWeight = $$props.labelFontWeight);
    		if ("labelOpacity" in $$props) $$invalidate(12, labelOpacity = $$props.labelOpacity);
    		if ("labelColor" in $$props) $$invalidate(13, labelColor = $$props.labelColor);
    		if ("titleHjust" in $$props) $$invalidate(40, titleHjust = $$props.titleHjust);
    		if ("titleXOffset" in $$props) $$invalidate(41, titleXOffset = $$props.titleXOffset);
    		if ("titleVjust" in $$props) $$invalidate(42, titleVjust = $$props.titleVjust);
    		if ("titleYOffset" in $$props) $$invalidate(43, titleYOffset = $$props.titleYOffset);
    		if ("title" in $$props) $$invalidate(14, title = $$props.title);
    		if ("titleColor" in $$props) $$invalidate(15, titleColor = $$props.titleColor);
    		if ("titleFont" in $$props) $$invalidate(16, titleFont = $$props.titleFont);
    		if ("titleFontSize" in $$props) $$invalidate(17, titleFontSize = $$props.titleFontSize);
    		if ("titleFontWeight" in $$props) $$invalidate(18, titleFontWeight = $$props.titleFontWeight);
    		if ("titleOpacity" in $$props) $$invalidate(19, titleOpacity = $$props.titleOpacity);
    		if ("titleRotation" in $$props) $$invalidate(20, titleRotation = $$props.titleRotation);
    		if ("titleAnchorPoint" in $$props) $$invalidate(21, titleAnchorPoint = $$props.titleAnchorPoint);
    		if ("transition" in $$props) $$invalidate(22, transition = $$props.transition);
    	};

    	$$self.$capture_state = () => ({
    		Line,
    		LineLayer,
    		Label,
    		LabelLayer,
    		SectionContext,
    		getAbsoluteXPosition,
    		getBaseLineCoordinatesYAxis,
    		getTickPositions,
    		getTickCoordinatesYAxis,
    		getFormat,
    		getTickLabelCoordinatesYAxis,
    		getTextWidth,
    		getTitleCoordinatesYAxis,
    		flip,
    		scale,
    		baseLine,
    		baseLineColor,
    		baseLineOpacity,
    		baseLineWidth,
    		hjust,
    		xOffset,
    		ticks,
    		tickCount,
    		tickExtra,
    		tickValues,
    		tickSize,
    		tickWidth,
    		tickColor,
    		tickOpacity,
    		labelFormat,
    		labelOffset,
    		labelRotate,
    		labelFont,
    		labelFontSize,
    		labelFontWeight,
    		labelOpacity,
    		labelColor,
    		titleHjust,
    		titleXOffset,
    		titleVjust,
    		titleYOffset,
    		title,
    		titleColor,
    		titleFont,
    		titleFontSize,
    		titleFontWeight,
    		titleOpacity,
    		titleRotation,
    		titleAnchorPoint,
    		transition,
    		sectionContext,
    		$sectionContext,
    		scaleY,
    		xAbsolute,
    		baseLineCoordinates,
    		tickPositions,
    		tickCoordinates,
    		format,
    		tickLabelText,
    		tickLabelCoordinates,
    		labelAnchorPoint,
    		tickLabelWidth,
    		axisWidth,
    		titleCoordinates
    	});

    	$$self.$inject_state = $$props => {
    		if ("flip" in $$props) $$invalidate(30, flip = $$props.flip);
    		if ("scale" in $$props) $$invalidate(31, scale = $$props.scale);
    		if ("baseLine" in $$props) $$invalidate(0, baseLine = $$props.baseLine);
    		if ("baseLineColor" in $$props) $$invalidate(1, baseLineColor = $$props.baseLineColor);
    		if ("baseLineOpacity" in $$props) $$invalidate(2, baseLineOpacity = $$props.baseLineOpacity);
    		if ("baseLineWidth" in $$props) $$invalidate(3, baseLineWidth = $$props.baseLineWidth);
    		if ("hjust" in $$props) $$invalidate(32, hjust = $$props.hjust);
    		if ("xOffset" in $$props) $$invalidate(33, xOffset = $$props.xOffset);
    		if ("ticks" in $$props) $$invalidate(4, ticks = $$props.ticks);
    		if ("tickCount" in $$props) $$invalidate(34, tickCount = $$props.tickCount);
    		if ("tickExtra" in $$props) $$invalidate(35, tickExtra = $$props.tickExtra);
    		if ("tickValues" in $$props) $$invalidate(36, tickValues = $$props.tickValues);
    		if ("tickSize" in $$props) $$invalidate(37, tickSize = $$props.tickSize);
    		if ("tickWidth" in $$props) $$invalidate(5, tickWidth = $$props.tickWidth);
    		if ("tickColor" in $$props) $$invalidate(6, tickColor = $$props.tickColor);
    		if ("tickOpacity" in $$props) $$invalidate(7, tickOpacity = $$props.tickOpacity);
    		if ("labelFormat" in $$props) $$invalidate(38, labelFormat = $$props.labelFormat);
    		if ("labelOffset" in $$props) $$invalidate(39, labelOffset = $$props.labelOffset);
    		if ("labelRotate" in $$props) $$invalidate(8, labelRotate = $$props.labelRotate);
    		if ("labelFont" in $$props) $$invalidate(9, labelFont = $$props.labelFont);
    		if ("labelFontSize" in $$props) $$invalidate(10, labelFontSize = $$props.labelFontSize);
    		if ("labelFontWeight" in $$props) $$invalidate(11, labelFontWeight = $$props.labelFontWeight);
    		if ("labelOpacity" in $$props) $$invalidate(12, labelOpacity = $$props.labelOpacity);
    		if ("labelColor" in $$props) $$invalidate(13, labelColor = $$props.labelColor);
    		if ("titleHjust" in $$props) $$invalidate(40, titleHjust = $$props.titleHjust);
    		if ("titleXOffset" in $$props) $$invalidate(41, titleXOffset = $$props.titleXOffset);
    		if ("titleVjust" in $$props) $$invalidate(42, titleVjust = $$props.titleVjust);
    		if ("titleYOffset" in $$props) $$invalidate(43, titleYOffset = $$props.titleYOffset);
    		if ("title" in $$props) $$invalidate(14, title = $$props.title);
    		if ("titleColor" in $$props) $$invalidate(15, titleColor = $$props.titleColor);
    		if ("titleFont" in $$props) $$invalidate(16, titleFont = $$props.titleFont);
    		if ("titleFontSize" in $$props) $$invalidate(17, titleFontSize = $$props.titleFontSize);
    		if ("titleFontWeight" in $$props) $$invalidate(18, titleFontWeight = $$props.titleFontWeight);
    		if ("titleOpacity" in $$props) $$invalidate(19, titleOpacity = $$props.titleOpacity);
    		if ("titleRotation" in $$props) $$invalidate(20, titleRotation = $$props.titleRotation);
    		if ("titleAnchorPoint" in $$props) $$invalidate(21, titleAnchorPoint = $$props.titleAnchorPoint);
    		if ("transition" in $$props) $$invalidate(22, transition = $$props.transition);
    		if ("scaleY" in $$props) $$invalidate(45, scaleY = $$props.scaleY);
    		if ("xAbsolute" in $$props) $$invalidate(46, xAbsolute = $$props.xAbsolute);
    		if ("baseLineCoordinates" in $$props) $$invalidate(23, baseLineCoordinates = $$props.baseLineCoordinates);
    		if ("tickPositions" in $$props) $$invalidate(47, tickPositions = $$props.tickPositions);
    		if ("tickCoordinates" in $$props) $$invalidate(24, tickCoordinates = $$props.tickCoordinates);
    		if ("format" in $$props) $$invalidate(48, format = $$props.format);
    		if ("tickLabelText" in $$props) $$invalidate(25, tickLabelText = $$props.tickLabelText);
    		if ("tickLabelCoordinates" in $$props) $$invalidate(26, tickLabelCoordinates = $$props.tickLabelCoordinates);
    		if ("labelAnchorPoint" in $$props) $$invalidate(27, labelAnchorPoint = $$props.labelAnchorPoint);
    		if ("tickLabelWidth" in $$props) $$invalidate(49, tickLabelWidth = $$props.tickLabelWidth);
    		if ("axisWidth" in $$props) $$invalidate(50, axisWidth = $$props.axisWidth);
    		if ("titleCoordinates" in $$props) $$invalidate(28, titleCoordinates = $$props.titleCoordinates);
    	};

    	let scaleY;
    	let xAbsolute;
    	let baseLineCoordinates;
    	let tickPositions;
    	let tickCoordinates;
    	let format;
    	let tickLabelText;
    	let tickLabelCoordinates;
    	let labelAnchorPoint;
    	let tickLabelWidth;
    	let axisWidth;
    	let titleCoordinates;

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[1] & /*$sectionContext*/ 8192) {
    			// Make sure not polar
    			 {
    				if ($sectionContext.transformation === "polar") {
    					throw new Error("Axes do'nt work with polar coordinates (for now)");
    				}
    			}
    		}

    		if ($$self.$$.dirty[1] & /*scale, $sectionContext*/ 8193) {
    			// Scale
    			 $$invalidate(45, scaleY = scale
    			? scale.copy().range($sectionContext.rangeY)
    			: $sectionContext.scaleY);
    		}

    		if ($$self.$$.dirty[1] & /*hjust, xOffset, $sectionContext*/ 8198) {
    			// Absolute position (in pixels)
    			 $$invalidate(46, xAbsolute = getAbsoluteXPosition(hjust, xOffset, $sectionContext));
    		}

    		if ($$self.$$.dirty[1] & /*xAbsolute, $sectionContext*/ 40960) {
    			// Baseline
    			 $$invalidate(23, baseLineCoordinates = getBaseLineCoordinatesYAxis(xAbsolute, $sectionContext));
    		}

    		if ($$self.$$.dirty[1] & /*tickValues, scaleY, tickCount, tickExtra, $sectionContext*/ 24632) {
    			// Ticks
    			 $$invalidate(47, tickPositions = getTickPositions(tickValues, scaleY, tickCount, tickExtra, $sectionContext.zoomIdentity
    			? {
    					t: $sectionContext.zoomIdentity.y,
    					k: $sectionContext.zoomIdentity.ky
    				}
    			: undefined));
    		}

    		if ($$self.$$.dirty[0] & /*flip*/ 1073741824 | $$self.$$.dirty[1] & /*tickPositions, xAbsolute, scaleY, $sectionContext, tickSize*/ 122944) {
    			 $$invalidate(24, tickCoordinates = getTickCoordinatesYAxis(tickPositions, xAbsolute, scaleY, $sectionContext.finalScaleX, tickSize, flip));
    		}

    		if ($$self.$$.dirty[0] & /*ticks*/ 16 | $$self.$$.dirty[1] & /*labelFormat, $sectionContext*/ 8320) {
    			// Tick labels
    			 $$invalidate(48, format = getFormat(labelFormat, $sectionContext.scaleY, ticks.length));
    		}

    		if ($$self.$$.dirty[1] & /*tickPositions, format*/ 196608) {
    			 $$invalidate(25, tickLabelText = tickPositions.map(format));
    		}

    		if ($$self.$$.dirty[0] & /*tickCoordinates, flip*/ 1090519040 | $$self.$$.dirty[1] & /*$sectionContext, labelOffset*/ 8448) {
    			 $$invalidate(26, tickLabelCoordinates = getTickLabelCoordinatesYAxis(tickCoordinates, $sectionContext, labelOffset, flip));
    		}

    		if ($$self.$$.dirty[0] & /*flip*/ 1073741824) {
    			 $$invalidate(27, labelAnchorPoint = flip ? "l" : "r");
    		}

    		if ($$self.$$.dirty[0] & /*tickLabelText, labelFontSize, labelFont*/ 33555968) {
    			 $$invalidate(49, tickLabelWidth = getTextWidth(tickLabelText[tickLabelText.length - 1], labelFontSize, labelFont));
    		}

    		if ($$self.$$.dirty[0] & /*baseLineWidth*/ 8 | $$self.$$.dirty[1] & /*tickSize, labelOffset, tickLabelWidth*/ 262464) {
    			// Title
    			 $$invalidate(50, axisWidth = baseLineWidth + tickSize + labelOffset + tickLabelWidth);
    		}

    		if ($$self.$$.dirty[0] & /*flip, titleFontSize*/ 1073872896 | $$self.$$.dirty[1] & /*titleHjust, titleXOffset, titleVjust, titleYOffset, $sectionContext, axisWidth, xAbsolute*/ 572928) {
    			 $$invalidate(28, titleCoordinates = getTitleCoordinatesYAxis(titleHjust, titleXOffset, titleVjust, titleYOffset, $sectionContext, flip, axisWidth, titleFontSize, xAbsolute));
    		}
    	};

    	return [
    		baseLine,
    		baseLineColor,
    		baseLineOpacity,
    		baseLineWidth,
    		ticks,
    		tickWidth,
    		tickColor,
    		tickOpacity,
    		labelRotate,
    		labelFont,
    		labelFontSize,
    		labelFontWeight,
    		labelOpacity,
    		labelColor,
    		title,
    		titleColor,
    		titleFont,
    		titleFontSize,
    		titleFontWeight,
    		titleOpacity,
    		titleRotation,
    		titleAnchorPoint,
    		transition,
    		baseLineCoordinates,
    		tickCoordinates,
    		tickLabelText,
    		tickLabelCoordinates,
    		labelAnchorPoint,
    		titleCoordinates,
    		sectionContext,
    		flip,
    		scale,
    		hjust,
    		xOffset,
    		tickCount,
    		tickExtra,
    		tickValues,
    		tickSize,
    		labelFormat,
    		labelOffset,
    		titleHjust,
    		titleXOffset,
    		titleVjust,
    		titleYOffset
    	];
    }

    class YAxis extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance$b,
    			create_fragment$b,
    			safe_not_equal,
    			{
    				flip: 30,
    				scale: 31,
    				baseLine: 0,
    				baseLineColor: 1,
    				baseLineOpacity: 2,
    				baseLineWidth: 3,
    				hjust: 32,
    				xOffset: 33,
    				ticks: 4,
    				tickCount: 34,
    				tickExtra: 35,
    				tickValues: 36,
    				tickSize: 37,
    				tickWidth: 5,
    				tickColor: 6,
    				tickOpacity: 7,
    				labelFormat: 38,
    				labelOffset: 39,
    				labelRotate: 8,
    				labelFont: 9,
    				labelFontSize: 10,
    				labelFontWeight: 11,
    				labelOpacity: 12,
    				labelColor: 13,
    				titleHjust: 40,
    				titleXOffset: 41,
    				titleVjust: 42,
    				titleYOffset: 43,
    				title: 14,
    				titleColor: 15,
    				titleFont: 16,
    				titleFontSize: 17,
    				titleFontWeight: 18,
    				titleOpacity: 19,
    				titleRotation: 20,
    				titleAnchorPoint: 21,
    				transition: 22
    			},
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "YAxis",
    			options,
    			id: create_fragment$b.name
    		});
    	}

    	get flip() {
    		throw new Error_1$1("<YAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set flip(value) {
    		throw new Error_1$1("<YAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get scale() {
    		throw new Error_1$1("<YAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set scale(value) {
    		throw new Error_1$1("<YAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get baseLine() {
    		throw new Error_1$1("<YAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set baseLine(value) {
    		throw new Error_1$1("<YAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get baseLineColor() {
    		throw new Error_1$1("<YAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set baseLineColor(value) {
    		throw new Error_1$1("<YAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get baseLineOpacity() {
    		throw new Error_1$1("<YAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set baseLineOpacity(value) {
    		throw new Error_1$1("<YAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get baseLineWidth() {
    		throw new Error_1$1("<YAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set baseLineWidth(value) {
    		throw new Error_1$1("<YAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get hjust() {
    		throw new Error_1$1("<YAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set hjust(value) {
    		throw new Error_1$1("<YAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get xOffset() {
    		throw new Error_1$1("<YAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set xOffset(value) {
    		throw new Error_1$1("<YAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ticks() {
    		throw new Error_1$1("<YAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ticks(value) {
    		throw new Error_1$1("<YAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get tickCount() {
    		throw new Error_1$1("<YAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set tickCount(value) {
    		throw new Error_1$1("<YAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get tickExtra() {
    		throw new Error_1$1("<YAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set tickExtra(value) {
    		throw new Error_1$1("<YAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get tickValues() {
    		throw new Error_1$1("<YAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set tickValues(value) {
    		throw new Error_1$1("<YAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get tickSize() {
    		throw new Error_1$1("<YAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set tickSize(value) {
    		throw new Error_1$1("<YAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get tickWidth() {
    		throw new Error_1$1("<YAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set tickWidth(value) {
    		throw new Error_1$1("<YAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get tickColor() {
    		throw new Error_1$1("<YAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set tickColor(value) {
    		throw new Error_1$1("<YAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get tickOpacity() {
    		throw new Error_1$1("<YAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set tickOpacity(value) {
    		throw new Error_1$1("<YAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get labelFormat() {
    		throw new Error_1$1("<YAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set labelFormat(value) {
    		throw new Error_1$1("<YAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get labelOffset() {
    		throw new Error_1$1("<YAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set labelOffset(value) {
    		throw new Error_1$1("<YAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get labelRotate() {
    		throw new Error_1$1("<YAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set labelRotate(value) {
    		throw new Error_1$1("<YAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get labelFont() {
    		throw new Error_1$1("<YAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set labelFont(value) {
    		throw new Error_1$1("<YAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get labelFontSize() {
    		throw new Error_1$1("<YAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set labelFontSize(value) {
    		throw new Error_1$1("<YAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get labelFontWeight() {
    		throw new Error_1$1("<YAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set labelFontWeight(value) {
    		throw new Error_1$1("<YAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get labelOpacity() {
    		throw new Error_1$1("<YAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set labelOpacity(value) {
    		throw new Error_1$1("<YAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get labelColor() {
    		throw new Error_1$1("<YAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set labelColor(value) {
    		throw new Error_1$1("<YAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get titleHjust() {
    		throw new Error_1$1("<YAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set titleHjust(value) {
    		throw new Error_1$1("<YAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get titleXOffset() {
    		throw new Error_1$1("<YAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set titleXOffset(value) {
    		throw new Error_1$1("<YAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get titleVjust() {
    		throw new Error_1$1("<YAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set titleVjust(value) {
    		throw new Error_1$1("<YAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get titleYOffset() {
    		throw new Error_1$1("<YAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set titleYOffset(value) {
    		throw new Error_1$1("<YAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get title() {
    		throw new Error_1$1("<YAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set title(value) {
    		throw new Error_1$1("<YAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get titleColor() {
    		throw new Error_1$1("<YAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set titleColor(value) {
    		throw new Error_1$1("<YAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get titleFont() {
    		throw new Error_1$1("<YAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set titleFont(value) {
    		throw new Error_1$1("<YAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get titleFontSize() {
    		throw new Error_1$1("<YAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set titleFontSize(value) {
    		throw new Error_1$1("<YAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get titleFontWeight() {
    		throw new Error_1$1("<YAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set titleFontWeight(value) {
    		throw new Error_1$1("<YAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get titleOpacity() {
    		throw new Error_1$1("<YAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set titleOpacity(value) {
    		throw new Error_1$1("<YAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get titleRotation() {
    		throw new Error_1$1("<YAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set titleRotation(value) {
    		throw new Error_1$1("<YAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get titleAnchorPoint() {
    		throw new Error_1$1("<YAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set titleAnchorPoint(value) {
    		throw new Error_1$1("<YAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get transition() {
    		throw new Error_1$1("<YAxis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set transition(value) {
    		throw new Error_1$1("<YAxis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    function createGeoScales (bbox) {
      const domainX = bbox.x;
      const domainY = bbox.y;

      let rangeX;
      let rangeY;

      const scaleX = linear$1().domain(domainX);
      const scaleY = linear$1().domain(domainY);

      const setRangeX = range => {
        rangeX = range;
        updateRanges();
        return scaleX
      };

      const setRangeY = range => {
        rangeY = range;
        updateRanges();
        return scaleY
      };

      function updateRanges () {
        if (rangeX && rangeY) {
          const rangeDeltaX = Math.abs(rangeX[1] - rangeX[0]);
          const rangeDeltaY = Math.abs(rangeY[1] - rangeY[0]);

          const midX = (rangeX[0] + rangeX[1]) / 2;
          const midY = (rangeY[0] + rangeY[1]) / 2;

          const scalingFactorX = rangeDeltaX / (domainX[1] - domainX[0]);
          const scalingFactorY = rangeDeltaY / (domainY[1] - domainY[0]);

          if (scalingFactorX < scalingFactorY) {
            const fromMidY = (domainY[1] - domainY[0]) / 2 * scalingFactorX;
            const newRangeY = [midY - fromMidY, midY + fromMidY];

            if (rangeY[0] > rangeY[1]) newRangeY.reverse();

            scaleX.range(rangeX);
            scaleY.range(newRangeY);
          }

          if (scalingFactorX >= scalingFactorY) {
            const fromMidX = (domainX[1] - domainX[0]) / 2 * scalingFactorY;
            const newRangeX = [midX - fromMidX, midX + fromMidX];

            scaleX.range(newRangeX);
            scaleY.range(rangeY);
          }
        }
      }

      const dummyScaleObject = {
        scaleX: { range: setRangeX, copy: function () { return this } },
        scaleY: { range: setRangeY, copy: function () { return this } }
      };

      return dummyScaleObject
    }

    /* src/page/component/BaseMap.svelte generated by Svelte v3.21.0 */

    function create_fragment$c(ctx) {
    	let current;

    	const polygonlayer = new PolygonLayer({
    			props: {
    				geometry: /*hex*/ ctx[0].column("$geometry"),
    				stroke: /*func*/ ctx[4],
    				strokeWidth: /*func_1*/ ctx[5],
    				fill: hexFill,
    				onMouseover: /*mouseOverHandler*/ ctx[2],
    				onMouseout: /*func_2*/ ctx[6],
    				onClick: /*mouseClickHandler*/ ctx[3]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(polygonlayer.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(polygonlayer, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const polygonlayer_changes = {};
    			if (dirty & /*hex*/ 1) polygonlayer_changes.geometry = /*hex*/ ctx[0].column("$geometry");
    			if (dirty & /*selectHexId*/ 2) polygonlayer_changes.stroke = /*func*/ ctx[4];
    			if (dirty & /*selectHexId*/ 2) polygonlayer_changes.strokeWidth = /*func_1*/ ctx[5];
    			if (dirty & /*selectHexId*/ 2) polygonlayer_changes.onMouseout = /*func_2*/ ctx[6];
    			polygonlayer.$set(polygonlayer_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(polygonlayer.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(polygonlayer.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(polygonlayer, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$c.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const hexFill = "#b2ded3";

    function instance$c($$self, $$props, $$invalidate) {
    	let { hex } = $$props;

    	////// event Listener
    	// select Hex
    	let selectHexId = null;

    	const mouseOverHandler = e => {
    		$$invalidate(1, selectHexId = e.key);
    	};

    	const mouseClickHandler = () => {
    		clickHexIdWrite.set(selectHexId);
    	};

    	const writable_props = ["hex"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<BaseMap> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("BaseMap", $$slots, []);
    	const func = k => k === selectHexId ? "red" : "white";
    	const func_1 = k => k === selectHexId ? 2 : 1;
    	const func_2 = e => $$invalidate(1, selectHexId = null);

    	$$self.$set = $$props => {
    		if ("hex" in $$props) $$invalidate(0, hex = $$props.hex);
    	};

    	$$self.$capture_state = () => ({
    		clickHexIdWrite,
    		PolygonLayer,
    		hex,
    		hexFill,
    		selectHexId,
    		mouseOverHandler,
    		mouseClickHandler
    	});

    	$$self.$inject_state = $$props => {
    		if ("hex" in $$props) $$invalidate(0, hex = $$props.hex);
    		if ("selectHexId" in $$props) $$invalidate(1, selectHexId = $$props.selectHexId);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [hex, selectHexId, mouseOverHandler, mouseClickHandler, func, func_1, func_2];
    }

    class BaseMap extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$c, create_fragment$c, safe_not_equal, { hex: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "BaseMap",
    			options,
    			id: create_fragment$c.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*hex*/ ctx[0] === undefined && !("hex" in props)) {
    			console.warn("<BaseMap> was created without expected prop 'hex'");
    		}
    	}

    	get hex() {
    		throw new Error("<BaseMap>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set hex(value) {
    		throw new Error("<BaseMap>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const TRIGRAM_HEX = [
      {
        "hex_id": 723,
        "gram": "singapore",
        "n": 708
      },
      {
        "hex_id": 723,
        "gram": "court",
        "n": 483
      },
      {
        "hex_id": 723,
        "gram": "build",
        "n": 429
      },
      {
        "hex_id": 706,
        "gram": "build",
        "n": 399
      },
      {
        "hex_id": 640,
        "gram": "singapore",
        "n": 328
      },
      {
        "hex_id": 706,
        "gram": "singapore",
        "n": 316
      },
      {
        "hex_id": 723,
        "gram": "parliament",
        "n": 287
      },
      {
        "hex_id": 707,
        "gram": "singapore",
        "n": 256
      },
      {
        "hex_id": 553,
        "gram": "school",
        "n": 244
      },
      {
        "hex_id": 707,
        "gram": "build",
        "n": 236
      },
      {
        "hex_id": 723,
        "gram": "house",
        "n": 231
      },
      {
        "hex_id": 607,
        "gram": "north",
        "n": 212
      },
      {
        "hex_id": 690,
        "gram": "singapore",
        "n": 184
      },
      {
        "hex_id": 706,
        "gram": "street",
        "n": 170
      },
      {
        "hex_id": 723,
        "gram": "appeal",
        "n": 170
      },
      {
        "hex_id": 768,
        "gram": "school",
        "n": 169
      },
      {
        "hex_id": 607,
        "gram": "korea",
        "n": 168
      },
      {
        "hex_id": 723,
        "gram": "mp",
        "n": 159
      },
      {
        "hex_id": 463,
        "gram": "nus",
        "n": 156
      },
      {
        "hex_id": 723,
        "gram": "art",
        "n": 154
      },
      {
        "hex_id": 448,
        "gram": "school",
        "n": 152
      },
      {
        "hex_id": 723,
        "gram": "design",
        "n": 152
      },
      {
        "hex_id": 553,
        "gram": "student",
        "n": 147
      },
      {
        "hex_id": 723,
        "gram": "hotel",
        "n": 147
      },
      {
        "hex_id": 659,
        "gram": "orchard",
        "n": 145
      },
      {
        "hex_id": 825,
        "gram": "school",
        "n": 144
      },
      {
        "hex_id": 752,
        "gram": "singapore",
        "n": 143
      },
      {
        "hex_id": 553,
        "gram": "college",
        "n": 141
      },
      {
        "hex_id": 723,
        "gram": "theatre",
        "n": 138
      },
      {
        "hex_id": 607,
        "gram": "summit",
        "n": 137
      },
      {
        "hex_id": 503,
        "gram": "woodland",
        "n": 134
      },
      {
        "hex_id": 723,
        "gram": "bridge",
        "n": 133
      },
      {
        "hex_id": 723,
        "gram": "capitol",
        "n": 133
      },
      {
        "hex_id": 607,
        "gram": "korean",
        "n": 132
      },
      {
        "hex_id": 706,
        "gram": "event",
        "n": 132
      },
      {
        "hex_id": 706,
        "gram": "temple",
        "n": 129
      },
      {
        "hex_id": 723,
        "gram": "church",
        "n": 128
      },
      {
        "hex_id": 607,
        "gram": "north korea",
        "n": 127
      },
      {
        "hex_id": 723,
        "gram": "road",
        "n": 127
      },
      {
        "hex_id": 986,
        "gram": "changi",
        "n": 127
      },
      {
        "hex_id": 463,
        "gram": "student",
        "n": 125
      },
      {
        "hex_id": 707,
        "gram": "museum",
        "n": 122
      },
      {
        "hex_id": 607,
        "gram": "trump",
        "n": 121
      },
      {
        "hex_id": 607,
        "gram": "singapore",
        "n": 120
      },
      {
        "hex_id": 723,
        "gram": "school",
        "n": 120
      },
      {
        "hex_id": 723,
        "gram": "city",
        "n": 119
      },
      {
        "hex_id": 769,
        "gram": "college",
        "n": 118
      },
      {
        "hex_id": 707,
        "gram": "school",
        "n": 117
      },
      {
        "hex_id": 723,
        "gram": "raffle",
        "n": 117
      },
      {
        "hex_id": 737,
        "gram": "marina",
        "n": 116
      },
      {
        "hex_id": 707,
        "gram": "art",
        "n": 115
      },
      {
        "hex_id": 541,
        "gram": "singapore",
        "n": 114
      },
      {
        "hex_id": 463,
        "gram": "yale",
        "n": 113
      },
      {
        "hex_id": 723,
        "gram": "national",
        "n": 113
      },
      {
        "hex_id": 723,
        "gram": "centre",
        "n": 112
      },
      {
        "hex_id": 710,
        "gram": "school",
        "n": 111
      },
      {
        "hex_id": 463,
        "gram": "university",
        "n": 110
      },
      {
        "hex_id": 600,
        "gram": "japanese",
        "n": 110
      },
      {
        "hex_id": 689,
        "gram": "build",
        "n": 110
      },
      {
        "hex_id": 948,
        "gram": "school",
        "n": 110
      },
      {
        "hex_id": 706,
        "gram": "pink",
        "n": 109
      },
      {
        "hex_id": 607,
        "gram": "kim",
        "n": 108
      },
      {
        "hex_id": 659,
        "gram": "road",
        "n": 108
      },
      {
        "hex_id": 690,
        "gram": "build",
        "n": 107
      },
      {
        "hex_id": 820,
        "gram": "school",
        "n": 107
      },
      {
        "hex_id": 689,
        "gram": "singapore",
        "n": 105
      },
      {
        "hex_id": 706,
        "gram": "raffle",
        "n": 105
      },
      {
        "hex_id": 723,
        "gram": "hold",
        "n": 105
      },
      {
        "hex_id": 760,
        "gram": "seletar",
        "n": 104
      },
      {
        "hex_id": 789,
        "gram": "stadium",
        "n": 104
      },
      {
        "hex_id": 706,
        "gram": "dot",
        "n": 102
      },
      {
        "hex_id": 737,
        "gram": "bay",
        "n": 102
      },
      {
        "hex_id": 706,
        "gram": "pink dot",
        "n": 101
      },
      {
        "hex_id": 581,
        "gram": "garden",
        "n": 100
      },
      {
        "hex_id": 553,
        "gram": "programme",
        "n": 98
      },
      {
        "hex_id": 707,
        "gram": "road",
        "n": 98
      },
      {
        "hex_id": 723,
        "gram": "include",
        "n": 98
      },
      {
        "hex_id": 723,
        "gram": "bill",
        "n": 97
      },
      {
        "hex_id": 463,
        "gram": "college",
        "n": 96
      },
      {
        "hex_id": 553,
        "gram": "junior",
        "n": 96
      },
      {
        "hex_id": 924,
        "gram": "tampines",
        "n": 96
      },
      {
        "hex_id": 675,
        "gram": "house",
        "n": 95
      },
      {
        "hex_id": 723,
        "gram": "esplanade",
        "n": 94
      },
      {
        "hex_id": 723,
        "gram": "hall",
        "n": 94
      },
      {
        "hex_id": 737,
        "gram": "marina bay",
        "n": 94
      },
      {
        "hex_id": 760,
        "gram": "singapore",
        "n": 94
      },
      {
        "hex_id": 1001,
        "gram": "airport",
        "n": 93
      },
      {
        "hex_id": 625,
        "gram": "school",
        "n": 93
      },
      {
        "hex_id": 723,
        "gram": "government",
        "n": 93
      },
      {
        "hex_id": 723,
        "gram": "public",
        "n": 92
      },
      {
        "hex_id": 724,
        "gram": "singapore",
        "n": 92
      },
      {
        "hex_id": 726,
        "gram": "lim",
        "n": 92
      },
      {
        "hex_id": 553,
        "gram": "singapore",
        "n": 91
      },
      {
        "hex_id": 674,
        "gram": "build",
        "n": 91
      },
      {
        "hex_id": 723,
        "gram": "time",
        "n": 91
      },
      {
        "hex_id": 692,
        "gram": "police",
        "n": 90
      },
      {
        "hex_id": 723,
        "gram": "locate",
        "n": 90
      },
      {
        "hex_id": 349,
        "gram": "jurong",
        "n": 89
      },
      {
        "hex_id": 706,
        "gram": "office",
        "n": 89
      },
      {
        "hex_id": 553,
        "gram": "chong",
        "n": 88
      },
      {
        "hex_id": 553,
        "gram": "hwa",
        "n": 88
      },
      {
        "hex_id": 553,
        "gram": "hwa chong",
        "n": 88
      },
      {
        "hex_id": 689,
        "gram": "road",
        "n": 88
      },
      {
        "hex_id": 707,
        "gram": "church",
        "n": 88
      },
      {
        "hex_id": 706,
        "gram": "locate",
        "n": 87
      },
      {
        "hex_id": 707,
        "gram": "library",
        "n": 87
      },
      {
        "hex_id": 723,
        "gram": "sit",
        "n": 87
      },
      {
        "hex_id": 723,
        "gram": "supreme",
        "n": 87
      },
      {
        "hex_id": 825,
        "gram": "chiau",
        "n": 87
      },
      {
        "hex_id": 825,
        "gram": "nan",
        "n": 87
      },
      {
        "hex_id": 825,
        "gram": "nan chiau",
        "n": 87
      },
      {
        "hex_id": 659,
        "gram": "singapore",
        "n": 86
      },
      {
        "hex_id": 706,
        "gram": "chinese",
        "n": 86
      },
      {
        "hex_id": 706,
        "gram": "floor",
        "n": 86
      },
      {
        "hex_id": 707,
        "gram": "national",
        "n": 86
      },
      {
        "hex_id": 707,
        "gram": "station",
        "n": 86
      },
      {
        "hex_id": 723,
        "gram": "memorial",
        "n": 86
      },
      {
        "hex_id": 723,
        "gram": "stamford",
        "n": 86
      },
      {
        "hex_id": 154,
        "gram": "university",
        "n": 84
      },
      {
        "hex_id": 640,
        "gram": "fire",
        "n": 84
      },
      {
        "hex_id": 690,
        "gram": "temple",
        "n": 84
      },
      {
        "hex_id": 706,
        "gram": "station",
        "n": 84
      },
      {
        "hex_id": 723,
        "gram": "cathedral",
        "n": 84
      },
      {
        "hex_id": 448,
        "gram": "student",
        "n": 83
      },
      {
        "hex_id": 553,
        "gram": "junior college",
        "n": 83
      },
      {
        "hex_id": 723,
        "gram": "singapore's",
        "n": 83
      },
      {
        "hex_id": 607,
        "gram": "meet",
        "n": 82
      },
      {
        "hex_id": 706,
        "gram": "road",
        "n": 82
      },
      {
        "hex_id": 723,
        "gram": "judge",
        "n": 82
      },
      {
        "hex_id": 723,
        "gram": "site",
        "n": 82
      },
      {
        "hex_id": 829,
        "gram": "party",
        "n": 82
      },
      {
        "hex_id": 154,
        "gram": "school",
        "n": 81
      },
      {
        "hex_id": 690,
        "gram": "bridge",
        "n": 81
      },
      {
        "hex_id": 722,
        "gram": "marina",
        "n": 81
      },
      {
        "hex_id": 723,
        "gram": "film",
        "n": 80
      },
      {
        "hex_id": 607,
        "gram": "sentosa",
        "n": 79
      },
      {
        "hex_id": 723,
        "gram": "river",
        "n": 79
      },
      {
        "hex_id": 723,
        "gram": "supreme court",
        "n": 79
      },
      {
        "hex_id": 802,
        "gram": "school",
        "n": 79
      },
      {
        "hex_id": 825,
        "gram": "student",
        "n": 79
      },
      {
        "hex_id": 887,
        "gram": "park",
        "n": 79
      },
      {
        "hex_id": 659,
        "gram": "club",
        "n": 78
      },
      {
        "hex_id": 724,
        "gram": "road",
        "n": 78
      },
      {
        "hex_id": 752,
        "gram": "race",
        "n": 78
      },
      {
        "hex_id": 659,
        "gram": "shop",
        "n": 77
      },
      {
        "hex_id": 723,
        "gram": "speaker",
        "n": 77
      },
      {
        "hex_id": 738,
        "gram": "build",
        "n": 77
      },
      {
        "hex_id": 789,
        "gram": "singapore",
        "n": 77
      },
      {
        "hex_id": 706,
        "gram": "tower",
        "n": 76
      },
      {
        "hex_id": 707,
        "gram": "street",
        "n": 76
      },
      {
        "hex_id": 553,
        "gram": "chinese",
        "n": 75
      },
      {
        "hex_id": 706,
        "gram": "centre",
        "n": 75
      },
      {
        "hex_id": 723,
        "gram": "minister",
        "n": 75
      },
      {
        "hex_id": 723,
        "gram": "office",
        "n": 75
      },
      {
        "hex_id": 723,
        "gram": "station",
        "n": 75
      },
      {
        "hex_id": 924,
        "gram": "bus",
        "n": 75
      },
      {
        "hex_id": 694,
        "gram": "school",
        "n": 74
      },
      {
        "hex_id": 724,
        "gram": "art",
        "n": 74
      },
      {
        "hex_id": 834,
        "gram": "sengkang",
        "n": 74
      },
      {
        "hex_id": 690,
        "gram": "fort",
        "n": 73
      },
      {
        "hex_id": 706,
        "gram": "hold",
        "n": 73
      },
      {
        "hex_id": 723,
        "gram": "committee",
        "n": 73
      },
      {
        "hex_id": 737,
        "gram": "singapore",
        "n": 73
      },
      {
        "hex_id": 760,
        "gram": "airport",
        "n": 73
      },
      {
        "hex_id": 769,
        "gram": "school",
        "n": 72
      },
      {
        "hex_id": 810,
        "gram": "school",
        "n": 72
      },
      {
        "hex_id": 607,
        "gram": "south",
        "n": 71
      },
      {
        "hex_id": 723,
        "gram": "street",
        "n": 71
      },
      {
        "hex_id": 291,
        "gram": "school",
        "n": 70
      },
      {
        "hex_id": 675,
        "gram": "build",
        "n": 70
      },
      {
        "hex_id": 723,
        "gram": "law",
        "n": 70
      },
      {
        "hex_id": 723,
        "gram": "matter",
        "n": 70
      },
      {
        "hex_id": 769,
        "gram": "junior",
        "n": 70
      },
      {
        "hex_id": 463,
        "gram": "singapore",
        "n": 69
      },
      {
        "hex_id": 689,
        "gram": "police",
        "n": 69
      },
      {
        "hex_id": 706,
        "gram": "design",
        "n": 69
      },
      {
        "hex_id": 706,
        "gram": "park",
        "n": 69
      },
      {
        "hex_id": 723,
        "gram": "council",
        "n": 69
      },
      {
        "hex_id": 723,
        "gram": "substation",
        "n": 69
      },
      {
        "hex_id": 723,
        "gram": "war",
        "n": 69
      },
      {
        "hex_id": 706,
        "gram": "bank",
        "n": 68
      },
      {
        "hex_id": 706,
        "gram": "house",
        "n": 68
      },
      {
        "hex_id": 765,
        "gram": "garden",
        "n": 68
      },
      {
        "hex_id": 792,
        "gram": "school",
        "n": 68
      },
      {
        "hex_id": 813,
        "gram": "school",
        "n": 68
      },
      {
        "hex_id": 674,
        "gram": "singapore",
        "n": 67
      },
      {
        "hex_id": 723,
        "gram": "floor",
        "n": 67
      },
      {
        "hex_id": 723,
        "gram": "seat",
        "n": 67
      },
      {
        "hex_id": 752,
        "gram": "marina",
        "n": 67
      },
      {
        "hex_id": 769,
        "gram": "junior college",
        "n": 67
      },
      {
        "hex_id": 690,
        "gram": "quay",
        "n": 66
      },
      {
        "hex_id": 706,
        "gram": "bridge",
        "n": 66
      },
      {
        "hex_id": 707,
        "gram": "law",
        "n": 66
      },
      {
        "hex_id": 723,
        "gram": "gallery",
        "n": 66
      },
      {
        "hex_id": 723,
        "gram": "japanese",
        "n": 66
      },
      {
        "hex_id": 829,
        "gram": "election",
        "n": 66
      },
      {
        "hex_id": 581,
        "gram": "singapore",
        "n": 65
      },
      {
        "hex_id": 640,
        "gram": "government",
        "n": 65
      },
      {
        "hex_id": 690,
        "gram": "hill",
        "n": 65
      },
      {
        "hex_id": 710,
        "gram": "raffle",
        "n": 65
      },
      {
        "hex_id": 769,
        "gram": "student",
        "n": 65
      },
      {
        "hex_id": 293,
        "gram": "npcc",
        "n": 64
      },
      {
        "hex_id": 690,
        "gram": "river",
        "n": 64
      },
      {
        "hex_id": 706,
        "gram": "speaker",
        "n": 64
      },
      {
        "hex_id": 707,
        "gram": "smu",
        "n": 64
      },
      {
        "hex_id": 723,
        "gram": "complete",
        "n": 64
      },
      {
        "hex_id": 723,
        "gram": "decision",
        "n": 64
      },
      {
        "hex_id": 723,
        "gram": "programme",
        "n": 64
      },
      {
        "hex_id": 738,
        "gram": "singapore",
        "n": 64
      },
      {
        "hex_id": 707,
        "gram": "university",
        "n": 63
      },
      {
        "hex_id": 723,
        "gram": "mall",
        "n": 63
      },
      {
        "hex_id": 723,
        "gram": "plan",
        "n": 63
      },
      {
        "hex_id": 723,
        "gram": "president",
        "n": 63
      },
      {
        "hex_id": 800,
        "gram": "singapore",
        "n": 63
      },
      {
        "hex_id": 986,
        "gram": "airport",
        "n": 63
      },
      {
        "hex_id": 600,
        "gram": "australian",
        "n": 62
      },
      {
        "hex_id": 645,
        "gram": "school",
        "n": 62
      },
      {
        "hex_id": 659,
        "gram": "orchard road",
        "n": 62
      },
      {
        "hex_id": 689,
        "gram": "tower",
        "n": 62
      },
      {
        "hex_id": 690,
        "gram": "can",
        "n": 62
      },
      {
        "hex_id": 706,
        "gram": "include",
        "n": 62
      },
      {
        "hex_id": 706,
        "gram": "market",
        "n": 62
      },
      {
        "hex_id": 707,
        "gram": "japanese",
        "n": 62
      },
      {
        "hex_id": 723,
        "gram": "development",
        "n": 62
      },
      {
        "hex_id": 752,
        "gram": "lap",
        "n": 62
      },
      {
        "hex_id": 768,
        "gram": "andrew's",
        "n": 62
      },
      {
        "hex_id": 690,
        "gram": "fort can",
        "n": 61
      },
      {
        "hex_id": 706,
        "gram": "corner",
        "n": 61
      },
      {
        "hex_id": 706,
        "gram": "feature",
        "n": 61
      },
      {
        "hex_id": 710,
        "gram": "student",
        "n": 61
      },
      {
        "hex_id": 722,
        "gram": "build",
        "n": 61
      },
      {
        "hex_id": 723,
        "gram": "award",
        "n": 61
      },
      {
        "hex_id": 723,
        "gram": "move",
        "n": 61
      },
      {
        "hex_id": 463,
        "gram": "yale nus",
        "n": 60
      },
      {
        "hex_id": 607,
        "gram": "nuclear",
        "n": 60
      },
      {
        "hex_id": 640,
        "gram": "british",
        "n": 60
      },
      {
        "hex_id": 663,
        "gram": "school",
        "n": 60
      },
      {
        "hex_id": 692,
        "gram": "singapore",
        "n": 60
      },
      {
        "hex_id": 707,
        "gram": "programme",
        "n": 60
      },
      {
        "hex_id": 723,
        "gram": "building",
        "n": 60
      },
      {
        "hex_id": 723,
        "gram": "power",
        "n": 60
      },
      {
        "hex_id": 752,
        "gram": "car",
        "n": 60
      },
      {
        "hex_id": 494,
        "gram": "school",
        "n": 59
      },
      {
        "hex_id": 640,
        "gram": "country",
        "n": 59
      },
      {
        "hex_id": 640,
        "gram": "japanese",
        "n": 59
      },
      {
        "hex_id": 675,
        "gram": "singapore",
        "n": 59
      },
      {
        "hex_id": 723,
        "gram": "shop",
        "n": 59
      },
      {
        "hex_id": 766,
        "gram": "river",
        "n": 59
      },
      {
        "hex_id": 5,
        "gram": "singapore",
        "n": 58
      },
      {
        "hex_id": 541,
        "gram": "island",
        "n": 58
      },
      {
        "hex_id": 723,
        "gram": "complex",
        "n": 58
      },
      {
        "hex_id": 723,
        "gram": "day",
        "n": 58
      },
      {
        "hex_id": 723,
        "gram": "space",
        "n": 58
      },
      {
        "hex_id": 723,
        "gram": "support",
        "n": 58
      },
      {
        "hex_id": 821,
        "gram": "cisco",
        "n": 58
      },
      {
        "hex_id": 951,
        "gram": "station",
        "n": 58
      },
      {
        "hex_id": 293,
        "gram": "cadet",
        "n": 57
      },
      {
        "hex_id": 360,
        "gram": "school",
        "n": 57
      },
      {
        "hex_id": 515,
        "gram": "zoo",
        "n": 57
      },
      {
        "hex_id": 581,
        "gram": "tyersall",
        "n": 57
      },
      {
        "hex_id": 600,
        "gram": "force",
        "n": 57
      },
      {
        "hex_id": 600,
        "gram": "singapore",
        "n": 57
      },
      {
        "hex_id": 607,
        "gram": "minister",
        "n": 57
      },
      {
        "hex_id": 607,
        "gram": "president",
        "n": 57
      },
      {
        "hex_id": 706,
        "gram": "ayer",
        "n": 57
      },
      {
        "hex_id": 706,
        "gram": "fullerton",
        "n": 57
      },
      {
        "hex_id": 706,
        "gram": "land",
        "n": 57
      },
      {
        "hex_id": 706,
        "gram": "public",
        "n": 57
      },
      {
        "hex_id": 722,
        "gram": "station",
        "n": 57
      },
      {
        "hex_id": 723,
        "gram": "city hall",
        "n": 57
      },
      {
        "hex_id": 842,
        "gram": "school",
        "n": 57
      },
      {
        "hex_id": 463,
        "gram": "school",
        "n": 56
      },
      {
        "hex_id": 465,
        "gram": "programme",
        "n": 56
      },
      {
        "hex_id": 608,
        "gram": "harbourfront",
        "n": 56
      },
      {
        "hex_id": 706,
        "gram": "mrt",
        "n": 56
      },
      {
        "hex_id": 723,
        "gram": "british",
        "n": 56
      },
      {
        "hex_id": 723,
        "gram": "chapel",
        "n": 56
      },
      {
        "hex_id": 723,
        "gram": "march",
        "n": 56
      },
      {
        "hex_id": 723,
        "gram": "party",
        "n": 56
      },
      {
        "hex_id": 723,
        "gram": "service",
        "n": 56
      },
      {
        "hex_id": 752,
        "gram": "pit",
        "n": 56
      },
      {
        "hex_id": 854,
        "gram": "community",
        "n": 56
      },
      {
        "hex_id": 607,
        "gram": "fountain",
        "n": 55
      },
      {
        "hex_id": 611,
        "gram": "biodiversity",
        "n": 55
      },
      {
        "hex_id": 623,
        "gram": "power",
        "n": 55
      },
      {
        "hex_id": 640,
        "gram": "singapore's",
        "n": 55
      },
      {
        "hex_id": 658,
        "gram": "singapore",
        "n": 55
      },
      {
        "hex_id": 706,
        "gram": "speaker corner",
        "n": 55
      },
      {
        "hex_id": 707,
        "gram": "design",
        "n": 55
      },
      {
        "hex_id": 707,
        "gram": "locate",
        "n": 55
      },
      {
        "hex_id": 723,
        "gram": "business",
        "n": 55
      },
      {
        "hex_id": 723,
        "gram": "original",
        "n": 55
      },
      {
        "hex_id": 768,
        "gram": "st",
        "n": 55
      },
      {
        "hex_id": 769,
        "gram": "nanyang",
        "n": 55
      },
      {
        "hex_id": 800,
        "gram": "badminton",
        "n": 55
      },
      {
        "hex_id": 924,
        "gram": "service",
        "n": 55
      },
      {
        "hex_id": 674,
        "gram": "chinese",
        "n": 54
      },
      {
        "hex_id": 706,
        "gram": "chinatown",
        "n": 54
      },
      {
        "hex_id": 707,
        "gram": "student",
        "n": 54
      },
      {
        "hex_id": 723,
        "gram": "chief",
        "n": 54
      },
      {
        "hex_id": 723,
        "gram": "community",
        "n": 54
      },
      {
        "hex_id": 723,
        "gram": "construction",
        "n": 54
      },
      {
        "hex_id": 723,
        "gram": "park",
        "n": 54
      },
      {
        "hex_id": 800,
        "gram": "hall",
        "n": 54
      },
      {
        "hex_id": 154,
        "gram": "ntu",
        "n": 53
      },
      {
        "hex_id": 463,
        "gram": "science",
        "n": 53
      },
      {
        "hex_id": 692,
        "gram": "officer",
        "n": 53
      },
      {
        "hex_id": 706,
        "gram": "central",
        "n": 53
      },
      {
        "hex_id": 738,
        "gram": "library",
        "n": 53
      },
      {
        "hex_id": 905,
        "gram": "bedok",
        "n": 53
      },
      {
        "hex_id": 1001,
        "gram": "changi",
        "n": 52
      },
      {
        "hex_id": 709,
        "gram": "payoh",
        "n": 52
      },
      {
        "hex_id": 709,
        "gram": "toa",
        "n": 52
      },
      {
        "hex_id": 709,
        "gram": "toa payoh",
        "n": 52
      },
      {
        "hex_id": 723,
        "gram": "act",
        "n": 52
      },
      {
        "hex_id": 723,
        "gram": "monument",
        "n": 52
      },
      {
        "hex_id": 791,
        "gram": "school",
        "n": 52
      },
      {
        "hex_id": 986,
        "gram": "terminal",
        "n": 52
      },
      {
        "hex_id": 463,
        "gram": "faculty",
        "n": 51
      },
      {
        "hex_id": 480,
        "gram": "aware",
        "n": 51
      },
      {
        "hex_id": 600,
        "gram": "british",
        "n": 51
      },
      {
        "hex_id": 607,
        "gram": "park",
        "n": 51
      },
      {
        "hex_id": 607,
        "gram": "unite",
        "n": 51
      },
      {
        "hex_id": 706,
        "gram": "quay",
        "n": 51
      },
      {
        "hex_id": 706,
        "gram": "river",
        "n": 51
      },
      {
        "hex_id": 723,
        "gram": "appoint",
        "n": 51
      },
      {
        "hex_id": 723,
        "gram": "hear",
        "n": 51
      },
      {
        "hex_id": 723,
        "gram": "june",
        "n": 51
      },
      {
        "hex_id": 723,
        "gram": "justice",
        "n": 51
      },
      {
        "hex_id": 723,
        "gram": "land",
        "n": 51
      },
      {
        "hex_id": 724,
        "gram": "india",
        "n": 51
      },
      {
        "hex_id": 766,
        "gram": "kallang",
        "n": 51
      },
      {
        "hex_id": 769,
        "gram": "nanyang junior",
        "n": 51
      }
    ];

    var florenceDatacontainer_umd = createCommonjsModule(function (module, exports) {
    (function (global, factory) {
       module.exports = factory() ;
    }(commonjsGlobal, (function () {
      // Should be no imports here!
      var _a; // SOme things that should be evaluated before all else...


      var hasSymbol = typeof Symbol !== "undefined";
      var hasMap = typeof Map !== "undefined";
      var hasSet = typeof Set !== "undefined";
      /**
       * The sentinel value returned by producers to replace the draft with undefined.
       */

      var NOTHING = hasSymbol ? Symbol("immer-nothing") : (_a = {}, _a["immer-nothing"] = true, _a);
      /**
       * To let Immer treat your class instances as plain immutable objects
       * (albeit with a custom prototype), you must define either an instance property
       * or a static property on each of your custom classes.
       *
       * Otherwise, your class instance will never be drafted, which means it won't be
       * safe to mutate in a produce callback.
       */

      var DRAFTABLE = hasSymbol ? Symbol("immer-draftable") : "__$immer_draftable";
      var DRAFT_STATE = hasSymbol ? Symbol("immer-state") : "__$immer_state";
      var iteratorSymbol = hasSymbol ? Symbol.iterator : "@@iterator";

      /* istanbul ignore next */
      var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function (d, b) {
          d.__proto__ = b;
        } || function (d, b) {
          for (var p in b) { if (b.hasOwnProperty(p)) { d[p] = b[p]; } }
        };

        return extendStatics(d, b);
      }; // Ugly hack to resolve #502 and inherit built in Map / Set


      function __extends(d, b) {
        extendStatics(d, b);

        function __() {
          this.constructor = d;
        }

        d.prototype = ( // @ts-ignore
        __.prototype = b.prototype, new __());
      }

      var Archtype;

      (function (Archtype) {
        Archtype[Archtype["Object"] = 0] = "Object";
        Archtype[Archtype["Array"] = 1] = "Array";
        Archtype[Archtype["Map"] = 2] = "Map";
        Archtype[Archtype["Set"] = 3] = "Set";
      })(Archtype || (Archtype = {}));

      var ProxyType;

      (function (ProxyType) {
        ProxyType[ProxyType["ProxyObject"] = 0] = "ProxyObject";
        ProxyType[ProxyType["ProxyArray"] = 1] = "ProxyArray";
        ProxyType[ProxyType["ES5Object"] = 2] = "ES5Object";
        ProxyType[ProxyType["ES5Array"] = 3] = "ES5Array";
        ProxyType[ProxyType["Map"] = 4] = "Map";
        ProxyType[ProxyType["Set"] = 5] = "Set";
      })(ProxyType || (ProxyType = {}));

      /** Returns true if the given value is an Immer draft */

      function isDraft(value) {
        return !!value && !!value[DRAFT_STATE];
      }
      /** Returns true if the given value can be drafted by Immer */

      function isDraftable(value) {
        if (!value) { return false; }
        return isPlainObject(value) || Array.isArray(value) || !!value[DRAFTABLE] || !!value.constructor[DRAFTABLE] || isMap(value) || isSet(value);
      }
      function isPlainObject(value) {
        if (!value || typeof value !== "object") { return false; }
        var proto = Object.getPrototypeOf(value);
        return !proto || proto === Object.prototype;
      }
      var ownKeys = typeof Reflect !== "undefined" && Reflect.ownKeys ? Reflect.ownKeys : typeof Object.getOwnPropertySymbols !== "undefined" ? function (obj) {
        return Object.getOwnPropertyNames(obj).concat(Object.getOwnPropertySymbols(obj));
      } :
      /* istanbul ignore next */
      Object.getOwnPropertyNames;
      function each(obj, iter) {
        if (getArchtype(obj) === Archtype.Object) {
          ownKeys(obj).forEach(function (key) {
            return iter(key, obj[key], obj);
          });
        } else {
          obj.forEach(function (entry, index) {
            return iter(index, entry, obj);
          });
        }
      }
      function isEnumerable(base, prop) {
        var desc = Object.getOwnPropertyDescriptor(base, prop);
        return desc && desc.enumerable ? true : false;
      }
      function getArchtype(thing) {
        /* istanbul ignore next */
        if (!thing) { die(); }

        if (thing[DRAFT_STATE]) {
          switch (thing[DRAFT_STATE].type) {
            case ProxyType.ES5Object:
            case ProxyType.ProxyObject:
              return Archtype.Object;

            case ProxyType.ES5Array:
            case ProxyType.ProxyArray:
              return Archtype.Array;

            case ProxyType.Map:
              return Archtype.Map;

            case ProxyType.Set:
              return Archtype.Set;
          }
        }

        return Array.isArray(thing) ? Archtype.Array : isMap(thing) ? Archtype.Map : isSet(thing) ? Archtype.Set : Archtype.Object;
      }
      function has(thing, prop) {
        return getArchtype(thing) === Archtype.Map ? thing.has(prop) : Object.prototype.hasOwnProperty.call(thing, prop);
      }
      function get(thing, prop) {
        // @ts-ignore
        return getArchtype(thing) === Archtype.Map ? thing.get(prop) : thing[prop];
      }
      function set(thing, propOrOldValue, value) {
        switch (getArchtype(thing)) {
          case Archtype.Map:
            thing.set(propOrOldValue, value);
            break;

          case Archtype.Set:
            thing.delete(propOrOldValue);
            thing.add(value);
            break;

          default:
            thing[propOrOldValue] = value;
        }
      }
      function is(x, y) {
        // From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js
        if (x === y) {
          return x !== 0 || 1 / x === 1 / y;
        } else {
          return x !== x && y !== y;
        }
      }
      function isMap(target) {
        return hasMap && target instanceof Map;
      }
      function isSet(target) {
        return hasSet && target instanceof Set;
      }
      function latest(state) {
        return state.copy || state.base;
      }
      function shallowCopy(base, invokeGetters) {
        if (invokeGetters === void 0) {
          invokeGetters = false;
        }

        if (Array.isArray(base)) { return base.slice(); }
        var clone = Object.create(Object.getPrototypeOf(base));
        ownKeys(base).forEach(function (key) {
          if (key === DRAFT_STATE) {
            return; // Never copy over draft state.
          }

          var desc = Object.getOwnPropertyDescriptor(base, key);
          var value = desc.value;

          if (desc.get) {
            if (!invokeGetters) {
              throw new Error("Immer drafts cannot have computed properties");
            }

            value = desc.get.call(base);
          }

          if (desc.enumerable) {
            clone[key] = value;
          } else {
            Object.defineProperty(clone, key, {
              value: value,
              writable: true,
              configurable: true
            });
          }
        });
        return clone;
      }
      function freeze(obj, deep) {
        if (!isDraftable(obj) || isDraft(obj) || Object.isFrozen(obj)) { return; }
        var type = getArchtype(obj);

        if (type === Archtype.Set) {
          obj.add = obj.clear = obj.delete = dontMutateFrozenCollections;
        } else if (type === Archtype.Map) {
          obj.set = obj.clear = obj.delete = dontMutateFrozenCollections;
        }

        Object.freeze(obj);
        if (deep) { each(obj, function (_, value) {
          return freeze(value, true);
        }); }
      }

      function dontMutateFrozenCollections() {
        throw new Error("This object has been frozen and should not be mutated");
      }

      function createHiddenProperty(target, prop, value) {
        Object.defineProperty(target, prop, {
          value: value,
          enumerable: false,
          writable: true
        });
      }
      /* istanbul ignore next */

      function die() {
        throw new Error("Illegal state, please file a bug");
      }

      /** Each scope represents a `produce` call. */

      var ImmerScope =
      /** @class */
      function () {
        function ImmerScope(parent, immer) {
          this.drafts = [];
          this.parent = parent;
          this.immer = immer; // Whenever the modified draft contains a draft from another scope, we
          // need to prevent auto-freezing so the unowned draft can be finalized.

          this.canAutoFreeze = true;
        }

        ImmerScope.prototype.usePatches = function (patchListener) {
          if (patchListener) {
            this.patches = [];
            this.inversePatches = [];
            this.patchListener = patchListener;
          }
        };

        ImmerScope.prototype.revoke = function () {
          this.leave();
          this.drafts.forEach(revoke); // @ts-ignore

          this.drafts = null;
        };

        ImmerScope.prototype.leave = function () {
          if (this === ImmerScope.current) {
            ImmerScope.current = this.parent;
          }
        };

        ImmerScope.enter = function (immer) {
          var scope = new ImmerScope(ImmerScope.current, immer);
          ImmerScope.current = scope;
          return scope;
        };

        return ImmerScope;
      }();

      function revoke(draft) {
        var state = draft[DRAFT_STATE];
        if (state.type === ProxyType.ProxyObject || state.type === ProxyType.ProxyArray) { state.revoke(); }else { state.revoked = true; }
      }

      function processResult(immer, result, scope) {
        var baseDraft = scope.drafts[0];
        var isReplaced = result !== undefined && result !== baseDraft;
        immer.willFinalize(scope, result, isReplaced);

        if (isReplaced) {
          if (baseDraft[DRAFT_STATE].modified) {
            scope.revoke();
            throw new Error("An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft."); // prettier-ignore
          }

          if (isDraftable(result)) {
            // Finalize the result in case it contains (or is) a subset of the draft.
            result = finalize(immer, result, scope);
            if (!scope.parent) { maybeFreeze(immer, result); }
          }

          if (scope.patches) {
            scope.patches.push({
              op: "replace",
              path: [],
              value: result
            });
            scope.inversePatches.push({
              op: "replace",
              path: [],
              value: baseDraft[DRAFT_STATE].base
            });
          }
        } else {
          // Finalize the base draft.
          result = finalize(immer, baseDraft, scope, []);
        }

        scope.revoke();

        if (scope.patches) {
          scope.patchListener(scope.patches, scope.inversePatches);
        }

        return result !== NOTHING ? result : undefined;
      }

      function finalize(immer, draft, scope, path) {
        var state = draft[DRAFT_STATE];

        if (!state) {
          if (Object.isFrozen(draft)) { return draft; }
          return finalizeTree(immer, draft, scope);
        } // Never finalize drafts owned by another scope.


        if (state.scope !== scope) {
          return draft;
        }

        if (!state.modified) {
          maybeFreeze(immer, state.base, true);
          return state.base;
        }

        if (!state.finalized) {
          state.finalized = true;
          finalizeTree(immer, state.draft, scope, path); // We cannot really delete anything inside of a Set. We can only replace the whole Set.

          if (immer.onDelete && state.type !== ProxyType.Set) {
            // The `assigned` object is unreliable with ES5 drafts.
            if (immer.useProxies) {
              var assigned = state.assigned;
              each(assigned, function (prop, exists) {
                if (!exists) { immer.onDelete(state, prop); }
              });
            } else {
              var base = state.base,
                  copy_1 = state.copy;
              each(base, function (prop) {
                if (!has(copy_1, prop)) { immer.onDelete(state, prop); }
              });
            }
          }

          if (immer.onCopy) {
            immer.onCopy(state);
          } // At this point, all descendants of `state.copy` have been finalized,
          // so we can be sure that `scope.canAutoFreeze` is accurate.


          if (immer.autoFreeze && scope.canAutoFreeze) {
            freeze(state.copy, false);
          }

          if (path && scope.patches) {
            generatePatches(state, path, scope.patches, scope.inversePatches);
          }
        }

        return state.copy;
      }

      function finalizeTree(immer, root, scope, rootPath) {
        var state = root[DRAFT_STATE];

        if (state) {
          if (state.type === ProxyType.ES5Object || state.type === ProxyType.ES5Array) {
            // Create the final copy, with added keys and without deleted keys.
            state.copy = shallowCopy(state.draft, true);
          }

          root = state.copy;
        }

        each(root, function (key, value) {
          return finalizeProperty(immer, scope, root, state, root, key, value, rootPath);
        });
        return root;
      }

      function finalizeProperty(immer, scope, root, rootState, parentValue, prop, childValue, rootPath) {
        if (childValue === parentValue) {
          throw Error("Immer forbids circular references");
        } // In the `finalizeTree` method, only the `root` object may be a draft.


        var isDraftProp = !!rootState && parentValue === root;
        var isSetMember = isSet(parentValue);

        if (isDraft(childValue)) {
          var path = rootPath && isDraftProp && !isSetMember && // Set objects are atomic since they have no keys.
          !has(rootState.assigned, prop) // Skip deep patches for assigned keys.
          ? rootPath.concat(prop) : undefined; // Drafts owned by `scope` are finalized here.

          childValue = finalize(immer, childValue, scope, path);
          set(parentValue, prop, childValue); // Drafts from another scope must prevent auto-freezing.

          if (isDraft(childValue)) {
            scope.canAutoFreeze = false;
          }
        } // Unchanged draft properties are ignored.
        else if (isDraftProp && is(childValue, get(rootState.base, prop))) {
            return;
          } // Search new objects for unfinalized drafts. Frozen objects should never contain drafts.
          // TODO: the recursion over here looks weird, shouldn't non-draft stuff have it's own recursion?
          // especially the passing on of root and rootState doesn't make sense...
          else if (isDraftable(childValue)) {
              each(childValue, function (key, grandChild) {
                return finalizeProperty(immer, scope, root, rootState, childValue, key, grandChild, rootPath);
              });
              if (!scope.parent) { maybeFreeze(immer, childValue); }
            }

        if (isDraftProp && immer.onAssign && !isSetMember) {
          immer.onAssign(rootState, prop, childValue);
        }
      }

      function maybeFreeze(immer, value, deep) {
        if (deep === void 0) {
          deep = false;
        }

        if (immer.autoFreeze && !isDraft(value)) {
          freeze(value, deep);
        }
      }

      /**
       * Returns a new draft of the `base` object.
       *
       * The second argument is the parent draft-state (used internally).
       */

      function createProxy(base, parent) {
        var isArray = Array.isArray(base);
        var state = {
          type: isArray ? ProxyType.ProxyArray : ProxyType.ProxyObject,
          // Track which produce call this is associated with.
          scope: parent ? parent.scope : ImmerScope.current,
          // True for both shallow and deep changes.
          modified: false,
          // Used during finalization.
          finalized: false,
          // Track which properties have been assigned (true) or deleted (false).
          assigned: {},
          // The parent draft state.
          parent: parent,
          // The base state.
          base: base,
          // The base proxy.
          draft: null,
          // Any property proxies.
          drafts: {},
          // The base copy with any updated values.
          copy: null,
          // Called by the `produce` function.
          revoke: null,
          isManual: false
        }; // the traps must target something, a bit like the 'real' base.
        // but also, we need to be able to determine from the target what the relevant state is
        // (to avoid creating traps per instance to capture the state in closure,
        // and to avoid creating weird hidden properties as well)
        // So the trick is to use 'state' as the actual 'target'! (and make sure we intercept everything)
        // Note that in the case of an array, we put the state in an array to have better Reflect defaults ootb

        var target = state;
        var traps = objectTraps;

        if (isArray) {
          target = [state];
          traps = arrayTraps;
        } // TODO: optimization: might be faster, cheaper if we created a non-revocable proxy
        // and administrate revoking ourselves


        var _a = Proxy.revocable(target, traps),
            revoke = _a.revoke,
            proxy = _a.proxy;

        state.draft = proxy;
        state.revoke = revoke;
        return proxy;
      }
      /**
       * Object drafts
       */

      var objectTraps = {
        get: function (state, prop) {
          if (prop === DRAFT_STATE) { return state; }
          var drafts = state.drafts; // Check for existing draft in unmodified state.

          if (!state.modified && has(drafts, prop)) {
            return drafts[prop];
          }

          var value = latest(state)[prop];

          if (state.finalized || !isDraftable(value)) {
            return value;
          } // Check for existing draft in modified state.


          if (state.modified) {
            // Assigned values are never drafted. This catches any drafts we created, too.
            if (value !== peek(state.base, prop)) { return value; } // Store drafts on the copy (when one exists).
            // @ts-ignore

            drafts = state.copy;
          }

          return drafts[prop] = state.scope.immer.createProxy(value, state);
        },
        has: function (state, prop) {
          return prop in latest(state);
        },
        ownKeys: function (state) {
          return Reflect.ownKeys(latest(state));
        },
        set: function (state, prop
        /* strictly not, but helps TS */
        , value) {
          if (!state.modified) {
            var baseValue = peek(state.base, prop); // Optimize based on value's truthiness. Truthy values are guaranteed to
            // never be undefined, so we can avoid the `in` operator. Lastly, truthy
            // values may be drafts, but falsy values are never drafts.

            var isUnchanged = value ? is(baseValue, value) || value === state.drafts[prop] : is(baseValue, value) && prop in state.base;
            if (isUnchanged) { return true; }
            prepareCopy(state);
            markChanged(state);
          }

          state.assigned[prop] = true; // @ts-ignore

          state.copy[prop] = value;
          return true;
        },
        deleteProperty: function (state, prop) {
          // The `undefined` check is a fast path for pre-existing keys.
          if (peek(state.base, prop) !== undefined || prop in state.base) {
            state.assigned[prop] = false;
            prepareCopy(state);
            markChanged(state);
          } else if (state.assigned[prop]) {
            // if an originally not assigned property was deleted
            delete state.assigned[prop];
          } // @ts-ignore


          if (state.copy) { delete state.copy[prop]; }
          return true;
        },
        // Note: We never coerce `desc.value` into an Immer draft, because we can't make
        // the same guarantee in ES5 mode.
        getOwnPropertyDescriptor: function (state, prop) {
          var owner = latest(state);
          var desc = Reflect.getOwnPropertyDescriptor(owner, prop);

          if (desc) {
            desc.writable = true;
            desc.configurable = state.type !== ProxyType.ProxyArray || prop !== "length";
          }

          return desc;
        },
        defineProperty: function () {
          throw new Error("Object.defineProperty() cannot be used on an Immer draft"); // prettier-ignore
        },
        getPrototypeOf: function (state) {
          return Object.getPrototypeOf(state.base);
        },
        setPrototypeOf: function () {
          throw new Error("Object.setPrototypeOf() cannot be used on an Immer draft"); // prettier-ignore
        }
      };
      /**
       * Array drafts
       */

      var arrayTraps = {};
      each(objectTraps, function (key, fn) {
        // @ts-ignore
        arrayTraps[key] = function () {
          arguments[0] = arguments[0][0];
          return fn.apply(this, arguments);
        };
      });

      arrayTraps.deleteProperty = function (state, prop) {
        if (isNaN(parseInt(prop))) {
          throw new Error("Immer only supports deleting array indices"); // prettier-ignore
        }

        return objectTraps.deleteProperty.call(this, state[0], prop);
      };

      arrayTraps.set = function (state, prop, value) {
        if (prop !== "length" && isNaN(parseInt(prop))) {
          throw new Error("Immer only supports setting array indices and the 'length' property"); // prettier-ignore
        }

        return objectTraps.set.call(this, state[0], prop, value, state[0]);
      };
      /**
       * Map drafts
       */
      // Access a property without creating an Immer draft.


      function peek(draft, prop) {
        var state = draft[DRAFT_STATE];
        var desc = Reflect.getOwnPropertyDescriptor(state ? latest(state) : draft, prop);
        return desc && desc.value;
      }

      function markChanged(state) {
        if (!state.modified) {
          state.modified = true;

          if (state.type === ProxyType.ProxyObject || state.type === ProxyType.ProxyArray) {
            var copy_1 = state.copy = shallowCopy(state.base);
            each(state.drafts, function (key, value) {
              // @ts-ignore
              copy_1[key] = value;
            });
            state.drafts = undefined;
          }

          if (state.parent) {
            markChanged(state.parent);
          }
        }
      }

      function prepareCopy(state) {
        if (!state.copy) {
          state.copy = shallowCopy(state.base);
        }
      }

      function willFinalizeES5(scope, result, isReplaced) {
        scope.drafts.forEach(function (draft) {
          draft[DRAFT_STATE].finalizing = true;
        });

        if (!isReplaced) {
          if (scope.patches) {
            markChangesRecursively(scope.drafts[0]);
          } // This is faster when we don't care about which attributes changed.


          markChangesSweep(scope.drafts);
        } // When a child draft is returned, look for changes.
        else if (isDraft(result) && result[DRAFT_STATE].scope === scope) {
            markChangesSweep(scope.drafts);
          }
      }
      function createES5Proxy(base, parent) {
        var isArray = Array.isArray(base);
        var draft = clonePotentialDraft(base);
        each(draft, function (prop) {
          proxyProperty(draft, prop, isArray || isEnumerable(base, prop));
        });
        var state = {
          type: isArray ? ProxyType.ES5Array : ProxyType.ES5Object,
          scope: parent ? parent.scope : ImmerScope.current,
          modified: false,
          finalizing: false,
          finalized: false,
          assigned: {},
          parent: parent,
          base: base,
          draft: draft,
          copy: null,
          revoked: false,
          isManual: false
        };
        createHiddenProperty(draft, DRAFT_STATE, state);
        return draft;
      } // Access a property without creating an Immer draft.

      function peek$1(draft, prop) {
        var state = draft[DRAFT_STATE];

        if (state && !state.finalizing) {
          state.finalizing = true;
          var value = draft[prop];
          state.finalizing = false;
          return value;
        }

        return draft[prop];
      }

      function get$1(state, prop) {
        assertUnrevoked(state);
        var value = peek$1(latest(state), prop);
        if (state.finalizing) { return value; } // Create a draft if the value is unmodified.

        if (value === peek$1(state.base, prop) && isDraftable(value)) {
          prepareCopy$1(state); // @ts-ignore

          return state.copy[prop] = state.scope.immer.createProxy(value, state);
        }

        return value;
      }

      function set$1(state, prop, value) {
        assertUnrevoked(state);
        state.assigned[prop] = true;

        if (!state.modified) {
          if (is(value, peek$1(latest(state), prop))) { return; }
          markChangedES5(state);
          prepareCopy$1(state);
        } // @ts-ignore


        state.copy[prop] = value;
      }

      function markChangedES5(state) {
        if (!state.modified) {
          state.modified = true;
          if (state.parent) { markChangedES5(state.parent); }
        }
      }

      function prepareCopy$1(state) {
        if (!state.copy) { state.copy = clonePotentialDraft(state.base); }
      }

      function clonePotentialDraft(base) {
        var state = base && base[DRAFT_STATE];

        if (state) {
          state.finalizing = true;
          var draft = shallowCopy(state.draft, true);
          state.finalizing = false;
          return draft;
        }

        return shallowCopy(base);
      } // property descriptors are recycled to make sure we don't create a get and set closure per property,
      // but share them all instead


      var descriptors = {};

      function proxyProperty(draft, prop, enumerable) {
        var desc = descriptors[prop];

        if (desc) {
          desc.enumerable = enumerable;
        } else {
          descriptors[prop] = desc = {
            configurable: true,
            enumerable: enumerable,
            get: function () {
              return get$1(this[DRAFT_STATE], prop);
            },
            set: function (value) {
              set$1(this[DRAFT_STATE], prop, value);
            }
          };
        }

        Object.defineProperty(draft, prop, desc);
      }

      function assertUnrevoked(state) {
        if (state.revoked === true) { throw new Error("Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? " + JSON.stringify(latest(state))); }
      } // This looks expensive, but only proxies are visited, and only objects without known changes are scanned.

      function markChangesSweep(drafts) {
        // The natural order of drafts in the `scope` array is based on when they
        // were accessed. By processing drafts in reverse natural order, we have a
        // better chance of processing leaf nodes first. When a leaf node is known to
        // have changed, we can avoid any traversal of its ancestor nodes.
        for (var i = drafts.length - 1; i >= 0; i--) {
          var state = drafts[i][DRAFT_STATE];

          if (!state.modified) {
            switch (state.type) {
              case ProxyType.ES5Array:
                if (hasArrayChanges(state)) { markChangedES5(state); }
                break;

              case ProxyType.ES5Object:
                if (hasObjectChanges(state)) { markChangedES5(state); }
                break;
            }
          }
        }
      }

      function markChangesRecursively(object) {
        if (!object || typeof object !== "object") { return; }
        var state = object[DRAFT_STATE];
        if (!state) { return; }
        var base = state.base,
            draft = state.draft,
            assigned = state.assigned,
            type = state.type;

        if (type === ProxyType.ES5Object) {
          // Look for added keys.
          // TODO: looks quite duplicate to hasObjectChanges,
          // probably there is a faster way to detect changes, as sweep + recurse seems to do some
          // unnecessary work.
          // also: probably we can store the information we detect here, to speed up tree finalization!
          each(draft, function (key) {
            if (key === DRAFT_STATE) { return; } // The `undefined` check is a fast path for pre-existing keys.

            if (base[key] === undefined && !has(base, key)) {
              assigned[key] = true;
              markChangedES5(state);
            } else if (!assigned[key]) {
              // Only untouched properties trigger recursion.
              markChangesRecursively(draft[key]);
            }
          }); // Look for removed keys.

          each(base, function (key) {
            // The `undefined` check is a fast path for pre-existing keys.
            if (draft[key] === undefined && !has(draft, key)) {
              assigned[key] = false;
              markChangedES5(state);
            }
          });
        } else if (type === ProxyType.ES5Array) {
          if (hasArrayChanges(state)) {
            markChangedES5(state);
            assigned.length = true;
          }

          if (draft.length < base.length) {
            for (var i = draft.length; i < base.length; i++) { assigned[i] = false; }
          } else {
            for (var i = base.length; i < draft.length; i++) { assigned[i] = true; }
          } // Minimum count is enough, the other parts has been processed.


          var min = Math.min(draft.length, base.length);

          for (var i = 0; i < min; i++) {
            // Only untouched indices trigger recursion.
            if (assigned[i] === undefined) { markChangesRecursively(draft[i]); }
          }
        }
      }

      function hasObjectChanges(state) {
        var base = state.base,
            draft = state.draft; // Search for added keys and changed keys. Start at the back, because
        // non-numeric keys are ordered by time of definition on the object.

        var keys = Object.keys(draft);

        for (var i = keys.length - 1; i >= 0; i--) {
          var key = keys[i];
          var baseValue = base[key]; // The `undefined` check is a fast path for pre-existing keys.

          if (baseValue === undefined && !has(base, key)) {
            return true;
          } // Once a base key is deleted, future changes go undetected, because its
          // descriptor is erased. This branch detects any missed changes.
          else {
              var value = draft[key];
              var state_1 = value && value[DRAFT_STATE];

              if (state_1 ? state_1.base !== baseValue : !is(value, baseValue)) {
                return true;
              }
            }
        } // At this point, no keys were added or changed.
        // Compare key count to determine if keys were deleted.


        return keys.length !== Object.keys(base).length;
      }

      function hasArrayChanges(state) {
        var draft = state.draft;
        if (draft.length !== state.base.length) { return true; } // See #116
        // If we first shorten the length, our array interceptors will be removed.
        // If after that new items are added, result in the same original length,
        // those last items will have no intercepting property.
        // So if there is no own descriptor on the last position, we know that items were removed and added
        // N.B.: splice, unshift, etc only shift values around, but not prop descriptors, so we only have to check
        // the last one

        var descriptor = Object.getOwnPropertyDescriptor(draft, draft.length - 1); // descriptor can be null, but only for newly created sparse arrays, eg. new Array(10)

        if (descriptor && !descriptor.get) { return true; } // For all other cases, we don't have to compare, as they would have been picked up by the index setters

        return false;
      }

      var DraftMap = function (_super) {
        if (!_super) {
          /* istanbul ignore next */
          throw new Error("Map is not polyfilled");
        }

        __extends(DraftMap, _super); // Create class manually, cause #502


        function DraftMap(target, parent) {
          this[DRAFT_STATE] = {
            type: ProxyType.Map,
            parent: parent,
            scope: parent ? parent.scope : ImmerScope.current,
            modified: false,
            finalized: false,
            copy: undefined,
            assigned: undefined,
            base: target,
            draft: this,
            isManual: false,
            revoked: false
          };
          return this;
        }

        var p = DraftMap.prototype; // TODO: smaller build size if we create a util for Object.defineProperty

        Object.defineProperty(p, "size", {
          get: function () {
            return latest(this[DRAFT_STATE]).size;
          },
          enumerable: true,
          configurable: true
        });

        p.has = function (key) {
          return latest(this[DRAFT_STATE]).has(key);
        };

        p.set = function (key, value) {
          var state = this[DRAFT_STATE];
          assertUnrevoked(state);

          if (latest(state).get(key) !== value) {
            prepareCopy$2(state);
            state.scope.immer.markChanged(state);
            state.assigned.set(key, true);
            state.copy.set(key, value);
            state.assigned.set(key, true);
          }

          return this;
        };

        p.delete = function (key) {
          if (!this.has(key)) {
            return false;
          }

          var state = this[DRAFT_STATE];
          assertUnrevoked(state);
          prepareCopy$2(state);
          state.scope.immer.markChanged(state);
          state.assigned.set(key, false);
          state.copy.delete(key);
          return true;
        };

        p.clear = function () {
          var state = this[DRAFT_STATE];
          assertUnrevoked(state);
          prepareCopy$2(state);
          state.scope.immer.markChanged(state);
          state.assigned = new Map();
          return state.copy.clear();
        };

        p.forEach = function (cb, thisArg) {
          var _this = this;

          var state = this[DRAFT_STATE];
          latest(state).forEach(function (_value, key, _map) {
            cb.call(thisArg, _this.get(key), key, _this);
          });
        };

        p.get = function (key) {
          var state = this[DRAFT_STATE];
          assertUnrevoked(state);
          var value = latest(state).get(key);

          if (state.finalized || !isDraftable(value)) {
            return value;
          }

          if (value !== state.base.get(key)) {
            return value; // either already drafted or reassigned
          } // despite what it looks, this creates a draft only once, see above condition


          var draft = state.scope.immer.createProxy(value, state);
          prepareCopy$2(state);
          state.copy.set(key, draft);
          return draft;
        };

        p.keys = function () {
          return latest(this[DRAFT_STATE]).keys();
        };

        p.values = function () {
          var _a;

          var _this = this;

          var iterator = this.keys();
          return _a = {}, _a[iteratorSymbol] = function () {
            return _this.values();
          }, _a.next = function () {
            var r = iterator.next();
            /* istanbul ignore next */

            if (r.done) { return r; }

            var value = _this.get(r.value);

            return {
              done: false,
              value: value
            };
          }, _a;
        };

        p.entries = function () {
          var _a;

          var _this = this;

          var iterator = this.keys();
          return _a = {}, _a[iteratorSymbol] = function () {
            return _this.entries();
          }, _a.next = function () {
            var r = iterator.next();
            /* istanbul ignore next */

            if (r.done) { return r; }

            var value = _this.get(r.value);

            return {
              done: false,
              value: [r.value, value]
            };
          }, _a;
        };

        p[iteratorSymbol] = function () {
          return this.entries();
        };

        return DraftMap;
      }(Map);

      function proxyMap(target, parent) {
        // @ts-ignore
        return new DraftMap(target, parent);
      }

      function prepareCopy$2(state) {
        if (!state.copy) {
          state.assigned = new Map();
          state.copy = new Map(state.base);
        }
      }

      var DraftSet = function (_super) {
        if (!_super) {
          /* istanbul ignore next */
          throw new Error("Set is not polyfilled");
        }

        __extends(DraftSet, _super); // Create class manually, cause #502


        function DraftSet(target, parent) {
          this[DRAFT_STATE] = {
            type: ProxyType.Set,
            parent: parent,
            scope: parent ? parent.scope : ImmerScope.current,
            modified: false,
            finalized: false,
            copy: undefined,
            base: target,
            draft: this,
            drafts: new Map(),
            revoked: false,
            isManual: false
          };
          return this;
        }

        var p = DraftSet.prototype;
        Object.defineProperty(p, "size", {
          get: function () {
            return latest(this[DRAFT_STATE]).size;
          },
          enumerable: true,
          configurable: true
        });

        p.has = function (value) {
          var state = this[DRAFT_STATE];
          assertUnrevoked(state); // bit of trickery here, to be able to recognize both the value, and the draft of its value

          if (!state.copy) {
            return state.base.has(value);
          }

          if (state.copy.has(value)) { return true; }
          if (state.drafts.has(value) && state.copy.has(state.drafts.get(value))) { return true; }
          return false;
        };

        p.add = function (value) {
          var state = this[DRAFT_STATE];
          assertUnrevoked(state);

          if (state.copy) {
            state.copy.add(value);
          } else if (!state.base.has(value)) {
            prepareCopy$3(state);
            state.scope.immer.markChanged(state);
            state.copy.add(value);
          }

          return this;
        };

        p.delete = function (value) {
          if (!this.has(value)) {
            return false;
          }

          var state = this[DRAFT_STATE];
          assertUnrevoked(state);
          prepareCopy$3(state);
          state.scope.immer.markChanged(state);
          return state.copy.delete(value) || (state.drafts.has(value) ? state.copy.delete(state.drafts.get(value)) :
          /* istanbul ignore next */
          false);
        };

        p.clear = function () {
          var state = this[DRAFT_STATE];
          assertUnrevoked(state);
          prepareCopy$3(state);
          state.scope.immer.markChanged(state);
          return state.copy.clear();
        };

        p.values = function () {
          var state = this[DRAFT_STATE];
          assertUnrevoked(state);
          prepareCopy$3(state);
          return state.copy.values();
        };

        p.entries = function entries() {
          var state = this[DRAFT_STATE];
          assertUnrevoked(state);
          prepareCopy$3(state);
          return state.copy.entries();
        };

        p.keys = function () {
          return this.values();
        };

        p[iteratorSymbol] = function () {
          return this.values();
        };

        p.forEach = function forEach(cb, thisArg) {
          var iterator = this.values();
          var result = iterator.next();

          while (!result.done) {
            cb.call(thisArg, result.value, result.value, this);
            result = iterator.next();
          }
        };

        return DraftSet;
      }(Set);

      function proxySet(target, parent) {
        // @ts-ignore
        return new DraftSet(target, parent);
      }

      function prepareCopy$3(state) {
        if (!state.copy) {
          // create drafts for all entries to preserve insertion order
          state.copy = new Set();
          state.base.forEach(function (value) {
            if (isDraftable(value)) {
              var draft = state.scope.immer.createProxy(value, state);
              state.drafts.set(value, draft);
              state.copy.add(draft);
            } else {
              state.copy.add(value);
            }
          });
        }
      }

      function generatePatches(state, basePath, patches, inversePatches) {
        switch (state.type) {
          case ProxyType.ProxyObject:
          case ProxyType.ES5Object:
          case ProxyType.Map:
            return generatePatchesFromAssigned(state, basePath, patches, inversePatches);

          case ProxyType.ES5Array:
          case ProxyType.ProxyArray:
            return generateArrayPatches(state, basePath, patches, inversePatches);

          case ProxyType.Set:
            return generateSetPatches(state, basePath, patches, inversePatches);
        }
      }

      function generateArrayPatches(state, basePath, patches, inversePatches) {
        var _a, _b;

        var base = state.base,
            assigned = state.assigned,
            copy = state.copy;
        /* istanbul ignore next */

        if (!copy) { die(); } // Reduce complexity by ensuring `base` is never longer.

        if (copy.length < base.length) {
          _a = [copy, base], base = _a[0], copy = _a[1];
          _b = [inversePatches, patches], patches = _b[0], inversePatches = _b[1];
        }

        var delta = copy.length - base.length; // Find the first replaced index.

        var start = 0;

        while (base[start] === copy[start] && start < base.length) {
          ++start;
        } // Find the last replaced index. Search from the end to optimize splice patches.


        var end = base.length;

        while (end > start && base[end - 1] === copy[end + delta - 1]) {
          --end;
        } // Process replaced indices.


        for (var i = start; i < end; ++i) {
          if (assigned[i] && copy[i] !== base[i]) {
            var path = basePath.concat([i]);
            patches.push({
              op: "replace",
              path: path,
              value: copy[i]
            });
            inversePatches.push({
              op: "replace",
              path: path,
              value: base[i]
            });
          }
        }

        var replaceCount = patches.length; // Process added indices.

        for (var i = end + delta - 1; i >= end; --i) {
          var path = basePath.concat([i]);
          patches[replaceCount + i - end] = {
            op: "add",
            path: path,
            value: copy[i]
          };
          inversePatches.push({
            op: "remove",
            path: path
          });
        }
      } // This is used for both Map objects and normal objects.


      function generatePatchesFromAssigned(state, basePath, patches, inversePatches) {
        var base = state.base,
            copy = state.copy;
        each(state.assigned, function (key, assignedValue) {
          var origValue = get(base, key);
          var value = get(copy, key);
          var op = !assignedValue ? "remove" : has(base, key) ? "replace" : "add";
          if (origValue === value && op === "replace") { return; }
          var path = basePath.concat(key);
          patches.push(op === "remove" ? {
            op: op,
            path: path
          } : {
            op: op,
            path: path,
            value: value
          });
          inversePatches.push(op === "add" ? {
            op: "remove",
            path: path
          } : op === "remove" ? {
            op: "add",
            path: path,
            value: origValue
          } : {
            op: "replace",
            path: path,
            value: origValue
          });
        });
      }

      function generateSetPatches(state, basePath, patches, inversePatches) {
        var base = state.base,
            copy = state.copy;
        var i = 0;
        base.forEach(function (value) {
          if (!copy.has(value)) {
            var path = basePath.concat([i]);
            patches.push({
              op: "remove",
              path: path,
              value: value
            });
            inversePatches.unshift({
              op: "add",
              path: path,
              value: value
            });
          }

          i++;
        });
        i = 0;
        copy.forEach(function (value) {
          if (!base.has(value)) {
            var path = basePath.concat([i]);
            patches.push({
              op: "add",
              path: path,
              value: value
            });
            inversePatches.unshift({
              op: "remove",
              path: path,
              value: value
            });
          }

          i++;
        });
      }

      function applyPatches(draft, patches) {
        patches.forEach(function (patch) {
          var path = patch.path,
              op = patch.op;
          /* istanbul ignore next */

          if (!path.length) { die(); }
          var base = draft;

          for (var i = 0; i < path.length - 1; i++) {
            base = get(base, path[i]);
            if (!base || typeof base !== "object") { throw new Error("Cannot apply patch, path doesn't resolve: " + path.join("/")); } // prettier-ignore
          }

          var type = getArchtype(base);
          var value = deepClonePatchValue(patch.value); // used to clone patch to ensure original patch is not modified, see #411

          var key = path[path.length - 1];

          switch (op) {
            case "replace":
              switch (type) {
                case Archtype.Map:
                  return base.set(key, value);

                /* istanbul ignore next */

                case Archtype.Set:
                  throw new Error('Sets cannot have "replace" patches.');

                default:
                  // if value is an object, then it's assigned by reference
                  // in the following add or remove ops, the value field inside the patch will also be modifyed
                  // so we use value from the cloned patch
                  // @ts-ignore
                  return base[key] = value;
              }

            case "add":
              switch (type) {
                case Archtype.Array:
                  return base.splice(key, 0, value);

                case Archtype.Map:
                  return base.set(key, value);

                case Archtype.Set:
                  return base.add(value);

                default:
                  return base[key] = value;
              }

            case "remove":
              switch (type) {
                case Archtype.Array:
                  return base.splice(key, 1);

                case Archtype.Map:
                  return base.delete(key);

                case Archtype.Set:
                  return base.delete(patch.value);

                default:
                  return delete base[key];
              }

            default:
              throw new Error("Unsupported patch operation: " + op);
          }
        });
        return draft;
      }

      function deepClonePatchValue(obj) {
        if (!obj || typeof obj !== "object") { return obj; }
        if (Array.isArray(obj)) { return obj.map(deepClonePatchValue); }
        if (isMap(obj)) { return new Map(Array.from(obj.entries()).map(function (_a) {
          var k = _a[0],
              v = _a[1];
          return [k, deepClonePatchValue(v)];
        })); }
        if (isSet(obj)) { return new Set(Array.from(obj).map(deepClonePatchValue)); }
        var cloned = Object.create(Object.getPrototypeOf(obj));

        for (var key in obj) { cloned[key] = deepClonePatchValue(obj[key]); }

        return cloned;
      }

      /*! *****************************************************************************
      Copyright (c) Microsoft Corporation. All rights reserved.
      Licensed under the Apache License, Version 2.0 (the "License"); you may not use
      this file except in compliance with the License. You may obtain a copy of the
      License at http://www.apache.org/licenses/LICENSE-2.0

      THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
      KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
      WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
      MERCHANTABLITY OR NON-INFRINGEMENT.

      See the Apache Version 2.0 License for specific language governing permissions
      and limitations under the License.
      ***************************************************************************** */

      function __spreadArrays() {
          for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
          for (var r = Array(s), k = 0, i = 0; i < il; i++)
              for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                  r[k] = a[j];
          return r;
      }

      /* istanbul ignore next */

      function verifyMinified() {}

      var configDefaults = {
        useProxies: typeof Proxy !== "undefined" && typeof Proxy.revocable !== "undefined" && typeof Reflect !== "undefined",
        autoFreeze: typeof process !== "undefined" ? process.env.NODE_ENV !== "production" :
        /* istanbul ignore next */
        verifyMinified.name === "verifyMinified",
        onAssign: null,
        onDelete: null,
        onCopy: null
      };

      var Immer =
      /** @class */
      function () {
        function Immer(config) {
          var _this = this;

          this.useProxies = false;
          this.autoFreeze = false;
          each(configDefaults, function (key, value) {
            var _a, _b; // @ts-ignore


            _this[key] = (_b = (_a = config) === null || _a === void 0 ? void 0 : _a[key], _b !== null && _b !== void 0 ? _b : value);
          });
          this.setUseProxies(this.useProxies);
          this.produce = this.produce.bind(this);
          this.produceWithPatches = this.produceWithPatches.bind(this);
        }
        /**
         * The `produce` function takes a value and a "recipe function" (whose
         * return value often depends on the base state). The recipe function is
         * free to mutate its first argument however it wants. All mutations are
         * only ever applied to a __copy__ of the base state.
         *
         * Pass only a function to create a "curried producer" which relieves you
         * from passing the recipe function every time.
         *
         * Only plain objects and arrays are made mutable. All other objects are
         * considered uncopyable.
         *
         * Note: This function is __bound__ to its `Immer` instance.
         *
         * @param {any} base - the initial state
         * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified
         * @param {Function} patchListener - optional function that will be called with all the patches produced here
         * @returns {any} a new state, or the initial state if nothing was modified
         */


        Immer.prototype.produce = function (base, recipe, patchListener) {
          var _this = this; // curried invocation


          if (typeof base === "function" && typeof recipe !== "function") {
            var defaultBase_1 = recipe;
            recipe = base;
            var self_1 = this;
            return function curriedProduce(base) {
              var arguments$1 = arguments;

              var _this = this;

              if (base === void 0) {
                base = defaultBase_1;
              }

              var args = [];

              for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments$1[_i];
              }

              return self_1.produce(base, function (draft) {
                return recipe.call.apply(recipe, __spreadArrays([_this, draft], args));
              }); // prettier-ignore
            };
          } // prettier-ignore


          {
            if (typeof recipe !== "function") {
              throw new Error("The first or second argument to `produce` must be a function");
            }

            if (patchListener !== undefined && typeof patchListener !== "function") {
              throw new Error("The third argument to `produce` must be a function or undefined");
            }
          }
          var result; // Only plain objects, arrays, and "immerable classes" are drafted.

          if (isDraftable(base)) {
            var scope_1 = ImmerScope.enter(this);
            var proxy = this.createProxy(base, undefined);
            var hasError = true;

            try {
              result = recipe(proxy);
              hasError = false;
            } finally {
              // finally instead of catch + rethrow better preserves original stack
              if (hasError) { scope_1.revoke(); }else { scope_1.leave(); }
            }

            if (typeof Promise !== "undefined" && result instanceof Promise) {
              return result.then(function (result) {
                scope_1.usePatches(patchListener);
                return processResult(_this, result, scope_1);
              }, function (error) {
                scope_1.revoke();
                throw error;
              });
            }

            scope_1.usePatches(patchListener);
            return processResult(this, result, scope_1);
          } else {
            result = recipe(base);
            if (result === NOTHING) { return undefined; }
            if (result === undefined) { result = base; }
            maybeFreeze(this, result, true);
            return result;
          }
        };

        Immer.prototype.produceWithPatches = function (arg1, arg2, arg3) {
          var _this = this;

          if (typeof arg1 === "function") {
            return function (state) {
              var arguments$1 = arguments;

              var args = [];

              for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments$1[_i];
              }

              return _this.produceWithPatches(state, function (draft) {
                return arg1.apply(void 0, __spreadArrays([draft], args));
              });
            };
          } // non-curried form

          /* istanbul ignore next */


          if (arg3) { die(); }
          var patches, inversePatches;
          var nextState = this.produce(arg1, arg2, function (p, ip) {
            patches = p;
            inversePatches = ip;
          });
          return [nextState, patches, inversePatches];
        };

        Immer.prototype.createDraft = function (base) {
          if (!isDraftable(base)) {
            throw new Error("First argument to `createDraft` must be a plain object, an array, or an immerable object"); // prettier-ignore
          }

          var scope = ImmerScope.enter(this);
          var proxy = this.createProxy(base, undefined);
          proxy[DRAFT_STATE].isManual = true;
          scope.leave();
          return proxy;
        };

        Immer.prototype.finishDraft = function (draft, patchListener) {
          var state = draft && draft[DRAFT_STATE];

          if (!state || !state.isManual) {
            throw new Error("First argument to `finishDraft` must be a draft returned by `createDraft`"); // prettier-ignore
          }

          if (state.finalized) {
            throw new Error("The given draft is already finalized"); // prettier-ignore
          }

          var scope = state.scope;
          scope.usePatches(patchListener);
          return processResult(this, undefined, scope);
        };
        /**
         * Pass true to automatically freeze all copies created by Immer.
         *
         * By default, auto-freezing is disabled in production.
         */


        Immer.prototype.setAutoFreeze = function (value) {
          this.autoFreeze = value;
        };
        /**
         * Pass true to use the ES2015 `Proxy` class when creating drafts, which is
         * always faster than using ES5 proxies.
         *
         * By default, feature detection is used, so calling this is rarely necessary.
         */


        Immer.prototype.setUseProxies = function (value) {
          this.useProxies = value;
        };

        Immer.prototype.applyPatches = function (base, patches) {
          // If a patch replaces the entire state, take that replacement as base
          // before applying patches
          var i;

          for (i = patches.length - 1; i >= 0; i--) {
            var patch = patches[i];

            if (patch.path.length === 0 && patch.op === "replace") {
              base = patch.value;
              break;
            }
          }

          if (isDraft(base)) {
            // N.B: never hits if some patch a replacement, patches are never drafts
            return applyPatches(base, patches);
          } // Otherwise, produce a copy of the base state.


          return this.produce(base, function (draft) {
            return applyPatches(draft, patches.slice(i + 1));
          });
        };

        Immer.prototype.createProxy = function (value, parent) {
          // precondition: createProxy should be guarded by isDraftable, so we know we can safely draft
          var draft = isMap(value) ? proxyMap(value, parent) : isSet(value) ? proxySet(value, parent) : this.useProxies ? createProxy(value, parent) : createES5Proxy(value, parent);
          var scope = parent ? parent.scope : ImmerScope.current;
          scope.drafts.push(draft);
          return draft;
        };

        Immer.prototype.willFinalize = function (scope, thing, isReplaced) {
          if (!this.useProxies) { willFinalizeES5(scope, thing, isReplaced); }
        };

        Immer.prototype.markChanged = function (state) {
          if (this.useProxies) {
            markChanged(state);
          } else {
            markChangedES5(state);
          }
        };

        return Immer;
      }();

      var immer = new Immer();
      /**
       * The `produce` function takes a value and a "recipe function" (whose
       * return value often depends on the base state). The recipe function is
       * free to mutate its first argument however it wants. All mutations are
       * only ever applied to a __copy__ of the base state.
       *
       * Pass only a function to create a "curried producer" which relieves you
       * from passing the recipe function every time.
       *
       * Only plain objects and arrays are made mutable. All other objects are
       * considered uncopyable.
       *
       * Note: This function is __bound__ to its `Immer` instance.
       *
       * @param {any} base - the initial state
       * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified
       * @param {Function} patchListener - optional function that will be called with all the patches produced here
       * @returns {any} a new state, or the initial state if nothing was modified
       */

      var produce = immer.produce;
      /**
       * Like `produce`, but `produceWithPatches` always returns a tuple
       * [nextState, patches, inversePatches] (instead of just the next state)
       */

      var produceWithPatches = immer.produceWithPatches.bind(immer);
      /**
       * Pass true to automatically freeze all copies created by Immer.
       *
       * By default, auto-freezing is disabled in production.
       */

      var setAutoFreeze = immer.setAutoFreeze.bind(immer);
      /**
       * Pass true to use the ES2015 `Proxy` class when creating drafts, which is
       * always faster than using ES5 proxies.
       *
       * By default, feature detection is used, so calling this is rarely necessary.
       */

      var setUseProxies = immer.setUseProxies.bind(immer);
      /**
       * Apply an array of Immer patches to the first argument.
       *
       * This function is a producer, which means copy-on-write is in effect.
       */

      var applyPatches$1 = immer.applyPatches.bind(immer);
      /**
       * Create an Immer draft from the given base state, which may be a draft itself.
       * The draft can be modified until you finalize it with the `finishDraft` function.
       */

      var createDraft = immer.createDraft.bind(immer);
      /**
       * Finalize an Immer draft from a `createDraft` call, returning the base state
       * (if no changes were made) or a modified copy. The draft must *not* be
       * mutated afterwards.
       *
       * Pass a function as the 2nd argument to generate Immer patches based on the
       * changes that were made.
       */

      var finishDraft = immer.finishDraft.bind(immer);

      function isColumnOriented (data) {
        if (data.constructor === Object) {
          const columns = Object.keys(data).map(key => data[key]);
          return columns.every(column => column.constructor === Array)
        }

        return false
      }

      function isRowOriented (data) {
        if (data.constructor === Array) {
          return data.every(row => row.constructor === Object)
        }

        return false
      }

      function isGeoJSON (data) {
        const hasCorrectType = data.type === 'FeatureCollection';
        const hasCorrectFeatures = data.features && data.features.length > 0;

        return hasCorrectType && hasCorrectFeatures
      }

      function checkFormatColumnData (data) {
        checkFormat(data, { internal: false });
      }

      function checkFormatInternal (data) {
        checkFormat(data, { internal: true });
      }

      function checkFormat (data, { internal }) {
        let dataLength = null;
        const columnNameChecker = internal
          ? checkInternalDataColumnName
          : checkRegularColumnName;

        for (const columnName in data) {
          columnNameChecker(columnName);
          const column = data[columnName];

          dataLength = dataLength || column.length;

          if (internal === false && dataLength === 0) {
            throw new Error('Invalid data: columns cannot be empty')
          }

          if (dataLength !== column.length) {
            throw new Error('Invalid data: columns must be of same length')
          }
        }
      }

      function checkRegularColumnName (columnName) {
        if (columnName.match(forbiddenChars)) {
          throw new Error(`Invalid column name '${columnName}': '$' and '/' are not allowed'`)
        }
      }

      const forbiddenChars = /[/$]/;

      function checkInternalDataColumnName (columnName) {
        if (!['$key', '$geometry', '$grouped'].includes(columnName)) {
          checkRegularColumnName(columnName);
        }
      }

      // Adds floating point numbers with twice the normal precision.
      // Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and
      // Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)
      // 305–363 (1997).
      // Code adapted from GeographicLib by Charles F. F. Karney,
      // http://geographiclib.sourceforge.net/

      function adder() {
        return new Adder;
      }

      function Adder() {
        this.reset();
      }

      Adder.prototype = {
        constructor: Adder,
        reset: function() {
          this.s = // rounded value
          this.t = 0; // exact error
        },
        add: function(y) {
          add(temp, y, this.t);
          add(this, temp.s, this.s);
          if (this.s) this.t += temp.t;
          else this.s = temp.t;
        },
        valueOf: function() {
          return this.s;
        }
      };

      var temp = new Adder;

      function add(adder, a, b) {
        var x = adder.s = a + b,
            bv = x - a,
            av = x - bv;
        adder.t = (a - av) + (b - bv);
      }

      var pi = Math.PI;
      var tau = pi * 2;

      var abs = Math.abs;
      var sqrt = Math.sqrt;

      function noop() {}

      function streamGeometry(geometry, stream) {
        if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
          streamGeometryType[geometry.type](geometry, stream);
        }
      }

      var streamObjectType = {
        Feature: function(object, stream) {
          streamGeometry(object.geometry, stream);
        },
        FeatureCollection: function(object, stream) {
          var features = object.features, i = -1, n = features.length;
          while (++i < n) streamGeometry(features[i].geometry, stream);
        }
      };

      var streamGeometryType = {
        Sphere: function(object, stream) {
          stream.sphere();
        },
        Point: function(object, stream) {
          object = object.coordinates;
          stream.point(object[0], object[1], object[2]);
        },
        MultiPoint: function(object, stream) {
          var coordinates = object.coordinates, i = -1, n = coordinates.length;
          while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);
        },
        LineString: function(object, stream) {
          streamLine(object.coordinates, stream, 0);
        },
        MultiLineString: function(object, stream) {
          var coordinates = object.coordinates, i = -1, n = coordinates.length;
          while (++i < n) streamLine(coordinates[i], stream, 0);
        },
        Polygon: function(object, stream) {
          streamPolygon(object.coordinates, stream);
        },
        MultiPolygon: function(object, stream) {
          var coordinates = object.coordinates, i = -1, n = coordinates.length;
          while (++i < n) streamPolygon(coordinates[i], stream);
        },
        GeometryCollection: function(object, stream) {
          var geometries = object.geometries, i = -1, n = geometries.length;
          while (++i < n) streamGeometry(geometries[i], stream);
        }
      };

      function streamLine(coordinates, stream, closed) {
        var i = -1, n = coordinates.length - closed, coordinate;
        stream.lineStart();
        while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);
        stream.lineEnd();
      }

      function streamPolygon(coordinates, stream) {
        var i = -1, n = coordinates.length;
        stream.polygonStart();
        while (++i < n) streamLine(coordinates[i], stream, 1);
        stream.polygonEnd();
      }

      function geoStream(object, stream) {
        if (object && streamObjectType.hasOwnProperty(object.type)) {
          streamObjectType[object.type](object, stream);
        } else {
          streamGeometry(object, stream);
        }
      }

      function identity(x) {
        return x;
      }

      var areaSum = adder(),
          areaRingSum = adder(),
          x00,
          y00,
          x0,
          y0;

      var areaStream = {
        point: noop,
        lineStart: noop,
        lineEnd: noop,
        polygonStart: function() {
          areaStream.lineStart = areaRingStart;
          areaStream.lineEnd = areaRingEnd;
        },
        polygonEnd: function() {
          areaStream.lineStart = areaStream.lineEnd = areaStream.point = noop;
          areaSum.add(abs(areaRingSum));
          areaRingSum.reset();
        },
        result: function() {
          var area = areaSum / 2;
          areaSum.reset();
          return area;
        }
      };

      function areaRingStart() {
        areaStream.point = areaPointFirst;
      }

      function areaPointFirst(x, y) {
        areaStream.point = areaPoint;
        x00 = x0 = x, y00 = y0 = y;
      }

      function areaPoint(x, y) {
        areaRingSum.add(y0 * x - x0 * y);
        x0 = x, y0 = y;
      }

      function areaRingEnd() {
        areaPoint(x00, y00);
      }

      var x0$1 = Infinity,
          y0$1 = x0$1,
          x1 = -x0$1,
          y1 = x1;

      var boundsStream = {
        point: boundsPoint,
        lineStart: noop,
        lineEnd: noop,
        polygonStart: noop,
        polygonEnd: noop,
        result: function() {
          var bounds = [[x0$1, y0$1], [x1, y1]];
          x1 = y1 = -(y0$1 = x0$1 = Infinity);
          return bounds;
        }
      };

      function boundsPoint(x, y) {
        if (x < x0$1) x0$1 = x;
        if (x > x1) x1 = x;
        if (y < y0$1) y0$1 = y;
        if (y > y1) y1 = y;
      }

      // TODO Enforce positive area for exterior, negative area for interior?

      var X0 = 0,
          Y0 = 0,
          Z0 = 0,
          X1 = 0,
          Y1 = 0,
          Z1 = 0,
          X2 = 0,
          Y2 = 0,
          Z2 = 0,
          x00$1,
          y00$1,
          x0$2,
          y0$2;

      var centroidStream = {
        point: centroidPoint,
        lineStart: centroidLineStart,
        lineEnd: centroidLineEnd,
        polygonStart: function() {
          centroidStream.lineStart = centroidRingStart;
          centroidStream.lineEnd = centroidRingEnd;
        },
        polygonEnd: function() {
          centroidStream.point = centroidPoint;
          centroidStream.lineStart = centroidLineStart;
          centroidStream.lineEnd = centroidLineEnd;
        },
        result: function() {
          var centroid = Z2 ? [X2 / Z2, Y2 / Z2]
              : Z1 ? [X1 / Z1, Y1 / Z1]
              : Z0 ? [X0 / Z0, Y0 / Z0]
              : [NaN, NaN];
          X0 = Y0 = Z0 =
          X1 = Y1 = Z1 =
          X2 = Y2 = Z2 = 0;
          return centroid;
        }
      };

      function centroidPoint(x, y) {
        X0 += x;
        Y0 += y;
        ++Z0;
      }

      function centroidLineStart() {
        centroidStream.point = centroidPointFirstLine;
      }

      function centroidPointFirstLine(x, y) {
        centroidStream.point = centroidPointLine;
        centroidPoint(x0$2 = x, y0$2 = y);
      }

      function centroidPointLine(x, y) {
        var dx = x - x0$2, dy = y - y0$2, z = sqrt(dx * dx + dy * dy);
        X1 += z * (x0$2 + x) / 2;
        Y1 += z * (y0$2 + y) / 2;
        Z1 += z;
        centroidPoint(x0$2 = x, y0$2 = y);
      }

      function centroidLineEnd() {
        centroidStream.point = centroidPoint;
      }

      function centroidRingStart() {
        centroidStream.point = centroidPointFirstRing;
      }

      function centroidRingEnd() {
        centroidPointRing(x00$1, y00$1);
      }

      function centroidPointFirstRing(x, y) {
        centroidStream.point = centroidPointRing;
        centroidPoint(x00$1 = x0$2 = x, y00$1 = y0$2 = y);
      }

      function centroidPointRing(x, y) {
        var dx = x - x0$2,
            dy = y - y0$2,
            z = sqrt(dx * dx + dy * dy);

        X1 += z * (x0$2 + x) / 2;
        Y1 += z * (y0$2 + y) / 2;
        Z1 += z;

        z = y0$2 * x - x0$2 * y;
        X2 += z * (x0$2 + x);
        Y2 += z * (y0$2 + y);
        Z2 += z * 3;
        centroidPoint(x0$2 = x, y0$2 = y);
      }

      function PathContext(context) {
        this._context = context;
      }

      PathContext.prototype = {
        _radius: 4.5,
        pointRadius: function(_) {
          return this._radius = _, this;
        },
        polygonStart: function() {
          this._line = 0;
        },
        polygonEnd: function() {
          this._line = NaN;
        },
        lineStart: function() {
          this._point = 0;
        },
        lineEnd: function() {
          if (this._line === 0) this._context.closePath();
          this._point = NaN;
        },
        point: function(x, y) {
          switch (this._point) {
            case 0: {
              this._context.moveTo(x, y);
              this._point = 1;
              break;
            }
            case 1: {
              this._context.lineTo(x, y);
              break;
            }
            default: {
              this._context.moveTo(x + this._radius, y);
              this._context.arc(x, y, this._radius, 0, tau);
              break;
            }
          }
        },
        result: noop
      };

      var lengthSum = adder(),
          lengthRing,
          x00$2,
          y00$2,
          x0$3,
          y0$3;

      var lengthStream = {
        point: noop,
        lineStart: function() {
          lengthStream.point = lengthPointFirst;
        },
        lineEnd: function() {
          if (lengthRing) lengthPoint(x00$2, y00$2);
          lengthStream.point = noop;
        },
        polygonStart: function() {
          lengthRing = true;
        },
        polygonEnd: function() {
          lengthRing = null;
        },
        result: function() {
          var length = +lengthSum;
          lengthSum.reset();
          return length;
        }
      };

      function lengthPointFirst(x, y) {
        lengthStream.point = lengthPoint;
        x00$2 = x0$3 = x, y00$2 = y0$3 = y;
      }

      function lengthPoint(x, y) {
        x0$3 -= x, y0$3 -= y;
        lengthSum.add(sqrt(x0$3 * x0$3 + y0$3 * y0$3));
        x0$3 = x, y0$3 = y;
      }

      function PathString() {
        this._string = [];
      }

      PathString.prototype = {
        _radius: 4.5,
        _circle: circle(4.5),
        pointRadius: function(_) {
          if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;
          return this;
        },
        polygonStart: function() {
          this._line = 0;
        },
        polygonEnd: function() {
          this._line = NaN;
        },
        lineStart: function() {
          this._point = 0;
        },
        lineEnd: function() {
          if (this._line === 0) this._string.push("Z");
          this._point = NaN;
        },
        point: function(x, y) {
          switch (this._point) {
            case 0: {
              this._string.push("M", x, ",", y);
              this._point = 1;
              break;
            }
            case 1: {
              this._string.push("L", x, ",", y);
              break;
            }
            default: {
              if (this._circle == null) this._circle = circle(this._radius);
              this._string.push("M", x, ",", y, this._circle);
              break;
            }
          }
        },
        result: function() {
          if (this._string.length) {
            var result = this._string.join("");
            this._string = [];
            return result;
          } else {
            return null;
          }
        }
      };

      function circle(radius) {
        return "m0," + radius
            + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius
            + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius
            + "z";
      }

      function geoPath(projection, context) {
        var pointRadius = 4.5,
            projectionStream,
            contextStream;

        function path(object) {
          if (object) {
            if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
            geoStream(object, projectionStream(contextStream));
          }
          return contextStream.result();
        }

        path.area = function(object) {
          geoStream(object, projectionStream(areaStream));
          return areaStream.result();
        };

        path.measure = function(object) {
          geoStream(object, projectionStream(lengthStream));
          return lengthStream.result();
        };

        path.bounds = function(object) {
          geoStream(object, projectionStream(boundsStream));
          return boundsStream.result();
        };

        path.centroid = function(object) {
          geoStream(object, projectionStream(centroidStream));
          return centroidStream.result();
        };

        path.projection = function(_) {
          return arguments.length ? (projectionStream = _ == null ? (projection = null, identity) : (projection = _).stream, path) : projection;
        };

        path.context = function(_) {
          if (!arguments.length) return context;
          contextStream = _ == null ? (context = null, new PathString) : new PathContext(context = _);
          if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
          return path;
        };

        path.pointRadius = function(_) {
          if (!arguments.length) return pointRadius;
          pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
          return path;
        };

        return path.projection(projection).context(context);
      }

      function isInvalid (value) {
        if (value === undefined || value === null) { return true }

        if (value.constructor === Number) {
          return !isFinite(value)
        }

        return false
      }

      function isDefined (value) {
        return value !== undefined
      }

      function isUndefined (value) {
        return value === undefined
      }

      function calculateBBoxGeometries (geometries) {
        let bbox = [[Infinity, Infinity], [-Infinity, -Infinity]];

        for (let i = 0; i < geometries.length; i++) {
          const geometry = geometries[i];

          if (!isInvalid(geometry)) {
            bbox = updateBBox(bbox, geometry);
          }
        }

        const bboxObj = {
          x: [bbox[0][0], bbox[1][0]],
          y: [bbox[0][1], bbox[1][1]]
        };

        return bboxObj
      }

      const path = geoPath();

      function updateBBox (bbox, geometry) {
        const newBBox = path.bounds(geometry);

        bbox[0][0] = bbox[0][0] < newBBox[0][0] ? bbox[0][0] : newBBox[0][0];
        bbox[0][1] = bbox[0][1] < newBBox[0][1] ? bbox[0][1] : newBBox[0][1];
        bbox[1][0] = bbox[1][0] > newBBox[1][0] ? bbox[1][0] : newBBox[1][0];
        bbox[1][1] = bbox[1][1] > newBBox[1][1] ? bbox[1][1] : newBBox[1][1];

        return bbox
      }

      function warn (message) {
        if (!process) console.warn(message);

        if (process && process.env.NODE_ENV !== 'test') {
          console.warn(message);
        }
      }

      function calculateDomain (column, columnName) {
        if (columnName === '$grouped') {
          throw new Error(`Cannot calculate domain of column '${columnName}'.`)
        }

        if (column.length === 0) {
          return createEmptyDomain(columnName)
        }

        const { firstValidValue, nValidValues } = findFirstValidValue(column);

        if (nValidValues === 0) {
          throw new Error(`Cannot calculate domain of column '${column}'. Column contains only missing values.`)
        }

        if (nValidValues > 0) {
          ensureValidDataType(firstValidValue);
          const type = getDataType(firstValidValue);

          if (columnName === '$geometry') {
            return calculateBBoxGeometries(column)
          }

          if (columnName !== '$geometry') {
            return calculateNonGeometryColumnDomain(column, columnName, nValidValues, firstValidValue, type)
          }
        }
      }

      function createEmptyDomain (columnName) {
        if (columnName === '$geometry') {
          return { x: [], y: [] }
        }

        if (columnName !== '$geometry') {
          return []
        }
      }

      function findFirstValidValue (column) {
        let firstValidValue;
        let nValidValues = 0;

        for (let i = 0; i < column.length; i++) {
          if (!isInvalid(column[i])) {
            nValidValues++;
            firstValidValue = firstValidValue || column[i];
          }

          if (nValidValues > 1) break
        }

        return { firstValidValue, nValidValues }
      }

      function calculateNonGeometryColumnDomain (column, columnName, nValidValues, firstValidValue, type) {
        let domain;
        const nUniqueValues = calculateNumberOfUniqueValues(column, type);

        if (columnHasOnlyOneUniqueValue(nValidValues, nUniqueValues)) {
          domain = calculateDomainForColumnWithOneUniqueValue(
            nValidValues, nUniqueValues, type, firstValidValue, columnName
          );
        } else {
          domain = calculateDomainForRegularColumn(type, column, columnName);
        }

        return domain
      }

      function calculateNumberOfUniqueValues (col, type) {
        const uniqueVals = {};

        if (['quantitative', 'categorical'].includes(type)) {
          for (let i = 0; i < col.length; i++) {
            const val = col[i];
            if (!isInvalid(val)) {
              uniqueVals[val] = 0;
            }
          }
        }

        if (type === 'temporal') {
          for (let i = 0; i < col.length; i++) {
            const val = col[i];
            if (!isInvalid(val)) {
              uniqueVals[val.getTime()] = 0;
            }
          }
        }

        if (type === 'interval') {
          for (let i = 0; i < col.length; i++) {
            const val = col[i];
            if (!isInvalid(val)) {
              const str = JSON.stringify(val);
              uniqueVals[str] = 0;
            }
          }
        }

        return Object.keys(uniqueVals).length
      }

      function columnHasOnlyOneUniqueValue (nValidValues, nUniqueValues) {
        return nValidValues === 1 || nUniqueValues === 1
      }

      function calculateDomainForColumnWithOneUniqueValue (nValidValues, nUniqueValues, type, firstValidValue, columnName) {
        const domain = createDomainForSingleValue(type, firstValidValue);
        const warningText = nValidValues === 1 ? 'valid' : 'unique';

        if (type !== 'categorical') {
          warn(
            `Column '${columnName}' contains only 1 ${warningText} value: ${firstValidValue}.\n` +
            `Using domain ${JSON.stringify(domain)}`
          );
        }

        return domain
      }

      function calculateDomainForRegularColumn (type, column, columnName) {
        let domain = initDomain(type);

        for (let i = 0; i < column.length; i++) {
          const value = column[i];

          if (!isInvalid(value)) {
            if (getDataType(value) !== type) {
              throw new Error(`Invalid column ${columnName}: column contains multiple data types`)
            }

            domain = updateDomain(domain, value, type);
          }
        }

        return domain
      }

      const minUnixTime = new Date(0);
      const maxUnixTime = new Date('19 January 2038');

      function initDomain (type) {
        let domain;
        switch (type) {
          case 'quantitative': {
            domain = [Infinity, -Infinity];
            break
          }
          case 'categorical': {
            domain = [];
            break
          }
          case 'temporal': {
            domain = [maxUnixTime, minUnixTime];
            break
          }
          case 'interval': {
            domain = [Infinity, -Infinity];
            break
          }
        }

        return domain
      }

      function updateDomain (domain, value, type) {
        if (!['quantitative', 'categorical', 'temporal', 'interval'].includes(type)) {
          throw new Error(`Cannot set domain for column of type '${type}'`)
        }

        if (type === 'quantitative') {
          if (domain[0] >= value) { domain[0] = value; }
          if (domain[1] <= value) { domain[1] = value; }
        }

        if (type === 'categorical') {
          if (!domain.includes(value)) { domain.push(value); }
        }

        if (type === 'temporal') {
          const epoch = value.getTime();

          if (domain[0].getTime() >= epoch) { domain[0] = value; }
          if (domain[1].getTime() <= epoch) { domain[1] = value; }
        }

        if (type === 'interval') {
          domain = updateDomain(domain, value[0], 'quantitative');
          domain = updateDomain(domain, value[1], 'quantitative');
        }

        return domain
      }

      function createDomainForSingleValue (type, value) {
        let domain;

        if (type === 'quantitative') {
          domain = [value - 1, value + 1];
        }

        if (type === 'categorical') {
          domain = [value];
        }

        if (type === 'temporal') {
          domain = [getDay(value, -1), getDay(value, 1)];
        }

        if (type === 'interval') {
          domain = value.sort((a, b) => a - b);
        }

        return domain
      }

      function getDay (date, days) {
        const dateCopy = new Date(date.getTime());
        return new Date(dateCopy.setDate(dateCopy.getDate() + days))
      }

      function getColumnType (column) {
        const { firstValidValue } = findFirstValidValue(column);
        return getDataType(firstValidValue)
      }

      function getDataType (value) {
        if (isInvalid(value)) return undefined

        if (value.constructor === Number) return 'quantitative'
        if (value.constructor === String) return 'categorical'
        if (value.constructor === Date) return 'temporal'
        if (isInterval(value)) return 'interval'
        if (isGeometry(value)) return 'geometry'
        if (value.constructor === DataContainer) return 'grouped'

        return undefined
      }

      function ensureValidDataType (value) {
        if (isInvalid(getDataType(value))) {
          throw new Error('Invalid data')
        }
      }

      function isGeometry (value) {
        return value.constructor === Object && 'type' in value && 'coordinates' in value
      }

      function isInterval (value) {
        return value.constructor === Array && value.length === 2 && value.every(entry => entry.constructor === Number)
      }

      function generateKeyColumn (length) {
        return new Array(length).fill(0).map((_, i) => i)
      }

      function validateKeyColumn (keyColumn, requiredLength) {
        if (keyColumn.length !== requiredLength) {
          throw new Error('Key column must be of same length as rest of the data')
        }

        ensureAllSameType(keyColumn);
        ensureUnique(keyColumn);
      }

      function ensureAllSameType (keyColumn) {
        for (let i = 0; i < keyColumn.length; i++) {
          const key = keyColumn[i];
          validateKey(key);
        }
      }

      function validateKey (key) {
        const type = getDataType(key);

        if (type !== 'quantitative' || !Number.isInteger(key)) {
          throw new Error('Key column can contain only integers')
        }
      }

      function ensureUnique (keyColumn) {
        if (keyColumn.length !== new Set(keyColumn).size) {
          throw new Error('Keys must be unique')
        }
      }

      function getDataLength (data) {
        const firstKey = Object.keys(data)[0];
        const firstColumn = data[firstKey];
        return firstColumn.length
      }

      function convertRowToColumnData (data) {
        checkIfDataIsEmpty(data);
        let columnData = initColumnData(data);

        for (let row of data) {
          for (let key in row) {
            columnData[key].push(row[key]);
          }
        }

        return columnData
      }

      function initColumnData (data) {
        let firstRow = data[0];
        let columnKeys = Object.keys(firstRow);
        let columnData = {};

        for (let key of columnKeys) {
          columnData[key] = [];
        }

        return columnData
      }

      function checkIfDataIsEmpty (data) {
        if (data.length === 0) {
          throw new Error('Received empty Array while trying to load row-oriented data. This is not allowed.')
        }
      }

      function parseGeoJSON (geojsonData) {
        const geometryData = [];
        const data = {};

        const features = geojsonData.features;
        const firstFeature = features[0];

        if ('properties' in firstFeature) {
          for (const columnName in firstFeature.properties) {
            data[columnName] = [];
          }
        }

        for (let i = 0; i < features.length; i++) {
          const { geometry, properties } = features[i];
          geometryData.push(geometry);

          for (const columnName in properties) {
            data[columnName].push(properties[columnName]);
          }
        }

        checkFormatColumnData(data);

        data.$geometry = geometryData;

        return data
      }

      const methods = {
        _setColumnData (data, options) {
          if (options.validate === false) {
            checkFormatInternal(data);
          } else {
            checkFormatColumnData(data);
          }

          this._storeData(data, options);
        },

        _setRowData (rowData, options) {
          const columnData = convertRowToColumnData(rowData);
          this._setColumnData(columnData, options);
        },

        _setGeoJSON (geojsonData, options) {
          const data = parseGeoJSON(geojsonData);
          this._storeData(data, options);
        },

        _setGroup (group, options) {
          const data = group.data;
          checkFormatInternal(data);
          this._storeData(data, options);
        },

        _storeData (data, options) {
          this._data = data;

          this._setupKeyColumn();

          if (options.validate === true) {
            this.validateAllColumns();
          }
        },

        _setupKeyColumn () {
          const length = getDataLength(this._data);

          if ('$key' in this._data) {
            validateKeyColumn(this._data.$key, length);
            this._syncKeyToRowNumber();
          } else {
            const keyColumn = generateKeyColumn(length);
            this._setKeyColumn(keyColumn);
          }
        },

        _setKeyColumn (keyColumn) {
          this._data = produce(this._data, draft => {
            draft.$key = keyColumn;
          });

          this._syncKeyToRowNumber();
        },

        _syncKeyToRowNumber () {
          const length = getDataLength(this._data);

          for (let i = 0; i < length; i++) {
            const key = this._data.$key[i];
            this._keyToRowNumber[key] = i;
          }
        }
      };

      function dataLoadingMixin (targetClass) {
        Object.assign(targetClass.prototype, methods);
      }

      function filter (data, filterFunction) {
        const length = getDataLength(data);
        const newData = {};
        for (const colName in data) { newData[colName] = []; }

        for (let i = 0; i < length; i++) {
          const row = {};
          for (const colName in data) { row[colName] = data[colName][i]; }

          if (filterFunction(row, i) === true) {
            for (const colName in row) { newData[colName].push(row[colName]); }
          }
        }

        return newData
      }

      function select (data, selection) {
        if (selection.constructor === String) {
          selection = [selection];
        }

        if (selection.constructor === Array) {
          validateSelectionInstructions(data, selection);

          for (const columnName in data) {
            if (!selection.includes(columnName)) {
              delete data[columnName];
            }
          }
        } else {
          throw new Error('select can only be used with a string or array of strings')
        }
      }

      function validateSelectionInstructions (data, selection) {
        for (const columnName of selection) {
          if (!(columnName in data)) {
            throw new Error(`Column '${columnName}' not found`)
          }
        }
      }

      function arrange (data, sortInstructions) {
        if (sortInstructions.constructor === Object) {
          sort(data, sortInstructions);
        } else if (sortInstructions.constructor === Array) {
          for (let i = sortInstructions.length - 1; i >= 0; i--) {
            const instruction = sortInstructions[i];
            sort(data, instruction);
          }
        } else {
          throw new Error('arrange requires a key-value object or array of key-value objects')
        }
      }

      const sortFuncs = {
        quantitative: {
          // https://beta.observablehq.com/@mbostock/manipulating-flat-arrays
          ascending: (a, b) => a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN,
          descending: (a, b) => b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN
        },
        categorical: {
          ascending: (a, b) => {
            const sorted = [a, b].sort();
            return sorted[0] === a ? -1 : 1
          },
          descending: (a, b) => {
            const sorted = [a, b].sort();
            return sorted[0] === a ? 1 : -1
          }
        },
        temporal: {
          ascending: (a, b) => {
            return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN
          },
          descending: (a, b) => {
            return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN
          }
        }
      };

      function sort (data, sortInstructions) {
        if (Object.keys(sortInstructions).length !== 1) {
          throw new Error('Only one key-value pair allowed')
        }

        const variable = Object.keys(sortInstructions)[0];
        const sortMethod = sortInstructions[variable];

        ensureValidDataType(data[variable][0]);
        const dataType = getDataType(data[variable][0]);

        let sortFunc;
        if (sortMethod.constructor === String) {
          sortFunc = sortFuncs[dataType][sortMethod];
        }
        if (sortMethod.constructor === Function) {
          sortFunc = sortMethod;
        }

        const column = data[variable];

        const indices = column.map((v, i) => i);
        const sortedIndices = indices.sort((a, b) => sortFunc(column[a], column[b]));

        for (const colName in data) {
          data[colName] = reorder(data[colName], sortedIndices);
        }
      }

      function reorder (column, indices) {
        return indices.map(i => column[i])
      }

      function rename (data, renameInstructions) {
        if (renameInstructions.constructor !== Object) {
          throw new Error('Rename only accepts an object')
        }

        for (const oldName in renameInstructions) {
          if (oldName in data) {
            const newName = renameInstructions[oldName];
            checkRegularColumnName(newName);
            data[newName] = data[oldName];
            delete data[oldName];
          } else {
            warn(`Rename: column '${oldName}' not found`);
          }
        }
      }

      function mutate (data, mutateInstructions) {
        const length = getDataLength(data);
        const newData = {};

        for (const key in mutateInstructions) {
          newData[key] = new Array(length);
        }

        for (let i = 0; i < length; i++) {
          const row = {};
          let prevRow = {};
          let nextRow = {};

          for (const colName in data) {
            row[colName] = data[colName][i];
            prevRow[colName] = data[colName][i - 1];
            nextRow[colName] = data[colName][i + 1];
          }

          if (i === 0) { prevRow = undefined; }
          if (i === length - 1) { nextRow = undefined; }

          for (const key in mutateInstructions) {
            const mutateFunction = mutateInstructions[key];
            newData[key][i] = mutateFunction(row, i, prevRow, nextRow);
          }
        }

        Object.assign(data, newData);
      }

      function transmute (data, mutateObj) {
        data = mutate(data, mutateObj);

        for (const key in data) {
          if (!(key in mutateObj)) {
            delete data[key];
          }
        }
      }

      var aggregations = {
        count,
        sum,
        mean,
        median,
        mode,
        min,
        max
      };

      function count (column) {
        return column.length
      }

      function sum (column) {
        let total = 0;
        for (const value of column) {
          total += value;
        }

        return total
      }

      function mean (column) {
        return sum(column) / count(column)
      }

      function median (column) {
        const asc = column.sort((a, b) => a > b);
        const len = count(column);

        if (len % 2 === 1) {
          // Odd
          return asc[Math.floor(len / 2)]
        } else {
          // Even
          const lower = asc[(len / 2) - 1];
          const upper = asc[(len / 2)];
          return (lower + upper) / 2
        }
      }

      function mode (column) {
        const counts = {};

        for (const value of column) {
          if (value in counts) {
            counts[value]++;
          } else {
            counts[value] = 1;
          }
        }

        let winner;
        let winningVal = 0;

        for (const value in counts) {
          if (counts[value] > winningVal) {
            winningVal = counts[value];
            winner = value;
          }
        }

        return winner
      }

      function min (column) {
        let winner = Infinity;
        for (const value of column) {
          if (value < winner) { winner = value; }
        }
        return winner
      }

      function max (column) {
        let winner = -Infinity;
        for (const value of column) {
          if (value > winner) { winner = value; }
        }
        return winner
      }

      function checkKeyValuePair (obj, allowedKeys) {
        const keys = Object.keys(obj);
        if (keys.length !== 1) {
          throw new Error('Invalid transformation syntax')
        }

        const key = keys[0];

        if (!allowedKeys.includes(key)) {
          throw new Error(`Unknown transformation ${key}`)
        }

        return key
      }

      function summarise (data, summariseInstructions) {
        if (summariseInstructions.constructor !== Object) {
          throw new Error('summarise must be an object')
        }

        let newData = initNewData(summariseInstructions, data);

        if ('$grouped' in data) {
          checkSummariseInstructions(summariseInstructions, data);

          for (const columnName in data) {
            if (columnName !== '$grouped') {
              newData[columnName] = data[columnName];
            }
          }

          for (const group of data.$grouped) {
            const data = group.data();
            newData = summariseGroup(data, summariseInstructions, newData);
          }
        } else {
          newData = summariseGroup(data, summariseInstructions, newData);
        }
        return newData
      }

      function initNewData (summariseInstructions, data) {
        const newData = {};
        for (const newCol in summariseInstructions) { newData[newCol] = []; }
        if (data && '$grouped' in data) {
          for (const col in data) {
            if (col !== '$grouped') {
              newData[col] = [];
            }
          }
        }
        return newData
      }

      function summariseGroup (data, summariseInstructions, newData) {
        for (const newColName in summariseInstructions) {
          const instruction = summariseInstructions[newColName];

          if (instruction.constructor === Object) {
            const column = checkKeyValuePair(instruction, Object.keys(data));
            const aggregation = instruction[column];

            if (aggregation.constructor === String) {
              if (!(aggregation in aggregations)) {
                throw new Error(`Unkown summaryMethod: '${aggregation}'.`)
              }

              newData[newColName].push(aggregations[aggregation](data[column]));
            } else if (aggregation.constructor === Function) {
              newData[newColName].push(aggregation(data[column]));
            } else {
              throw new Error(`Invalid summaryMethod: '${aggregation}'. Must be String or Function`)
            }
          }
        }

        return newData
      }

      function checkSummariseInstructions (summariseInstructions, data) {
        for (const newColName in summariseInstructions) {
          const instruction = summariseInstructions[newColName];
          const name = Object.keys(instruction)[0];

          checkRegularColumnName(name);

          if (name in data) {
            throw new Error(`Cannot summarise the column '${name}': used for grouping`)
          }
        }
      }

      function mutarise (data, mutariseInstructions) {
        if (mutariseInstructions.constructor !== Object) {
          throw new Error('mutarise must be an object')
        }

        let newCols = initNewData(mutariseInstructions);

        if ('$grouped' in data) {
          checkSummariseInstructions(mutariseInstructions, data);

          for (const group of data.$grouped) {
            let summarizedData = initNewData(mutariseInstructions);
            const dataInGroup = group.data();
            summarizedData = summariseGroup(dataInGroup, mutariseInstructions, summarizedData);

            const length = getDataLength(dataInGroup);
            newCols = addGroupSummaries(newCols, summarizedData, length);
          }

          data = ungroup(data);
        } else {
          let summarizedData = initNewData(mutariseInstructions);
          summarizedData = summariseGroup(data, mutariseInstructions, summarizedData);

          const length = getDataLength(data);
          newCols = addGroupSummaries(newCols, summarizedData, length);
        }

        return join(data, newCols)
      }

      function addGroupSummaries (newCols, summarizedData, length) {
        for (let i = 0; i < length; i++) {
          for (const key in summarizedData) {
            newCols[key].push(summarizedData[key][0]);
          }
        }

        return newCols
      }

      function ungroup (data) {
        const newData = initNewData(data.$grouped[0].data());

        for (const group of data.$grouped) {
          const groupData = group.data();
          for (const col in newData) {
            newData[col].push(...groupData[col]);
          }
        }

        return newData
      }

      function join (data, newCols) {
        for (const col in newCols) {
          data[col] = newCols[col];
        }

        return data
      }

      function groupBy (data, groupByInstructions) {
        const groupedData = {};

        const groupedColumns = getGroupedColumns(data, groupByInstructions);
        const groups = groupBy$1(data, groupedColumns);

        groupedData.$grouped = groups.map(group => new DataContainer(group));
        for (const col of groupedColumns) {
          groupedData[col] = [];
        }

        for (let i = 0; i < groupedColumns.length; i++) {
          const col = groupedColumns[i];

          for (const group of groups) {
            groupedData[col].push(group.groupedValues[i]);
          }
        }

        return groupedData
      }

      function getGroupedColumns (data, groupByInstructions) {
        const con = groupByInstructions.constructor;
        if (![String, Array].includes(con)) {
          throw new Error('groupBy can only be used with a string or array of strings')
        }

        const groupedColumns = con === String ? [groupByInstructions] : groupByInstructions;

        for (const col of groupedColumns) {
          if (!(col in data)) {
            throw new Error(`Column '${col}' not found`)
          }
        }

        if (groupedColumns.length === Object.keys(data).length) {
          throw new Error('Cannot group by all columns')
        }

        return groupedColumns
      }

      function getGroupedValues (data, i, columns) {
        const groupedValues = [];
        for (const col of columns) {
          groupedValues.push(data[col][i]);
        }

        return groupedValues
      }

      function groupBy$1 (data, groupedColumns) {
        const groups = {};

        const length = getDataLength(data);

        for (let i = 0; i < length; i++) {
          // Ge grouped values
          const groupedValues = getGroupedValues(data, i, groupedColumns);

          // Get unique identifier for group
          const groupID = JSON.stringify(groupedValues);

          // If groups object has no entry for this group yet: create new group object
          groups[groupID] = groups[groupID] || new Group(data, groupedValues);

          // Add row to group
          groups[groupID].addRow(data, i);
        }

        // Convert groups object to array
        return Object.keys(groups).map(group => {
          return groups[group]
        })
      }

      class Group {
        constructor (data, groupedValues) {
          this.data = {};
          this.groupedValues = groupedValues;

          for (const col in data) {
            this.data[col] = [];
          }
        }

        addRow (data, i) {
          for (const col in data) {
            this.data[col].push(data[col][i]);
          }
        }
      }

      /**
      * geostats() is a tiny and standalone javascript library for classification
      * Project page - https://github.com/simogeo/geostats
      * Copyright (c) 2011 Simon Georget, http://www.intermezzo-coop.eu
      * Licensed under the MIT license
      */

      var _t = function (str) {
        return str
      };

      // taking from http://stackoverflow.com/questions/18082/validate-decimal-numbers-in-javascript-isnumeric
      var isNumber = function (n) {
        return !isNaN(parseFloat(n)) && isFinite(n)
      };

      function Geostats (a) {
        this.objectID = '';
        this.separator = ' - ';
        this.legendSeparator = this.separator;
        this.method = '';
        this.precision = 0;
        this.precisionflag = 'auto';
        this.roundlength = 2; // Number of decimals, round values
        this.is_uniqueValues = false;
        this.debug = false;
        this.silent = false;

        this.bounds = [];
        this.ranges = [];
        this.inner_ranges = null;
        this.colors = [];
        this.counter = [];

        // statistics information
        this.stat_sorted = null;
        this.stat_mean = null;
        this.stat_median = null;
        this.stat_sum = null;
        this.stat_max = null;
        this.stat_min = null;
        this.stat_pop = null;
        this.stat_variance = null;
        this.stat_stddev = null;
        this.stat_cov = null;

        /**
       * logging method
       */
        this.log = function (msg, force) {
          if (this.debug === true || force != null) {
            console.log(this.objectID + '(object id) :: ' + msg);
          }
        };

        /**
       * Set bounds
       */
        this.setBounds = function (a) {
          this.log('Setting bounds (' + a.length + ') : ' + a.join());

          this.bounds = []; // init empty array to prevent bug when calling classification after another with less items (sample getQuantile(6) and getQuantile(4))

          this.bounds = a;
          // this.bounds = this.decimalFormat(a);
        };

        /**
       * Set a new serie
       */
        this.setSerie = function (a) {
          this.log('Setting serie (' + a.length + ') : ' + a.join());

          this.serie = []; // init empty array to prevent bug when calling classification after another with less items (sample getQuantile(6) and getQuantile(4))
          this.serie = a;

          // reset statistics after changing serie
          this.resetStatistics();

          this.setPrecision();
        };

        /**
       * Set colors
       */
        this.setColors = function (colors) {
          this.log('Setting color ramp (' + colors.length + ') : ' + colors.join());

          this.colors = colors;
        };

        /**
         * Get feature count
         * With bounds array(0, 0.75, 1.5, 2.25, 3);
         * should populate this.counter with 5 keys
         * and increment counters for each key
         */
        this.doCount = function () {
          if (this._nodata()) { return }

          var tmp = this.sorted();

          this.counter = [];

          // we init counter with 0 value
          for (let i = 0; i < this.bounds.length - 1; i++) {
            this.counter[i] = 0;
          }

          for (let j = 0; j < tmp.length; j++) {
            // get current class for value to increment the counter
            var cclass = this.getClass(tmp[j]);
            this.counter[cclass]++;
          }
        };

        /**
         * Set decimal precision according to user input
         * or automatcally determined according
         * to the given serie.
         */
        this.setPrecision = function (decimals) {
          // only when called from user
          if (typeof decimals !== 'undefined') {
            this.precisionflag = 'manual';
            this.precision = decimals;
          }

          // we calculate the maximal decimal length on given serie
          if (this.precisionflag === 'auto') {
            for (var i = 0; i < this.serie.length; i++) {
              // check if the given value is a number and a float
              var precision;
              if (!isNaN((this.serie[i] + '')) && (this.serie[i] + '').toString().indexOf('.') !== -1) {
                precision = (this.serie[i] + '').split('.')[1].length;
              } else {
                precision = 0;
              }

              if (precision > this.precision) {
                this.precision = precision;
              }
            }
          }
          if (this.precision > 20) {
            // prevent "Uncaught RangeError: toFixed() digits argument must be between 0 and 20" bug. See https://github.com/simogeo/geostats/issues/34
            this.log('this.precision value (' + this.precision + ') is greater than max value. Automatic set-up to 20 to prevent "Uncaught RangeError: toFixed()" when calling decimalFormat() method.');
            this.precision = 20;
          }

          this.log('Calling setPrecision(). Mode : ' + this.precisionflag + ' - Decimals : ' + this.precision);

          this.serie = this.decimalFormat(this.serie);
        };

        /**
         * Format array numbers regarding to precision
         */
        this.decimalFormat = function (a) {
          var b = [];

          for (var i = 0; i < a.length; i++) {
            // check if the given value is a number
            if (isNumber(a[i])) {
              b[i] = parseFloat(parseFloat(a[i]).toFixed(this.precision));
            } else {
              b[i] = a[i];
            }
          }

          return b
        };

        /**
         * Transform a bounds array to a range array the following array : array(0,
         * 0.75, 1.5, 2.25, 3); becomes : array('0-0.75', '0.75-1.5', '1.5-2.25',
         * '2.25-3');
         */
        this.setRanges = function () {
          this.ranges = []; // init empty array to prevent bug when calling classification after another with less items (sample getQuantile(6) and getQuantile(4))

          for (let i = 0; i < (this.bounds.length - 1); i++) {
            this.ranges[i] = this.bounds[i] + this.separator + this.bounds[i + 1];
          }
        };

        /** return min value */
        this.min = function () {
          if (this._nodata()) { return }

          this.stat_min = this.serie[0];

          for (let i = 0; i < this.pop(); i++) {
            if (this.serie[i] < this.stat_min) {
              this.stat_min = this.serie[i];
            }
          }

          return this.stat_min
        };

        /** return max value */
        this.max = function () {
          if (this._nodata()) { return }

          this.stat_max = this.serie[0];
          for (let i = 0; i < this.pop(); i++) {
            if (this.serie[i] > this.stat_max) {
              this.stat_max = this.serie[i];
            }
          }

          return this.stat_max
        };

        /** return sum value */
        this.sum = function () {
          if (this._nodata()) { return }

          if (this.stat_sum === null) {
            this.stat_sum = 0;
            for (let i = 0; i < this.pop(); i++) {
              this.stat_sum += parseFloat(this.serie[i]);
            }
          }

          return this.stat_sum
        };

        /** return population number */
        this.pop = function () {
          if (this._nodata()) { return }

          if (this.stat_pop === null) {
            this.stat_pop = this.serie.length;
          }

          return this.stat_pop
        };

        /** return mean value */
        this.mean = function () {
          if (this._nodata()) { return }

          if (this.stat_mean === null) {
            this.stat_mean = parseFloat(this.sum() / this.pop());
          }

          return this.stat_mean
        };

        /** return median value */
        this.median = function () {
          if (this._nodata()) { return }

          if (this.stat_median === null) {
            this.stat_median = 0;
            var tmp = this.sorted();

            // serie pop is odd
            if (tmp.length % 2) {
              this.stat_median = parseFloat(tmp[(Math.ceil(tmp.length / 2) - 1)]);

            // serie pop is even
            } else {
              this.stat_median = (parseFloat(tmp[((tmp.length / 2) - 1)]) + parseFloat(tmp[(tmp.length / 2)])) / 2;
            }
          }

          return this.stat_median
        };

        /** return variance value */
        this.variance = function (round) {
          round = (typeof round === 'undefined');

          if (this._nodata()) { return }

          if (this.stat_variance === null) {
            var tmp = 0;
            var serieMean = this.mean();
            for (var i = 0; i < this.pop(); i++) {
              tmp += Math.pow((this.serie[i] - serieMean), 2);
            }

            this.stat_variance = tmp / this.pop();

            if (round === true) {
              this.stat_variance = Math.round(this.stat_variance * Math.pow(10, this.roundlength)) / Math.pow(10, this.roundlength);
            }
          }

          return this.stat_variance
        };

        /** return standard deviation value */
        this.stddev = function (round) {
          round = (typeof round === 'undefined');

          if (this._nodata()) { return }

          if (this.stat_stddev === null) {
            this.stat_stddev = Math.sqrt(this.variance());

            if (round === true) {
              this.stat_stddev = Math.round(this.stat_stddev * Math.pow(10, this.roundlength)) / Math.pow(10, this.roundlength);
            }
          }

          return this.stat_stddev
        };

        /** coefficient of variation - measure of dispersion */
        this.cov = function (round) {
          round = (typeof round === 'undefined');

          if (this._nodata()) { return }

          if (this.stat_cov === null) {
            this.stat_cov = this.stddev() / this.mean();

            if (round === true) {
              this.stat_cov = Math.round(this.stat_cov * Math.pow(10, this.roundlength)) / Math.pow(10, this.roundlength);
            }
          }

          return this.stat_cov
        };

        /** reset all attributes after setting a new serie */
        this.resetStatistics = function () {
          this.stat_sorted = null;
          this.stat_mean = null;
          this.stat_median = null;
          this.stat_sum = null;
          this.stat_max = null;
          this.stat_min = null;
          this.stat_pop = null;
          this.stat_variance = null;
          this.stat_stddev = null;
          this.stat_cov = null;
        };

        /** data test */
        this._nodata = function () {
          if (this.serie.length === 0) {
            if (this.silent) this.log('[silent mode] Error. You should first enter a serie!', true);
            else throw new TypeError('Error. You should first enter a serie!')
            return 1
          } else { return 0 }
        };

        /** ensure nbClass is an integer */
        this._nbClassInt = function (nbClass) {
          var nbclassTmp = parseInt(nbClass, 10);
          if (isNaN(nbclassTmp)) {
            if (this.silent) this.log("[silent mode] '" + nbclassTmp + "' is not a valid integer. Enable to set class number.", true);
            else throw new TypeError("'" + nbclassTmp + "' is not a valid integer. Enable to set class number.")
          } else {
            return nbclassTmp
          }
        };

        /** check if the serie contains negative value */
        this._hasNegativeValue = function () {
          for (let i = 0; i < this.serie.length; i++) {
            if (this.serie[i] < 0) { return true }
          }
          return false
        };

        /** check if the serie contains zero value */
        this._hasZeroValue = function () {
          for (let i = 0; i < this.serie.length; i++) {
            if (parseFloat(this.serie[i]) === 0) { return true }
          }
          return false
        };

        /** return sorted values (as array) */
        this.sorted = function () {
          if (this.stat_sorted === null) {
            if (this.is_uniqueValues === false) {
              this.stat_sorted = this.serie.sort(function (a, b) {
                return a - b
              });
            } else {
              this.stat_sorted = this.serie.sort(function (a, b) {
                var nameA = a.toString().toLowerCase(); var nameB = b.toString().toLowerCase();
                if (nameA < nameB) return -1
                if (nameA > nameB) return 1
                return 0
              });
            }
          }

          return this.stat_sorted
        };

        /**
       * Set Manual classification Return an array with bounds : ie array(0,
       * 0.75, 1.5, 2.25, 3);
       * Set ranges and prepare data for displaying legend
       *
       */
        this.setClassManually = function (array) {
          if (this._nodata()) { return }

          if (array[0] !== this.min() || array[array.length - 1] !== this.max()) {
            if (this.silent) this.log('[silent mode] ' + _t('Given bounds may not be correct! please check your input.\nMin value : ' + this.min() + ' / Max value : ' + this.max()), true);
            else throw new TypeError(_t('Given bounds may not be correct! please check your input.\nMin value : ' + this.min() + ' / Max value : ' + this.max()))
            return
          }

          this.setBounds(array);
          this.setRanges();

          // we specify the classification method
          this.method = _t('manual classification') + ' (' + (array.length - 1) + ' ' + _t('classes') + ')';

          return this.bounds
        };

        /**
       * Equal intervals classification Return an array with bounds : ie array(0,
       * 0.75, 1.5, 2.25, 3);
       */
        this.getClassEqInterval = function (nbClass, forceMin, forceMax) {
          nbClass = this._nbClassInt(nbClass); // ensure nbClass is an integer

          if (this._nodata()) { return }

          var tmpMin = (typeof forceMin === 'undefined') ? this.min() : forceMin;
          var tmpMax = (typeof forceMax === 'undefined') ? this.max() : forceMax;

          var a = [];
          var val = tmpMin;
          var interval = (tmpMax - tmpMin) / nbClass;

          for (let i = 0; i <= nbClass; i++) {
            a[i] = val;
            val += interval;
          }

          // -> Fix last bound to Max of values
          a[nbClass] = tmpMax;

          this.setBounds(a);
          this.setRanges();

          // we specify the classification method
          this.method = _t('eq. intervals') + ' (' + nbClass + ' ' + _t('classes') + ')';

          return this.bounds
        };

        this.getQuantiles = function (nbClass) {
          nbClass = this._nbClassInt(nbClass); // ensure nbClass is an integer

          var tmp = this.sorted();
          var quantiles = [];

          var step = this.pop() / nbClass;
          for (var i = 1; i < nbClass; i++) {
            var qidx = Math.round(i * step + 0.49);
            quantiles.push(tmp[qidx - 1]); // zero-based
          }

          return quantiles
        };

        /**
       * Quantile classification Return an array with bounds : ie array(0, 0.75,
       * 1.5, 2.25, 3);
       */
        this.getClassQuantile = function (nbClass) {
          nbClass = this._nbClassInt(nbClass); // ensure nbClass is an integer

          if (this._nodata()) { return }

          var tmp = this.sorted();
          var bounds = this.getQuantiles(nbClass);
          bounds.unshift(tmp[0]);

          if (bounds[tmp.length - 1] !== tmp[tmp.length - 1]) { bounds.push(tmp[tmp.length - 1]); }

          this.setBounds(bounds);
          this.setRanges();

          // we specify the classification method
          this.method = _t('quantile') + ' (' + nbClass + ' ' + _t('classes') + ')';

          return this.bounds
        };

        /**
       * Standard Deviation classification
       * Return an array with bounds : ie array(0,
       * 0.75, 1.5, 2.25, 3);
       */
        this.getClassStdDeviation = function (nbClass, matchBounds) {
          nbClass = this._nbClassInt(nbClass); // ensure nbClass is an integer

          if (this._nodata()) { return }

          var tmpMax = this.max();
          var tmpMin = this.min();
          var tmpStdDev = this.stddev();
          var tmpMean = this.mean();

          var a = [];

          // number of classes is odd
          if (nbClass % 2 === 1) {
            // Euclidean division to get the inferior bound
            var infBound = Math.floor(nbClass / 2);

            var supBound = infBound + 1;

            // we set the central bounds
            a[infBound] = tmpMean - (tmpStdDev / 2);
            a[supBound] = tmpMean + (tmpStdDev / 2);

            // Values < to infBound, except first one
            for (let i = infBound - 1; i > 0; i--) {
              let val = a[i + 1] - tmpStdDev;
              a[i] = val;
            }

            // Values > to supBound, except last one
            for (let i = supBound + 1; i < nbClass; i++) {
              let val = a[i - 1] + tmpStdDev;
              a[i] = val;
            }

            // number of classes is even
          } else {
            var meanBound = nbClass / 2;

            // we get the mean value
            a[meanBound] = tmpMean;

            // Values < to the mean, except first one
            for (let i = meanBound - 1; i > 0; i--) {
              let val = a[i + 1] - tmpStdDev;
              a[i] = val;
            }

            // Values > to the mean, except last one
            for (let i = meanBound + 1; i < nbClass; i++) {
              let val = a[i - 1] + tmpStdDev;
              a[i] = val;
            }
          }

          // we finally set the first value
          // do we excatly match min value or not ?
          a[0] = (typeof matchBounds === 'undefined') ? a[1] - tmpStdDev : tmpMin;

          // we finally set the last value
          // do we excatly match max value or not ?
          a[nbClass] = (typeof matchBounds === 'undefined') ? a[nbClass - 1] + tmpStdDev : tmpMax;

          this.setBounds(a);
          this.setRanges();

          // we specify the classification method
          this.method = _t('std deviation') + ' (' + nbClass + ' ' + _t('classes') + ')';

          return this.bounds
        };

        /**
       * Geometric Progression classification
       * http://en.wikipedia.org/wiki/Geometric_progression
       * Return an array with bounds : ie array(0,
       * 0.75, 1.5, 2.25, 3);
       */
        this.getClassGeometricProgression = function (nbClass) {
          nbClass = this._nbClassInt(nbClass); // ensure nbClass is an integer

          if (this._nodata()) { return }

          if (this._hasNegativeValue() || this._hasZeroValue()) {
            if (this.silent) this.log('[silent mode] ' + _t('geometric progression can\'t be applied with a serie containing negative or zero values.'), true);
            else throw new TypeError(_t('geometric progression can\'t be applied with a serie containing negative or zero values.'))
            return
          }

          var a = [];
          var tmpMin = this.min();
          var tmpMax = this.max();

          var logMax = Math.log(tmpMax) / Math.LN10; // max decimal logarithm (or base 10)
          var logMin = Math.log(tmpMin) / Math.LN10; // min decimal logarithm (or base 10)

          var interval = (logMax - logMin) / nbClass;

          // we compute log bounds
          for (let i = 0; i < nbClass; i++) {
            if (i === 0) {
              a[i] = logMin;
            } else {
              a[i] = a[i - 1] + interval;
            }
          }

          // we compute antilog
          a = a.map(function (x) { return Math.pow(10, x) });

          // and we finally add max value
          a.push(this.max());

          this.setBounds(a);
          this.setRanges();

          // we specify the classification method
          this.method = _t('geometric progression') + ' (' + nbClass + ' ' + _t('classes') + ')';

          return this.bounds
        };

        /**
       * Arithmetic Progression classification
       * http://en.wikipedia.org/wiki/Arithmetic_progression
       * Return an array with bounds : ie array(0,
       * 0.75, 1.5, 2.25, 3);
       */
        this.getClassArithmeticProgression = function (nbClass) {
          nbClass = this._nbClassInt(nbClass); // ensure nbClass is an integer

          if (this._nodata()) { return }

          var denominator = 0;

          // we compute the (french) "Raison"
          for (let i = 1; i <= nbClass; i++) {
            denominator += i;
          }

          var a = [];
          var tmpMin = this.min();
          var tmpMax = this.max();

          var interval = (tmpMax - tmpMin) / denominator;

          for (let i = 0; i <= nbClass; i++) {
            if (i === 0) {
              a[i] = tmpMin;
            } else {
              a[i] = a[i - 1] + (i * interval);
            }
          }

          this.setBounds(a);
          this.setRanges();

          // we specify the classification method
          this.method = _t('arithmetic progression') + ' (' + nbClass + ' ' + _t('classes') + ')';

          return this.bounds
        };

        /**
       * Credits : Doug Curl (javascript) and Daniel J Lewis (python implementation)
       * http://www.arcgis.com/home/item.html?id=0b633ff2f40d412995b8be377211c47b
       * http://danieljlewis.org/2010/06/07/jenks-natural-breaks-algorithm-in-python/
       */
        this.getClassJenks = function (nbClass) {
          nbClass = this._nbClassInt(nbClass); // ensure nbClass is an integer

          if (this._nodata()) { return }

          let dataList = this.sorted();

          // now iterate through the datalist:
          // determine mat1 and mat2
          // really not sure how these 2 different arrays are set - the code for
          // each seems the same!
          // but the effect are 2 different arrays: mat1 and mat2
          var mat1 = [];
          // for (var x = 0, xl = dataList.length + 1; x < xl; x++) {
          for (var x = 0; x < dataList.length + 1; x++) {
            var temp = [];
            for (var j = 0, jl = nbClass + 1; j < jl; j++) {
              temp.push(0);
            }
            mat1.push(temp);
          }

          var mat2 = [];
          // for (var i = 0, il = dataList.length + 1; i < il; i++) {
          for (var i = 0; i < dataList.length + 1; i++) {
            var temp2 = [];
            for (var c = 0, cl = nbClass + 1; c < cl; c++) {
              temp2.push(0);
            }
            mat2.push(temp2);
          }

          // absolutely no idea what this does - best I can tell, it sets the 1st
          // group in the
          // mat1 and mat2 arrays to 1 and 0 respectively
          for (var y = 1, yl = nbClass + 1; y < yl; y++) {
            mat1[0][y] = 1;
            mat2[0][y] = 0;
            for (var t = 1, tl = dataList.length + 1; t < tl; t++) {
              mat2[t][y] = Infinity;
            }
            var v = 0.0;
          }

          // and this part - I'm a little clueless on - but it works
          // pretty sure it iterates across the entire dataset and compares each
          // value to
          // one another to and adjust the indices until you meet the rules:
          // minimum deviation
          // within a class and maximum separation between classes
          for (var l = 2, ll = dataList.length + 1; l < ll; l++) {
            var s1 = 0.0;
            var s2 = 0.0;
            var w = 0.0;
            for (var m = 1, ml = l + 1; m < ml; m++) {
              var i3 = l - m + 1;
              var val = parseFloat(dataList[i3 - 1]);
              s2 += val * val;
              s1 += val;
              w += 1;
              v = s2 - (s1 * s1) / w;
              var i4 = i3 - 1;
              if (i4 !== 0) {
                for (var p = 2, pl = nbClass + 1; p < pl; p++) {
                  if (mat2[l][p] >= (v + mat2[i4][p - 1])) {
                    mat1[l][p] = i3;
                    mat2[l][p] = v + mat2[i4][p - 1];
                  }
                }
              }
            }
            mat1[l][1] = 1;
            mat2[l][1] = v;
          }

          var k = dataList.length;
          var kclass = [];

          // fill the kclass (classification) array with zeros:
          for (i = 0; i <= nbClass; i++) {
            kclass.push(0);
          }

          // this is the last number in the array:
          kclass[nbClass] = parseFloat(dataList[dataList.length - 1]);
          // this is the first number - can set to zero, but want to set to lowest
          // to use for legend:
          kclass[0] = parseFloat(dataList[0]);
          var countNum = nbClass;
          while (countNum >= 2) {
            var id = parseInt((mat1[k][countNum]) - 2);
            kclass[countNum - 1] = dataList[id];
            k = parseInt((mat1[k][countNum] - 1));
            // spits out the rank and value of the break values:
            // console.log("id="+id,"rank = " + String(mat1[k][countNum]),"val =
            // " + String(dataList[id]))
            // count down:
            countNum -= 1;
          }
          // check to see if the 0 and 1 in the array are the same - if so, set 0
          // to 0:
          if (kclass[0] === kclass[1]) {
            kclass[0] = 0;
          }

          this.setBounds(kclass);
          this.setRanges();

          this.method = _t('Jenks') + ' (' + nbClass + ' ' + _t('classes') + ')';

          return this.bounds // array of breaks
        };

        /**
       * Quantile classification Return an array with bounds : ie array(0, 0.75,
       * 1.5, 2.25, 3);
       */
        this.getClassUniqueValues = function () {
          if (this._nodata()) { return }

          this.is_uniqueValues = true;
          var tmp = this.sorted(); // display in alphabetical order

          var a = [];

          for (let i = 0; i < this.pop(); i++) {
            if (a.indexOf(tmp[i]) === -1) {
              a.push(tmp[i]);
            }
          }

          this.bounds = a;

          // we specify the classification method
          this.method = _t('unique values');

          return a
        };

        /**
       * Return the class of a given value.
       * For example value : 6
       * and bounds array = (0, 4, 8, 12);
       * Return 2
       */
        this.getClass = function (value) {
          for (let i = 0; i < this.bounds.length; i++) {
            if (this.is_uniqueValues === true) {
              if (value === this.bounds[i]) { return i }
            } else {
            // parseFloat() is necessary
              if (parseFloat(value) <= this.bounds[i + 1]) {
                return i
              }
            }
          }

          return _t("Unable to get value's class.")
        };

        /**
       * Return the ranges array : array('0-0.75', '0.75-1.5', '1.5-2.25',
       * '2.25-3');
       */
        this.getRanges = function () {
          return this.ranges
        };

        /**
       * Returns the number/index of this.ranges that value falls into
       */
        this.getRangeNum = function (value) {
          var bounds, i;

          for (i = 0; i < this.ranges.length; i++) {
            bounds = this.ranges[i].split(/ - /);
            if (value <= parseFloat(bounds[1])) {
              return i
            }
          }
        };

        /*
       * Compute inner ranges based on serie.
       * Produce discontinous ranges used for legend - return an array similar to :
       * array('0.00-0.74', '0.98-1.52', '1.78-2.25', '2.99-3.14');
       * If inner ranges already computed, return array values.
       */
        this.getInnerRanges = function () {
          // if already computed, we return the result
          if (this.inner_ranges != null) {
            return this.inner_ranges
          }

          var a = [];
          var tmp = this.sorted();
          var cnt = 1; // bounds array counter

          for (let i = 0; i < tmp.length; i++) {
            let rangeFirstValue;
            if (i === 0) {
              rangeFirstValue = tmp[i]; // we init first range value
            }

            if (parseFloat(tmp[i]) > parseFloat(this.bounds[cnt])) {
              a[cnt - 1] = '' + rangeFirstValue + this.separator + tmp[i - 1];

              rangeFirstValue = tmp[i];

              cnt++;
            }

            // we reach the last range, we finally complete manually
            // and return the array
            if (cnt === (this.bounds.length - 1)) {
            // we set the last value
              a[cnt - 1] = '' + rangeFirstValue + this.separator + tmp[tmp.length - 1];

              this.inner_ranges = a;
              return this.inner_ranges
            }
          }
        };

        this.getSortedlist = function () {
          return this.sorted().join(', ')
        };

        // object constructor
        // At the end of script. If not setPrecision() method is not known

        // we create an object identifier for debugging
        this.objectID = new Date().getUTCMilliseconds();
        this.log('Creating new geostats object');

        if (typeof a !== 'undefined' && a.length > 0) {
          this.serie = a;
          this.setPrecision();
          this.log('Setting serie (' + a.length + ') : ' + a.join());
        } else {
          this.serie = [];
        }

        // creating aliases on classification function for backward compatibility
        this.getJenks = this.getClassJenks;
        this.getGeometricProgression = this.getClassGeometricProgression;
        this.getEqInterval = this.getClassEqInterval;
        this.getQuantile = this.getClassQuantile;
        this.getStdDeviation = this.getClassStdDeviation;
        this.getUniqueValues = this.getClassUniqueValues;
        this.getArithmeticProgression = this.getClassArithmeticProgression;
      }

      function bin (data, binInstructions) {
        if (binInstructions.constructor === Object) {
          const intervalBounds = getIntervalBounds(data, binInstructions);
          const ranges = pairRanges(intervalBounds);

          return bin1d(data, binInstructions.groupBy, ranges)
        }

        if (binInstructions.constructor === Array) {
          const intervalBoundsPerVariable = binInstructions.map(instructions => getIntervalBounds(data, instructions));
          const rangesPerVariable = intervalBoundsPerVariable.map(bounds => pairRanges(bounds));
          const variables = binInstructions.map(instructions => instructions.groupBy);

          return binKd(data, variables, rangesPerVariable)
        }
      }

      function getIntervalBounds (data, binInstructions) {
        const { groupBy, method, numClasses } = parseBinInstructions(binInstructions);

        const variableData = data[groupBy];
        if (!variableData) {
          throw new Error(`groupBy column '${groupBy}' does not exist`)
        }

        if (method === 'IntervalSize') {
          return createRangesFromBinSize(variableData, binInstructions.binSize)
        }

        if (method === 'Manual') {
          return binInstructions.manualClasses
        }

        const geoStat = new Geostats(variableData);
        return geoStat[methodMap[method]](numClasses)
      }

      function parseBinInstructions (binInstructions) {
        if (binInstructions.constructor !== Object) {
          throw new Error('Bin only accepts an Object')
        }

        const groupBy = binInstructions.groupBy;
        if (groupBy.constructor !== String) {
          throw new Error('groupBy only accepts a String variable name')
        }

        let method = binInstructions.method;
        if (!method) {
          warn('No binning method specified, defaulting to EqualInterval');
          method = 'EqualInterval';
        }
        if (method.constructor !== String) {
          warn('Binning method not recognized, defaulting to EqualInterval');
          method = 'EqualInterval';
        }

        let numClasses = binInstructions.numClasses;
        if (!numClasses) {
          warn('numClasses not specified, defaulting to 5');
          numClasses = 5;
        }

        return { groupBy, method, numClasses }
      }

      function createRangesFromBinSize (variableData, binSize) {
        if (!binSize) {
          throw new Error('Missing required option \'binSize\'')
        }

        const domain = calculateDomain(variableData);

        const binCount = Math.floor((domain[1] - domain[0]) / binSize);

        let lowerBound = domain[0];
        const ranges = [lowerBound];

        for (let i = 0; i < binCount - 1; i++) {
          const upperBound = lowerBound + binSize;
          ranges.push(upperBound);
          lowerBound = upperBound;
        }

        ranges.push(domain[1]);

        return ranges
      }

      const methodMap = {
        EqualInterval: 'getClassEqInterval',
        StandardDeviation: 'getClassStdDeviation',
        ArithmeticProgression: 'getClassArithmeticProgression',
        GeometricProgression: 'getClassGeometricProgression',
        Quantile: 'getClassQuantile',
        Jenks: 'getClassJenks'
      };

      function pairRanges (ranges) {
        const l = ranges.length;
        const newRange = [];

        for (let i = 0; i < l - 1; i++) {
          newRange.push([ranges[i], ranges[i + 1]]);
        }

        return newRange
      }

      function bin1d (data, variable, ranges) {
        // Create an empty array to store new groups divided by range
        const groups = Array(ranges.length);

        for (let i = 0; i < groups.length; i++) {
          groups[i] = {};

          for (const col in data) {
            groups[i][col] = [];
          }
        }

        const length = getDataLength(data);

        for (let i = 0; i < length; i++) {
          const value = data[variable][i];
          const binIndex = getBinIndex(ranges, value);

          if (binIndex !== -1) {
            for (const col in data) {
              groups[binIndex][col].push(data[col][i]);
            }
          }
        }

        // Remove empty bins
        const nonEmptyBinIndices = getNonEmptyBinIndices(groups);
        const nonEmptyRanges = nonEmptyBinIndices.map(i => ranges[i]);
        const nonEmptyGroups = nonEmptyBinIndices.map(i => groups[i]);

        // Add new grouped column to newData
        const newData = {
          bins: nonEmptyRanges,
          $grouped: nonEmptyGroups.map(group => new DataContainer(group, { validate: false }))
        };

        return newData
      }

      function getBinIndex (bins, value) {
        // Find index of bin in which the instance belongs
        const binIndex = bins.findIndex(function (bin, i) {
          if (i === bins.length - 1) {
            return value >= bin[0] && value <= bin[1]
          } else {
            return value >= bin[0] && value < bin[1]
          }
        });

        return binIndex
      }

      function getNonEmptyBinIndices (groups) {
        const nonEmptyBinIndices = [];

        for (let i = 0; i < groups.length; i++) {
          if (getDataLength(groups[i]) > 0) nonEmptyBinIndices.push(i);
        }

        return nonEmptyBinIndices
      }

      function binKd (data, variables, rangesPerVariable) {
        const binIndexTree = constructBinIndexTree(data, variables, rangesPerVariable);
        const binnedData = convertTreeIntoColumnData(binIndexTree, variables, rangesPerVariable);

        binnedData.$grouped = binnedData.$grouped.map(group => new DataContainer(group, { validate: false }));

        return binnedData
      }

      function constructBinIndexTree (data, variables, rangesPerVariable) {
        let binIndexTree = {};
        const dataLength = getDataLength(data);

        for (let i = 0; i < dataLength; i++) {
          const binIndices = getBinIndices(data, i, variables, rangesPerVariable);
          if (rowIsNotEmpty(binIndices)) {
            binIndexTree = updateBranch(binIndexTree, binIndices, data, i);
          }
        }

        return binIndexTree
      }

      function getBinIndices (data, index, variables, rangesPerVariable) {
        const binIndices = [];

        for (let i = 0; i < variables.length; i++) {
          const variable = variables[i];
          const value = data[variable][index];

          binIndices.push(getBinIndex(rangesPerVariable[i], value));
        }

        return binIndices
      }

      function rowIsNotEmpty (binIndices) {
        return binIndices.every(binIndex => binIndex > -1)
      }

      function updateBranch (tree, indices, data, rowIndex) {
        let currentLevel = tree;

        for (let i = 0; i < indices.length; i++) {
          const index = indices[i];

          if (lastIndex(i, indices.length)) {
            if (!(index in currentLevel)) {
              currentLevel[index] = initGroup(data);
            }

            currentLevel[index] = addRow(currentLevel[index], data, rowIndex);
          } else {
            if (!(index in currentLevel)) {
              currentLevel[index] = {};
            }

            currentLevel = currentLevel[index];
          }
        }

        return tree
      }

      function lastIndex (i, length) {
        return i === (length - 1)
      }

      function initGroup (data) {
        const group = {};
        for (const columnName in data) {
          group[columnName] = [];
        }

        return group
      }

      function addRow (group, data, rowIndex) {
        for (const columnName in data) {
          group[columnName].push(data[columnName][rowIndex]);
        }

        return group
      }

      function convertTreeIntoColumnData (binIndexTree, variables, binsPerVariable) {
        const columnData = initColumnData$1(variables);
        const dataIndex = variables.length;

        forEachBranch(binIndexTree, branchArray => {
          for (let i = 0; i < variables.length; i++) {
            const binIndex = branchArray[i];
            const bin = binsPerVariable[i][binIndex];

            const binnedColumnName = getBinnedColumnName(variables[i]);

            columnData[binnedColumnName].push(bin);
          }

          columnData.$grouped.push(branchArray[dataIndex]);
        });

        return columnData
      }

      function initColumnData$1 (variables) {
        const columnData = { $grouped: [] };

        for (let i = 0; i < variables.length; i++) {
          const binnedColumnName = getBinnedColumnName(variables[i]);
          columnData[binnedColumnName] = [];
        }

        return columnData
      }

      function forEachBranch (tree, callback) {
        for (const path of traverse(tree)) {
          callback(path);
        }
      }

      // https://stackoverflow.com/a/45628445
      function * traverse (o) {
        const memory = new Set();

        function * innerTraversal (o, path = []) {
          if (memory.has(o)) {
            // we've seen this object before don't iterate it
            return
          }

          // add the new object to our memory.
          memory.add(o);

          for (const i of Object.keys(o)) {
            const itemPath = path.concat(i);

            if (!('$key' in o[i])) {
              yield * innerTraversal(o[i], itemPath);
            } else {
              itemPath.push(o[i]);
              yield itemPath;
            }
          }
        }

        yield * innerTraversal(o);
      }

      function getBinnedColumnName (columnName) {
        return 'bins_' + columnName
      }

      function dropNA (data, dropInstructions) {
        let filterFunc;

        if (!dropInstructions) {
          // If the instructions are falsy, we will check all columns for invalid values
          filterFunc = row => {
            let keep = true;

            for (const key in row) {
              const val = row[key];
              if (isInvalid(val)) {
                keep = false;
                break
              }
            }

            return keep
          };
        } else if (dropInstructions.constructor === String) {
          // If the instructions are a string, we check only one column for invalid values
          checkIfColumnsExist(data, [dropInstructions]);
          filterFunc = row => !isInvalid(row[dropInstructions]);
        } else if (dropInstructions.constructor === Array) {
          // if the instructions are an array, we check the columns named in the array
          checkIfColumnsExist(data, dropInstructions);
          filterFunc = row => {
            let keep = true;
            for (const col of dropInstructions) {
              if (isInvalid(row[col])) {
                keep = false;
                break
              }
            }

            return keep
          };
        } else {
          throw new Error('dropNA can only be passed undefined, a String or an Array of Strings')
        }

        return filter(data, filterFunc)
      }

      function checkIfColumnsExist (data, columns) {
        for (const col of columns) {
          if (!(col in data)) {
            throw new Error(`Column '${col}' not found`)
          }
        }
      }

      // This function comes from Turf's wonderful geospatial lib
      // We only need this single function and importing it from @turf/meta
      // doesn't work well for in-browser compilation
      // https://github.com/Turfjs/turf

      // The MIT License (MIT)

      // Copyright (c) 2019 Morgan Herlocker

      // Permission is hereby granted, free of charge, to any person obtaining a copy of
      // this software and associated documentation files (the "Software"), to deal in
      // the Software without restriction, including without limitation the rights to
      // use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
      // the Software, and to permit persons to whom the Software is furnished to do so,
      // subject to the following conditions:

      // The above copyright notice and this permission notice shall be included in all
      // copies or substantial portions of the Software.

      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
      // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
      // FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
      // COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
      // IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
      // CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

      function coordEach (geojson, callback, excludeWrapCoord) {
        // Handles null Geometry -- Skips this GeoJSON
        if (geojson === null) return
        var j; var k; var l; var geometry; var stopG; var coords;
        var geometryMaybeCollection;
        var wrapShrink = 0;
        var coordIndex = 0;
        var isGeometryCollection;
        var type = geojson.type;
        var isFeatureCollection = type === 'FeatureCollection';
        var isFeature = type === 'Feature';
        var stop = isFeatureCollection ? geojson.features.length : 1;

        // This logic may look a little weird. The reason why it is that way
        // is because it's trying to be fast. GeoJSON supports multiple kinds
        // of objects at its root: FeatureCollection, Features, Geometries.
        // This function has the responsibility of handling all of them, and that
        // means that some of the `for` loops you see below actually just don't apply
        // to certain inputs. For instance, if you give this just a
        // Point geometry, then both loops are short-circuited and all we do
        // is gradually rename the input until it's called 'geometry'.
        //
        // This also aims to allocate as few resources as possible: just a
        // few numbers and booleans, rather than any temporary arrays as would
        // be required with the normalization approach.
        for (var featureIndex = 0; featureIndex < stop; featureIndex++) {
          geometryMaybeCollection = (isFeatureCollection ? geojson.features[featureIndex].geometry
            : (isFeature ? geojson.geometry : geojson));
          isGeometryCollection = (geometryMaybeCollection) ? geometryMaybeCollection.type === 'GeometryCollection' : false;
          stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;

          for (var geomIndex = 0; geomIndex < stopG; geomIndex++) {
            var multiFeatureIndex = 0;
            var geometryIndex = 0;
            geometry = isGeometryCollection
              ? geometryMaybeCollection.geometries[geomIndex] : geometryMaybeCollection;

            // Handles null Geometry -- Skips this geometry
            if (geometry === null) continue
            coords = geometry.coordinates;
            var geomType = geometry.type;

            wrapShrink = (excludeWrapCoord && (geomType === 'Polygon' || geomType === 'MultiPolygon')) ? 1 : 0;

            switch (geomType) {
              case null:
                break
              case 'Point':
                if (callback(coords, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false
                coordIndex++;
                multiFeatureIndex++;
                break
              case 'LineString':
              case 'MultiPoint':
                for (j = 0; j < coords.length; j++) {
                  if (callback(coords[j], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false
                  coordIndex++;
                  if (geomType === 'MultiPoint') multiFeatureIndex++;
                }
                if (geomType === 'LineString') multiFeatureIndex++;
                break
              case 'Polygon':
              case 'MultiLineString':
                for (j = 0; j < coords.length; j++) {
                  for (k = 0; k < coords[j].length - wrapShrink; k++) {
                    if (callback(coords[j][k], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false
                    coordIndex++;
                  }
                  if (geomType === 'MultiLineString') multiFeatureIndex++;
                  if (geomType === 'Polygon') geometryIndex++;
                }
                if (geomType === 'Polygon') multiFeatureIndex++;
                break
              case 'MultiPolygon':
                for (j = 0; j < coords.length; j++) {
                  geometryIndex = 0;
                  for (k = 0; k < coords[j].length; k++) {
                    for (l = 0; l < coords[j][k].length - wrapShrink; l++) {
                      if (callback(coords[j][k][l], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false
                      coordIndex++;
                    }
                    geometryIndex++;
                  }
                  multiFeatureIndex++;
                }
                break
              case 'GeometryCollection':
                for (j = 0; j < geometry.geometries.length; j++) { if (coordEach(geometry.geometries[j], callback, excludeWrapCoord) === false) return false }
                break
              default:
                throw new Error('Unknown Geometry Type')
            }
          }
        }
      }

      function transformGeometries (geometries, transformFunc) {
        const geometriesClone = JSON.parse(JSON.stringify(geometries));

        if (geometriesClone.constructor === Array) {
          for (let i = 0; i < geometriesClone.length; i++) {
            transformGeometryInplace(geometriesClone[i], transformFunc);
          }
        }

        if (geometriesClone.constructor === Object) {
          for (const key in geometriesClone) {
            transformGeometryInplace(geometriesClone[key], transformFunc);
          }
        }

        return geometriesClone
      }

      function transformGeometryInplace (geometry, transformFunc) {
        coordEach(geometry, coord => {
          const transformedPosition = transformFunc(coord);
          coord[0] = transformedPosition[0];
          coord[1] = transformedPosition[1];
        });
      }

      function reproject (data, transformation) {
        if (!('$geometry' in data)) {
          warn('No geometry column found. Skipping reproject-transformation.');
          return data
        }

        const transformedGeometries = transformGeometries(data.$geometry, transformation);
        data.$geometry = transformedGeometries;

        return data
      }

      function transform (data, transformFunction) {
        if (transformFunction.constructor !== Function) {
          throw new Error(`Invalid 'transform' transformation: must be a Function`)
        }

        transformFunction(data);
      }

      function cumsum (data, cumsumInstructions, options = { asInterval: false }) {
        const asInterval = options.asInterval;
        const length = getDataLength(data);
        const newColumns = {};

        for (const newColName in cumsumInstructions) {
          checkRegularColumnName(newColName);

          const oldColName = cumsumInstructions[newColName];

          if (getColumnType(data[oldColName]) !== 'quantitative') {
            throw new Error('cumsum columns can only be of type \'quantitative\'')
          }

          let previousSum = 0;
          let currentSum = 0;
          newColumns[newColName] = [];

          for (let i = 0; i < length; i++) {
            const value = data[oldColName][i];

            if (!isInvalid(value)) {
              currentSum += value;
            }

            if (asInterval) {
              newColumns[newColName].push([previousSum, currentSum]);
            } else {
              newColumns[newColName].push(currentSum);
            }

            previousSum = currentSum;
          }
        }

        Object.assign(data, newColumns);
      }

      function rowCumsum (data, _cumsumInstructions, options = { asInterval: false }) {
        const asInterval = options.asInterval;
        const cumsumInstructions = parseCumsumInstructions(_cumsumInstructions);
        validateColumns(data, cumsumInstructions);

        const rowCumsumColumns = {};
        let previousColumnName;

        for (const [newName, oldName] of cumsumInstructions) {
          checkRegularColumnName(newName);
          const oldColumn = data[oldName];

          if (previousColumnName === undefined) {
            if (asInterval) {
              rowCumsumColumns[newName] = oldColumn.map(value => [0, value]);
            } else {
              rowCumsumColumns[newName] = oldColumn;
            }
          } else {
            const previousColumn = rowCumsumColumns[previousColumnName];
            let newColumn;

            if (asInterval) {
              newColumn = oldColumn.map((value, i) => {
                const previousValue = previousColumn[i][1];
                const newValue = previousValue + value;
                return [previousValue, newValue]
              });
            } else {
              newColumn = oldColumn.map((value, i) => value + previousColumn[i]);
            }

            rowCumsumColumns[newName] = newColumn;
          }

          previousColumnName = newName;
        }

        Object.assign(data, rowCumsumColumns);
      }

      const invalidInstructionsError = new Error('Invalid rowCumsum instrutions');

      function parseCumsumInstructions (cumsumInstructions) {
        if (cumsumInstructions && cumsumInstructions.constructor === Array) {
          const parsedInstructions = [];

          for (const instruction of cumsumInstructions) {
            validateInstruction(instruction);

            if (instruction.constructor === String) {
              parsedInstructions.push([instruction, instruction]);
            }

            if (instruction.constructor === Object) {
              const newName = Object.keys(instruction)[0];
              const oldName = instruction[newName];
              parsedInstructions.push([newName, oldName]);
            }
          }

          return parsedInstructions
        }

        throw invalidInstructionsError
      }

      function validateInstruction (instruction) {
        if (instruction.constructor === String) return

        if (instruction.constructor === Object) {
          if (Object.keys(instruction).length === 1) return
        }

        throw invalidInstructionsError
      }

      function validateColumns (data, stackInstructions) {
        for (const [, oldName] of stackInstructions) {
          const column = data[oldName];

          if (!column) {
            throw new Error(`Column '${oldName}' does not exist`)
          }

          const columnType = getColumnType(column);

          if (columnType !== 'quantitative') {
            throw new Error('rowCumsum columns can only be of type \'quantitative\'')
          }
        }
      }

      const transformations = {
        filter,
        select: produce(select),
        arrange: produce(arrange),
        rename: produce(rename),
        mutate: produce(mutate),
        transmute: produce(transmute),
        summarise,
        mutarise,
        groupBy,
        bin,
        dropNA,
        reproject: produce(reproject),
        transform: produce(transform),
        cumsum: produce(cumsum),
        rowCumsum: produce(rowCumsum)
      };

      const methods$1 = {
        arrange (sortInstructions) {
          const data = transformations.arrange(this._data, sortInstructions);
          return new DataContainer(data, { validate: false })
        },

        bin (binInstructions) {
          const data = transformations.bin(this._data, binInstructions);
          return new DataContainer(data, { validate: false })
        },

        cumsum (cumsumInstructions, options) {
          const data = transformations.cumsum(this._data, cumsumInstructions, options);
          return new DataContainer(data, { validate: false })
        },

        dropNA (dropInstructions) {
          const data = transformations.dropNA(this._data, dropInstructions);
          return new DataContainer(data, { validate: false })
        },

        filter (filterFunction) {
          const data = transformations.filter(this._data, filterFunction);
          return new DataContainer(data, { validate: false })
        },

        groupBy (groupByInstructions) {
          const data = transformations.groupBy(this._data, groupByInstructions);
          return new DataContainer(data, { validate: false })
        },

        mutarise (mutariseInstructions) {
          const data = transformations.mutarise(this._data, mutariseInstructions);
          return new DataContainer(data, { validate: false })
        },

        mutarize (mutariseInstructions) {
          const data = transformations.mutarise(this._data, mutariseInstructions);
          return new DataContainer(data, { validate: false })
        },

        mutate (mutateInstructions) {
          const data = transformations.mutate(this._data, mutateInstructions);
          return new DataContainer(data, { validate: false })
        },

        transmute (transmuteInstructions) {
          const data = transformations.transmute(this._data, transmuteInstructions);
          return new DataContainer(data, { validate: false })
        },

        rename (renameInstructions) {
          const data = transformations.rename(this._data, renameInstructions);
          return new DataContainer(data, { validate: false })
        },

        reproject (reprojectInstructions) {
          const data = transformations.reproject(this._data, reprojectInstructions);
          return new DataContainer(data, { validate: false })
        },

        rowCumsum (cumsumInstructions, options) {
          const data = transformations.rowCumsum(this._data, cumsumInstructions, options);
          return new DataContainer(data, { validate: false })
        },

        select (selection) {
          const data = transformations.select(this._data, selection);
          return new DataContainer(data, { validate: false })
        },

        summarise (summariseInstructions) {
          const data = transformations.summarise(this._data, summariseInstructions);
          return new DataContainer(data, { validate: false })
        },

        summarize (summariseInstructions) {
          const data = transformations.summarise(this._data, summariseInstructions);
          return new DataContainer(data, { validate: false })
        },

        transform (transformFunction) {
          const data = transformations.transform(this._data, transformFunction);
          return new DataContainer(data, { validate: false })
        }
      };

      function transformationsMixin (targetClass) {
        Object.assign(targetClass.prototype, methods$1);
      }

      function ensureValidRow (row, self) {
        for (const columnName in row) {
          if (!(columnName in self._data)) throw new Error(`Column '${columnName}' not found`)
        }

        for (const columnName in self._data) {
          if (columnName === '$key') {
            if (columnName in row) throw new Error('Cannot set \'$key\' column')
          } else {
            if (!(columnName in row)) throw new Error(`Missing column '${columnName}'`)

            const value = row[columnName];
            ensureValueIsRightForColumn(value, columnName, self);
          }
        }
      }

      function ensureValidRowUpdate (row, self) {
        for (const columnName in row) {
          if (!(columnName in self._data)) throw new Error(`Column '${columnName}' not found`)

          const value = row[columnName];
          ensureValueIsRightForColumn(value, columnName, self);
        }
      }

      function ensureRowExists (key, self) {
        if (isUndefined(self._keyToRowNumber[key])) {
          throw new Error(`Key '${key}' not found`)
        }
      }

      function ensureValueIsRightForColumn (value, columnName, self) {
        if (!isInvalid(value)) {
          const columnType = getColumnType(self._data[columnName]);

          ensureValidDataType(value);
          const valueType = getDataType(value);

          if (columnType !== valueType) {
            throw new Error(`Column '${columnName}' is of type '${columnType}'. Received value of type '${valueType}'`)
          }
        }
      }

      function isValidColumn (column, columnName) {
        const columnType = getColumnType(column);

        if (columnType === undefined) return false
        if (!columnNameMatchesType(columnName, columnType)) return false
        if (!allValidValuesHaveTheSameType(column, columnType)) return false

        return true
      }

      function ensureValidColumn (column, columnName) {
        const { nValidValues } = findFirstValidValue(column);

        if (nValidValues === 0) {
          throw new Error(`Invalid column '${columnName}'. Column contains only invalid values.`)
        }

        const columnType = getColumnType(column);

        if (columnType === undefined) throw new Error(`Column '${columnName}' contains data of unknown type`)
        ensureColumnNameMatchesType(columnType);
        ensureAllValidValuesHaveTheSameType(column, columnType, columnName);
      }

      function columnNameMatchesType (columnName, columnType) {
        if (columnName === '$geometry' && columnType !== 'geometry') return false
        if (columnName !== '$geometry' && columnType === 'geometry') return false

        return true
      }

      function ensureColumnNameMatchesType (columnName, columnType) {
        if (columnName === '$geometry' && columnType !== 'geometry') {
          throw new Error(`Column '$geometry' can only contain data of type 'geometry', received '${columnType}'`)
        }

        if (columnName !== '$geometry' && columnType === 'geometry') {
          throw new Error(`Only the '$geometry' column can contain data of type 'geometry'`)
        }
      }

      function allValidValuesHaveTheSameType (column, columnType) {
        for (let i = 0; i < column.length; i++) {
          const value = column[i];

          if (isInvalid(value)) continue

          const valueType = getDataType(value);

          if (valueType !== columnType) {
            return false
          }
        }

        return true
      }

      function ensureAllValidValuesHaveTheSameType (column, columnType, columnName) {
        if (!allValidValuesHaveTheSameType(column, columnType)) {
          throw new Error(`Column '${columnName}' mixes types`)
        }
      }

      function columnExists (columnName, self) {
        return columnName in self._data
      }

      function ensureColumnExists (columnName, self) {
        if (!columnExists(columnName, self)) {
          throw new Error(`Invalid column name: '${columnName}'`)
        }
      }

      const methods$2 = {
        // Rows
        addRow (row) {
          ensureValidRow(row, this);
          const self = this;

          this._data = produce(this._data, draft => {
            for (const columnName in row) {
              const value = row[columnName];
              draft[columnName].push(value);

              self._updateDomainIfNecessary(columnName, value);
            }
          });

          const rowNumber = getDataLength(this._data) - 1;
          const keyDomain = this.domain('$key');
          keyDomain[1]++;
          const key = keyDomain[1];

          this._data = produce(this._data, draft => {
            draft.$key.push(key);
          });

          this._keyToRowNumber[key] = rowNumber;
        },

        updateRow (key, row) {
          if (row.constructor === Function) {
            const result = row(this.row(key));

            if (!(result && result.constructor === Object)) {
              throw new Error('updateRow function must return Object')
            }

            this.updateRow(key, result);
          }

          ensureRowExists(key, this);
          ensureValidRowUpdate(row, this);
          const self = this;
          const rowNumber = this._keyToRowNumber[key];

          this._data = produce(this._data, draft => {
            for (const columnName in row) {
              throwErrorIfColumnIsKey(columnName);

              const value = row[columnName];
              draft[columnName][rowNumber] = value;

              self._resetDomainIfNecessary(columnName);
            }
          });
        },

        deleteRow (key) {
          ensureRowExists(key, this);
          const self = this;
          const rowNumber = this._keyToRowNumber[key];
          delete this._keyToRowNumber[key];

          this._data = produce(this._data, draft => {
            for (const columnName in draft) {
              draft[columnName].splice(rowNumber, 1);
              self._resetDomainIfNecessary(columnName);
            }
          });
        },

        // Columns
        addColumn (columnName, column) {
          this._validateNewColumn(columnName, column);

          this._data = produce(this._data, draft => {
            draft[columnName] = column;
          });
        },

        replaceColumn (columnName, column) {
          this.deleteColumn(columnName);
          this.addColumn(columnName, column);
        },

        deleteColumn (columnName) {
          ensureColumnExists(columnName, this);
          throwErrorIfColumnIsKey(columnName);

          if (Object.keys(this._data).length === 2) {
            throw new Error('Cannot delete last column')
          }

          this._data = produce(this._data, draft => {
            delete draft[columnName];
          });
        },

        // Private methods
        _updateDomainIfNecessary (columnName, value) {
          const type = getDataType(value);

          if (columnName in this._domains) {
            this._domains[columnName] = updateDomain(
              this._domains[columnName],
              value,
              type
            );
          }
        },

        _resetDomainIfNecessary (columnName) {
          if (columnName in this._domains) {
            delete this._domains[columnName];
          }
        },

        _validateNewColumn (columnName, column) {
          checkRegularColumnName(columnName);

          if (columnName in this._data) {
            throw new Error(`Column '${columnName}' already exists`)
          }

          const dataLength = getDataLength(this._data);
          if (dataLength !== column.length) {
            throw new Error('Column must be of same length as rest of data')
          }

          ensureValidColumn(column);
        }
      };

      function modifyingRowsAndColumnsMixin (targetClass) {
        Object.assign(targetClass.prototype, methods$2);
      }

      function throwErrorIfColumnIsKey (columnName) {
        if (columnName === '$key') throw new Error('Cannot modify key column')
      }

      function getJoinColumns (left, right, by) {
        const leftData = left.data();
        const rightData = right.data();

        if (isUndefined(by)) {
          const leftDataLength = getDataLength(leftData);
          const joinColumns = {};

          for (const columnName in rightData) {
            if (columnName !== '$key') {
              const rightColumn = rightData[columnName];
              joinColumns[columnName] = rightColumn.slice(0, leftDataLength);
            }
          }

          return joinColumns
        }

        if (isDefined(by)) {
          const joinColumns = initJoinColumns(rightData, by[1]);

          const rightRowsByKey = generateRightRowsByKey(rightData, by[1]);
          const leftByColumn = leftData[by[0]];

          for (let i = 0; i < leftByColumn.length; i++) {
            const leftKey = leftByColumn[i];
            const row = rightRowsByKey[leftKey];

            for (const columnName in row) {
              joinColumns[columnName].push(row[columnName]);
            }
          }

          return joinColumns
        }
      }

      function initJoinColumns (right, byColumnName) {
        const joinColumns = {};

        for (const columnName in right) {
          if (columnName !== '$key' && columnName !== byColumnName) {
            joinColumns[columnName] = [];
          }
        }

        return joinColumns
      }

      function generateRightRowsByKey (right, byColumnName) {
        const rightRowsByKey = {};
        const byColumn = right[byColumnName];

        for (let i = 0; i < byColumn.length; i++) {
          const key = byColumn[i];
          const row = {};

          for (const columnName in right) {
            if (columnName !== '$key' && columnName !== byColumnName) {
              row[columnName] = right[columnName][i];
            }
          }

          rightRowsByKey[key] = row;
        }

        return rightRowsByKey
      }

      function validateJoin (left, right, by) {
        const leftData = left.data();
        const rightData = getRightData(right);

        if (isUndefined(by)) {
          const leftLength = getDataLength(leftData);
          const rightLength = getDataLength(rightData);

          if (rightLength < leftLength) {
            throw new Error(
              'Without \'by\', the right DataContainer must be the same length as or longer than left DataContainer'
            )
          }
        }

        if (isDefined(by)) {
          validateByColumnsExist(leftData, rightData, by);
          ensureColumnsAreCompatible(leftData, rightData, by);
          ensureNoDuplicateColumnNames(leftData, rightData, by);
        }
      }

      function getRightData (right) {
        if (!(right instanceof DataContainer)) {
          throw new Error('It is only possible to join another DataContainer')
        }

        return right.data()
      }

      function validateByColumnsExist (left, right, by) {
        if (!(by.constructor === Array && by.length === 2 && by.every(c => c.constructor === String))) {
          throw new Error('Invalid format of \'by\'. Must be Array of two column names.')
        }

        const [leftColumnName, rightColumnName] = by;

        if (!(leftColumnName in left)) {
          throw new Error(`Column '${leftColumnName}' not found`)
        }

        if (!(rightColumnName in right)) {
          throw new Error(`Column '${rightColumnName}' not found`)
        }
      }

      function ensureColumnsAreCompatible (left, right, by) {
        const [leftColumnName, rightColumnName] = by;
        const leftColumn = left[leftColumnName];
        const rightColumn = right[rightColumnName];

        const leftType = getColumnType(leftColumn);
        const rightType = getColumnType(rightColumn);

        if (leftType !== rightType) throw new Error('\'by\' columns must be of the same type')

        ensureRightByColumnIsUnique(right[rightColumnName]);
        ensureLeftColumnIsSubsetOfRightColumn(leftColumn, rightColumn);
      }

      function ensureRightByColumnIsUnique (column) {
        if (column.length !== new Set(column).size) {
          throw new Error('Right \'by\' column must contain only unique values')
        }
      }

      function ensureLeftColumnIsSubsetOfRightColumn (leftColumn, rightColumn) {
        const rightSet = new Set(rightColumn);

        for (let i = 0; i < leftColumn.length; i++) {
          const leftKey = leftColumn[i];
          if (!rightSet.has(leftKey)) {
            throw new Error('Left \'by\' column must be subset of right column')
          }
        }
      }

      function ensureNoDuplicateColumnNames (left, right, by) {
        const rightColumnName = by[1];

        for (const columnName in right) {
          if (columnName !== '$key' && columnName in left) {
            if (columnName !== rightColumnName) {
              throw new Error(`Duplicate column name: '${columnName}'`)
            }
          }
        }
      }

      class DataContainer {
        constructor (data, options = { validate: true }) {
          this._data = {};
          this._keyToRowNumber = {};
          this._domains = {};

          if (isColumnOriented(data)) {
            this._setColumnData(data, options);
            return
          }

          if (isRowOriented(data)) {
            this._setRowData(data, options);
            return
          }

          if (isGeoJSON(data)) {
            this._setGeoJSON(data, options);
            return
          }

          if (data instanceof Group) {
            this._setGroup(data, options);
            return
          }

          throw invalidDataError
        }

        // Accessing data
        data () {
          return this._data
        }

        row (key) {
          const rowNumber = this._keyToRowNumber[key];
          return this._row(rowNumber)
        }

        prevRow (key) {
          const rowNumber = this._keyToRowNumber[key];
          const previousRowNumber = rowNumber - 1;
          return this._row(previousRowNumber)
        }

        nextRow (key) {
          const rowNumber = this._keyToRowNumber[key];
          const nextRowNumber = rowNumber + 1;
          return this._row(nextRowNumber)
        }

        rows () {
          const rows = [];
          const length = getDataLength(this._data);

          for (let i = 0; i < length; i++) {
            rows.push(this._row(i));
          }

          return rows
        }

        column (columnName) {
          ensureColumnExists(columnName, this);
          return this._data[columnName]
        }

        map (columnName, mapFunction) {
          return this.column(columnName).map(mapFunction)
        }

        domain (columnName) {
          if (columnName in this._domains) {
            return this._domains[columnName]
          }

          const column = this.column(columnName);
          const domain = calculateDomain(column, columnName);
          this._domains[columnName] = domain;
          return domain
        }

        type (columnName) {
          const column = this.column(columnName);
          return getColumnType(column)
        }

        columnNames () {
          return Object.keys(this._data)
        }

        // Checks
        hasColumn (columnName) {
          return columnExists(columnName, this)
        }

        columnIsValid (columnName) {
          const column = this.column(columnName);
          return isValidColumn(column, columnName)
        }

        validateColumn (columnName) {
          const column = this.column(columnName);
          ensureValidColumn(column, columnName);
        }

        validateAllColumns () {
          for (const columnName in this._data) {
            this.validateColumn(columnName);
          }
        }

        // Join
        join (dataContainer, { by = undefined } = {}) {
          validateJoin(this, dataContainer, by);
          const joinColumns = getJoinColumns(this, dataContainer, by);

          for (const columnName in joinColumns) {
            this.addColumn(columnName, joinColumns[columnName]);
          }
        }

        // Private methods
        _row (rowNumber) {
          const length = getDataLength(this._data);

          if (rowNumber < 0 || rowNumber >= length) {
            return undefined
          }

          const row = {};

          for (const columnName in this._data) {
            const value = this._data[columnName][rowNumber];
            row[columnName] = value;
          }

          return row
        }
      }

      dataLoadingMixin(DataContainer);
      transformationsMixin(DataContainer);
      modifyingRowsAndColumnsMixin(DataContainer);

      const invalidDataError = new Error('Data passed to DataContainer is of unknown format');

      return DataContainer;

    })));
    });

    /* src/page/component/WordMap.svelte generated by Svelte v3.21.0 */

    function create_fragment$d(ctx) {
    	let current;

    	const polygonlayer = new PolygonLayer({
    			props: {
    				geometry: /*filterHex*/ ctx[1].column("$geometry"),
    				stroke: /*func*/ ctx[8],
    				strokeWidth: /*func_1*/ ctx[9],
    				fill: hexFill$1,
    				onMouseover: /*mouseOverHandler*/ ctx[2],
    				onMouseout: /*func_2*/ ctx[10]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(polygonlayer.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(polygonlayer, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const polygonlayer_changes = {};
    			if (dirty & /*filterHex*/ 2) polygonlayer_changes.geometry = /*filterHex*/ ctx[1].column("$geometry");
    			if (dirty & /*selectHexId*/ 1) polygonlayer_changes.stroke = /*func*/ ctx[8];
    			if (dirty & /*selectHexId*/ 1) polygonlayer_changes.strokeWidth = /*func_1*/ ctx[9];
    			if (dirty & /*selectHexId*/ 1) polygonlayer_changes.onMouseout = /*func_2*/ ctx[10];
    			polygonlayer.$set(polygonlayer_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(polygonlayer.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(polygonlayer.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(polygonlayer, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$d.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const hexFill$1 = "#54918d";

    function instance$d($$self, $$props, $$invalidate) {
    	let { hex } = $$props;

    	// TODO: filter hexgon by word
    	const trigramHexContainer = new florenceDatacontainer_umd(TRIGRAM_HEX);

    	////// event Listener
    	// select Hex
    	let selectHexId = null;

    	let hoverWord = 0;
    	let clickWord = 0;
    	let filterHex;
    	hoverWordWrite.subscribe(value => $$invalidate(4, hoverWord = value));
    	clickWordWrite.subscribe(value => $$invalidate(5, clickWord = value));

    	const mouseOverHandler = e => {
    		$$invalidate(0, selectHexId = e.key);
    	};

    	const showWordHex = word => {
    		const wordHex = trigramHexContainer.filter(row => row.gram === word).column("hex_id");

    		$$invalidate(1, filterHex = hex.filter(row => {
    			return wordHex.includes(Number(row.hex_id));
    		}));
    	};

    	const writable_props = ["hex"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<WordMap> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("WordMap", $$slots, []);
    	const func = k => k === selectHexId ? "red" : "white";
    	const func_1 = k => k === selectHexId ? 2 : 1;
    	const func_2 = e => $$invalidate(0, selectHexId = null);

    	$$self.$set = $$props => {
    		if ("hex" in $$props) $$invalidate(3, hex = $$props.hex);
    	};

    	$$self.$capture_state = () => ({
    		hoverWordWrite,
    		clickWordWrite,
    		PolygonLayer,
    		TRIGRAM_HEX,
    		DataContainer: florenceDatacontainer_umd,
    		hex,
    		hexFill: hexFill$1,
    		trigramHexContainer,
    		selectHexId,
    		hoverWord,
    		clickWord,
    		filterHex,
    		mouseOverHandler,
    		showWordHex
    	});

    	$$self.$inject_state = $$props => {
    		if ("hex" in $$props) $$invalidate(3, hex = $$props.hex);
    		if ("selectHexId" in $$props) $$invalidate(0, selectHexId = $$props.selectHexId);
    		if ("hoverWord" in $$props) $$invalidate(4, hoverWord = $$props.hoverWord);
    		if ("clickWord" in $$props) $$invalidate(5, clickWord = $$props.clickWord);
    		if ("filterHex" in $$props) $$invalidate(1, filterHex = $$props.filterHex);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*hoverWord, clickWord*/ 48) {
    			 {
    				if (hoverWord !== 0) {
    					showWordHex(hoverWord);
    				} else {
    					showWordHex(clickWord);
    				}
    			}
    		}
    	};

    	return [
    		selectHexId,
    		filterHex,
    		mouseOverHandler,
    		hex,
    		hoverWord,
    		clickWord,
    		trigramHexContainer,
    		showWordHex,
    		func,
    		func_1,
    		func_2
    	];
    }

    class WordMap extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$d, create_fragment$d, safe_not_equal, { hex: 3 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "WordMap",
    			options,
    			id: create_fragment$d.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*hex*/ ctx[3] === undefined && !("hex" in props)) {
    			console.warn("<WordMap> was created without expected prop 'hex'");
    		}
    	}

    	get hex() {
    		throw new Error("<WordMap>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set hex(value) {
    		throw new Error("<WordMap>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const HEX = {
    "type": "FeatureCollection",
    "name": "hex",
    "crs": { "type": "name", "properties": { "name": "urn:ogc:def:crs:OGC:1.3:CRS84" } },
    "features": [
    { "type": "Feature", "properties": { "hex_id": "1" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.605702876505561, 1.216125494147579 ], [ 103.601210108041386, 1.218735765507543 ], [ 103.60120966007571, 1.223957078159102 ], [ 103.605701997913826, 1.226568122757727 ], [ 103.610194777866951, 1.223957845630926 ], [ 103.610195208492982, 1.218736529704437 ], [ 103.605702876505561, 1.216125494147579 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "2" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.605701555798802, 1.231789436756239 ], [ 103.601208758394776, 1.234399702848644 ], [ 103.60120830467946, 1.239621014884885 ], [ 103.605700665930385, 1.242232064135786 ], [ 103.610193474934746, 1.23962179218157 ], [ 103.610193911087848, 1.234400476870364 ], [ 103.605701555798802, 1.231789436756239 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "3" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.605700218176935, 1.247453377515079 ], [ 103.60120739149913, 1.250063638335953 ], [ 103.601206932034032, 1.255284949749039 ], [ 103.605699317031508, 1.257896003648354 ], [ 103.610192155421018, 1.255285736870696 ], [ 103.610192597101346, 1.250064422182608 ], [ 103.605700218176935, 1.247453377515079 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "4" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.605698863639475, 1.263117316400593 ], [ 103.601206007353923, 1.265727571945961 ], [ 103.601205542138885, 1.270948882728055 ], [ 103.605697951216683, 1.273559941271923 ], [ 103.610190819325254, 1.270949679674797 ], [ 103.610191266532979, 1.265728365617662 ], [ 103.605698863639475, 1.263117316400593 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.610196064218115, 1.208293897242272 ], [ 103.6057033129823, 1.210904179537685 ], [ 103.605702876505561, 1.216125494147579 ], [ 103.610195208492982, 1.218736529704437 ], [ 103.614687971106434, 1.216126241657341 ], [ 103.6146883903548, 1.210904923837168 ], [ 103.610196064218115, 1.208293897242272 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.610194777866951, 1.223957845630926 ], [ 103.605701997913826, 1.226568122757727 ], [ 103.605701555798802, 1.231789436756239 ], [ 103.610193911087848, 1.234400476870364 ], [ 103.61468670252998, 1.231790193896908 ], [ 103.614687127194046, 1.226568876688081 ], [ 103.610194777866951, 1.223957845630926 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.610193474934746, 1.23962179218157 ], [ 103.605700665930385, 1.242232064135786 ], [ 103.605700218176935, 1.247453377515079 ], [ 103.610192597101346, 1.250064422182608 ], [ 103.614685417706056, 1.247454144286763 ], [ 103.614685847785992, 1.242232827697119 ], [ 103.610193474934746, 1.23962179218157 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "8" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.610192155421018, 1.255285736870696 ], [ 103.605699317031508, 1.257896003648354 ], [ 103.605698863639475, 1.263117316400593 ], [ 103.610191266532979, 1.265728365617662 ], [ 103.614684116634209, 1.2631180928034 ], [ 103.614684552130186, 1.257896776840774 ], [ 103.610192155421018, 1.255285736870696 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "9" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.610190819325254, 1.270949679674797 ], [ 103.605697951216683, 1.273559941271923 ], [ 103.605697492185882, 1.278781253389272 ], [ 103.610189919382279, 1.281392307152019 ], [ 103.614682799313954, 1.278782039423313 ], [ 103.614683240226128, 1.27356072409554 ], [ 103.610190819325254, 1.270949679674797 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "10" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.614687971106434, 1.216126241657341 ], [ 103.610195208492982, 1.218736529704437 ], [ 103.610194777866951, 1.223957845630926 ], [ 103.614687127194046, 1.226568876688081 ], [ 103.619179901185191, 1.223958582809483 ], [ 103.619180314471535, 1.218737263737331 ], [ 103.614687971106434, 1.216126241657341 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "11" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.61468670252998, 1.231790193896908 ], [ 103.610193911087848, 1.234400476870364 ], [ 103.610193474934746, 1.23962179218157 ], [ 103.614685847785992, 1.242232827697119 ], [ 103.619178650717188, 1.239622538797187 ], [ 103.619179069308046, 1.234401220340281 ], [ 103.61468670252998, 1.231790193896908 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "12" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.614685417706056, 1.247454144286763 ], [ 103.610192597101346, 1.250064422182608 ], [ 103.610192155421018, 1.255285736870696 ], [ 103.614684552130186, 1.257896776840774 ], [ 103.619177384335316, 1.255286492923478 ], [ 103.619177808230845, 1.250065175089655 ], [ 103.614685417706056, 1.247454144286763 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "13" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.614684116634209, 1.2631180928034 ], [ 103.610191266532979, 1.265728365617662 ], [ 103.610190819325254, 1.270949679674797 ], [ 103.614683240226128, 1.27356072409554 ], [ 103.619176102039134, 1.270950445164852 ], [ 103.619176531239475, 1.265729127961947 ], [ 103.614684116634209, 1.2631180928034 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "14" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.614682799313954, 1.278782039423313 ], [ 103.610189919382279, 1.281392307152019 ], [ 103.610189466647, 1.286613620570366 ], [ 103.614681912073323, 1.289224669437912 ], [ 103.619174803828159, 1.286614395497803 ], [ 103.619175238333497, 1.28139307893365 ], [ 103.614682799313954, 1.278782039423313 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "15" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.614681465744809, 1.294445984122997 ], [ 103.610188555648733, 1.297056246762175 ], [ 103.610188097385731, 1.302277559533897 ], [ 103.6146805676713, 1.304888612844385 ], [ 103.619173489701907, 1.302278343898825 ], [ 103.619173929512371, 1.297057027981261 ], [ 103.614681465744809, 1.294445984122997 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "16" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.619181135739822, 1.208294624983873 ], [ 103.6146883903548, 1.210904923837168 ], [ 103.614687971106434, 1.216126241657341 ], [ 103.619180314471535, 1.218737263737331 ], [ 103.62367307112298, 1.216126959067688 ], [ 103.623673473142887, 1.210905638166503 ], [ 103.619181135739822, 1.208294624983873 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "17" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.619179901185191, 1.223958582809483 ], [ 103.614687127194046, 1.226568876688081 ], [ 103.61468670252998, 1.231790193896908 ], [ 103.619179069308046, 1.234401220340281 ], [ 103.623671854676957, 1.231790920550362 ], [ 103.623672261890022, 1.226569600260488 ], [ 103.619179901185191, 1.223958582809483 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "18" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.619178650717188, 1.239622538797187 ], [ 103.614685847785992, 1.242232827697119 ], [ 103.614685417706056, 1.247454144286763 ], [ 103.619177808230845, 1.250065175089655 ], [ 103.623670622651133, 1.247454880183427 ], [ 103.623671035057527, 1.242233560512702 ], [ 103.619178650717188, 1.239622538797187 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "19" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.619177384335316, 1.255286492923478 ], [ 103.614684552130186, 1.257896776840774 ], [ 103.614684116634209, 1.2631180928034 ], [ 103.619176531239475, 1.265729127961947 ], [ 103.623669375045083, 1.263118837943379 ], [ 103.623669792644932, 1.257897518899636 ], [ 103.619177384335316, 1.255286492923478 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "20" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.619176102039134, 1.270950445164852 ], [ 103.614683240226128, 1.27356072409554 ], [ 103.614682799313954, 1.278782039423313 ], [ 103.619175238333497, 1.28139307893365 ], [ 103.623668111858336, 1.278782793806712 ], [ 103.623668534651813, 1.273561475397788 ], [ 103.619176102039134, 1.270950445164852 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "21" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.619174803828159, 1.286614395497803 ], [ 103.614681912073323, 1.289224669437912 ], [ 103.614681465744809, 1.294445984122997 ], [ 103.619173929512371, 1.297057027981261 ], [ 103.623666833090411, 1.294446747749924 ], [ 103.623667261077657, 1.289225429983651 ], [ 103.619174803828159, 1.286614395497803 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "22" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.619173489701907, 1.302278343898825 ], [ 103.6146805676713, 1.304888612844385 ], [ 103.614680115926276, 1.310109926878946 ], [ 103.619172604775684, 1.312720975081274 ], [ 103.623665538740838, 1.310110699749509 ], [ 103.623665971922023, 1.304889382633723 ], [ 103.619173489701907, 1.302278343898825 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "23" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.62367307112298, 1.216126959067688 ], [ 103.619180314471535, 1.218737263737331 ], [ 103.619179901185191, 1.223958582809483 ], [ 103.623672261890022, 1.226569600260488 ], [ 103.628165029807917, 1.223959289694681 ], [ 103.628165425754503, 1.218737967606132 ], [ 103.62367307112298, 1.216126959067688 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "24" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.623671854676957, 1.231790920550362 ], [ 103.619179069308046, 1.234401220340281 ], [ 103.619178650717188, 1.239622538797187 ], [ 103.623671035057527, 1.242233560512702 ], [ 103.628163831804244, 1.239623254731641 ], [ 103.628164232832788, 1.234401933258306 ], [ 103.623671854676957, 1.231790920550362 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "25" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.623670622651133, 1.247454880183427 ], [ 103.619177808230845, 1.250065175089655 ], [ 103.619177384335316, 1.255286492923478 ], [ 103.623669792644932, 1.257897518899636 ], [ 103.628162618554398, 1.255287217907291 ], [ 103.628163024665071, 1.250065897057004 ], [ 103.623670622651133, 1.247454880183427 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "26" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.623669375045083, 1.263118837943379 ], [ 103.619176531239475, 1.265729127961947 ], [ 103.619176102039134, 1.270950445164852 ], [ 103.623668534651813, 1.273561475397788 ], [ 103.628161390057926, 1.270951179198125 ], [ 103.628161801250855, 1.265729858978722 ], [ 103.623669375045083, 1.263118837943379 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "27" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.623668111858336, 1.278782793806712 ], [ 103.619175238333497, 1.28139307893365 ], [ 103.619174803828159, 1.286614395497803 ], [ 103.623667261077657, 1.289225429983651 ], [ 103.6281601463144, 1.286615138580641 ], [ 103.628160562589727, 1.281393818999955 ], [ 103.623668111858336, 1.278782793806712 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "28" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.623666833090411, 1.294446747749924 ], [ 103.619173929512371, 1.297057027981261 ], [ 103.619173489701907, 1.302278343898825 ], [ 103.623665971922023, 1.304889382633723 ], [ 103.628158887323323, 1.302279096031335 ], [ 103.628159308681205, 1.297057777097201 ], [ 103.623666833090411, 1.294446747749924 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "29" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.623665538740838, 1.310110699749509 ], [ 103.619172604775684, 1.312720975081274 ], [ 103.619172159659882, 1.317942290344417 ], [ 103.623664667184428, 1.320553333324501 ], [ 103.628157613084255, 1.317943051526704 ], [ 103.628158039524848, 1.312721733246957 ], [ 103.623665538740838, 1.310110699749509 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "30" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.628166212565844, 1.208295322819915 ], [ 103.623673473142887, 1.210905638166503 ], [ 103.62367307112298, 1.216126959067688 ], [ 103.628165425754503, 1.218737967606132 ], [ 103.632658176332626, 1.216127646378534 ], [ 103.632658561124046, 1.210906322525602 ], [ 103.628166212565844, 1.208295322819915 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "31" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.628165029807917, 1.223959289694681 ], [ 103.623672261890022, 1.226569600260488 ], [ 103.623671854676957, 1.231790920550362 ], [ 103.628164232832788, 1.234401933258306 ], [ 103.632657012017191, 1.231791616716513 ], [ 103.632657401779227, 1.22657029347486 ], [ 103.628165029807917, 1.223959289694681 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "32" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.628163831804244, 1.239623254731641 ], [ 103.623671035057527, 1.242233560512702 ], [ 103.623670622651133, 1.247454880183427 ], [ 103.628163024665071, 1.250065897057004 ], [ 103.632655832789638, 1.247455585204982 ], [ 103.632656227522418, 1.242234262582444 ], [ 103.628163831804244, 1.239623254731641 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "33" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.628162618554398, 1.255287217907291 ], [ 103.623669792644932, 1.257897518899636 ], [ 103.623669375045083, 1.263118837943379 ], [ 103.628161801250855, 1.265729858978722 ], [ 103.632654638649527, 1.263119551820438 ], [ 103.632655038353207, 1.257898229824849 ], [ 103.628162618554398, 1.255287217907291 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "34" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.628161390057926, 1.270951179198125 ], [ 103.623668534651813, 1.273561475397788 ], [ 103.623668111858336, 1.278782793806712 ], [ 103.628160562589727, 1.281393818999955 ], [ 103.632653429596431, 1.278783516539377 ], [ 103.632653834271153, 1.273562195178572 ], [ 103.628161390057926, 1.270951179198125 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "35" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.6281601463144, 1.286615138580641 ], [ 103.623667261077657, 1.289225429983651 ], [ 103.623666833090411, 1.294446747749924 ], [ 103.628159308681205, 1.297057777097201 ], [ 103.632652205629896, 1.294447479338296 ], [ 103.632652615275816, 1.28922615862011 ], [ 103.6281601463144, 1.286615138580641 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "36" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.628158887323323, 1.302279096031335 ], [ 103.623665971922023, 1.304889382633723 ], [ 103.623665538740838, 1.310110699749509 ], [ 103.628158039524848, 1.312721733246957 ], [ 103.632650966749452, 1.310111440193694 ], [ 103.632651381366728, 1.304890120125959 ], [ 103.628158887323323, 1.302279096031335 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "37" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.628157613084255, 1.317943051526704 ], [ 103.623664667184428, 1.320553333324501 ], [ 103.623664228809176, 1.325774649781965 ], [ 103.628156755120187, 1.32838568742572 ], [ 103.632649712954674, 1.325775399082067 ], [ 103.632650132543446, 1.320554079672618 ], [ 103.628157613084255, 1.317943051526704 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "38" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.632658176332626, 1.216127646378534 ], [ 103.628165425754503, 1.218737967606132 ], [ 103.628165029807917, 1.223959289694681 ], [ 103.632657401779227, 1.22657029347486 ], [ 103.637150163512544, 1.223959966286433 ], [ 103.637150542119343, 1.218738641310756 ], [ 103.632658176332626, 1.216127646378534 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "39" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.632657012017191, 1.231791616716513 ], [ 103.628164232832788, 1.234401933258306 ], [ 103.628163831804244, 1.239623254731641 ], [ 103.632656227522418, 1.242234262582444 ], [ 103.637149017973371, 1.239623939984846 ], [ 103.637149401439558, 1.234402615624349 ], [ 103.632657012017191, 1.231791616716513 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "40" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.632655832789638, 1.247455585204982 ], [ 103.628163024665071, 1.250065897057004 ], [ 103.628162618554398, 1.255287217907291 ], [ 103.632655038353207, 1.257898229824849 ], [ 103.637147857855695, 1.255287911822045 ], [ 103.63714824618144, 1.250066588084564 ], [ 103.632655832789638, 1.247455585204982 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "41" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.632654638649527, 1.263119551820438 ], [ 103.628161801250855, 1.265729858978722 ], [ 103.628161390057926, 1.270951179198125 ], [ 103.632653834271153, 1.273562195178572 ], [ 103.637146683159102, 1.270951881774527 ], [ 103.637147076344547, 1.265730558667897 ], [ 103.632654638649527, 1.263119551820438 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "42" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.632653429596431, 1.278783516539377 ], [ 103.628160562589727, 1.281393818999955 ], [ 103.6281601463144, 1.286615138580641 ], [ 103.632652615275816, 1.28922615862011 ], [ 103.637145493883139, 1.286615849818791 ], [ 103.637145891928412, 1.281394527350845 ], [ 103.632653429596431, 1.278783516539377 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "43" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.632652205629896, 1.294447479338296 ], [ 103.628159308681205, 1.297057777097201 ], [ 103.628158887323323, 1.302279096031335 ], [ 103.632651381366728, 1.304890120125959 ], [ 103.637144290027408, 1.302279815931334 ], [ 103.637144692932665, 1.297058494109906 ], [ 103.632652205629896, 1.294447479338296 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "44" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.632650966749452, 1.310111440193694 ], [ 103.628158039524848, 1.312721733246957 ], [ 103.628157613084255, 1.317943051526704 ], [ 103.632650132543446, 1.320554079672618 ], [ 103.63714307159141, 1.317943780088654 ], [ 103.637143479356808, 1.312722458921578 ], [ 103.632650966749452, 1.310111440193694 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "45" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.632649712954674, 1.325775399082067 ], [ 103.628156755120187, 1.32838568742572 ], [ 103.628156323596698, 1.333607005043247 ], [ 103.632648868805518, 1.336218037236587 ], [ 103.637141838574735, 1.333607742267251 ], [ 103.637142251200416, 1.328386421762361 ], [ 103.632649712954674, 1.325775399082067 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "46" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.632648444245092, 1.341439355979916 ], [ 103.628155455466725, 1.344049639609988 ], [ 103.628155018860198, 1.349270956557461 ], [ 103.632647590152445, 1.351881992794362 ], [ 103.637140590976927, 1.349271702443625 ], [ 103.637141008463018, 1.344050382608753 ], [ 103.632648444245092, 1.341439355979916 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "47" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.637151294473654, 1.208295990750312 ], [ 103.632658561124046, 1.210906322525602 ], [ 103.632658176332626, 1.216127646378534 ], [ 103.637150542119343, 1.218738641310756 ], [ 103.641643286512846, 1.216128303589793 ], [ 103.641643654075708, 1.210906976914381 ], [ 103.637151294473654, 1.208295990750312 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "48" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.637150163512544, 1.223959966286433 ], [ 103.632657401779227, 1.22657029347486 ], [ 103.632657012017191, 1.231791616716513 ], [ 103.637149401439558, 1.234402615624349 ], [ 103.64164217432814, 1.231792282395274 ], [ 103.641642546639062, 1.22657095633111 ], [ 103.637150163512544, 1.223959966286433 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "49" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.637149017973371, 1.239623939984846 ], [ 103.632656227522418, 1.242234262582444 ], [ 103.632655832789638, 1.247455585204982 ], [ 103.63714824618144, 1.250066588084564 ], [ 103.641641047898986, 1.247456259351341 ], [ 103.641641424958109, 1.242234933906259 ], [ 103.637149017973371, 1.239623939984846 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "50" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.637147857855695, 1.255287911822045 ], [ 103.632655038353207, 1.257898229824849 ], [ 103.632654638649527, 1.263119551820438 ], [ 103.637147076344547, 1.265730558667897 ], [ 103.64163990722497, 1.263120234434489 ], [ 103.641640289032438, 1.257898909616325 ], [ 103.637147857855695, 1.255287911822045 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "51" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.637146683159102, 1.270951881774527 ], [ 103.632653834271153, 1.273562195178572 ], [ 103.632653429596431, 1.278783516539377 ], [ 103.637145891928412, 1.281394527350845 ], [ 103.641638752305667, 1.278784207621217 ], [ 103.64163913886162, 1.273562883437805 ], [ 103.637146683159102, 1.270951881774527 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "52" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.637145493883139, 1.286615849818791 ], [ 103.632652615275816, 1.28922615862011 ], [ 103.632652205629896, 1.294447479338296 ], [ 103.637144692932665, 1.297058494109906 ], [ 103.641637583140664, 1.294448178888025 ], [ 103.641637974445217, 1.289226855347198 ], [ 103.637145493883139, 1.286615849818791 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "53" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.637144290027408, 1.302279815931334 ], [ 103.632651381366728, 1.304890120125959 ], [ 103.632650966749452, 1.310111440193694 ], [ 103.637143479356808, 1.312722458921578 ], [ 103.641636399729506, 1.310112148211409 ], [ 103.64163679578283, 1.304890825321001 ], [ 103.637144290027408, 1.302279815931334 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "54" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.63714307159141, 1.317943780088654 ], [ 103.632650132543446, 1.320554079672618 ], [ 103.632649712954674, 1.325775399082067 ], [ 103.637142251200416, 1.328386421762361 ], [ 103.641635202071782, 1.32577611556787 ], [ 103.641635602874018, 1.320554793335714 ], [ 103.63714307159141, 1.317943780088654 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "55" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.637141838574735, 1.333607742267251 ], [ 103.632648868805518, 1.336218037236587 ], [ 103.632648444245092, 1.341439355979916 ], [ 103.637141008463018, 1.344050382608753 ], [ 103.641633990167037, 1.341440080933909 ], [ 103.641634395718313, 1.336218759367838 ], [ 103.637141838574735, 1.333607742267251 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "56" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.637140590976927, 1.349271702443625 ], [ 103.632647590152445, 1.351881992794362 ], [ 103.632647160620195, 1.357103310863739 ], [ 103.637139751144176, 1.359714341437256 ], [ 103.64163276401483, 1.357104044286024 ], [ 103.641633174315302, 1.351882723393872 ], [ 103.637140590976927, 1.349271702443625 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "57" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.641644384453514, 1.200464322958401 ], [ 103.637151668221179, 1.203074665167287 ], [ 103.637151294473654, 1.208295990750312 ], [ 103.641643654075708, 1.210906976914381 ], [ 103.646136381240652, 1.208296628774981 ], [ 103.646136737870904, 1.203075300434125 ], [ 103.641644384453514, 1.200464322958401 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "58" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.641643286512846, 1.216128303589793 ], [ 103.637150542119343, 1.218738641310756 ], [ 103.637150163512544, 1.223959966286433 ], [ 103.641642546639062, 1.22657095633111 ], [ 103.64613530207653, 1.223960612584657 ], [ 103.646135663343486, 1.218739284851118 ], [ 103.641643286512846, 1.216128303589793 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "59" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.64164217432814, 1.231792282395274 ], [ 103.637149401439558, 1.234402615624349 ], [ 103.637149017973371, 1.239623939984846 ], [ 103.641641424958109, 1.242234933906259 ], [ 103.646134209001985, 1.239624594556716 ], [ 103.646134574905787, 1.234403267438327 ], [ 103.64164217432814, 1.231792282395274 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "60" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.641641047898986, 1.247456259351341 ], [ 103.63714824618144, 1.250066588084564 ], [ 103.637147857855695, 1.255287911822045 ], [ 103.641640289032438, 1.257898909616325 ], [ 103.64613310201662, 1.255288574667655 ], [ 103.646133472557423, 1.250067248172251 ], [ 103.641641047898986, 1.247456259351341 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "61" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.64163990722497, 1.263120234434489 ], [ 103.637147076344547, 1.265730558667897 ], [ 103.637146683159102, 1.270951881774527 ], [ 103.64163913886162, 1.273562883437805 ], [ 103.64613198112005, 1.270952552893971 ], [ 103.646132356297969, 1.265731227029386 ], [ 103.64163990722497, 1.263120234434489 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "62" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.641638752305667, 1.278784207621217 ], [ 103.637145891928412, 1.281394527350845 ], [ 103.637145493883139, 1.286615849818791 ], [ 103.641637974445217, 1.289226855347198 ], [ 103.646130846311848, 1.286616529212165 ], [ 103.646131226126997, 1.281395203986231 ], [ 103.641638752305667, 1.278784207621217 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "63" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.641637583140664, 1.294448178888025 ], [ 103.637144692932665, 1.297058494109906 ], [ 103.637144290027408, 1.302279815931334 ], [ 103.64163679578283, 1.304890825321001 ], [ 103.646129697591576, 1.302280503598733 ], [ 103.646130082044138, 1.297059179019285 ], [ 103.641637583140664, 1.294448178888025 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "64" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.641636399729506, 1.310112148211409 ], [ 103.637143479356808, 1.312722458921578 ], [ 103.63714307159141, 1.317943780088654 ], [ 103.641635602874018, 1.320554793335714 ], [ 103.64612853495882, 1.317944476030176 ], [ 103.646128924048924, 1.312723152105049 ], [ 103.641636399729506, 1.310112148211409 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "65" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.641635202071782, 1.32577611556787 ], [ 103.637142251200416, 1.328386421762361 ], [ 103.637141838574735, 1.333607742267251 ], [ 103.641634395718313, 1.336218759367838 ], [ 103.646127358413182, 1.333608446482995 ], [ 103.646127752140956, 1.32838712322002 ], [ 103.641635202071782, 1.32577611556787 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "66" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.641633990167037, 1.341440080933909 ], [ 103.637141008463018, 1.344050382608753 ], [ 103.637140590976927, 1.349271702443625 ], [ 103.641633174315302, 1.351882723393872 ], [ 103.646126167954179, 1.349272414933691 ], [ 103.646126566319793, 1.344051092340701 ], [ 103.641633990167037, 1.341440080933909 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "67" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.64163276401483, 1.357104044286024 ], [ 103.637139751144176, 1.359714341437256 ], [ 103.637139328797488, 1.364935660594275 ], [ 103.641631938664517, 1.367546685390318 ], [ 103.6461249635814, 1.364936381358765 ], [ 103.646125366584997, 1.359715059443593 ], [ 103.64163276401483, 1.357104044286024 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "68" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.646136381240652, 1.208296628774981 ], [ 103.641643654075708, 1.210906976914381 ], [ 103.641643286512846, 1.216128303589793 ], [ 103.646135663343486, 1.218739284851118 ], [ 103.650628401441068, 1.216128930701385 ], [ 103.650628751775358, 1.21090760133276 ], [ 103.646136381240652, 1.208296628774981 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "69" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.64613530207653, 1.223960612584657 ], [ 103.641642546639062, 1.22657095633111 ], [ 103.64164217432814, 1.231792282395274 ], [ 103.646134574905787, 1.234403267438327 ], [ 103.650627341387235, 1.231792917586564 ], [ 103.650627696247014, 1.226571588829158 ], [ 103.64613530207653, 1.223960612584657 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "70" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.646134209001985, 1.239624594556716 ], [ 103.641641424958109, 1.242234933906259 ], [ 103.641641047898986, 1.247456259351341 ], [ 103.646133472557423, 1.250067248172251 ], [ 103.650626267756621, 1.247456902622419 ], [ 103.650626627142046, 1.242235574484065 ], [ 103.646134209001985, 1.239624594556716 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "71" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.64613310201662, 1.255288574667655 ], [ 103.641640289032438, 1.257898909616325 ], [ 103.64163990722497, 1.263120234434489 ], [ 103.646132356297969, 1.265731227029386 ], [ 103.650625180548829, 1.263120885785448 ], [ 103.650625544460027, 1.257899558273981 ], [ 103.64613310201662, 1.255288574667655 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "72" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.64613198112005, 1.270952552893971 ], [ 103.64163913886162, 1.273562883437805 ], [ 103.641638752305667, 1.278784207621217 ], [ 103.646131226126997, 1.281395203986231 ], [ 103.650624079763489, 1.278784867052149 ], [ 103.650624448200588, 1.273563540175402 ], [ 103.64613198112005, 1.270952552893971 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "73" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.646130846311848, 1.286616529212165 ], [ 103.641637974445217, 1.289226855347198 ], [ 103.641637583140664, 1.294448178888025 ], [ 103.646130082044138, 1.297059179019285 ], [ 103.65062296540016, 1.294448846399023 ], [ 103.650623338363289, 1.28922752016483 ], [ 103.646130846311848, 1.286616529212165 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "74" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.646129697591576, 1.302280503598733 ], [ 103.64163679578283, 1.304890825321001 ], [ 103.641636399729506, 1.310112148211409 ], [ 103.646128924048924, 1.312723152105049 ], [ 103.650621837458431, 1.310112823802569 ], [ 103.650622214947745, 1.304891498218763 ], [ 103.646129697591576, 1.302280503598733 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "75" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.64612853495882, 1.317944476030176 ], [ 103.641635602874018, 1.320554793335714 ], [ 103.641635202071782, 1.32577611556787 ], [ 103.646127752140956, 1.32838712322002 ], [ 103.650620695937903, 1.325776799239287 ], [ 103.650621077953545, 1.320555474313701 ], [ 103.64612853495882, 1.317944476030176 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "76" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.646127358413182, 1.333608446482995 ], [ 103.641634395718313, 1.336218759367838 ], [ 103.641633990167037, 1.341440080933909 ], [ 103.646126566319793, 1.344051092340701 ], [ 103.65061954083815, 1.341440772685679 ], [ 103.650619927380234, 1.336219448426147 ], [ 103.646127358413182, 1.333608446482995 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "77" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.646126167954179, 1.349272414933691 ], [ 103.641633174315302, 1.351882723393872 ], [ 103.64163276401483, 1.357104044286024 ], [ 103.646125366584997, 1.359715059443593 ], [ 103.650618372158746, 1.357104744118248 ], [ 103.650618763227428, 1.3518834205326 ], [ 103.646126167954179, 1.349272414933691 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "78" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.6461249635814, 1.364936381358765 ], [ 103.641631938664517, 1.367546685390318 ], [ 103.641631523614677, 1.372768005600719 ], [ 103.64612415293611, 1.375379024505198 ], [ 103.650617189899251, 1.372768713513494 ], [ 103.650617585494672, 1.367547390609565 ], [ 103.6461249635814, 1.364936381358765 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "79" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.650628401441068, 1.216128930701385 ], [ 103.646135663343486, 1.218739284851118 ], [ 103.64613530207653, 1.223960612584657 ], [ 103.650627696247014, 1.226571588829158 ], [ 103.655120445277305, 1.223961228589273 ], [ 103.655120789204389, 1.21873989822714 ], [ 103.650628401441068, 1.216128930701385 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "80" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.650627341387235, 1.231792917586564 ], [ 103.646134574905787, 1.234403267438327 ], [ 103.646134209001985, 1.239624594556716 ], [ 103.650626627142046, 1.242235574484065 ], [ 103.655119404667531, 1.239625218447172 ], [ 103.65511975300889, 1.23440388870016 ], [ 103.650627341387235, 1.231792917586564 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "81" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.650625180548829, 1.263120885785448 ], [ 103.646132356297969, 1.265731227029386 ], [ 103.64613198112005, 1.270952552893971 ], [ 103.650624448200588, 1.273563540175402 ], [ 103.655117283718212, 1.270953192556375 ], [ 103.655117640888548, 1.265731864063107 ], [ 103.650625180548829, 1.263120885785448 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "82" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.650624079763489, 1.278784867052149 ], [ 103.646131226126997, 1.281395203986231 ], [ 103.646130846311848, 1.286616529212165 ], [ 103.650623338363289, 1.28922752016483 ], [ 103.655116203377872, 1.286617176760677 ], [ 103.655116564962881, 1.28139584890603 ], [ 103.650624079763489, 1.278784867052149 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "83" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.65062296540016, 1.294448846399023 ], [ 103.646130082044138, 1.297059179019285 ], [ 103.646129697591576, 1.302280503598733 ], [ 103.650622214947745, 1.304891498218763 ], [ 103.655115109793229, 1.302281159033447 ], [ 103.655115475793053, 1.297059831825255 ], [ 103.65062296540016, 1.294448846399023 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "84" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.650621837458431, 1.310112823802569 ], [ 103.646128924048924, 1.312723152105049 ], [ 103.64612853495882, 1.317944476030176 ], [ 103.650621077953545, 1.320555474313701 ], [ 103.65511400296387, 1.317945139351185 ], [ 103.655114373378638, 1.312723812797282 ], [ 103.650621837458431, 1.310112823802569 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "85" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.650620695937903, 1.325776799239287 ], [ 103.646127752140956, 1.32838712322002 ], [ 103.646127358413182, 1.333608446482995 ], [ 103.650619927380234, 1.336219448426147 ], [ 103.655112882889384, 1.333609117690393 ], [ 103.655113257719236, 1.32838779179861 ], [ 103.650620695937903, 1.325776799239287 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "86" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.65061954083815, 1.341440772685679 ], [ 103.646126566319793, 1.344051092340701 ], [ 103.646126167954179, 1.349272414933691 ], [ 103.650618763227428, 1.3518834205326 ], [ 103.655111749569357, 1.349273094027573 ], [ 103.655112128814451, 1.344051768805744 ], [ 103.65061954083815, 1.341440772685679 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "87" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.650618372158746, 1.357104744118248 ], [ 103.646125366584997, 1.359715059443593 ], [ 103.6461249635814, 1.364936381358765 ], [ 103.650617585494672, 1.367547390609565 ], [ 103.655110603003379, 1.364937068339227 ], [ 103.655110986663828, 1.359715743795184 ], [ 103.650618372158746, 1.357104744118248 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "88" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.650617189899251, 1.372768713513494 ], [ 103.64612415293611, 1.375379024505198 ], [ 103.646123745294375, 1.380600345734719 ], [ 103.65061639418154, 1.383211358633543 ], [ 103.655109443191009, 1.380601040601859 ], [ 103.655109831266969, 1.375379716743435 ], [ 103.650617189899251, 1.372768713513494 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "89" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.655121472644339, 1.208297236893844 ], [ 103.650628751775358, 1.21090760133276 ], [ 103.650628401441068, 1.216128930701385 ], [ 103.655120789204389, 1.21873989822714 ], [ 103.659613520894752, 1.216129527713231 ], [ 103.659613854000412, 1.210908195780661 ], [ 103.655121472644339, 1.208297236893844 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "90" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.655118350814632, 1.25528920644404 ], [ 103.650625544460027, 1.257899558273981 ], [ 103.650625180548829, 1.263120885785448 ], [ 103.655117640888548, 1.265731864063107 ], [ 103.659610458398561, 1.263121505873235 ], [ 103.659610804413447, 1.257900175797736 ], [ 103.655118350814632, 1.25528920644404 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "91" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.655117283718212, 1.270953192556375 ], [ 103.650624448200588, 1.273563540175402 ], [ 103.650624079763489, 1.278784867052149 ], [ 103.655116564962881, 1.28139584890603 ], [ 103.659609411747283, 1.278785494832091 ], [ 103.6596097620655, 1.273564165391283 ], [ 103.655117283718212, 1.270953192556375 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "92" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.655116203377872, 1.286617176760677 ], [ 103.650623338363289, 1.28922752016483 ], [ 103.65062296540016, 1.294448846399023 ], [ 103.655115475793053, 1.297059831825255 ], [ 103.659608352185771, 1.294449481871208 ], [ 103.659608706807447, 1.289228153072924 ], [ 103.655116203377872, 1.286617176760677 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "93" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.655115109793229, 1.302281159033447 ], [ 103.650622214947745, 1.304891498218763 ], [ 103.650621837458431, 1.310112823802569 ], [ 103.655114373378638, 1.312723812797282 ], [ 103.659607279713626, 1.310113466967088 ], [ 103.659607638638875, 1.304892138819161 ], [ 103.655115109793229, 1.302281159033447 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "94" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.65511400296387, 1.317945139351185 ], [ 103.650621077953545, 1.320555474313701 ], [ 103.650620695937903, 1.325776799239287 ], [ 103.655113257719236, 1.32838779179861 ], [ 103.659606194330436, 1.325777450096232 ], [ 103.659606557559428, 1.320556122606495 ], [ 103.65511400296387, 1.317945139351185 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "95" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.655112882889384, 1.333609117690393 ], [ 103.650619927380234, 1.336219448426147 ], [ 103.65061954083815, 1.341440772685679 ], [ 103.655112128814451, 1.344051768805744 ], [ 103.659605096035818, 1.341441431235143 ], [ 103.659605463568667, 1.336220104411427 ], [ 103.655112882889384, 1.333609117690393 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "96" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.655111749569357, 1.349273094027573 ], [ 103.650618763227428, 1.3518834205326 ], [ 103.650618372158746, 1.357104744118248 ], [ 103.655110986663828, 1.359715743795184 ], [ 103.65960398482936, 1.357105410360323 ], [ 103.659604356666193, 1.351884084210461 ], [ 103.655111749569357, 1.349273094027573 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "97" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.655110603003379, 1.364937068339227 ], [ 103.650617585494672, 1.367547390609565 ], [ 103.650617189899251, 1.372768713513494 ], [ 103.655109831266969, 1.375379716743435 ], [ 103.659602860710663, 1.372769387448276 ], [ 103.659603236851623, 1.3675480619801 ], [ 103.655110603003379, 1.364937068339227 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "98" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.655109443191009, 1.380601040601859 ], [ 103.65061639418154, 1.383211358633543 ], [ 103.650615994059223, 1.388432680847922 ], [ 103.655108662623448, 1.391043687626999 ], [ 103.659601723679287, 1.388433362475505 ], [ 103.659602104124517, 1.383212037696849 ], [ 103.655109443191009, 1.380601040601859 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "99" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.659613520894752, 1.216129527713231 ], [ 103.655120789204389, 1.21873989822714 ], [ 103.655120445277305, 1.223961228589273 ], [ 103.659612850380526, 1.226572190968924 ], [ 103.664105592892341, 1.223961814300205 ], [ 103.664105919479496, 1.218740481438745 ], [ 103.659613520894752, 1.216129527713231 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "100" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.659611492139973, 1.24745751501814 ], [ 103.655118703570409, 1.250067877319982 ], [ 103.655118350814632, 1.25528920644404 ], [ 103.659610804413447, 1.257900175797736 ], [ 103.664103604027147, 1.255289807151121 ], [ 103.664103938997869, 1.250068475527682 ], [ 103.659611492139973, 1.24745751501814 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "101" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.659610458398561, 1.263121505873235 ], [ 103.655117640888548, 1.265731864063107 ], [ 103.655117283718212, 1.270953192556375 ], [ 103.6596097620655, 1.273564165391283 ], [ 103.664102590731005, 1.270953800761659 ], [ 103.664102929893716, 1.26573246976898 ], [ 103.659610458398561, 1.263121505873235 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "102" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.659608352185771, 1.294449481871208 ], [ 103.655115475793053, 1.297059831825255 ], [ 103.655115109793229, 1.302281159033447 ], [ 103.659607638638875, 1.304892138819161 ], [ 103.664100526409797, 1.302281782235396 ], [ 103.664100873956841, 1.297060452527736 ], [ 103.659608352185771, 1.294449481871208 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "103" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.659607279713626, 1.310113466967088 ], [ 103.655114373378638, 1.312723812797282 ], [ 103.65511400296387, 1.317945139351185 ], [ 103.659606557559428, 1.320556122606495 ], [ 103.664099475383949, 1.317945770051599 ], [ 103.664099827123366, 1.312724440998198 ], [ 103.659607279713626, 1.310113466967088 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "104" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.659606194330436, 1.325777450096232 ], [ 103.655113257719236, 1.32838779179861 ], [ 103.655112882889384, 1.333609117690393 ], [ 103.659605463568667, 1.336220104411427 ], [ 103.66409841178077, 1.333609755889361 ], [ 103.664098767712673, 1.328388427498051 ], [ 103.659606194330436, 1.325777450096232 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "105" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.659605096035818, 1.341441431235143 ], [ 103.655112128814451, 1.344051768805744 ], [ 103.655111749569357, 1.349273094027573 ], [ 103.659604356666193, 1.351884084210461 ], [ 103.664097335599863, 1.349273739725186 ], [ 103.664097695724365, 1.344052412003799 ], [ 103.659605096035818, 1.341441431235143 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "106" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.65960398482936, 1.357105410360323 ], [ 103.655110986663828, 1.359715743795184 ], [ 103.655110603003379, 1.364937068339227 ], [ 103.659603236851623, 1.3675480619801 ], [ 103.664096246840813, 1.364937721535577 ], [ 103.664096611158087, 1.359716394491945 ], [ 103.65960398482936, 1.357105410360323 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "107" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.659602860710663, 1.372769387448276 ], [ 103.655109831266969, 1.375379716743435 ], [ 103.655109443191009, 1.380601040601859 ], [ 103.659602104124517, 1.383212037696849 ], [ 103.664095145503239, 1.380601701297039 ], [ 103.664095514013397, 1.375380374938994 ], [ 103.659602860710663, 1.372769387448276 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "108" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.659601723679287, 1.388433362475505 ], [ 103.655108662623448, 1.391043687626999 ], [ 103.655108270131834, 1.396265010791974 ], [ 103.659600958484475, 1.39887601133721 ], [ 103.664094031586714, 1.396265678986077 ], [ 103.664094404289912, 1.39104435332145 ], [ 103.659601723679287, 1.388433362475505 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "109" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.66410460474745, 1.239625811656137 ], [ 103.659611833851656, 1.242236184315783 ], [ 103.659611492139973, 1.24745751501814 ], [ 103.664103938997869, 1.250068475527682 ], [ 103.6685967208265, 1.247458096538426 ], [ 103.668597044864399, 1.242236763401336 ], [ 103.66410460474745, 1.239625811656137 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "110" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.664103604027147, 1.255289807151121 ], [ 103.659610804413447, 1.257900175797736 ], [ 103.659610458398561, 1.263121505873235 ], [ 103.664102929893716, 1.26573246976898 ], [ 103.668595740551581, 1.263122094697773 ], [ 103.668596068670112, 1.257900762187514 ], [ 103.664103604027147, 1.255289807151121 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "111" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.664102590731005, 1.270953800761659 ], [ 103.6596097620655, 1.273564165391283 ], [ 103.659609411747283, 1.278785494832091 ], [ 103.66410190821351, 1.281396462110164 ], [ 103.668594748034522, 1.278786090960965 ], [ 103.6685950802338, 1.273564759085369 ], [ 103.664102590731005, 1.270953800761659 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "112" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.664101564858683, 1.28661779246425 ], [ 103.659608706807447, 1.289228153072924 ], [ 103.659608352185771, 1.294449481871208 ], [ 103.664100873956841, 1.297060452527736 ], [ 103.66859374327494, 1.294450085304503 ], [ 103.668594079555106, 1.289228754071403 ], [ 103.664101564858683, 1.28661779246425 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "113" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.664100526409797, 1.302281782235396 ], [ 103.659607638638875, 1.304892138819161 ], [ 103.659607279713626, 1.310113466967088 ], [ 103.664099827123366, 1.312724440998198 ], [ 103.668592726272493, 1.31011407770489 ], [ 103.668593066633647, 1.304892747122117 ], [ 103.664100526409797, 1.302281782235396 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "114" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.664099475383949, 1.317945770051599 ], [ 103.659606557559428, 1.320556122606495 ], [ 103.659606194330436, 1.325777450096232 ], [ 103.664098767712673, 1.328388427498051 ], [ 103.668591697026784, 1.325778068138627 ], [ 103.668592041469068, 1.320556738214015 ], [ 103.664099475383949, 1.317945770051599 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "115" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.66409841178077, 1.333609755889361 ], [ 103.659605463568667, 1.336220104411427 ], [ 103.659605096035818, 1.341441431235143 ], [ 103.664097695724365, 1.344052412003799 ], [ 103.668590655537443, 1.341442056582218 ], [ 103.668591004060985, 1.336220727323599 ], [ 103.66409841178077, 1.333609755889361 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "116" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.664097335599863, 1.349273739725186 ], [ 103.659604356666193, 1.351884084210461 ], [ 103.65960398482936, 1.357105410360323 ], [ 103.664096611158087, 1.359716394491945 ], [ 103.668589601804072, 1.357106043012168 ], [ 103.668589954409001, 1.351884714427373 ], [ 103.664097335599863, 1.349273739725186 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "117" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.664096246840813, 1.364937721535577 ], [ 103.659603236851623, 1.3675480619801 ], [ 103.659602860710663, 1.372769387448276 ], [ 103.664095514013397, 1.375380374938994 ], [ 103.668588535826288, 1.37277002740498 ], [ 103.668588892512744, 1.367548699501842 ], [ 103.664096246840813, 1.364937721535577 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "118" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.664095145503239, 1.380601701297039 ], [ 103.659602104124517, 1.383212037696849 ], [ 103.659601723679287, 1.388433362475505 ], [ 103.664094404289912, 1.39104435332145 ], [ 103.668587457603721, 1.38843400973716 ], [ 103.668587818371805, 1.38321268252351 ], [ 103.664095145503239, 1.380601701297039 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "119" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.664094031586714, 1.396265678986077 ], [ 103.659600958484475, 1.39887601133721 ], [ 103.659600573734835, 1.404097335418517 ], [ 103.664093281987221, 1.406708329615819 ], [ 103.668586367135944, 1.404097989985215 ], [ 103.668586731985798, 1.398876663468883 ], [ 103.664094031586714, 1.396265678986077 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "120" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.668598644651354, 1.21613009462526 ], [ 103.664105919479496, 1.218740481438745 ], [ 103.664105592892341, 1.223961814300205 ], [ 103.668598008817014, 1.226572762750335 ], [ 103.673090744699067, 1.22396236971738 ], [ 103.673091053946237, 1.218741034485864 ], [ 103.668598644651354, 1.21613009462526 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "121" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.668597688859634, 1.231794096506421 ], [ 103.664104935526339, 1.234404479409771 ], [ 103.66410460474745, 1.239625811656137 ], [ 103.668597044864399, 1.242236763401336 ], [ 103.673089809019217, 1.239626374183537 ], [ 103.67309012223555, 1.234405039567087 ], [ 103.668597688859634, 1.231794096506421 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "122" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.6685967208265, 1.247458096538426 ], [ 103.664103938997869, 1.250068475527682 ], [ 103.664103604027147, 1.255289807151121 ], [ 103.668596068670112, 1.257900762187514 ], [ 103.673088861431594, 1.255290376788825 ], [ 103.673089178617232, 1.250069042795276 ], [ 103.6685967208265, 1.247458096538426 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "123" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.668595740551581, 1.263122094697773 ], [ 103.664102929893716, 1.26573246976898 ], [ 103.664102590731005, 1.270953800761659 ], [ 103.6685950802338, 1.273564759085369 ], [ 103.673087901935858, 1.270954377509748 ], [ 103.673088223090929, 1.265733044146932 ], [ 103.668595740551581, 1.263122094697773 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "124" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.668594748034522, 1.278786090960965 ], [ 103.66410190821351, 1.281396462110164 ], [ 103.664101564858683, 1.28661779246425 ], [ 103.668594079555106, 1.289228754071403 ], [ 103.673086930531682, 1.286618376322807 ], [ 103.673087255656256, 1.281397043598556 ], [ 103.668594748034522, 1.278786090960965 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "125" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.66859374327494, 1.294450085304503 ], [ 103.664100873956841, 1.297060452527736 ], [ 103.664100526409797, 1.302281782235396 ], [ 103.668593066633647, 1.304892747122117 ], [ 103.673085947218667, 1.302282373204503 ], [ 103.673086276312887, 1.29706104112665 ], [ 103.66859374327494, 1.294450085304503 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "126" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.668592726272493, 1.31011407770489 ], [ 103.664099827123366, 1.312724440998198 ], [ 103.664099475383949, 1.317945770051599 ], [ 103.668592041469068, 1.320556738214015 ], [ 103.673084951996472, 1.31794636813134 ], [ 103.673085285060466, 1.312725036707718 ], [ 103.668592726272493, 1.31011407770489 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "127" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.668591697026784, 1.325778068138627 ], [ 103.664098767712673, 1.328388427498051 ], [ 103.66409841178077, 1.333609755889361 ], [ 103.668591004060985, 1.336220727323599 ], [ 103.673083944864743, 1.333610361079821 ], [ 103.673084281898625, 1.328389030318261 ], [ 103.668591697026784, 1.325778068138627 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "128" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.668590655537443, 1.341442056582218 ], [ 103.664097695724365, 1.344052412003799 ], [ 103.664097335599863, 1.349273739725186 ], [ 103.668589954409001, 1.351884714427373 ], [ 103.673082925823067, 1.349274352026451 ], [ 103.673083266826964, 1.344053021934786 ], [ 103.668590655537443, 1.341442056582218 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "129" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.668589601804072, 1.357106043012168 ], [ 103.664096611158087, 1.359716394491945 ], [ 103.664096246840813, 1.364937721535577 ], [ 103.668588892512744, 1.367548699501842 ], [ 103.673081894871089, 1.364938340947734 ], [ 103.673082239845144, 1.359717011533796 ], [ 103.668589601804072, 1.357106043012168 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "130" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.668588535826288, 1.37277002740498 ], [ 103.664095514013397, 1.375380374938994 ], [ 103.664095145503239, 1.380601701297039 ], [ 103.668587818371805, 1.38321268252351 ], [ 103.673080852008439, 1.380602327820176 ], [ 103.673081200952765, 1.375380999091795 ], [ 103.668588535826288, 1.37277002740498 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "131" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.668587457603721, 1.38843400973716 ], [ 103.664094404289912, 1.39104435332145 ], [ 103.664094031586714, 1.396265678986077 ], [ 103.668586731985798, 1.398876663468883 ], [ 103.673079797234735, 1.396266312620283 ], [ 103.673080150149431, 1.39104498458529 ], [ 103.668587457603721, 1.38843400973716 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "132" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.668586367135944, 1.404097989985215 ], [ 103.664093281987221, 1.406708329615819 ], [ 103.664092905090868, 1.411929654579195 ], [ 103.668585633354326, 1.414540642314468 ], [ 103.673078730549548, 1.411930295324561 ], [ 103.6730790874348, 1.406708967990788 ], [ 103.668586367135944, 1.404097989985215 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "133" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.673090744699067, 1.22396236971738 ], [ 103.668598008817014, 1.226572762750335 ], [ 103.668597688859634, 1.231794096506421 ], [ 103.67309012223555, 1.234405039567087 ], [ 103.677582868827827, 1.231794640234843 ], [ 103.67758317133395, 1.226573304173321 ], [ 103.673090744699067, 1.22396236971738 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "134" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.673089809019217, 1.239626374183537 ], [ 103.668597044864399, 1.242236763401336 ], [ 103.6685967208265, 1.247458096538426 ], [ 103.673089178617232, 1.250069042795276 ], [ 103.677581953593602, 1.247458647183206 ], [ 103.677582259957674, 1.242237311740655 ], [ 103.673089809019217, 1.239626374183537 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "135" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.673088861431594, 1.255290376788825 ], [ 103.668596068670112, 1.257900762187514 ], [ 103.668595740551581, 1.263122094697773 ], [ 103.673088223090929, 1.265733044146932 ], [ 103.677581026785305, 1.263122652258991 ], [ 103.677581337007425, 1.257901317443244 ], [ 103.673088861431594, 1.255290376788825 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "136" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.673087901935858, 1.270954377509748 ], [ 103.6685950802338, 1.273564759085369 ], [ 103.668594748034522, 1.278786090960965 ], [ 103.673087255656256, 1.281397043598556 ], [ 103.677580088402578, 1.278786655438699 ], [ 103.677580402482889, 1.273565321257588 ], [ 103.673087901935858, 1.270954377509748 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "137" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.673086930531682, 1.286618376322807 ], [ 103.668594079555106, 1.289228754071403 ], [ 103.66859374327494, 1.294450085304503 ], [ 103.673086276312887, 1.29706104112665 ], [ 103.677579138445068, 1.294450656698833 ], [ 103.677579456383683, 1.289229323160192 ], [ 103.673086930531682, 1.286618376322807 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "138" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.673085947218667, 1.302282373204503 ], [ 103.668593066633647, 1.304892747122117 ], [ 103.668592726272493, 1.31011407770489 ], [ 103.673085285060466, 1.312725036707718 ], [ 103.677578176912448, 1.310114656015897 ], [ 103.677578498709465, 1.304893323127557 ], [ 103.673085947218667, 1.302282373204503 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "139" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.673084951996472, 1.31794636813134 ], [ 103.668592041469068, 1.320556738214015 ], [ 103.668591697026784, 1.325778068138627 ], [ 103.673084281898625, 1.328389030318261 ], [ 103.677577203804333, 1.325778653366394 ], [ 103.677577529459896, 1.320557321136186 ], [ 103.673084951996472, 1.31794636813134 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "140" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.673083944864743, 1.333610361079821 ], [ 103.668591004060985, 1.336220727323599 ], [ 103.668590655537443, 1.341442056582218 ], [ 103.673083266826964, 1.344053021934786 ], [ 103.677576219120397, 1.341442648726828 ], [ 103.677576548634605, 1.336221317162585 ], [ 103.673083944864743, 1.333610361079821 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "141" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.673082925823067, 1.349274352026451 ], [ 103.668589954409001, 1.351884714427373 ], [ 103.668589601804072, 1.357106043012168 ], [ 103.673082239845144, 1.359717011533796 ], [ 103.677575222860256, 1.357106642073705 ], [ 103.677575556233236, 1.351885311183258 ], [ 103.673082925823067, 1.349274352026451 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "142" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.673081894871089, 1.364938340947734 ], [ 103.668588892512744, 1.367548699501842 ], [ 103.668588535826288, 1.37277002740498 ], [ 103.673081200952765, 1.375380999091795 ], [ 103.67757421502354, 1.372770633383529 ], [ 103.677574552255408, 1.36754930317471 ], [ 103.673081894871089, 1.364938340947734 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "143" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.673080852008439, 1.380602327820176 ], [ 103.668587818371805, 1.38321268252351 ], [ 103.668587457603721, 1.38843400973716 ], [ 103.673080150149431, 1.39104498458529 ], [ 103.677573195609867, 1.388434622632807 ], [ 103.677573536700777, 1.383213293113448 ], [ 103.673080852008439, 1.380602327820176 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "144" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.673079797234735, 1.396266312620283 ], [ 103.668586731985798, 1.398876663468883 ], [ 103.668586367135944, 1.404097989985215 ], [ 103.6730790874348, 1.406708967990788 ], [ 103.677572164618894, 1.404098609798047 ], [ 103.677572509568947, 1.398877280975977 ], [ 103.673079797234735, 1.396266312620283 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "145" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.673078730549548, 1.411930295324561 ], [ 103.668585633354326, 1.414540642314468 ], [ 103.668585264422546, 1.419761968125649 ], [ 103.673078012808432, 1.422372949284795 ], [ 103.677571122050225, 1.419762594855755 ], [ 103.677571470859547, 1.414541266738806 ], [ 103.673078730549548, 1.411930295324561 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "146" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.677583772488305, 1.2161306314374 ], [ 103.673091053946237, 1.218741034485864 ], [ 103.673090744699067, 1.22396236971738 ], [ 103.67758317133395, 1.226573304173321 ], [ 103.682075900474928, 1.223962894840731 ], [ 103.682076192382098, 1.218741557368426 ], [ 103.677583772488305, 1.2161306314374 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "147" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.677582868827827, 1.231794640234843 ], [ 103.67309012223555, 1.234405039567087 ], [ 103.673089809019217, 1.239626374183537 ], [ 103.677582259957674, 1.242237311740655 ], [ 103.682075017260203, 1.239626906029303 ], [ 103.68207531291398, 1.23440556917204 ], [ 103.677582868827827, 1.231794640234843 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "148" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.677581953593602, 1.247458647183206 ], [ 103.673089178617232, 1.250069042795276 ], [ 103.673088861431594, 1.255290376788825 ], [ 103.677581337007425, 1.257901317443244 ], [ 103.682074122805403, 1.255290915357083 ], [ 103.682074422205915, 1.250069579122694 ], [ 103.677581953593602, 1.247458647183206 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "149" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.677581026785305, 1.263122652258991 ], [ 103.673088223090929, 1.265733044146932 ], [ 103.673087901935858, 1.270954377509748 ], [ 103.677580402482889, 1.273565321257588 ], [ 103.682073217110215, 1.270954922800573 ], [ 103.682073520257575, 1.265733587196892 ], [ 103.677581026785305, 1.263122652258991 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "150" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.677580088402578, 1.278786655438699 ], [ 103.673087255656256, 1.281397043598556 ], [ 103.673086930531682, 1.286618376322807 ], [ 103.677579456383683, 1.289229323160192 ], [ 103.682072300174269, 1.286618928336276 ], [ 103.682072607068577, 1.281397593371135 ], [ 103.677580088402578, 1.278786655438699 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "151" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.677579138445068, 1.294450656698833 ], [ 103.673086276312887, 1.29706104112665 ], [ 103.673085947218667, 1.302282373204503 ], [ 103.677578498709465, 1.304893323127557 ], [ 103.682071371997282, 1.302282931940695 ], [ 103.68207168263865, 1.297061597621926 ], [ 103.677579138445068, 1.294450656698833 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "152" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.677578176912448, 1.310114656015897 ], [ 103.673085285060466, 1.312725036707718 ], [ 103.673084951996472, 1.31794636813134 ], [ 103.677577529459896, 1.320557321136186 ], [ 103.682070432578868, 1.317946933590335 ], [ 103.682070746967398, 1.31272559992577 ], [ 103.677578176912448, 1.310114656015897 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "153" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.677577203804333, 1.325778653366394 ], [ 103.673084281898625, 1.328389030318261 ], [ 103.673083944864743, 1.333610361079821 ], [ 103.677576548634605, 1.336221317162585 ], [ 103.682069481918674, 1.333610933261699 ], [ 103.682069800054506, 1.32838960025917 ], [ 103.677577203804333, 1.325778653366394 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "154" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.677576219120397, 1.341442648726828 ], [ 103.673083266826964, 1.344053021934786 ], [ 103.673082925823067, 1.349274352026451 ], [ 103.677575556233236, 1.351885311183258 ], [ 103.682068520016372, 1.349274930931293 ], [ 103.682068841899621, 1.344053598598631 ], [ 103.677576219120397, 1.341442648726828 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "155" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.677575222860256, 1.357106642073705 ], [ 103.673082239845144, 1.359717011533796 ], [ 103.673081894871089, 1.364938340947734 ], [ 103.677574552255408, 1.36754930317471 ], [ 103.682067546871608, 1.364938926575623 ], [ 103.682067872502387, 1.359717594920659 ], [ 103.677575222860256, 1.357106642073705 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "156" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.67757421502354, 1.372770633383529 ], [ 103.673081200952765, 1.375380999091795 ], [ 103.673080852008439, 1.380602327820176 ], [ 103.677573536700777, 1.383213293113448 ], [ 103.68206656248401, 1.380602920171194 ], [ 103.682066891862434, 1.37538158920176 ], [ 103.67757421502354, 1.372770633383529 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "157" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.677573195609867, 1.388434622632807 ], [ 103.673080150149431, 1.39104498458529 ], [ 103.673079797234735, 1.396266312620283 ], [ 103.677572509568947, 1.398877280975977 ], [ 103.682065566853211, 1.396266911694515 ], [ 103.682065899979406, 1.391045581418441 ], [ 103.677573195609867, 1.388434622632807 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "158" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.677572164618894, 1.404098609798047 ], [ 103.6730790874348, 1.406708967990788 ], [ 103.673078730549548, 1.411930295324561 ], [ 103.677571470859547, 1.414541266738806 ], [ 103.682064559978855, 1.411930901122091 ], [ 103.68206489685295, 1.40670957154721 ], [ 103.677572164618894, 1.404098609798047 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "159" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.677571122050225, 1.419762594855755 ], [ 103.673078012808432, 1.422372949284795 ], [ 103.673077651952539, 1.427594275909517 ], [ 103.677570420572181, 1.430205250378441 ], [ 103.682063541860572, 1.427594888430433 ], [ 103.68206388248268, 1.422373559564573 ], [ 103.677571122050225, 1.419762594855755 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "160" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.682075900474928, 1.223962894840731 ], [ 103.67758317133395, 1.226573304173321 ], [ 103.677582868827827, 1.231794640234843 ], [ 103.68207531291398, 1.23440556917204 ], [ 103.686568052653939, 1.231795153475503 ], [ 103.686568337708749, 1.226573815237815 ], [ 103.682075900474928, 1.223962894840731 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "161" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.682075017260203, 1.239626906029303 ], [ 103.677582259957674, 1.242237311740655 ], [ 103.677581953593602, 1.247458647183206 ], [ 103.682074422205915, 1.250069579122694 ], [ 103.686567190218753, 1.247459166952413 ], [ 103.686567478908941, 1.242237829333672 ], [ 103.682075017260203, 1.239626906029303 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "162" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.682074122805403, 1.255290915357083 ], [ 103.677581337007425, 1.257901317443244 ], [ 103.677581026785305, 1.263122652258991 ], [ 103.682073520257575, 1.265733587196892 ], [ 103.686566316877176, 1.263123178556819 ], [ 103.68656660920287, 1.257901841564857 ], [ 103.682074122805403, 1.255290915357083 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "163" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.682073217110215, 1.270954922800573 ], [ 103.677580402482889, 1.273565321257588 ], [ 103.677580088402578, 1.278786655438699 ], [ 103.682072607068577, 1.281397593371135 ], [ 103.686565432628882, 1.278787188265222 ], [ 103.686565728590182, 1.273565851907872 ], [ 103.682073217110215, 1.270954922800573 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "164" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.682072300174269, 1.286618928336276 ], [ 103.677579456383683, 1.289229323160192 ], [ 103.677579138445068, 1.294450656698833 ], [ 103.68207168263865, 1.297061597621926 ], [ 103.686564537473572, 1.294451196054128 ], [ 103.686564837070577, 1.289229860339221 ], [ 103.682072300174269, 1.286618928336276 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "165" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.682071371997282, 1.302282931940695 ], [ 103.677578498709465, 1.304893323127557 ], [ 103.677578176912448, 1.310114656015897 ], [ 103.682070746967398, 1.31272559992577 ], [ 103.686563631410891, 1.310115201900039 ], [ 103.686563934643743, 1.304893866835408 ], [ 103.682071371997282, 1.302282931940695 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "166" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.682070432578868, 1.317946933590335 ], [ 103.677577529459896, 1.320557321136186 ], [ 103.677577203804333, 1.325778653366394 ], [ 103.682069800054506, 1.32838960025917 ], [ 103.686562714440512, 1.325779205779462 ], [ 103.686563021309283, 1.320557871372937 ], [ 103.682070432578868, 1.317946933590335 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "167" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.682069481918674, 1.333610933261699 ], [ 103.677576548634605, 1.336221317162585 ], [ 103.677576219120397, 1.341442648726828 ], [ 103.682068841899621, 1.344053598598631 ], [ 103.686561786562081, 1.3414432076689 ], [ 103.686562097066926, 1.336221873928314 ], [ 103.682069481918674, 1.333610933261699 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "168" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.682068520016372, 1.349274930931293 ], [ 103.677575556233236, 1.351885311183258 ], [ 103.677575222860256, 1.357106642073705 ], [ 103.682067872502387, 1.359717594920659 ], [ 103.686560847775283, 1.35710720754486 ], [ 103.686561161916273, 1.351885874478043 ], [ 103.682068520016372, 1.349274930931293 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "169" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.682067546871608, 1.364938926575623 ], [ 103.677574552255408, 1.36754930317471 ], [ 103.67757421502354, 1.372770633383529 ], [ 103.682066891862434, 1.37538158920176 ], [ 103.68655989807975, 1.372771205383847 ], [ 103.686560215857028, 1.367549872998632 ], [ 103.682067546871608, 1.364938926575623 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "170" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.68206656248401, 1.380602920171194 ], [ 103.677573536700777, 1.383213293113448 ], [ 103.677573195609867, 1.388434622632807 ], [ 103.682065899979406, 1.391045581418441 ], [ 103.686558937475141, 1.388435201162371 ], [ 103.686559258888806, 1.383213869466587 ], [ 103.68206656248401, 1.380602920171194 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "171" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.682065566853211, 1.396266911694515 ], [ 103.677572509568947, 1.398877280975977 ], [ 103.677572164618894, 1.404098609798047 ], [ 103.68206489685295, 1.40670957154721 ], [ 103.6865579659611, 1.404099194856937 ], [ 103.686558291011295, 1.398877863858416 ], [ 103.682065566853211, 1.396266911694515 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "172" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.682064559978855, 1.411930901122091 ], [ 103.677571470859547, 1.414541266738806 ], [ 103.677571122050225, 1.419762594855755 ], [ 103.68206388248268, 1.422373559564573 ], [ 103.686556983537258, 1.419763186444055 ], [ 103.686557312224082, 1.414541856150627 ], [ 103.682064559978855, 1.411930901122091 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "173" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.682063541860572, 1.427594888430433 ], [ 103.677570420572181, 1.430205250378441 ], [ 103.67757006790346, 1.435426577782438 ], [ 103.682062856868242, 1.438037545447041 ], [ 103.68655599020326, 1.435427175900233 ], [ 103.686556322526855, 1.430205846319728 ], [ 103.682063541860572, 1.427594888430433 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "174" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.686568052653939, 1.231795153475503 ], [ 103.68207531291398, 1.23440556917204 ], [ 103.682075017260203, 1.239626906029303 ], [ 103.686567478908941, 1.242237829333672 ], [ 103.691060229247881, 1.23962740719337 ], [ 103.691060507339074, 1.234406068224564 ], [ 103.686568052653939, 1.231795153475503 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "175" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.686567190218753, 1.247459166952413 ], [ 103.682074422205915, 1.250069579122694 ], [ 103.682074122805403, 1.255290915357083 ], [ 103.68656660920287, 1.257901841564857 ], [ 103.691059387926018, 1.255291422855826 ], [ 103.691059669541374, 1.250070084509871 ], [ 103.686567190218753, 1.247459166952413 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "176" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.686566316877176, 1.263123178556819 ], [ 103.682073520257575, 1.265733587196892 ], [ 103.682073217110215, 1.270954922800573 ], [ 103.686565728590182, 1.273565851907872 ], [ 103.691058536031477, 1.270955436634065 ], [ 103.691058821171083, 1.265734098918793 ], [ 103.686566316877176, 1.263123178556819 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "177" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.686565432628882, 1.278787188265222 ], [ 103.682072607068577, 1.281397593371135 ], [ 103.682072300174269, 1.286618928336276 ], [ 103.686564837070577, 1.289229860339221 ], [ 103.691057673563904, 1.286619448504589 ], [ 103.691057962227902, 1.281398111427833 ], [ 103.686565432628882, 1.278787188265222 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "178" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.686564537473572, 1.294451196054128 ], [ 103.68207168263865, 1.297061597621926 ], [ 103.682071371997282, 1.302282931940695 ], [ 103.686563934643743, 1.304893866835408 ], [ 103.691056800523015, 1.302283458443904 ], [ 103.691057092711489, 1.297062122013495 ], [ 103.686564537473572, 1.294451196054128 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "179" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.686563631410891, 1.310115201900039 ], [ 103.682070746967398, 1.31272559992577 ], [ 103.682070432578868, 1.317946933590335 ], [ 103.686563021309283, 1.320557871372937 ], [ 103.691055916908496, 1.317947466428514 ], [ 103.691056212621532, 1.312726130652284 ], [ 103.686563631410891, 1.310115201900039 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "180" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.686562714440512, 1.325779205779462 ], [ 103.682069800054506, 1.32838960025917 ], [ 103.682069481918674, 1.333610933261699 ], [ 103.686562097066926, 1.336221873928314 ], [ 103.691055022719979, 1.333611472434924 ], [ 103.691055321957734, 1.328390137320704 ], [ 103.686562714440512, 1.325779205779462 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "181" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.686561786562081, 1.3414432076689 ], [ 103.682068841899621, 1.344053598598631 ], [ 103.682068520016372, 1.349274930931293 ], [ 103.686561161916273, 1.351885874478043 ], [ 103.691054117957179, 1.349275476439641 ], [ 103.691054420719723, 1.344054141995262 ], [ 103.686561786562081, 1.3414432076689 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "182" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.686560847775283, 1.35710720754486 ], [ 103.682067872502387, 1.359717594920659 ], [ 103.682067546871608, 1.364938926575623 ], [ 103.686560215857028, 1.367549872998632 ], [ 103.691053202619727, 1.36493947841917 ], [ 103.691053508907189, 1.359718144652465 ], [ 103.686560847775283, 1.35710720754486 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "183" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.68655989807975, 1.372771205383847 ], [ 103.682066891862434, 1.37538158920176 ], [ 103.68206656248401, 1.380602920171194 ], [ 103.686559258888806, 1.383213869466587 ], [ 103.691052276707296, 1.38060347835002 ], [ 103.691052586519788, 1.375382145268818 ], [ 103.68655989807975, 1.372771205383847 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "184" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.686558937475141, 1.388435201162371 ], [ 103.682065899979406, 1.391045581418441 ], [ 103.682065566853211, 1.396266911694515 ], [ 103.686558291011295, 1.398877863858416 ], [ 103.691051340219559, 1.396267476208698 ], [ 103.691051653557196, 1.39104614382083 ], [ 103.686558937475141, 1.388435201162371 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "185" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.6865579659611, 1.404099194856937 ], [ 103.68206489685295, 1.40670957154721 ], [ 103.682064559978855, 1.411930901122091 ], [ 103.686557312224082, 1.414541856150627 ], [ 103.691050393156146, 1.411931471971713 ], [ 103.691050710019042, 1.40671014028501 ], [ 103.6865579659611, 1.404099194856937 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "186" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.686556983537258, 1.419763186444055 ], [ 103.68206388248268, 1.422373559564573 ], [ 103.682063541860572, 1.427594888430433 ], [ 103.686556322526855, 1.430205846319728 ], [ 103.691049435516717, 1.427595465615573 ], [ 103.691049755904999, 1.422374134637865 ], [ 103.686556983537258, 1.419763186444055 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "187" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.691060229247881, 1.23962740719337 ], [ 103.686567478908941, 1.242237829333672 ], [ 103.686567190218753, 1.247459166952413 ], [ 103.691059669541374, 1.250070084509871 ], [ 103.695552430479339, 1.247459655845983 ], [ 103.695552701495643, 1.242238316180323 ], [ 103.691060229247881, 1.23962740719337 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "188" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.691059387926018, 1.255291422855826 ], [ 103.68656660920287, 1.257901841564857 ], [ 103.686566316877176, 1.263123178556819 ], [ 103.691058821171083, 1.265734098918793 ], [ 103.69555161060461, 1.263123673591192 ], [ 103.695551885033836, 1.257902334552288 ], [ 103.691059387926018, 1.255291422855826 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "189" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.691058536031477, 1.270955436634065 ], [ 103.686565728590182, 1.273565851907872 ], [ 103.686565432628882, 1.278787188265222 ], [ 103.691057962227902, 1.281398111427833 ], [ 103.695550780490876, 1.27878768944047 ], [ 103.695551058333137, 1.273566351036153 ], [ 103.691058536031477, 1.270955436634065 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "190" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.691057673563904, 1.286619448504589 ], [ 103.686564837070577, 1.289229860339221 ], [ 103.686564537473572, 1.294451196054128 ], [ 103.691057092711489, 1.297062122013495 ], [ 103.695549940137866, 1.294451703370321 ], [ 103.695550221393248, 1.289230365608424 ], [ 103.691057673563904, 1.286619448504589 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "191" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.691056800523015, 1.302283458443904 ], [ 103.686563934643743, 1.304893866835408 ], [ 103.686563631410891, 1.310115201900039 ], [ 103.691056212621532, 1.312726130652284 ], [ 103.695549089545224, 1.31011571535725 ], [ 103.695549374213854, 1.304894378245604 ], [ 103.691056800523015, 1.302283458443904 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "192" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.691055916908496, 1.317947466428514 ], [ 103.686563021309283, 1.320557871372937 ], [ 103.686562714440512, 1.325779205779462 ], [ 103.691055321957734, 1.328390137320704 ], [ 103.695548228712681, 1.325779725377762 ], [ 103.695548516794659, 1.320558388924199 ], [ 103.691055916908496, 1.317947466428514 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "193" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.691055022719979, 1.333611472434924 ], [ 103.686562097066926, 1.336221873928314 ], [ 103.686561786562081, 1.3414432076689 ], [ 103.691054420719723, 1.344054141995262 ], [ 103.695547357639896, 1.341443733408364 ], [ 103.695547649135321, 1.336222397620715 ], [ 103.691055022719979, 1.333611472434924 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "194" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.691054117957179, 1.349275476439641 ], [ 103.686561161916273, 1.351885874478043 ], [ 103.686560847775283, 1.35710720754486 ], [ 103.691053508907189, 1.359718144652465 ], [ 103.695546476326555, 1.357107739425563 ], [ 103.695546771235527, 1.351886404311659 ], [ 103.691054117957179, 1.349275476439641 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "195" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.691053202619727, 1.36493947841917 ], [ 103.686560215857028, 1.367549872998632 ], [ 103.68655989807975, 1.372771205383847 ], [ 103.691052586519788, 1.375382145268818 ], [ 103.695545584772319, 1.372771743405865 ], [ 103.695545883094965, 1.367550408973537 ], [ 103.691053202619727, 1.36493947841917 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "196" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.691052276707296, 1.38060347835002 ], [ 103.686559258888806, 1.383213869466587 ], [ 103.686558937475141, 1.388435201162371 ], [ 103.691051653557196, 1.39104614382083 ], [ 103.695544682976887, 1.388435745325779 ], [ 103.695544984713294, 1.383214411582857 ], [ 103.691052276707296, 1.38060347835002 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "197" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.691051340219559, 1.396267476208698 ], [ 103.686558291011295, 1.398877863858416 ], [ 103.6865579659611, 1.404099194856937 ], [ 103.691050710019042, 1.40671014028501 ], [ 103.695543770939892, 1.404099745161814 ], [ 103.695544076090187, 1.398878412116128 ], [ 103.691051340219559, 1.396267476208698 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "198" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.691050393156146, 1.411931471971713 ], [ 103.686557312224082, 1.414541856150627 ], [ 103.686556983537258, 1.419763186444055 ], [ 103.691049755904999, 1.422374134637865 ], [ 103.695542848661006, 1.419763742890478 ], [ 103.695543157225316, 1.414542410549859 ], [ 103.691050393156146, 1.411931471971713 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "199" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.691049435516717, 1.427595465615573 ], [ 103.686556322526855, 1.430205846319728 ], [ 103.68655599020326, 1.435427175900233 ], [ 103.691048791214698, 1.438038126855906 ], [ 103.695541916139916, 1.435427738488282 ], [ 103.695542228118313, 1.430206406860559 ], [ 103.691049435516717, 1.427595465615573 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "200" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.695552430479339, 1.247459655845983 ], [ 103.691059669541374, 1.250070084509871 ], [ 103.691059387926018, 1.255291422855826 ], [ 103.695551885033836, 1.257902334552288 ], [ 103.700044656570867, 1.255291899284993 ], [ 103.700044920401027, 1.250070558956744 ], [ 103.695552430479339, 1.247459655845983 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "201" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.69555161060461, 1.263123673591192 ], [ 103.691058821171083, 1.265734098918793 ], [ 103.691058536031477, 1.270955436634065 ], [ 103.695551058333137, 1.273566351036153 ], [ 103.700043858477073, 1.270955919010161 ], [ 103.700044125608898, 1.265734579312572 ], [ 103.69555161060461, 1.263123673591192 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "202" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.695550780490876, 1.27878768944047 ], [ 103.691057962227902, 1.281398111427833 ], [ 103.691057673563904, 1.286619448504589 ], [ 103.695550221393248, 1.289230365608424 ], [ 103.700043050477973, 1.286619936827683 ], [ 103.700043320911604, 1.281398597768586 ], [ 103.695550780490876, 1.27878768944047 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "203" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.695549940137866, 1.294451703370321 ], [ 103.691057092711489, 1.297062122013495 ], [ 103.691056800523015, 1.302283458443904 ], [ 103.695549374213854, 1.304894378245604 ], [ 103.70004223257331, 1.302283952714065 ], [ 103.700042506308847, 1.297062614301292 ], [ 103.695549940137866, 1.294451703370321 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "204" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.695549089545224, 1.31011571535725 ], [ 103.691056212621532, 1.312726130652284 ], [ 103.691055916908496, 1.317947466428514 ], [ 103.695548516794659, 1.320558388924199 ], [ 103.700041404762786, 1.317947966645811 ], [ 103.7000416818003, 1.312726628887195 ], [ 103.695549089545224, 1.31011571535725 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "205" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.695548228712681, 1.325779725377762 ], [ 103.691055321957734, 1.328390137320704 ], [ 103.691055022719979, 1.333611472434924 ], [ 103.695547649135321, 1.336222397620715 ], [ 103.700040567046059, 1.33361197859943 ], [ 103.700040847385679, 1.328390641502799 ], [ 103.695548228712681, 1.325779725377762 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "206" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.695547357639896, 1.341443733408364 ], [ 103.691054420719723, 1.344054141995262 ], [ 103.691054117957179, 1.349275476439641 ], [ 103.695546771235527, 1.351886404311659 ], [ 103.700039719422861, 1.349275988551426 ], [ 103.700040003064657, 1.344054652124613 ], [ 103.695547357639896, 1.341443733408364 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "207" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.695546476326555, 1.357107739425563 ], [ 103.691053508907189, 1.359718144652465 ], [ 103.691053202619727, 1.36493947841917 ], [ 103.695545883094965, 1.367550408973537 ], [ 103.700038861892835, 1.364939996478309 ], [ 103.70003914883695, 1.359718660729144 ], [ 103.695546476326555, 1.357107739425563 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "208" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.695545584772319, 1.372771743405865 ], [ 103.691052586519788, 1.375382145268818 ], [ 103.691052276707296, 1.38060347835002 ], [ 103.695544984713294, 1.383214411582857 ], [ 103.700037994455698, 1.380604002356585 ], [ 103.700038284702217, 1.375382667292899 ], [ 103.695545584772319, 1.372771743405865 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "209" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.695544682976887, 1.388435745325779 ], [ 103.691051653557196, 1.39104614382083 ], [ 103.691051340219559, 1.396267476208698 ], [ 103.695544076090187, 1.398878412116128 ], [ 103.700037117111123, 1.396268006162764 ], [ 103.700037410660158, 1.391046671792387 ], [ 103.695544682976887, 1.388435745325779 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "210" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.695543770939892, 1.404099745161814 ], [ 103.691050710019042, 1.40671014028501 ], [ 103.691050393156146, 1.411931471971713 ], [ 103.695543157225316, 1.414542410549859 ], [ 103.700036229858767, 1.411932007873355 ], [ 103.700036526710434, 1.406710674204118 ], [ 103.695543770939892, 1.404099745161814 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "211" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.695542848661006, 1.419763742890478 ], [ 103.691049755904999, 1.422374134637865 ], [ 103.691049435516717, 1.427595465615573 ], [ 103.695542228118313, 1.430206406860559 ], [ 103.700035332698334, 1.427596007464867 ], [ 103.700035632852718, 1.4223746745046 ], [ 103.695542848661006, 1.419763742890478 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "212" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.695541916139916, 1.435427738488282 ], [ 103.691048791214698, 1.438038126855906 ], [ 103.691048467300931, 1.44325945711679 ], [ 103.695541288768865, 1.445870401024739 ], [ 103.700034425629454, 1.443260004913813 ], [ 103.70003472908671, 1.438038672670344 ], [ 103.695541916139916, 1.435427738488282 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "213" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.700044656570867, 1.255291899284993 ], [ 103.695551885033836, 1.257902334552288 ], [ 103.69555161060461, 1.263123673591192 ], [ 103.700044125608898, 1.265734579312572 ], [ 103.704536907745037, 1.26312413736205 ], [ 103.704537164277767, 1.257902796405477 ], [ 103.700044656570867, 1.255291899284993 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "214" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.700043858477073, 1.270955919010161 ], [ 103.695551058333137, 1.273566351036153 ], [ 103.695550780490876, 1.27878768944047 ], [ 103.700043320911604, 1.281398597768586 ], [ 103.704536131765977, 1.27878815896438 ], [ 103.704536391489157, 1.273566818642372 ], [ 103.700043858477073, 1.270955919010161 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "215" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.700043050477973, 1.286619936827683 ], [ 103.695550221393248, 1.289230365608424 ], [ 103.695549940137866, 1.294451703370321 ], [ 103.700042506308847, 1.297062614301292 ], [ 103.704535346215351, 1.29445217864735 ], [ 103.704535609129081, 1.289230838967739 ], [ 103.700043050477973, 1.286619936827683 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "216" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.70004223257331, 1.302283952714065 ], [ 103.695549374213854, 1.304894378245604 ], [ 103.695549089545224, 1.31011571535725 ], [ 103.7000416818003, 1.312726628887195 ], [ 103.704534551092877, 1.310116196387465 ], [ 103.704534817197256, 1.304894857358083 ], [ 103.70004223257331, 1.302283952714065 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "217" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.700041404762786, 1.317947966645811 ], [ 103.695548516794659, 1.320558388924199 ], [ 103.695548228712681, 1.325779725377762 ], [ 103.700040847385679, 1.328390641502799 ], [ 103.704533746398269, 1.325780212161232 ], [ 103.704534015693412, 1.320558873789909 ], [ 103.700041404762786, 1.317947966645811 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "218" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.700040567046059, 1.33361197859943 ], [ 103.695547649135321, 1.336222397620715 ], [ 103.695547357639896, 1.341443733408364 ], [ 103.700040003064657, 1.344054652124613 ], [ 103.704532932131229, 1.341444225945158 ], [ 103.704533204617206, 1.336222888239726 ], [ 103.700040567046059, 1.33361197859943 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "219" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.700039719422861, 1.349275988551426 ], [ 103.695546771235527, 1.351886404311659 ], [ 103.695546476326555, 1.357107739425563 ], [ 103.70003914883695, 1.359718660729144 ], [ 103.70453210829146, 1.35710823771575 ], [ 103.70453238396837, 1.351886900684039 ], [ 103.700039719422861, 1.349275988551426 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "220" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.700038861892835, 1.364939996478309 ], [ 103.695545883094965, 1.367550408973537 ], [ 103.695545584772319, 1.372771743405865 ], [ 103.700038284702217, 1.375382667292899 ], [ 103.704531274878633, 1.372772247449516 ], [ 103.704531553746591, 1.367550911099358 ], [ 103.700038861892835, 1.364939996478309 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "221" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.700037994455698, 1.380604002356585 ], [ 103.695544984713294, 1.383214411582857 ], [ 103.695544682976887, 1.388435745325779 ], [ 103.700037410660158, 1.391046671792387 ], [ 103.704530431892465, 1.388436255122967 ], [ 103.704530713951584, 1.383214919462191 ], [ 103.700037994455698, 1.380604002356585 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "222" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.700037117111123, 1.396268006162764 ], [ 103.695544076090187, 1.398878412116128 ], [ 103.695543770939892, 1.404099745161814 ], [ 103.700036526710434, 1.406710674204118 ], [ 103.704529579332643, 1.404100260712609 ], [ 103.704529864583009, 1.398878925749046 ], [ 103.700037117111123, 1.396268006162764 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "223" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.700036229858767, 1.411932007873355 ], [ 103.695543157225316, 1.414542410549859 ], [ 103.695542848661006, 1.419763742890478 ], [ 103.700035632852718, 1.4223746745046 ], [ 103.704528717198841, 1.419764264194955 ], [ 103.704529005640566, 1.414542929936434 ], [ 103.700036229858767, 1.411932007873355 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "224" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.700035332698334, 1.427596007464867 ], [ 103.695542228118313, 1.430206406860559 ], [ 103.695541916139916, 1.435427738488282 ], [ 103.70003472908671, 1.438038672670344 ], [ 103.704527845490745, 1.435428265546514 ], [ 103.704528137123944, 1.430206932000865 ], [ 103.700035332698334, 1.427596007464867 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "225" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.704539915951457, 1.200468032229034 ], [ 103.700047245349225, 1.203078486725337 ], [ 103.700046991423577, 1.208299828898576 ], [ 103.704539425217703, 1.210910718460571 ], [ 103.709032105973748, 1.208300257581159 ], [ 103.709032342781839, 1.20307891355496 ], [ 103.704539915951457, 1.200468032229034 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "226" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.704539178255772, 1.21613206127385 ], [ 103.700046480270899, 1.21874251263963 ], [ 103.700046223043842, 1.223963854205704 ], [ 103.704538681141756, 1.22657474629108 ], [ 103.709031389391768, 1.223964288447209 ], [ 103.709031629278726, 1.218742945028154 ], [ 103.704539178255772, 1.21613206127385 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "227" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.704537674152846, 1.247460113863855 ], [ 103.700044920401027, 1.250070558956744 ], [ 103.700044656570867, 1.255291899284993 ], [ 103.704537164277767, 1.257902796405477 ], [ 103.709029928517381, 1.255292344644526 ], [ 103.709030174562301, 1.250071002463254 ], [ 103.704537674152846, 1.247460113863855 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "228" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.704536907745037, 1.26312413736205 ], [ 103.700044125608898, 1.265734579312572 ], [ 103.700043858477073, 1.270955919010161 ], [ 103.704536391489157, 1.273566818642372 ], [ 103.70902918422442, 1.270956369928802 ], [ 103.709029433348448, 1.26573502837817 ], [ 103.704536907745037, 1.26312413736205 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "229" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.704536131765977, 1.27878815896438 ], [ 103.700043320911604, 1.281398597768586 ], [ 103.700043050477973, 1.286619936827683 ], [ 103.704535609129081, 1.289230838967739 ], [ 103.709028430693905, 1.286620393305497 ], [ 103.709028682897156, 1.281399052393335 ], [ 103.704536131765977, 1.27878815896438 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "230" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.704535346215351, 1.29445217864735 ], [ 103.700042506308847, 1.297062614301292 ], [ 103.70004223257331, 1.302283952714065 ], [ 103.704534817197256, 1.304894857358083 ], [ 103.709027667925568, 1.302284414751116 ], [ 103.709027923208126, 1.297063074485257 ], [ 103.704535346215351, 1.29445217864735 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "231" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.704534551092877, 1.310116196387465 ], [ 103.7000416818003, 1.312726628887195 ], [ 103.700041404762786, 1.317947966645811 ], [ 103.704534015693412, 1.320558873789909 ], [ 103.709026895919138, 1.317948434242166 ], [ 103.709027154281088, 1.312727094630441 ], [ 103.704534551092877, 1.310116196387465 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "232" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.704533746398269, 1.325780212161232 ], [ 103.700040847385679, 1.328390641502799 ], [ 103.700040567046059, 1.33361197859943 ], [ 103.704533204617206, 1.336222888239726 ], [ 103.709026114674302, 1.333612451755154 ], [ 103.709026376115759, 1.328391112805393 ], [ 103.704533746398269, 1.325780212161232 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "233" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.704532932131229, 1.341444225945158 ], [ 103.700040003064657, 1.344054652124613 ], [ 103.700039719422861, 1.349275988551426 ], [ 103.70453238396837, 1.351886900684039 ], [ 103.70902532419079, 1.349276467266587 ], [ 103.709025588711839, 1.344055128986621 ], [ 103.704532932131229, 1.341444225945158 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "234" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.70453210829146, 1.35710823771575 ], [ 103.70003914883695, 1.359718660729144 ], [ 103.700038861892835, 1.364939996478309 ], [ 103.704531553746591, 1.367550911099358 ], [ 103.709024524468319, 1.364940480752974 ], [ 103.709024792069044, 1.359719143150634 ], [ 103.70453210829146, 1.35710823771575 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "235" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.704531274878633, 1.372772247449516 ], [ 103.700038284702217, 1.375382667292899 ], [ 103.700037994455698, 1.380604002356585 ], [ 103.704530713951584, 1.383214919462191 ], [ 103.709023715506575, 1.380604492190824 ], [ 103.709023986187105, 1.37538315527394 ], [ 103.704531274878633, 1.372772247449516 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "236" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.704530431892465, 1.388436255122967 ], [ 103.700037410660158, 1.391046671792387 ], [ 103.700037117111123, 1.396268006162764 ], [ 103.704529864583009, 1.398878925749046 ], [ 103.709022897305275, 1.396268501556647 ], [ 103.709023171065681, 1.391047165333048 ], [ 103.704530431892465, 1.388436255122967 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "237" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.704529579332643, 1.404100260712609 ], [ 103.700036526710434, 1.406710674204118 ], [ 103.700036229858767, 1.411932007873355 ], [ 103.704529005640566, 1.414542929936434 ], [ 103.709022069864091, 1.411932508826951 ], [ 103.709022346704486, 1.406711173304468 ], [ 103.704529579332643, 1.404100260712609 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "238" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.704528717198841, 1.419764264194955 ], [ 103.700035632852718, 1.4223746745046 ], [ 103.700035332698334, 1.427596007464867 ], [ 103.704528137123944, 1.430206932000865 ], [ 103.709021233182739, 1.427596513978248 ], [ 103.709021513103238, 1.422375179164711 ], [ 103.704528717198841, 1.419764264194955 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "239" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.704527845490745, 1.435428265546514 ], [ 103.70003472908671, 1.438038672670344 ], [ 103.700034425629454, 1.443260004913813 ], [ 103.704527259032801, 1.445870931918851 ], [ 103.709020387260907, 1.44326051698705 ], [ 103.70902067026158, 1.438039182890288 ], [ 103.704527845490745, 1.435428265546514 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "240" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.709032105973748, 1.208300257581159 ], [ 103.704539425217703, 1.210910718460571 ], [ 103.704539178255772, 1.21613206127385 ], [ 103.709031629278726, 1.218742945028154 ], [ 103.713524320188611, 1.216132477685814 ], [ 103.713524549921701, 1.2109111330842 ], [ 103.709032105973748, 1.208300257581159 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "241" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.709029928517381, 1.255292344644526 ], [ 103.704537164277767, 1.257902796405477 ], [ 103.704536907745037, 1.26312413736205 ], [ 103.709029433348448, 1.26573502837817 ], [ 103.713522208075887, 1.263124569869336 ], [ 103.713522446712091, 1.257903227124367 ], [ 103.709029928517381, 1.255292344644526 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "242" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.70902918422442, 1.270956369928802 ], [ 103.704536391489157, 1.273566818642372 ], [ 103.704536131765977, 1.27878815896438 ], [ 103.709028682897156, 1.281399052393335 ], [ 103.713521486231571, 1.278788596836895 ], [ 103.713521727835655, 1.27356725472647 ], [ 103.70902918422442, 1.270956369928802 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "243" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.709028430693905, 1.286620393305497 ], [ 103.704535609129081, 1.289230838967739 ], [ 103.704535346215351, 1.29445217864735 ], [ 103.709027923208126, 1.297063074485257 ], [ 103.713520755483444, 1.294452621885156 ], [ 103.713521000055493, 1.289231280417108 ], [ 103.709028430693905, 1.286620393305497 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "244" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.709027667925568, 1.302284414751116 ], [ 103.704534817197256, 1.304894857358083 ], [ 103.704534551092877, 1.310116196387465 ], [ 103.709027154281088, 1.312727094630441 ], [ 103.71352001583125, 1.310116644990625 ], [ 103.713520263371336, 1.304895304172785 ], [ 103.709027667925568, 1.302284414751116 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "245" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.709026895919138, 1.317948434242166 ], [ 103.704534015693412, 1.320558873789909 ], [ 103.704533746398269, 1.325780212161232 ], [ 103.709026376115759, 1.328391112805393 ], [ 103.713519267274677, 1.32578066612981 ], [ 103.713519517782927, 1.320559325970008 ], [ 103.709026895919138, 1.317948434242166 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "246" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.709026114674302, 1.333612451755154 ], [ 103.704533204617206, 1.336222888239726 ], [ 103.704532932131229, 1.341444225945158 ], [ 103.709025588711839, 1.344055128986621 ], [ 103.713518509813483, 1.341444685279218 ], [ 103.713518763289969, 1.336223345785285 ], [ 103.709026114674302, 1.333612451755154 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "247" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.70902532419079, 1.349276467266587 ], [ 103.70453238396837, 1.351886900684039 ], [ 103.70453210829146, 1.35710823771575 ], [ 103.709024792069044, 1.359719143150634 ], [ 103.713517743447369, 1.357108702415358 ], [ 103.71351799989219, 1.351887363595125 ], [ 103.70902532419079, 1.349276467266587 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "248" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.709024524468319, 1.364940480752974 ], [ 103.704531553746591, 1.367550911099358 ], [ 103.704531274878633, 1.372772247449516 ], [ 103.709023986187105, 1.37538315527394 ], [ 103.713516968176066, 1.372772717514738 ], [ 103.713517227589321, 1.367551379376035 ], [ 103.709024524468319, 1.364940480752974 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "249" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.709023715506575, 1.380604492190824 ], [ 103.704530713951584, 1.383214919462191 ], [ 103.704530431892465, 1.388436255122967 ], [ 103.709023171065681, 1.391047165333048 ], [ 103.713516183999289, 1.388436730553869 ], [ 103.713516446381064, 1.383215393104525 ], [ 103.709023715506575, 1.380604492190824 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "250" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.709022897305275, 1.396268501556647 ], [ 103.704529864583009, 1.398878925749046 ], [ 103.704529579332643, 1.404100260712609 ], [ 103.709022346704486, 1.406711173304468 ], [ 103.713515390916726, 1.40410074150926 ], [ 103.71351565626712, 1.398879404757106 ], [ 103.709022897305275, 1.396268501556647 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "251" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.709022069864091, 1.411932508826951 ], [ 103.704529005640566, 1.414542929936434 ], [ 103.704528717198841, 1.419764264194955 ], [ 103.709021513103238, 1.422375179164711 ], [ 103.713514588928092, 1.419764750357422 ], [ 103.713514857247219, 1.414543414310288 ], [ 103.709022069864091, 1.411932508826951 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "252" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.709021233182739, 1.427596513978248 ], [ 103.704528137123944, 1.430206932000865 ], [ 103.704527845490745, 1.435428265546514 ], [ 103.70902067026158, 1.438039182890288 ], [ 103.713513778033118, 1.435428757074867 ], [ 103.713514049321063, 1.430207421740581 ], [ 103.709021233182739, 1.427596513978248 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "253" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.709020387260907, 1.44326051698705 ], [ 103.704527259032801, 1.445870931918851 ], [ 103.704526964208029, 1.451092264743799 ], [ 103.709019818179272, 1.453703184457711 ], [ 103.713512958231476, 1.451092761638106 ], [ 103.713513232488339, 1.445871427024499 ], [ 103.709020387260907, 1.44326051698705 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "254" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.713525683749495, 1.184804407064384 ], [ 103.709033047048578, 1.187414880276 ], [ 103.70903281331924, 1.19263622490151 ], [ 103.713525233185862, 1.195247098071177 ], [ 103.718017879818035, 1.192636618506784 ], [ 103.71801809665233, 1.1874152721576 ], [ 103.713525683749495, 1.184804407064384 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "255" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.713525006420312, 1.20046844327601 ], [ 103.709032342781839, 1.20307891355496 ], [ 103.709032105973748, 1.208300257581159 ], [ 103.713524549921701, 1.2109111330842 ], [ 103.718017223602729, 1.208300656357489 ], [ 103.718017443293235, 1.203079310607599 ], [ 103.713525006420312, 1.20046844327601 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "256" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.713522208075887, 1.263124569869336 ], [ 103.709029433348448, 1.26573502837817 ], [ 103.70902918422442, 1.270956369928802 ], [ 103.713521727835655, 1.27356725472647 ], [ 103.718014513050946, 1.270956789389933 ], [ 103.718014744167149, 1.265735446115532 ], [ 103.713522208075887, 1.263124569869336 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "257" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.713521486231571, 1.278788596836895 ], [ 103.709028682897156, 1.281399052393335 ], [ 103.709028430693905, 1.286620393305497 ], [ 103.713521000055493, 1.289231280417108 ], [ 103.718013813989103, 1.286620817937975 ], [ 103.718014047961944, 1.281399475302024 ], [ 103.713521486231571, 1.278788596836895 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "258" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.713520755483444, 1.294452621885156 ], [ 103.709027923208126, 1.297063074485257 ], [ 103.709027667925568, 1.302284414751116 ], [ 103.713520263371336, 1.304895304172785 ], [ 103.718013106357191, 1.302284844555001 ], [ 103.718013343186755, 1.297063502565333 ], [ 103.713520755483444, 1.294452621885156 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "259" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.71352001583125, 1.310116644990625 ], [ 103.709027154281088, 1.312727094630441 ], [ 103.709026895919138, 1.317948434242166 ], [ 103.713519517782927, 1.320559325970008 ], [ 103.718012390154954, 1.31794886921752 ], [ 103.718012629841311, 1.312727527881965 ], [ 103.71352001583125, 1.310116644990625 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "260" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.713519267274677, 1.32578066612981 ], [ 103.709026376115759, 1.328391112805393 ], [ 103.709026114674302, 1.333612451755154 ], [ 103.713518763289969, 1.336223345785285 ], [ 103.718011665382107, 1.333612891902038 ], [ 103.718011907925359, 1.328391551228427 ], [ 103.713519267274677, 1.32578066612981 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "261" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.713518509813483, 1.341444685279218 ], [ 103.709025588711839, 1.344055128986621 ], [ 103.70902532419079, 1.349276467266587 ], [ 103.71351799989219, 1.351887363595125 ], [ 103.718010932038396, 1.349276912585065 ], [ 103.71801117743864, 1.344055572581227 ], [ 103.713518509813483, 1.341444685279218 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "262" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.713517743447369, 1.357108702415358 ], [ 103.709024792069044, 1.359719143150634 ], [ 103.709024524468319, 1.364940480752974 ], [ 103.713517227589321, 1.367551379376035 ], [ 103.718010190123564, 1.364940931243108 ], [ 103.718010438380873, 1.359719591916875 ], [ 103.713517743447369, 1.357108702415358 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "263" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.713516968176066, 1.372772717514738 ], [ 103.709023986187105, 1.37538315527394 ], [ 103.709023715506575, 1.380604492190824 ], [ 103.713516446381064, 1.383215393104525 ], [ 103.718009439637314, 1.380604947852678 ], [ 103.718009690751799, 1.37538360921188 ], [ 103.713516968176066, 1.372772717514738 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "264" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.713516183999289, 1.388436730553869 ], [ 103.709023171065681, 1.391047165333048 ], [ 103.709022897305275, 1.396268501556647 ], [ 103.71351565626712, 1.398879404757106 ], [ 103.718008680579374, 1.396268962390285 ], [ 103.718008934551122, 1.391047624442751 ], [ 103.713516183999289, 1.388436730553869 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "265" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.713515390916726, 1.40410074150926 ], [ 103.709022346704486, 1.406711173304468 ], [ 103.709022069864091, 1.411932508826951 ], [ 103.713514857247219, 1.414543414310288 ], [ 103.718007912949474, 1.41193297483244 ], [ 103.718008169778571, 1.406711637586 ], [ 103.713515390916726, 1.40410074150926 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "266" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.713514588928092, 1.419764750357422 ], [ 103.709021513103238, 1.422375179164711 ], [ 103.709021233182739, 1.427596513978248 ], [ 103.713514049321063, 1.430207421740581 ], [ 103.718007136747318, 1.427596985155654 ], [ 103.718007396433862, 1.422375648618137 ], [ 103.713514588928092, 1.419764750357422 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "267" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.713513778033118, 1.435428757074867 ], [ 103.70902067026158, 1.438039182890288 ], [ 103.709020387260907, 1.44326051698705 ], [ 103.713513232488339, 1.445871427024499 ], [ 103.718006351972619, 1.44326099333644 ], [ 103.71800661451671, 1.438039657515675 ], [ 103.713513778033118, 1.435428757074867 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "268" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.718018527464764, 1.176972578866033 ], [ 103.713525907547591, 1.179583061264165 ], [ 103.713525683749495, 1.184804407064384 ], [ 103.71801809665233, 1.1874152721576 ], [ 103.722510726389444, 1.184804783421857 ], [ 103.722510933403768, 1.179583435962608 ], [ 103.718018527464764, 1.176972578866033 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "269" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.718017879818035, 1.192636618506784 ], [ 103.713525233185862, 1.195247098071177 ], [ 103.713525006420312, 1.20046844327601 ], [ 103.718017443293235, 1.203079310607599 ], [ 103.722510099856677, 1.200468824610611 ], [ 103.722510309615899, 1.195247477746729 ], [ 103.718017879818035, 1.192636618506784 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "270" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.718017223602729, 1.208300656357489 ], [ 103.713524549921701, 1.2109111330842 ], [ 103.713524320188611, 1.216132477685814 ], [ 103.718016781365435, 1.218743347251886 ], [ 103.722509465089047, 1.216132863997597 ], [ 103.722509677593251, 1.210911517736916 ], [ 103.718017223602729, 1.208300656357489 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "271" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.718015203542976, 1.255292758934369 ], [ 103.713522446712091, 1.257903227124367 ], [ 103.713522208075887, 1.263124569869336 ], [ 103.718014744167149, 1.265735446115532 ], [ 103.722507511374602, 1.263124971112996 ], [ 103.722507732114224, 1.257903626708904 ], [ 103.718015203542976, 1.255292758934369 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "272" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.718014513050946, 1.270956789389933 ], [ 103.713521727835655, 1.27356725472647 ], [ 103.713521486231571, 1.278788596836895 ], [ 103.718014047961944, 1.281399475302024 ], [ 103.72250684366513, 1.278789003057961 ], [ 103.722507067150062, 1.273567659288395 ], [ 103.718014513050946, 1.270956789389933 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "273" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.718013813989103, 1.286620817937975 ], [ 103.713521000055493, 1.289231280417108 ], [ 103.713520755483444, 1.294452621885156 ], [ 103.718013343186755, 1.297063502565333 ], [ 103.722506167719587, 1.294453033083685 ], [ 103.722506393949899, 1.289231689956476 ], [ 103.718013813989103, 1.286620817937975 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "274" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.718013106357191, 1.302284844555001 ], [ 103.713520263371336, 1.304895304172785 ], [ 103.71352001583125, 1.310116644990625 ], [ 103.718012629841311, 1.312727527881965 ], [ 103.722505483537716, 1.310117061166675 ], [ 103.722505712513495, 1.304895718689655 ], [ 103.718013106357191, 1.302284844555001 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "275" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.718012390154954, 1.31794886921752 ], [ 103.713519517782927, 1.320559325970008 ], [ 103.713519267274677, 1.32578066612981 ], [ 103.718011907925359, 1.328391551228427 ], [ 103.722504791119292, 1.325781087283441 ], [ 103.722505022840622, 1.320559745464439 ], [ 103.718012390154954, 1.31794886921752 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "276" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.718011665382107, 1.333612891902038 ], [ 103.713518763289969, 1.336223345785285 ], [ 103.713518509813483, 1.341444685279218 ], [ 103.71801117743864, 1.344055572581227 ], [ 103.722504090464028, 1.34144511141049 ], [ 103.722504324930995, 1.336223770257337 ], [ 103.718011665382107, 1.333612891902038 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "277" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.718010932038396, 1.349276912585065 ], [ 103.71351799989219, 1.351887363595125 ], [ 103.713517743447369, 1.357108702415358 ], [ 103.718010438380873, 1.359719591916875 ], [ 103.722503381571684, 1.357109133524331 ], [ 103.722503618784373, 1.351887793044857 ], [ 103.718010932038396, 1.349276912585065 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "278" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.718010190123564, 1.364940931243108 ], [ 103.713517227589321, 1.367551379376035 ], [ 103.713516968176066, 1.372772717514738 ], [ 103.718009690751799, 1.37538360921188 ], [ 103.72250266444199, 1.372773153601473 ], [ 103.7225029044005, 1.367551813803509 ], [ 103.718010190123564, 1.364940931243108 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "279" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.718009439637314, 1.380604947852678 ], [ 103.713516446381064, 1.383215393104525 ], [ 103.713516183999289, 1.388436730553869 ], [ 103.718008934551122, 1.391047624442751 ], [ 103.722501939074689, 1.388437171618428 ], [ 103.722502181779092, 1.383215832509803 ], [ 103.718009439637314, 1.380604947852678 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "280" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.718008680579374, 1.396268962390285 ], [ 103.71351565626712, 1.398879404757106 ], [ 103.713515390916726, 1.40410074150926 ], [ 103.718008169778571, 1.406711637586 ], [ 103.722501205469499, 1.404101187551706 ], [ 103.722501450919893, 1.39887984914025 ], [ 103.718008680579374, 1.396268962390285 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "281" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.718007912949474, 1.41193297483244 ], [ 103.713514857247219, 1.414543414310288 ], [ 103.713514588928092, 1.419764750357422 ], [ 103.718007396433862, 1.422375648618137 ], [ 103.722500463626147, 1.419765201377819 ], [ 103.722500711822633, 1.414543863671361 ], [ 103.718007912949474, 1.41193297483244 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "282" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.718007136747318, 1.427596985155654 ], [ 103.713514049321063, 1.430207421740581 ], [ 103.713513778033118, 1.435428757074867 ], [ 103.71800661451671, 1.438039657515675 ], [ 103.72249971354438, 1.435429213073277 ], [ 103.722499964487028, 1.430207876079647 ], [ 103.718007136747318, 1.427596985155654 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "283" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.718006351972619, 1.44326099333644 ], [ 103.713513232488339, 1.445871427024499 ], [ 103.713512958231476, 1.451092761638106 ], [ 103.718005824026832, 1.453703664255126 ], [ 103.722498955223898, 1.451093222614596 ], [ 103.722499208912822, 1.445871886341622 ], [ 103.718006351972619, 1.44326099333644 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "284" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.722510726389444, 1.184804783421857 ], [ 103.71801809665233, 1.1874152721576 ], [ 103.718017879818035, 1.192636618506784 ], [ 103.722510309615899, 1.195247477746729 ], [ 103.727002949173013, 1.19263698259356 ], [ 103.727003149112235, 1.187415634649971 ], [ 103.722510726389444, 1.184804783421857 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "285" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.722510099856677, 1.200468824610611 ], [ 103.718017443293235, 1.203079310607599 ], [ 103.718017223602729, 1.208300656357489 ], [ 103.722509677593251, 1.210911517736916 ], [ 103.727002344087992, 1.208301025227518 ], [ 103.727002546660884, 1.203079677883204 ], [ 103.722510099856677, 1.200468824610611 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "286" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.722507511374602, 1.263124971112996 ], [ 103.718014744167149, 1.265735446115532 ], [ 103.718014513050946, 1.270956789389933 ], [ 103.722507067150062, 1.273567659288395 ], [ 103.726999844734095, 1.270957177393501 ], [ 103.727000057842432, 1.265735832524605 ], [ 103.722507511374602, 1.263124971112996 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "287" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.72250684366513, 1.278789003057961 ], [ 103.718014047961944, 1.281399475302024 ], [ 103.718013813989103, 1.286620817937975 ], [ 103.722506393949899, 1.289231689956476 ], [ 103.726999200140995, 1.286621210725064 ], [ 103.726999415883384, 1.2813998664946 ], [ 103.72250684366513, 1.278789003057961 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "288" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.722506167719587, 1.294453033083685 ], [ 103.718013343186755, 1.297063502565333 ], [ 103.718013106357191, 1.302284844555001 ], [ 103.722505712513495, 1.304895718689655 ], [ 103.726998547645593, 1.302285242125668 ], [ 103.72699876602212, 1.297063898541468 ], [ 103.722506167719587, 1.294453033083685 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "289" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.722505483537716, 1.310117061166675 ], [ 103.718012629841311, 1.312727527881965 ], [ 103.718012390154954, 1.31794886921752 ], [ 103.722505022840622, 1.320559745464439 ], [ 103.726997887247634, 1.31794927157182 ], [ 103.726998108258371, 1.312727928641714 ], [ 103.722505483537716, 1.310117061166675 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "290" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.722504791119292, 1.325781087283441 ], [ 103.718011907925359, 1.328391551228427 ], [ 103.718011665382107, 1.333612891902038 ], [ 103.722504324930995, 1.336223770257337 ], [ 103.726997218946877, 1.333613299040029 ], [ 103.726997442591895, 1.328391956771847 ], [ 103.722504791119292, 1.325781087283441 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "291" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.722504090464028, 1.34144511141049 ], [ 103.71801117743864, 1.344055572581227 ], [ 103.718010932038396, 1.349276912585065 ], [ 103.722503618784373, 1.351887793044857 ], [ 103.726996542743052, 1.349277324506803 ], [ 103.726996769022449, 1.344055982908377 ], [ 103.722504090464028, 1.34144511141049 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "292" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.722503381571684, 1.357109133524331 ], [ 103.718010438380873, 1.359719591916875 ], [ 103.718010190123564, 1.364940931243108 ], [ 103.7225029044005, 1.367551813803509 ], [ 103.726995858635931, 1.364941347948654 ], [ 103.726996087549807, 1.359720007027812 ], [ 103.722503381571684, 1.357109133524331 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "293" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.72250266444199, 1.372773153601473 ], [ 103.718009690751799, 1.37538360921188 ], [ 103.718009439637314, 1.380604947852678 ], [ 103.722502181779092, 1.383215832509803 ], [ 103.726995166625272, 1.38060536934209 ], [ 103.726995398173685, 1.375384029106663 ], [ 103.72250266444199, 1.372773153601473 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "294" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.722501939074689, 1.388437171618428 ], [ 103.718008934551122, 1.391047624442751 ], [ 103.718008680579374, 1.396268962390285 ], [ 103.722501450919893, 1.39887984914025 ], [ 103.726994466710806, 1.396269388663623 ], [ 103.72699470089384, 1.39104804912144 ], [ 103.722501939074689, 1.388437171618428 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "295" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.722501205469499, 1.404101187551706 ], [ 103.718008169778571, 1.406711637586 ], [ 103.718007912949474, 1.41193297483244 ], [ 103.722500711822633, 1.414543863671361 ], [ 103.726993758892277, 1.411933405889764 ], [ 103.726993995710018, 1.406712067048655 ], [ 103.722501205469499, 1.404101187551706 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "296" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.722500463626147, 1.419765201377819 ], [ 103.718007396433862, 1.422375648618137 ], [ 103.718007136747318, 1.427596985155654 ], [ 103.722499964487028, 1.430207876079647 ], [ 103.726993043169401, 1.427597420997026 ], [ 103.726993282621962, 1.42237608286482 ], [ 103.722500463626147, 1.419765201377819 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "297" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.72249971354438, 1.435429213073277 ], [ 103.71800661451671, 1.438039657515675 ], [ 103.718006351972619, 1.44326099333644 ], [ 103.722499208912822, 1.445871886341622 ], [ 103.726992319541949, 1.443261433961921 ], [ 103.726992561629402, 1.438040096546447 ], [ 103.72249971354438, 1.435429213073277 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "298" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.722498955223898, 1.451093222614596 ], [ 103.718005824026832, 1.453703664255126 ], [ 103.718005558625109, 1.45892499935131 ], [ 103.722498445099731, 1.461535894433799 ], [ 103.726991588009639, 1.458925444760963 ], [ 103.726991832732068, 1.453704108070049 ], [ 103.722498955223898, 1.451093222614596 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "299" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.727003546357082, 1.176972938169608 ], [ 103.722510933403768, 1.179583435962608 ], [ 103.722510726389444, 1.184804783421857 ], [ 103.727003149112235, 1.187415634649971 ], [ 103.731495771774263, 1.184805130454711 ], [ 103.731495962004786, 1.179583781465697 ], [ 103.727003546357082, 1.176972938169608 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "300" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.727002949173013, 1.19263698259356 ], [ 103.722510309615899, 1.195247477746729 ], [ 103.722510099856677, 1.200468824610611 ], [ 103.727002546660884, 1.203079677883204 ], [ 103.731495196037997, 1.20046917623279 ], [ 103.73149538879089, 1.195247827839128 ], [ 103.727002949173013, 1.19263698259356 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "301" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.727002344087992, 1.208301025227518 ], [ 103.722509677593251, 1.210911517736916 ], [ 103.722509465089047, 1.216132863997597 ], [ 103.727001936308469, 1.218743719310779 ], [ 103.731494612734508, 1.216133220209151 ], [ 103.731494808009828, 1.210911872418672 ], [ 103.727002344087992, 1.208301025227518 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "302" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.727000481425094, 1.255293142154471 ], [ 103.722507732114224, 1.257903626708904 ], [ 103.722507511374602, 1.263124971112996 ], [ 103.727000057842432, 1.265735832524605 ], [ 103.731492817418584, 1.263125341092981 ], [ 103.731493020261624, 1.257903995159041 ], [ 103.727000481425094, 1.255293142154471 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "303" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.726999844734095, 1.270957177393501 ], [ 103.722507067150062, 1.273567659288395 ], [ 103.72250684366513, 1.278789003057961 ], [ 103.726999415883384, 1.2813998664946 ], [ 103.731492203844027, 1.278789377627527 ], [ 103.731492409209793, 1.273568032328095 ], [ 103.726999844734095, 1.270957177393501 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "304" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.726999200140995, 1.286621210725064 ], [ 103.722506393949899, 1.289231689956476 ], [ 103.722506167719587, 1.294453033083685 ], [ 103.72699876602212, 1.297063898541468 ], [ 103.731491582701153, 1.294453412242886 ], [ 103.731491790589715, 1.289232067585793 ], [ 103.726999200140995, 1.286621210725064 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "305" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.726998547645593, 1.302285242125668 ], [ 103.722505712513495, 1.304895718689655 ], [ 103.722505483537716, 1.310117061166675 ], [ 103.726998108258371, 1.312727928641714 ], [ 103.731490953989734, 1.310117444915565 ], [ 103.731491164401163, 1.304896100908642 ], [ 103.726998547645593, 1.302285242125668 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "306" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.726997887247634, 1.31794927157182 ], [ 103.722505022840622, 1.320559745464439 ], [ 103.722504791119292, 1.325781087283441 ], [ 103.726997442591895, 1.328391956771847 ], [ 103.731490317709515, 1.325781475622073 ], [ 103.73149053064391, 1.320560132273151 ], [ 103.726997887247634, 1.31794927157182 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "307" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.726997218946877, 1.333613299040029 ], [ 103.722504324930995, 1.336223770257337 ], [ 103.722504090464028, 1.34144511141049 ], [ 103.726996769022449, 1.344055982908377 ], [ 103.731489673860267, 1.34144550433892 ], [ 103.731489889317714, 1.336224161655828 ], [ 103.726997218946877, 1.333613299040029 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "308" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.726996542743052, 1.349277324506803 ], [ 103.722503618784373, 1.351887793044857 ], [ 103.722503381571684, 1.357109133524331 ], [ 103.726996087549807, 1.359720007027812 ], [ 103.731489022441778, 1.357109531042615 ], [ 103.73148924042232, 1.351888189033184 ], [ 103.726996542743052, 1.349277324506803 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "309" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.726995858635931, 1.364941347948654 ], [ 103.7225029044005, 1.367551813803509 ], [ 103.72250266444199, 1.372773153601473 ], [ 103.726995398173685, 1.375384029106663 ], [ 103.731488363453778, 1.372773555709668 ], [ 103.731488583957528, 1.367552214381727 ], [ 103.726995858635931, 1.364941347948654 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "310" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.726995166625272, 1.38060536934209 ], [ 103.722502181779092, 1.383215832509803 ], [ 103.722501939074689, 1.388437171618428 ], [ 103.72699470089384, 1.39104804912144 ], [ 103.731487696896039, 1.38843757831659 ], [ 103.731487919923055, 1.38321623767797 ], [ 103.726995166625272, 1.38060536934209 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "311" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.726994466710806, 1.396269388663623 ], [ 103.722501450919893, 1.39887984914025 ], [ 103.722501205469499, 1.404101187551706 ], [ 103.726993995710018, 1.406712067048655 ], [ 103.731487022768306, 1.404101598839894 ], [ 103.731487248318672, 1.398880258898422 ], [ 103.726994466710806, 1.396269388663623 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "312" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.726993758892277, 1.411933405889764 ], [ 103.722500711822633, 1.414543863671361 ], [ 103.722500463626147, 1.419765201377819 ], [ 103.726993282621962, 1.42237608286482 ], [ 103.731486341070337, 1.41976561725609 ], [ 103.731486569144153, 1.414544278019597 ], [ 103.726993758892277, 1.411933405889764 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "313" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.726993043169401, 1.427597420997026 ], [ 103.722499964487028, 1.430207876079647 ], [ 103.72249971354438, 1.435429213073277 ], [ 103.726992561629402, 1.438040096546447 ], [ 103.731485651801876, 1.435429633541691 ], [ 103.731485882399213, 1.430208295018007 ], [ 103.726993043169401, 1.427597420997026 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "314" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.726992319541949, 1.443261433961921 ], [ 103.722499208912822, 1.445871886341622 ], [ 103.722498955223898, 1.451093222614596 ], [ 103.726991832732068, 1.453704108070049 ], [ 103.731484954962667, 1.451093647673213 ], [ 103.73148518808361, 1.445872309870164 ], [ 103.726992319541949, 1.443261433961921 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "315" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.731496339943519, 1.16914108289841 ], [ 103.727003743662735, 1.171751589634575 ], [ 103.727003546357082, 1.176972938169608 ], [ 103.731495962004786, 1.179583781465697 ], [ 103.735988567882984, 1.176973268342441 ], [ 103.735988748516093, 1.171751918342286 ], [ 103.731496339943519, 1.16914108289841 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "316" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.731495771774263, 1.184805130454711 ], [ 103.727003149112235, 1.187415634649971 ], [ 103.727002949173013, 1.19263698259356 ], [ 103.73149538879089, 1.195247827839128 ], [ 103.735988021161631, 1.192637317161793 ], [ 103.735988204205768, 1.187415967753066 ], [ 103.731495771774263, 1.184805130454711 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "317" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.731495196037997, 1.20046917623279 ], [ 103.727002546660884, 1.203079677883204 ], [ 103.727002344087992, 1.208301025227518 ], [ 103.731494808009828, 1.210911872418672 ], [ 103.735987467206968, 1.208301364191199 ], [ 103.735987652662232, 1.20308001538173 ], [ 103.731495196037997, 1.20046917623279 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "318" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.731492817418584, 1.263125341092981 ], [ 103.727000057842432, 1.265735832524605 ], [ 103.726999844734095, 1.270957177393501 ], [ 103.731492409209793, 1.273568032328095 ], [ 103.735985179051255, 1.270957533939459 ], [ 103.735985374151696, 1.265736187605343 ], [ 103.731492817418584, 1.263125341092981 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "319" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.731492203844027, 1.278789377627527 ], [ 103.726999415883384, 1.2813998664946 ], [ 103.726999200140995, 1.286621210725064 ], [ 103.731491790589715, 1.289232067585793 ], [ 103.735984588926996, 1.286621571666717 ], [ 103.735984786438905, 1.281400225971016 ], [ 103.731492203844027, 1.278789377627527 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "320" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.731491582701153, 1.294453412242886 ], [ 103.72699876602212, 1.297063898541468 ], [ 103.726998547645593, 1.302285242125668 ], [ 103.731491164401163, 1.304896100908642 ], [ 103.735983991568176, 1.302285607463066 ], [ 103.735984191491639, 1.297064262413612 ], [ 103.731491582701153, 1.294453412242886 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "321" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.731490953989734, 1.310117444915565 ], [ 103.726998108258371, 1.312727928641714 ], [ 103.726997887247634, 1.31794927157182 ], [ 103.73149053064391, 1.320560132273151 ], [ 103.735983386974581, 1.317949641305016 ], [ 103.735983589309669, 1.312728296909639 ], [ 103.731490953989734, 1.310117444915565 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "322" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.731490317709515, 1.325781475622073 ], [ 103.726997442591895, 1.328391956771847 ], [ 103.726997218946877, 1.333613299040029 ], [ 103.731489889317714, 1.336224161655828 ], [ 103.73598277514597, 1.333613673169075 ], [ 103.735982979892739, 1.328392329435604 ], [ 103.731490317709515, 1.325781475622073 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "323" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.731489673860267, 1.34144550433892 ], [ 103.726996769022449, 1.344055982908377 ], [ 103.726996542743052, 1.349277324506803 ], [ 103.73148924042232, 1.351888189033184 ], [ 103.73598215608213, 1.349277703031753 ], [ 103.73598236324068, 1.344056359968019 ], [ 103.731489673860267, 1.34144550433892 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "324" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.731489022441778, 1.357109531042615 ], [ 103.726996087549807, 1.359720007027812 ], [ 103.726995858635931, 1.364941347948654 ], [ 103.731488583957528, 1.367552214381727 ], [ 103.735981529782833, 1.36494173086956 ], [ 103.735981739353221, 1.359720388483393 ], [ 103.731489022441778, 1.357109531042615 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "325" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.731488363453778, 1.372773555709668 ], [ 103.726995398173685, 1.375384029106663 ], [ 103.726995166625272, 1.38060536934209 ], [ 103.731487919923055, 1.38321623767797 ], [ 103.735980896247852, 1.380605756659008 ], [ 103.735981108230149, 1.375384414958237 ], [ 103.731488363453778, 1.372773555709668 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "326" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.731487696896039, 1.38843757831659 ], [ 103.72699470089384, 1.39104804912144 ], [ 103.726994466710806, 1.396269388663623 ], [ 103.731487248318672, 1.398880258898422 ], [ 103.735980255476932, 1.396269780376608 ], [ 103.735980469871237, 1.391048439369063 ], [ 103.731487696896039, 1.38843757831659 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "327" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.731487022768306, 1.404101598839894 ], [ 103.726993995710018, 1.406712067048655 ], [ 103.726993758892277, 1.411933405889764 ], [ 103.731486569144153, 1.414544278019597 ], [ 103.735979607469844, 1.411933801998871 ], [ 103.735979824276228, 1.406712461692381 ], [ 103.731487022768306, 1.404101598839894 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "328" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.731486341070337, 1.41976561725609 ], [ 103.726993282621962, 1.42237608286482 ], [ 103.726993043169401, 1.427597420997026 ], [ 103.731485882399213, 1.430208295018007 ], [ 103.735978952226347, 1.427597821502311 ], [ 103.73597917144491, 1.422376481904705 ], [ 103.731486341070337, 1.41976561725609 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "329" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.731485651801876, 1.435429633541691 ], [ 103.726992561629402, 1.438040096546447 ], [ 103.726992319541949, 1.443261433961921 ], [ 103.73148518808361, 1.445872309870164 ], [ 103.735978289746228, 1.443261838863442 ], [ 103.735978511377027, 1.438040499982549 ], [ 103.731485651801876, 1.435429633541691 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "330" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.735989107371267, 1.161309217756638 ], [ 103.731496527651757, 1.163919733321877 ], [ 103.731496339943519, 1.16914108289841 ], [ 103.735988748516093, 1.171751918342286 ], [ 103.740481337721732, 1.169141396405124 ], [ 103.740481508868683, 1.163920045428109 ], [ 103.735989107371267, 1.161309217756638 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "331" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.735985179051255, 1.270957533939459 ], [ 103.731492409209793, 1.273568032328095 ], [ 103.731492203844027, 1.278789377627527 ], [ 103.735984786438905, 1.281400225971016 ], [ 103.740477566545707, 1.278789720545548 ], [ 103.740477753792277, 1.273568373845525 ], [ 103.735985179051255, 1.270957533939459 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "332" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.735983991568176, 1.302285607463066 ], [ 103.731491164401163, 1.304896100908642 ], [ 103.731490953989734, 1.310117444915565 ], [ 103.735983589309669, 1.312728296909639 ], [ 103.740476426964662, 1.310117796237246 ], [ 103.740476618811741, 1.304896450829699 ], [ 103.735983991568176, 1.302285607463066 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "333" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.735983386974581, 1.317949641305016 ], [ 103.73149053064391, 1.320560132273151 ], [ 103.731490317709515, 1.325781475622073 ], [ 103.735982979892739, 1.328392329435604 ], [ 103.740475846822733, 1.325781831145659 ], [ 103.740476040970165, 1.320560486396096 ], [ 103.735983386974581, 1.317949641305016 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "334" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.73598277514597, 1.333613673169075 ], [ 103.731489889317714, 1.336224161655828 ], [ 103.731489673860267, 1.34144550433892 ], [ 103.73598236324068, 1.344056359968019 ], [ 103.7404752597796, 1.341445864064461 ], [ 103.740475456227472, 1.336224519980712 ], [ 103.73598277514597, 1.333613673169075 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "335" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.73598215608213, 1.349277703031753 ], [ 103.73148924042232, 1.351888189033184 ], [ 103.731489022441778, 1.357109531042615 ], [ 103.735981739353221, 1.359720388483393 ], [ 103.740474665835038, 1.357109894970162 ], [ 103.740474864583405, 1.351888551560056 ], [ 103.73598215608213, 1.349277703031753 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "336" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.735981529782833, 1.36494173086956 ], [ 103.731488583957528, 1.367552214381727 ], [ 103.731488363453778, 1.372773555709668 ], [ 103.735981108230149, 1.375384414958237 ], [ 103.740474064988817, 1.372773923839273 ], [ 103.740474266037765, 1.36755258111064 ], [ 103.735981529782833, 1.36494173086956 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "337" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.735980896247852, 1.380605756659008 ], [ 103.731487919923055, 1.38321623767797 ], [ 103.731487696896039, 1.38843757831659 ], [ 103.735980469871237, 1.391048439369063 ], [ 103.740473457240739, 1.388437950648305 ], [ 103.740473660590325, 1.383216608608975 ], [ 103.735980896247852, 1.380605756659008 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "338" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.735980255476932, 1.396269780376608 ], [ 103.731487248318672, 1.398880258898422 ], [ 103.731487022768306, 1.404101598839894 ], [ 103.735979824276228, 1.406712461692381 ], [ 103.740472842590549, 1.404101975373771 ], [ 103.740473048240858, 1.398880634031573 ], [ 103.735980255476932, 1.396269780376608 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "339" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.735979607469844, 1.411933801998871 ], [ 103.731486569144153, 1.414544278019597 ], [ 103.731486341070337, 1.41976561725609 ], [ 103.73597917144491, 1.422376481904705 ], [ 103.740472221038019, 1.419765997992184 ], [ 103.740472428989136, 1.414544657354946 ], [ 103.735979607469844, 1.411933801998871 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "340" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.735978952226347, 1.427597821502311 ], [ 103.731485882399213, 1.430208295018007 ], [ 103.731485651801876, 1.435429633541691 ], [ 103.735978511377027, 1.438040499982549 ], [ 103.740471592582949, 1.435430018480056 ], [ 103.740471802834946, 1.430208678555609 ], [ 103.735978952226347, 1.427597821502311 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "341" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.735978289746228, 1.443261838863442 ], [ 103.73148518808361, 1.445872309870164 ], [ 103.731484954962667, 1.451093647673213 ], [ 103.735977844072323, 1.453704515902425 ], [ 103.740470957225085, 1.451094036813903 ], [ 103.740471169778033, 1.445872697610073 ], [ 103.735978289746228, 1.443261838863442 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "342" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.740481848862856, 1.153477342892665 ], [ 103.735989285593362, 1.156087867172886 ], [ 103.735989107371267, 1.161309217756638 ], [ 103.740481508868683, 1.163920045428109 ], [ 103.744974081513035, 1.161309514791133 ], [ 103.7449742432851, 1.156088162871539 ], [ 103.740481848862856, 1.153477342892665 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "343" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.740481337721732, 1.169141396405124 ], [ 103.735988748516093, 1.171751918342286 ], [ 103.735988567882984, 1.176973268342441 ], [ 103.740480993128116, 1.179584097773392 ], [ 103.744973591819928, 1.176973569384493 ], [ 103.74497375578045, 1.17175221804848 ], [ 103.740481337721732, 1.169141396405124 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "344" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.740480819681423, 1.184805448162903 ], [ 103.735988204205768, 1.187415967753066 ], [ 103.735988021161631, 1.192637317161793 ], [ 103.740480470488237, 1.195248148348329 ], [ 103.744973095561349, 1.192637622211443 ], [ 103.744973261710385, 1.187416271466845 ], [ 103.740480819681423, 1.184805448162903 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "345" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.740479224163423, 1.231797592673195 ], [ 103.735986527874658, 1.234408105198734 ], [ 103.735986337596941, 1.239629452786189 ], [ 103.740478861170772, 1.24224028921612 ], [ 103.744971567390934, 1.239629769858897 ], [ 103.744971740105868, 1.234408420935527 ], [ 103.740479224163423, 1.231797592673195 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "346" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.740478125985248, 1.263125679809246 ], [ 103.735985374151696, 1.265736187605343 ], [ 103.735985179051255, 1.270957533939459 ], [ 103.740477753792277, 1.273568373845525 ], [ 103.744970515779869, 1.270957859027764 ], [ 103.7449706928724, 1.265736511357703 ], [ 103.740478125985248, 1.263125679809246 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "347" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.740477000205573, 1.294453759362712 ], [ 103.735984191491639, 1.297064262413612 ], [ 103.735983991568176, 1.302285607463066 ], [ 103.740476618811741, 1.304896450829699 ], [ 103.744969437902355, 1.302285940567152 ], [ 103.744969619372739, 1.297064594181721 ], [ 103.740477000205573, 1.294453759362712 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "348" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.740476426964662, 1.310117796237246 ], [ 103.735983589309669, 1.312728296909639 ], [ 103.735983386974581, 1.317949641305016 ], [ 103.740476040970165, 1.320560486396096 ], [ 103.744968889113196, 1.317949978417063 ], [ 103.744969072772591, 1.312728632685693 ], [ 103.740476426964662, 1.310117796237246 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "349" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.740475846822733, 1.325781831145659 ], [ 103.735982979892739, 1.328392329435604 ], [ 103.73598277514597, 1.333613673169075 ], [ 103.740475456227472, 1.336224519980712 ], [ 103.744968333756816, 1.333614014289131 ], [ 103.744968519605322, 1.328392669219652 ], [ 103.740475846822733, 1.325781831145659 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "350" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.7404752597796, 1.341445864064461 ], [ 103.73598236324068, 1.344056359968019 ], [ 103.73598215608213, 1.349277703031753 ], [ 103.740474864583405, 1.351888551560056 ], [ 103.744967771833032, 1.349278048159867 ], [ 103.744967959870692, 1.344056703760108 ], [ 103.7404752597796, 1.341445864064461 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "351" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.740474665835038, 1.357109894970162 ], [ 103.735981739353221, 1.359720388483393 ], [ 103.735981529782833, 1.36494173086956 ], [ 103.740474266037765, 1.36755258111064 ], [ 103.744967203341616, 1.364942080005781 ], [ 103.744967393568515, 1.359720736283573 ], [ 103.740474665835038, 1.357109894970162 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "352" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.740474064988817, 1.372773923839273 ], [ 103.735981108230149, 1.375384414958237 ], [ 103.735980896247852, 1.380605756659008 ], [ 103.740473660590325, 1.383216608608975 ], [ 103.744966628282384, 1.380606109803385 ], [ 103.744966820698565, 1.375384766766556 ], [ 103.740474064988817, 1.372773923839273 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "353" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.740473457240739, 1.388437950648305 ], [ 103.735980469871237, 1.391048439369063 ], [ 103.735980255476932, 1.396269780376608 ], [ 103.740473048240858, 1.398880634031573 ], [ 103.744966046655094, 1.396270137529191 ], [ 103.744966241260641, 1.391048795185571 ], [ 103.740473457240739, 1.388437950648305 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "354" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.740472842590549, 1.404101975373771 ], [ 103.735979824276228, 1.406712461692381 ], [ 103.735979607469844, 1.411933801998871 ], [ 103.740472428989136, 1.414544657354946 ], [ 103.744965458459532, 1.411934163159711 ], [ 103.744965655254546, 1.40671282151713 ], [ 103.740472842590549, 1.404101975373771 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "355" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.740472221038019, 1.419765997992184 ], [ 103.73597917144491, 1.422376481904705 ], [ 103.735978952226347, 1.427597821502311 ], [ 103.740471802834946, 1.430208678555609 ], [ 103.744964863695515, 1.42759818667146 ], [ 103.744965062680038, 1.422376845737745 ], [ 103.740472221038019, 1.419765997992184 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "356" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.740471592582949, 1.435430018480056 ], [ 103.735978511377027, 1.438040499982549 ], [ 103.735978289746228, 1.443261838863442 ], [ 103.740471169778033, 1.445872697610073 ], [ 103.744964262362785, 1.443262208040951 ], [ 103.744964463536903, 1.438040867823932 ], [ 103.740471592582949, 1.435430018480056 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "357" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.744974081513035, 1.161309514791133 ], [ 103.740481508868683, 1.163920045428109 ], [ 103.740481337721732, 1.169141396405124 ], [ 103.74497375578045, 1.17175221804848 ], [ 103.749466337799674, 1.169141680974937 ], [ 103.749466492385309, 1.163920328726704 ], [ 103.744974081513035, 1.161309514791133 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "358" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.744972083347037, 1.22396572247214 ], [ 103.740479404509756, 1.226576244093187 ], [ 103.740479224163423, 1.231797592673195 ], [ 103.744971740105868, 1.234408420935527 ], [ 103.749464428763247, 1.231797892497966 ], [ 103.749464591658082, 1.226576542646685 ], [ 103.744972083347037, 1.22396572247214 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "359" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.744969437902355, 1.302285940567152 ], [ 103.740476618811741, 1.304896450829699 ], [ 103.740476426964662, 1.310117796237246 ], [ 103.744969072772591, 1.312728632685693 ], [ 103.749461902239929, 1.310118115131675 ], [ 103.749462075522615, 1.304896768452784 ], [ 103.744969437902355, 1.302285940567152 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "360" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.744968889113196, 1.317949978417063 ], [ 103.740476040970165, 1.320560486396096 ], [ 103.740475846822733, 1.325781831145659 ], [ 103.744968519605322, 1.328392669219652 ], [ 103.74946137823639, 1.325782153854154 ], [ 103.749461553596831, 1.320560807833231 ], [ 103.744968889113196, 1.317949978417063 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "361" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.744968333756816, 1.333614014289131 ], [ 103.740475456227472, 1.336224519980712 ], [ 103.7404752597796, 1.341445864064461 ], [ 103.744967959870692, 1.344056703760108 ], [ 103.74946084799943, 1.341446190587067 ], [ 103.749461025437682, 1.336224845231943 ], [ 103.744968333756816, 1.333614014289131 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "362" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.744967771833032, 1.349278048159867 ], [ 103.740474864583405, 1.351888551560056 ], [ 103.740474665835038, 1.357109894970162 ], [ 103.744967393568515, 1.359720736283573 ], [ 103.74946031152885, 1.357110225306926 ], [ 103.749460491045028, 1.351888880625429 ], [ 103.744967771833032, 1.349278048159867 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "363" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.744967203341616, 1.364942080005781 ], [ 103.740474266037765, 1.36755258111064 ], [ 103.740474064988817, 1.372773923839273 ], [ 103.744966820698565, 1.375384766766556 ], [ 103.749459768824494, 1.372774257990242 ], [ 103.749459950418611, 1.367552913990203 ], [ 103.744967203341616, 1.364942080005781 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "364" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.744966628282384, 1.380606109803385 ], [ 103.740473660590325, 1.383216608608975 ], [ 103.740473457240739, 1.388437950648305 ], [ 103.744966241260641, 1.391048795185571 ], [ 103.749459219886134, 1.388438288613526 ], [ 103.749459403558262, 1.383216945302774 ], [ 103.744966628282384, 1.380606109803385 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "365" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.744966046655094, 1.396270137529191 ], [ 103.740473048240858, 1.398880634031573 ], [ 103.740472842590549, 1.404101975373771 ], [ 103.744965655254546, 1.40671282151713 ], [ 103.749458664713558, 1.404102317153293 ], [ 103.749458850463768, 1.398880974539656 ], [ 103.744966046655094, 1.396270137529191 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "366" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.744965458459532, 1.411934163159711 ], [ 103.740472428989136, 1.414544657354946 ], [ 103.740472221038019, 1.419765997992184 ], [ 103.744965062680038, 1.422376845737745 ], [ 103.749458103306566, 1.419766343586054 ], [ 103.749458291134957, 1.414545001677362 ], [ 103.744965458459532, 1.411934163159711 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "367" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.744964863695515, 1.42759818667146 ], [ 103.740471802834946, 1.430208678555609 ], [ 103.740471592582949, 1.435430018480056 ], [ 103.744964463536903, 1.438040867823932 ], [ 103.749457535664959, 1.435430367888325 ], [ 103.749457725571574, 1.430209026692406 ], [ 103.744964863695515, 1.42759818667146 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "368" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.744964262362785, 1.443262208040951 ], [ 103.740471169778033, 1.445872697610073 ], [ 103.740470957225085, 1.451094036813903 ], [ 103.744963857824928, 1.453704887752204 ], [ 103.749456961788525, 1.451094390036619 ], [ 103.749457153773449, 1.445873049561301 ], [ 103.744964262362785, 1.443262208040951 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "369" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.749464915370325, 1.216133842331401 ], [ 103.744972253873271, 1.218744372933862 ], [ 103.744972083347037, 1.22396572247214 ], [ 103.749464591658082, 1.226576542646685 ], [ 103.753957262863949, 1.22396600524288 ], [ 103.753957416049943, 1.218744654497973 ], [ 103.749464915370325, 1.216133842331401 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "370" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.749464428763247, 1.231797892497966 ], [ 103.744971740105868, 1.234408420935527 ], [ 103.744971567390934, 1.239629769858897 ], [ 103.749464100896148, 1.242240591583449 ], [ 103.753956799373654, 1.239630056249554 ], [ 103.75395695452579, 1.234408706119541 ], [ 103.749464428763247, 1.231797892497966 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "371" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.749462931547583, 1.278790031811982 ], [ 103.744970159405938, 1.281400553731227 ], [ 103.744969980124509, 1.286621900762889 ], [ 103.749462591215249, 1.289232727114091 ], [ 103.753955373510976, 1.286622198013539 ], [ 103.753955534561868, 1.281400849775193 ], [ 103.749462931547583, 1.278790031811982 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "372" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.749462420010261, 1.294454074443121 ], [ 103.744969619372739, 1.297064594181721 ], [ 103.744969437902355, 1.302285940567152 ], [ 103.749462075522615, 1.304896768452784 ], [ 103.753954886425547, 1.302286241437884 ], [ 103.753955049442808, 1.297064893845755 ], [ 103.749462420010261, 1.294454074443121 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "373" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.749461902239929, 1.310118115131675 ], [ 103.744969072772591, 1.312728632685693 ], [ 103.744968889113196, 1.317949978417063 ], [ 103.749461553596831, 1.320560807833231 ], [ 103.753954393440878, 1.317950282907919 ], [ 103.753954558424581, 1.312728935969836 ], [ 103.749461902239929, 1.310118115131675 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "374" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.74946137823639, 1.325782153854154 ], [ 103.744968519605322, 1.328392669219652 ], [ 103.744968333756816, 1.333614014289131 ], [ 103.749461025437682, 1.336224845231943 ], [ 103.753953894556815, 1.333614322400155 ], [ 103.753954061507017, 1.328392976123948 ], [ 103.74946137823639, 1.325782153854154 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "375" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.74946084799943, 1.341446190587067 ], [ 103.744967959870692, 1.344056703760108 ], [ 103.744967771833032, 1.349278048159867 ], [ 103.749460491045028, 1.351888880625429 ], [ 103.753953389773145, 1.349278359891102 ], [ 103.753953558689886, 1.344057014284602 ], [ 103.74946084799943, 1.341446190587067 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "376" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.74946031152885, 1.357110225306926 ], [ 103.744967393568515, 1.359720736283573 ], [ 103.744967203341616, 1.364942080005781 ], [ 103.749459950418611, 1.367552913990203 ], [ 103.753952879089695, 1.364942395357272 ], [ 103.753953049973063, 1.359721050428307 ], [ 103.74946031152885, 1.357110225306926 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "377" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.749459768824494, 1.372774257990242 ], [ 103.744966820698565, 1.375384766766556 ], [ 103.744966628282384, 1.380606109803385 ], [ 103.749459403558262, 1.383216945302774 ], [ 103.753952362506283, 1.380606428775176 ], [ 103.753952535356305, 1.375385084531576 ], [ 103.749459768824494, 1.372774257990242 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "378" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.749459219886134, 1.388438288613526 ], [ 103.744966241260641, 1.391048795185571 ], [ 103.744966046655094, 1.396270137529191 ], [ 103.749458850463768, 1.398880974539656 ], [ 103.75395184002268, 1.396270460121328 ], [ 103.753952014839456, 1.391049116570922 ], [ 103.749459219886134, 1.388438288613526 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "379" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.749458664713558, 1.404102317153293 ], [ 103.744965655254546, 1.40671282151713 ], [ 103.744965458459532, 1.411934163159711 ], [ 103.749458291134957, 1.414545001677362 ], [ 103.753951311638744, 1.41193448937224 ], [ 103.753951488422331, 1.406713146522857 ], [ 103.749458664713558, 1.404102317153293 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "380" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.749458103306566, 1.419766343586054 ], [ 103.744965062680038, 1.422376845737745 ], [ 103.744964863695515, 1.42759818667146 ], [ 103.749457725571574, 1.430209026692406 ], [ 103.753950777354248, 1.427598516504427 ], [ 103.753950956104703, 1.422377174363895 ], [ 103.749458103306566, 1.419766343586054 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "381" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.749457535664959, 1.435430367888325 ], [ 103.744964463536903, 1.438040867823932 ], [ 103.744964262362785, 1.443262208040951 ], [ 103.749457153773449, 1.445873049561301 ], [ 103.753950237169008, 1.443262541494403 ], [ 103.753950417886401, 1.438041200070551 ], [ 103.749457535664959, 1.435430367888325 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "382" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.753958172149623, 1.192637897742472 ], [ 103.749465554485425, 1.195248439274293 ], [ 103.749465395745318, 1.200469790339712 ], [ 103.753957871675794, 1.203080601047385 ], [ 103.758450498826207, 1.200470052824379 ], [ 103.758450640559914, 1.195248700616985 ], [ 103.753958172149623, 1.192637897742472 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "383" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.753957262863949, 1.22396600524288 ], [ 103.749464591658082, 1.226576542646685 ], [ 103.749464428763247, 1.231797892497966 ], [ 103.75395695452579, 1.234408706119541 ], [ 103.758449635440499, 1.231798161834574 ], [ 103.758449780883808, 1.226576810841293 ], [ 103.753957262863949, 1.22396600524288 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "384" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.753955854697338, 1.270958152658375 ], [ 103.74946310067493, 1.273568683840643 ], [ 103.749462931547583, 1.278790031811982 ], [ 103.753955534561868, 1.281400849775193 ], [ 103.758448298627073, 1.27879031142679 ], [ 103.758448449635168, 1.273568962313411 ], [ 103.753955854697338, 1.270958152658375 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "385" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.753954886425547, 1.302286241437884 ], [ 103.749462075522615, 1.304896768452784 ], [ 103.749461902239929, 1.310118115131675 ], [ 103.753954558424581, 1.312728935969836 ], [ 103.758447379592937, 1.310118401598814 ], [ 103.758447534311202, 1.304897053777856 ], [ 103.753954886425547, 1.302286241437884 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "386" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.753954393440878, 1.317950282907919 ], [ 103.749461553596831, 1.320560807833231 ], [ 103.74946137823639, 1.325782153854154 ], [ 103.753954061507017, 1.328392976123948 ], [ 103.758446911727816, 1.325782443747519 ], [ 103.758447068301251, 1.320561096584516 ], [ 103.753954393440878, 1.317950282907919 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "387" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.753953894556815, 1.333614322400155 ], [ 103.749461025437682, 1.336224845231943 ], [ 103.74946084799943, 1.341446190587067 ], [ 103.753953558689886, 1.344057014284602 ], [ 103.758446438297099, 1.3414464839067 ], [ 103.758446596725761, 1.336225137409481 ], [ 103.753953894556815, 1.333614322400155 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "388" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.753953389773145, 1.349278359891102 ], [ 103.749460491045028, 1.351888880625429 ], [ 103.74946031152885, 1.357110225306926 ], [ 103.753953049973063, 1.359721050428307 ], [ 103.758445959300616, 1.357110522052868 ], [ 103.758446119584534, 1.351889176229263 ], [ 103.753953389773145, 1.349278359891102 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "389" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.753952879089695, 1.364942395357272 ], [ 103.749459950418611, 1.367552913990203 ], [ 103.749459768824494, 1.372774257990242 ], [ 103.753952535356305, 1.375385084531576 ], [ 103.758445474738153, 1.372774558162535 ], [ 103.758445636877425, 1.367553213020373 ], [ 103.753952879089695, 1.364942395357272 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "390" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.753952362506283, 1.380606428775176 ], [ 103.749459403558262, 1.383216945302774 ], [ 103.749459219886134, 1.388438288613526 ], [ 103.753952014839456, 1.391049116570922 ], [ 103.758444984609582, 1.388438592212213 ], [ 103.758445148604252, 1.383217247759325 ], [ 103.753952362506283, 1.380606428775176 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "391" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.75395184002268, 1.396270460121328 ], [ 103.749458850463768, 1.398880974539656 ], [ 103.749458664713558, 1.404102317153293 ], [ 103.753951488422331, 1.406713146522857 ], [ 103.758444488914691, 1.404102624178417 ], [ 103.758444654764816, 1.398881280422629 ], [ 103.75395184002268, 1.396270460121328 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "392" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.753951311638744, 1.41193448937224 ], [ 103.749458291134957, 1.414545001677362 ], [ 103.749458103306566, 1.419766343586054 ], [ 103.753950956104703, 1.422377174363895 ], [ 103.758443987653308, 1.419766654037659 ], [ 103.758444155358958, 1.414545310986801 ], [ 103.753951311638744, 1.41193448937224 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "393" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.753950777354248, 1.427598516504427 ], [ 103.749457725571574, 1.430209026692406 ], [ 103.749457535664959, 1.435430367888325 ], [ 103.753950417886401, 1.438041200070551 ], [ 103.758443480825235, 1.435430681766454 ], [ 103.758443650386454, 1.430209339428355 ], [ 103.753950777354248, 1.427598516504427 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "394" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.753950237169008, 1.443262541494403 ], [ 103.749457153773449, 1.445873049561301 ], [ 103.749456961788525, 1.451094390036619 ], [ 103.753949873767212, 1.453705223619338 ], [ 103.758442968430302, 1.451094707341317 ], [ 103.758443139847174, 1.445873365723805 ], [ 103.753950237169008, 1.443262541494403 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "395" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.758450922172571, 1.184805995605145 ], [ 103.753958321403516, 1.18741654579127 ], [ 103.753958172149623, 1.192637897742472 ], [ 103.758450640559914, 1.195248700616985 ], [ 103.762943250703898, 1.192638143754846 ], [ 103.762943383062648, 1.187416790726308 ], [ 103.758450922172571, 1.184805995605145 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "396" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.758450498826207, 1.200470052824379 ], [ 103.753957871675794, 1.203080601047385 ], [ 103.753957720455873, 1.208301952399355 ], [ 103.758450213504048, 1.210912756637767 ], [ 103.762942850140689, 1.208302201643759 ], [ 103.762942984242912, 1.203080849214441 ], [ 103.758450498826207, 1.200470052824379 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "397" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.758450069915568, 1.216134108242019 ], [ 103.753957416049943, 1.218744654497973 ], [ 103.753957262863949, 1.22396600524288 ], [ 103.758449780883808, 1.226576810841293 ], [ 103.762942444346962, 1.223966257719349 ], [ 103.762942580192714, 1.218744905897083 ], [ 103.758450069915568, 1.216134108242019 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "398" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.758449635440499, 1.231798161834574 ], [ 103.75395695452579, 1.234408706119541 ], [ 103.753956799373654, 1.239630056249554 ], [ 103.758449342699009, 1.242240863204071 ], [ 103.76294203332256, 1.239630311958123 ], [ 103.762942170911884, 1.234408960750739 ], [ 103.758449635440499, 1.231798161834574 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "399" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.758448298627073, 1.27879031142679 ], [ 103.753955534561868, 1.281400849775193 ], [ 103.753955373510976, 1.286622198013539 ], [ 103.758447994755798, 1.289233009012991 ], [ 103.762940768863771, 1.286622463418631 ], [ 103.76294091168414, 1.281401114102877 ], [ 103.758448298627073, 1.27879031142679 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "400" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.758447841892632, 1.294454357484074 ], [ 103.753955049442808, 1.297064893845755 ], [ 103.753954886425547, 1.302286241437884 ], [ 103.758447534311202, 1.304897053777856 ], [ 103.762940336915136, 1.302286510075225 ], [ 103.762940481479276, 1.297065161405675 ], [ 103.758447841892632, 1.294454357484074 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "401" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.758447379592937, 1.310118401598814 ], [ 103.753954558424581, 1.312728935969836 ], [ 103.753954393440878, 1.317950282907919 ], [ 103.758447068301251, 1.320561096584516 ], [ 103.762939899735045, 1.317950554777547 ], [ 103.762940046043028, 1.312729206762031 ], [ 103.758447379592937, 1.310118401598814 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "402" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.758446911727816, 1.325782443747519 ], [ 103.753954061507017, 1.328392976123948 ], [ 103.753953894556815, 1.333614322400155 ], [ 103.758446596725761, 1.336225137409481 ], [ 103.762939457323327, 1.333614597502109 ], [ 103.762939605375209, 1.328393250148456 ], [ 103.758446911727816, 1.325782443747519 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "403" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.758446438297099, 1.3414464839067 ], [ 103.753953558689886, 1.344057014284602 ], [ 103.753953389773145, 1.349278359891102 ], [ 103.758446119584534, 1.351889176229263 ], [ 103.762939009679855, 1.349278638225421 ], [ 103.762939159475664, 1.344057291541461 ], [ 103.758446438297099, 1.3414464839067 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "404" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.758445959300616, 1.357110522052868 ], [ 103.753953049973063, 1.359721050428307 ], [ 103.753952879089695, 1.364942395357272 ], [ 103.758445636877425, 1.367553213020373 ], [ 103.762938556804428, 1.364942676923995 ], [ 103.762938708344237, 1.359721330917558 ], [ 103.758445959300616, 1.357110522052868 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "405" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.758445474738153, 1.372774558162535 ], [ 103.753952535356305, 1.375385084531576 ], [ 103.753952362506283, 1.380606428775176 ], [ 103.758445148604252, 1.383217247759325 ], [ 103.762938098696878, 1.380606713574344 ], [ 103.762938251980756, 1.375385368253258 ], [ 103.758445474738153, 1.372774558162535 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "406" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.758444984609582, 1.388438592212213 ], [ 103.753952014839456, 1.391049116570922 ], [ 103.75395184002268, 1.396270460121328 ], [ 103.758444654764816, 1.398881280422629 ], [ 103.762937635357062, 1.396270748152981 ], [ 103.762937790385038, 1.391049403525075 ], [ 103.758444984609582, 1.388438592212213 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "407" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.758444488914691, 1.404102624178417 ], [ 103.753951488422331, 1.406713146522857 ], [ 103.753951311638744, 1.41193448937224 ], [ 103.758444155358958, 1.414545310986801 ], [ 103.762937166784795, 1.411934780636418 ], [ 103.76293732355694, 1.406713436709522 ], [ 103.758444488914691, 1.404102624178417 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "408" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.758443987653308, 1.419766654037659 ], [ 103.753950956104703, 1.422377174363895 ], [ 103.753950777354248, 1.427598516504427 ], [ 103.758443650386454, 1.430209339428355 ], [ 103.762936692979892, 1.427598811001172 ], [ 103.762936851496264, 1.422377467783113 ], [ 103.758443987653308, 1.419766654037659 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "409" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.758443480825235, 1.435430681766454 ], [ 103.753950417886401, 1.438041200070551 ], [ 103.753950237169008, 1.443262541494403 ], [ 103.758443139847174, 1.445873365723805 ], [ 103.762936213942197, 1.443262839223757 ], [ 103.762936374202866, 1.438041496722364 ], [ 103.758443480825235, 1.435430681766454 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "410" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.762943250703898, 1.192638143754846 ], [ 103.758450640559914, 1.195248700616985 ], [ 103.758450498826207, 1.200470052824379 ], [ 103.762942984242912, 1.203080849214441 ], [ 103.767435603761854, 1.200470285596473 ], [ 103.767435728489119, 1.195248932376371 ], [ 103.762943250703898, 1.192638143754846 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "411" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.762942850140689, 1.208302201643759 ], [ 103.758450213504048, 1.210912756637767 ], [ 103.758450069915568, 1.216134108242019 ], [ 103.762942580192714, 1.218744905897083 ], [ 103.767435226315612, 1.216134344052256 ], [ 103.767435352675108, 1.210912991435285 ], [ 103.762942850140689, 1.208302201643759 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "412" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.762942444346962, 1.223966257719349 ], [ 103.758449780883808, 1.226576810841293 ], [ 103.758449635440499, 1.231798161834574 ], [ 103.762942170911884, 1.234408960750739 ], [ 103.767434843972609, 1.231798400682987 ], [ 103.767434971964377, 1.226577048676977 ], [ 103.762942444346962, 1.223966257719349 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "413" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.76294203332256, 1.239630311958123 ], [ 103.758449342699009, 1.242240863204071 ], [ 103.758449195400829, 1.247462213578548 ], [ 103.762941756400281, 1.250073013751918 ], [ 103.767434456732687, 1.247462455465171 ], [ 103.767434586356771, 1.242241104077954 ], [ 103.76294203332256, 1.239630311958123 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "414" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.762941195581121, 1.270958414831256 ], [ 103.758448449635168, 1.273568962313411 ], [ 103.758448298627073, 1.27879031142679 ], [ 103.76294091168414, 1.281401114102877 ], [ 103.767433667561562, 1.278790559389937 ], [ 103.767433800450434, 1.273569209263795 ], [ 103.762941195581121, 1.270958414831256 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "415" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.762940768863771, 1.286622463418631 ], [ 103.758447994755798, 1.289233009012991 ], [ 103.758447841892632, 1.294454357484074 ], [ 103.762940481479276, 1.297065161405675 ], [ 103.767433265630075, 1.294454608485537 ], [ 103.76743340015139, 1.289233259001678 ], [ 103.762940768863771, 1.286622463418631 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "416" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.762940336915136, 1.302286510075225 ], [ 103.758447534311202, 1.304897053777856 ], [ 103.758447379592937, 1.310118401598814 ], [ 103.762940046043028, 1.312729206762031 ], [ 103.767432858801087, 1.310118655638627 ], [ 103.76743299495493, 1.304897306804881 ], [ 103.762940336915136, 1.302286510075225 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "417" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.762939899735045, 1.317950554777547 ], [ 103.758447068301251, 1.320561096584516 ], [ 103.758446911727816, 1.325782443747519 ], [ 103.762939605375209, 1.328393250148456 ], [ 103.767432447074455, 1.325782700825718 ], [ 103.767432584860856, 1.320561352649915 ], [ 103.762939899735045, 1.317950554777547 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "418" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.762939457323327, 1.333614597502109 ], [ 103.758446596725761, 1.336225137409481 ], [ 103.758446438297099, 1.3414464839067 ], [ 103.762939159475664, 1.344057291541461 ], [ 103.767432030450038, 1.341446744023322 ], [ 103.767432169869053, 1.336225396513292 ], [ 103.762939457323327, 1.333614597502109 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "419" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.762939009679855, 1.349278638225421 ], [ 103.758446119584534, 1.351889176229263 ], [ 103.758445959300616, 1.357110522052868 ], [ 103.762938708344237, 1.359721330917558 ], [ 103.76743160892768, 1.35711078520795 ], [ 103.767431749979352, 1.351889438371521 ], [ 103.762939009679855, 1.349278638225421 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "420" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.762938556804428, 1.364942676923995 ], [ 103.758445636877425, 1.367553213020373 ], [ 103.758445474738153, 1.372774558162535 ], [ 103.762938251980756, 1.375385368253258 ], [ 103.767431182507195, 1.372774824356114 ], [ 103.767431325191609, 1.367553478201116 ], [ 103.762938556804428, 1.364942676923995 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "421" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.762938098696878, 1.380606713574344 ], [ 103.758445148604252, 1.383217247759325 ], [ 103.758444984609582, 1.388438592212213 ], [ 103.762937790385038, 1.391049403525075 ], [ 103.767430751188485, 1.388438861444327 ], [ 103.767430895505655, 1.38321751597859 ], [ 103.762938098696878, 1.380606713574344 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "422" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.762937635357062, 1.396270748152981 ], [ 103.758444654764816, 1.398881280422629 ], [ 103.758444488914691, 1.404102624178417 ], [ 103.76293732355694, 1.406713436709522 ], [ 103.767430314971335, 1.404102896449104 ], [ 103.767430460921332, 1.398881551680455 ], [ 103.762937635357062, 1.396270748152981 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "423" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.762937166784795, 1.411934780636418 ], [ 103.758444155358958, 1.414545310986801 ], [ 103.758443987653308, 1.419766654037659 ], [ 103.762936851496264, 1.422377467783113 ], [ 103.767429873855619, 1.419766929346958 ], [ 103.767430021438486, 1.414545585283226 ], [ 103.762937166784795, 1.411934780636418 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "424" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.762936692979892, 1.427598811001172 ], [ 103.758443650386454, 1.430209339428355 ], [ 103.758443480825235, 1.435430681766454 ], [ 103.762936374202866, 1.438041496722364 ], [ 103.767429427841151, 1.435430960114405 ], [ 103.767429577056944, 1.430209616763418 ], [ 103.762936692979892, 1.427598811001172 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "425" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.762936213942197, 1.443262839223757 ], [ 103.758443139847174, 1.445873365723805 ], [ 103.758442968430302, 1.451094707341317 ], [ 103.762935891676548, 1.453705523503789 ], [ 103.767428976927775, 1.451094988727959 ], [ 103.767429127776566, 1.445873646097545 ], [ 103.762936213942197, 1.443262839223757 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "426" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.767435976311475, 1.184806225339129 ], [ 103.762943383062648, 1.187416790726308 ], [ 103.762943250703898, 1.192638143754846 ], [ 103.767435728489119, 1.195248932376371 ], [ 103.771928331001618, 1.192638360248534 ], [ 103.771928446465211, 1.187417006271929 ], [ 103.767435976311475, 1.184806225339129 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "427" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.767435603761854, 1.200470285596473 ], [ 103.762942984242912, 1.203080849214441 ], [ 103.762942850140689, 1.208302201643759 ], [ 103.767435352675108, 1.210912991435285 ], [ 103.771927981569007, 1.20830242098167 ], [ 103.771928098553531, 1.203081067604275 ], [ 103.767435603761854, 1.200470285596473 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "428" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.767435226315612, 1.216134344052256 ], [ 103.762942580192714, 1.218744905897083 ], [ 103.762942444346962, 1.223966257719349 ], [ 103.767434971964377, 1.226577048676977 ], [ 103.771927627573547, 1.223966479901514 ], [ 103.771927746079029, 1.21874512713116 ], [ 103.767435226315612, 1.216134344052256 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "429" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.767434843972609, 1.231798400682987 ], [ 103.762942170911884, 1.234408960750739 ], [ 103.76294203332256, 1.239630311958123 ], [ 103.767434586356771, 1.242241104077954 ], [ 103.771927269015066, 1.239630536984574 ], [ 103.771927389041565, 1.234409184829091 ], [ 103.767434843972609, 1.231798400682987 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "430" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.767434064595733, 1.263126508375318 ], [ 103.762941336657747, 1.265737064877128 ], [ 103.762941195581121, 1.270958414831256 ], [ 103.767433800450434, 1.273569209263795 ], [ 103.771926538208604, 1.270958645546374 ], [ 103.771926661277263, 1.265737294644126 ], [ 103.767434064595733, 1.263126508375318 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "431" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.767433667561562, 1.278790559389937 ], [ 103.76294091168414, 1.281401114102877 ], [ 103.762940768863771, 1.286622463418631 ], [ 103.76743340015139, 1.289233259001678 ], [ 103.771926165960338, 1.286622696978132 ], [ 103.771926290550155, 1.281401346714247 ], [ 103.767433667561562, 1.278790559389937 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "432" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.767433265630075, 1.294454608485537 ], [ 103.762940481479276, 1.297065161405675 ], [ 103.762940336915136, 1.302286510075225 ], [ 103.76743299495493, 1.304897306804881 ], [ 103.77192578914854, 1.302286746479142 ], [ 103.771925915259544, 1.297065396861449 ], [ 103.767433265630075, 1.294454608485537 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "433" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.767432858801087, 1.310118655638627 ], [ 103.762940046043028, 1.312729206762031 ], [ 103.762939899735045, 1.317950554777547 ], [ 103.767432584860856, 1.320561352649915 ], [ 103.771925407773068, 1.317950794025914 ], [ 103.771925535405316, 1.312729445062244 ], [ 103.767432858801087, 1.310118655638627 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "434" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.767432447074455, 1.325782700825718 ], [ 103.762939605375209, 1.328393250148456 ], [ 103.762939457323327, 1.333614597502109 ], [ 103.767432169869053, 1.336225396513292 ], [ 103.771925021833781, 1.333614839594959 ], [ 103.771925150987315, 1.328393491293141 ], [ 103.767432447074455, 1.325782700825718 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "435" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.767432030450038, 1.341446744023322 ], [ 103.762939159475664, 1.344057291541461 ], [ 103.762939009679855, 1.349278638225421 ], [ 103.767431749979352, 1.351889438371521 ], [ 103.771924631330535, 1.349278883162789 ], [ 103.771924762005398, 1.344057535530653 ], [ 103.767432030450038, 1.341446744023322 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "436" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.76743160892768, 1.35711078520795 ], [ 103.762938708344237, 1.359721330917558 ], [ 103.762938556804428, 1.364942676923995 ], [ 103.767431325191609, 1.367553478201116 ], [ 103.771924236263189, 1.364942924705915 ], [ 103.771924368459437, 1.35972157775129 ], [ 103.76743160892768, 1.35711078520795 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "437" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.767431182507195, 1.372774824356114 ], [ 103.762938251980756, 1.375385368253258 ], [ 103.762938098696878, 1.380606713574344 ], [ 103.767430895505655, 1.38321751597859 ], [ 103.771923836631586, 1.380606964200852 ], [ 103.771923970349263, 1.375385617931566 ], [ 103.767431182507195, 1.372774824356114 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "438" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.767430751188485, 1.388438861444327 ], [ 103.762937790385038, 1.391049403525075 ], [ 103.762937635357062, 1.396270748152981 ], [ 103.767430460921332, 1.398881551680455 ], [ 103.771923432435585, 1.396271001624112 ], [ 103.771923567674747, 1.391049656047995 ], [ 103.767430751188485, 1.388438861444327 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "439" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.767430314971335, 1.404102896449104 ], [ 103.76293732355694, 1.406713436709522 ], [ 103.762937166784795, 1.411934780636418 ], [ 103.767430021438486, 1.414545585283226 ], [ 103.771923023675043, 1.41193503695221 ], [ 103.771923160435747, 1.40671369207709 ], [ 103.767430314971335, 1.404102896449104 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "440" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.767429873855619, 1.419766929346958 ], [ 103.762936851496264, 1.422377467783113 ], [ 103.762936692979892, 1.427598811001172 ], [ 103.767429577056944, 1.430209616763418 ], [ 103.771922610349804, 1.427599070161659 ], [ 103.771922748632093, 1.422377725995364 ], [ 103.767429873855619, 1.419766929346958 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "441" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.767429427841151, 1.435430960114405 ], [ 103.762936374202866, 1.438041496722364 ], [ 103.762936213942197, 1.443262839223757 ], [ 103.767429127776566, 1.445873646097545 ], [ 103.771922192459712, 1.443263101228977 ], [ 103.771922332263628, 1.438041757779336 ], [ 103.767429427841151, 1.435430960114405 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "442" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.767428976927775, 1.451094988727959 ], [ 103.762935891676548, 1.453705523503789 ], [ 103.762935729671526, 1.458926865280688 ], [ 103.767428673597166, 1.461537673262124 ], [ 103.771921770004624, 1.458927130130678 ], [ 103.771921911330224, 1.453705787405518 ], [ 103.767428976927775, 1.451094988727959 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "443" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.771928331001618, 1.192638360248534 ], [ 103.767435728489119, 1.195248932376371 ], [ 103.767435603761854, 1.200470285596473 ], [ 103.771928098553531, 1.203081067604275 ], [ 103.776420710329717, 1.200470488655964 ], [ 103.776420818050539, 1.195249134552425 ], [ 103.771928331001618, 1.192638360248534 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "444" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.771927981569007, 1.20830242098167 ], [ 103.767435352675108, 1.210912991435285 ], [ 103.767435226315612, 1.216134344052256 ], [ 103.771927746079029, 1.21874512713116 ], [ 103.776420384347915, 1.216134549762081 ], [ 103.776420493478412, 1.210913196261663 ], [ 103.771927981569007, 1.20830242098167 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "445" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.771927627573547, 1.223966479901514 ], [ 103.767434971964377, 1.226577048676977 ], [ 103.767434843972609, 1.231798400682987 ], [ 103.771927389041565, 1.234409184829091 ], [ 103.77642005413702, 1.231798609043175 ], [ 103.776420164677219, 1.226577256153707 ], [ 103.771927627573547, 1.223966479901514 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "446" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.771926538208604, 1.270958645546374 ], [ 103.767433800450434, 1.273569209263795 ], [ 103.767433667561562, 1.278790559389937 ], [ 103.771926290550155, 1.281401346714247 ], [ 103.776419038128537, 1.278790775701394 ], [ 103.776419152898129, 1.273569424691764 ], [ 103.771926538208604, 1.270958645546374 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "447" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.771926165960338, 1.286622696978132 ], [ 103.76743340015139, 1.289233259001678 ], [ 103.767433265630075, 1.294454608485537 ], [ 103.771925915259544, 1.297065396861449 ], [ 103.776418691000018, 1.294454827447477 ], [ 103.776418807179482, 1.28923347708012 ], [ 103.771926165960338, 1.286622696978132 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "448" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.77192578914854, 1.302286746479142 ], [ 103.76743299495493, 1.304897306804881 ], [ 103.767432858801087, 1.310118655638627 ], [ 103.771925535405316, 1.312729445062244 ], [ 103.776418339641779, 1.310118877251082 ], [ 103.776418457231159, 1.304897527533828 ], [ 103.77192578914854, 1.302286746479142 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "449" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.771925407773068, 1.317950794025914 ], [ 103.767432584860856, 1.320561352649915 ], [ 103.767432447074455, 1.325782700825718 ], [ 103.771925150987315, 1.328393491293141 ], [ 103.776417984053694, 1.325782925088719 ], [ 103.776418103053047, 1.320561576029398 ], [ 103.771925407773068, 1.317950794025914 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "450" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.771925021833781, 1.333614839594959 ], [ 103.767432169869053, 1.336225396513292 ], [ 103.767432030450038, 1.341446744023322 ], [ 103.771924762005398, 1.344057535530653 ], [ 103.77641762423562, 1.341446970936901 ], [ 103.776417744644988, 1.336225622543341 ], [ 103.771925021833781, 1.333614839594959 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "451" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.771924631330535, 1.349278883162789 ], [ 103.767431749979352, 1.351889438371521 ], [ 103.76743160892768, 1.35711078520795 ], [ 103.771924368459437, 1.35972157775129 ], [ 103.776417260187444, 1.35711101477214 ], [ 103.776417382006855, 1.35188966705217 ], [ 103.771924631330535, 1.349278883162789 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "452" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.771924236263189, 1.364942924705915 ], [ 103.767431325191609, 1.367553478201116 ], [ 103.767431182507195, 1.372774824356114 ], [ 103.771923970349263, 1.375385617931566 ], [ 103.776416891909008, 1.372775056570947 ], [ 103.77641701513852, 1.367553709532398 ], [ 103.771924236263189, 1.364942924705915 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "453" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.771923836631586, 1.380606964200852 ], [ 103.767430895505655, 1.38321751597859 ], [ 103.767430751188485, 1.388438861444327 ], [ 103.771923567674747, 1.391049656047995 ], [ 103.776416519400186, 1.388439096309837 ], [ 103.776416644039841, 1.383217749960536 ], [ 103.771923836631586, 1.380606964200852 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "454" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.771923432435585, 1.396271001624112 ], [ 103.767430460921332, 1.398881551680455 ], [ 103.767430314971335, 1.404102896449104 ], [ 103.771923160435747, 1.40671369207709 ], [ 103.776416142660835, 1.404103133965323 ], [ 103.77641626871069, 1.3988817883131 ], [ 103.771923432435585, 1.396271001624112 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "455" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.771923023675043, 1.41193503695221 ], [ 103.767430021438486, 1.414545585283226 ], [ 103.767429873855619, 1.419766929346958 ], [ 103.771922748632093, 1.422377725995364 ], [ 103.776415761690828, 1.41976716951392 ], [ 103.776415889150925, 1.414545824566602 ], [ 103.771923023675043, 1.41193503695221 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "456" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.771922610349804, 1.427599070161659 ], [ 103.767429577056944, 1.430209616763418 ], [ 103.767429427841151, 1.435430960114405 ], [ 103.771922332263628, 1.438041757779336 ], [ 103.776415376490021, 1.435431202932143 ], [ 103.77641550536039, 1.43020985869756 ], [ 103.771922610349804, 1.427599070161659 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "457" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.771922192459712, 1.443263101228977 ], [ 103.767429127776566, 1.445873646097545 ], [ 103.767428976927775, 1.451094988727959 ], [ 103.771921911330224, 1.453705787405518 ], [ 103.77641498705826, 1.451095234196509 ], [ 103.776415117338956, 1.445873890682488 ], [ 103.771922192459712, 1.443263101228977 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "458" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.776421032082538, 1.184806425748316 ], [ 103.771928446465211, 1.187417006271929 ], [ 103.771928331001618, 1.192638360248534 ], [ 103.776420818050539, 1.195249134552425 ], [ 103.780913412820283, 1.192638547223511 ], [ 103.780913511388675, 1.187417192428107 ], [ 103.776421032082538, 1.184806425748316 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "459" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.776420710329717, 1.200470488655964 ], [ 103.771928098553531, 1.203081067604275 ], [ 103.771927981569007, 1.20830242098167 ], [ 103.776420493478412, 1.210913196261663 ], [ 103.780913114518299, 1.208302610413062 ], [ 103.780913214385095, 1.203081256216859 ], [ 103.776420710329717, 1.200470488655964 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "460" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.776420384347915, 1.216134549762081 ], [ 103.771927746079029, 1.21874512713116 ], [ 103.771927627573547, 1.223966479901514 ], [ 103.776420164677219, 1.226577256153707 ], [ 103.78091281232112, 1.223966671789349 ], [ 103.780912913486318, 1.218745318200177 ], [ 103.776420384347915, 1.216134549762081 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "461" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.776419381027452, 1.263126722036322 ], [ 103.771926661277263, 1.265737294644126 ], [ 103.771926538208604, 1.270958645546374 ], [ 103.776419152898129, 1.273569424691764 ], [ 103.780911882357231, 1.270958844803702 ], [ 103.780911987417895, 1.265737493082609 ], [ 103.776419381027452, 1.263126722036322 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "462" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.776419038128537, 1.278790775701394 ], [ 103.771926290550155, 1.281401346714247 ], [ 103.771926165960338, 1.286622696978132 ], [ 103.776418807179482, 1.28923347708012 ], [ 103.780911564578091, 1.286622898692014 ], [ 103.780911670937314, 1.281401547609274 ], [ 103.776419038128537, 1.278790775701394 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "463" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.776418691000018, 1.294454827447477 ], [ 103.771925915259544, 1.297065396861449 ], [ 103.77192578914854, 1.302286746479142 ], [ 103.776418457231159, 1.304897527533828 ], [ 103.780911242903187, 1.302286950649606 ], [ 103.780911350561027, 1.297065600213049 ], [ 103.776418691000018, 1.294454827447477 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "464" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.776418339641779, 1.310118877251082 ], [ 103.771925535405316, 1.312729445062244 ], [ 103.771925407773068, 1.317950794025914 ], [ 103.776418103053047, 1.320561576029398 ], [ 103.780910917332378, 1.317951000652989 ], [ 103.780911026288862, 1.312729650870446 ], [ 103.776418339641779, 1.310118877251082 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "465" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.776417984053694, 1.325782925088719 ], [ 103.771925150987315, 1.328393491293141 ], [ 103.771925021833781, 1.333614839594959 ], [ 103.776417744644988, 1.336225622543341 ], [ 103.780910587865549, 1.333615048678675 ], [ 103.780910698120721, 1.328393699557974 ], [ 103.776417984053694, 1.325782925088719 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "466" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.77641762423562, 1.341446970936901 ], [ 103.771924762005398, 1.344057535530653 ], [ 103.771924631330535, 1.349278883162789 ], [ 103.776417382006855, 1.35188966705217 ], [ 103.780910254502587, 1.349279094703176 ], [ 103.780910366056489, 1.344057746252146 ], [ 103.77641762423562, 1.341446970936901 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "467" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.776417260187444, 1.35711101477214 ], [ 103.771924368459437, 1.35972157775129 ], [ 103.771924236263189, 1.364942924705915 ], [ 103.77641701513852, 1.367553709532398 ], [ 103.780909917243363, 1.364943138703003 ], [ 103.780910030096024, 1.359721790929474 ], [ 103.776417260187444, 1.35711101477214 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "468" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.776416891909008, 1.372775056570947 ], [ 103.771923970349263, 1.375385617931566 ], [ 103.771923836631586, 1.380606964200852 ], [ 103.776416644039841, 1.383217749960536 ], [ 103.780909576087751, 1.38060718065467 ], [ 103.780909690239227, 1.375385833566471 ], [ 103.776416891909008, 1.372775056570947 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "469" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.776416519400186, 1.388439096309837 ], [ 103.771923567674747, 1.391049656047995 ], [ 103.771923432435585, 1.396271001624112 ], [ 103.77641626871069, 1.3988817883131 ], [ 103.780909231035636, 1.396271220534692 ], [ 103.78090934648597, 1.391049874139651 ], [ 103.776416519400186, 1.388439096309837 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "470" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.776416142660835, 1.404103133965323 ], [ 103.771923160435747, 1.40671369207709 ], [ 103.771923023675043, 1.41193503695221 ], [ 103.776415889150925, 1.414545824566602 ], [ 103.780908882086862, 1.411935258319582 ], [ 103.780908998836097, 1.406713912625528 ], [ 103.776416142660835, 1.404103133965323 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "471" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.776415761690828, 1.41976716951392 ], [ 103.771922748632093, 1.422377725995364 ], [ 103.771922610349804, 1.427599070161659 ], [ 103.77641550536039, 1.43020985869756 ], [ 103.780908529241344, 1.427599293985856 ], [ 103.780908647289507, 1.422377949000616 ], [ 103.776415761690828, 1.41976716951392 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "472" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.776415376490021, 1.435431202932143 ], [ 103.771922332263628, 1.438041757779336 ], [ 103.771922192459712, 1.443263101228977 ], [ 103.776415117338956, 1.445873890682488 ], [ 103.780908172498911, 1.44326332751003 ], [ 103.78090829184606, 1.438041983241433 ], [ 103.776415376490021, 1.435431202932143 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "473" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.77641498705826, 1.451095234196509 ], [ 103.771921911330224, 1.453705787405518 ], [ 103.771921770004624, 1.458927130130678 ], [ 103.776414725086497, 1.461537920497902 ], [ 103.78090781185945, 1.458927358868619 ], [ 103.780907932505613, 1.453706015324493 ], [ 103.77641498705826, 1.451095234196509 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "474" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.780913412820283, 1.192638547223511 ], [ 103.776420818050539, 1.195249134552425 ], [ 103.776420710329717, 1.200470488655964 ], [ 103.780913214385095, 1.203081256216859 ], [ 103.78540581830724, 1.200470662002829 ], [ 103.785405909021605, 1.19524930714512 ], [ 103.780913412820283, 1.192638547223511 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "475" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.780913114518299, 1.208302610413062 ], [ 103.776420493478412, 1.210913196261663 ], [ 103.776420384347915, 1.216134549762081 ], [ 103.780912913486318, 1.218745318200177 ], [ 103.785405543789921, 1.21613472537147 ], [ 103.785405635691404, 1.210913371116874 ], [ 103.780913114518299, 1.208302610413062 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "476" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.78091281232112, 1.223966671789349 ], [ 103.776420164677219, 1.226577256153707 ], [ 103.77642005413702, 1.231798609043175 ], [ 103.780912608692276, 1.23440937835457 ], [ 103.785405265711177, 1.231798786915113 ], [ 103.785405358799807, 1.22657743327146 ], [ 103.78091281232112, 1.223966671789349 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "477" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.780912196240692, 1.25529478900816 ], [ 103.776419494387213, 1.25790537039225 ], [ 103.776419381027452, 1.263126722036322 ], [ 103.780911987417895, 1.265737493082609 ], [ 103.785404698868987, 1.263126904433435 ], [ 103.785404794332038, 1.25790555203516 ], [ 103.780912196240692, 1.25529478900816 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "478" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.780911882357231, 1.270958844803702 ], [ 103.776419152898129, 1.273569424691764 ], [ 103.776419038128537, 1.278790775701394 ], [ 103.780911670937314, 1.281401547609274 ], [ 103.785404410105357, 1.278790960361133 ], [ 103.785404506755654, 1.273569608597292 ], [ 103.780911882357231, 1.270958844803702 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "479" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.780911564578091, 1.286622898692014 ], [ 103.776418807179482, 1.28923347708012 ], [ 103.776418691000018, 1.294454827447477 ], [ 103.780911350561027, 1.297065600213049 ], [ 103.785404117779876, 1.294455014369869 ], [ 103.785404215617461, 1.289233663248292 ], [ 103.780911564578091, 1.286622898692014 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "480" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.780911242903187, 1.302286950649606 ], [ 103.776418457231159, 1.304897527533828 ], [ 103.776418339641779, 1.310118877251082 ], [ 103.780911026288862, 1.312729650870446 ], [ 103.78540382189243, 1.310119066436152 ], [ 103.785403920917361, 1.304897715964669 ], [ 103.780911242903187, 1.302286950649606 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "481" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.780910917332378, 1.317951000652989 ], [ 103.776418103053047, 1.320561576029398 ], [ 103.776417984053694, 1.325782925088719 ], [ 103.780910698120721, 1.328393699557974 ], [ 103.78540352244292, 1.325783116536496 ], [ 103.78540362265521, 1.320561766722936 ], [ 103.780910917332378, 1.317951000652989 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "482" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.780910587865549, 1.333615048678675 ], [ 103.776417744644988, 1.336225622543341 ], [ 103.77641762423562, 1.341446970936901 ], [ 103.780910366056489, 1.344057746252146 ], [ 103.785403219431245, 1.341447164647411 ], [ 103.785403320830952, 1.336225815499603 ], [ 103.780910587865549, 1.333615048678675 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "483" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.780910254502587, 1.349279094703176 ], [ 103.776417382006855, 1.35188966705217 ], [ 103.776417260187444, 1.35711101477214 ], [ 103.780910030096024, 1.359721790929474 ], [ 103.785402912857293, 1.35711121074541 ], [ 103.78540301544443, 1.351889862271184 ], [ 103.780910254502587, 1.349279094703176 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "484" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.780909917243363, 1.364943138703003 ], [ 103.77641701513852, 1.367553709532398 ], [ 103.776416891909008, 1.372775056570947 ], [ 103.780909690239227, 1.375385833566471 ], [ 103.785402602720936, 1.372775254807005 ], [ 103.785402706495546, 1.36755390701419 ], [ 103.780909917243363, 1.364943138703003 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "485" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.780909576087751, 1.38060718065467 ], [ 103.776416644039841, 1.383217749960536 ], [ 103.776416519400186, 1.388439096309837 ], [ 103.78090934648597, 1.391049874139651 ], [ 103.785402289022059, 1.388439296808711 ], [ 103.785402393984199, 1.383217949705136 ], [ 103.780909576087751, 1.38060718065467 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "486" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.780909231035636, 1.396271220534692 ], [ 103.77641626871069, 1.3988817883131 ], [ 103.776416142660835, 1.404103133965323 ], [ 103.780908998836097, 1.406713912625528 ], [ 103.785401971760564, 1.404103336727043 ], [ 103.785402077910248, 1.398881990320535 ], [ 103.780909231035636, 1.396271220534692 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "487" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.780908882086862, 1.411935258319582 ], [ 103.776415889150925, 1.414545824566602 ], [ 103.776415761690828, 1.41976716951392 ], [ 103.780908647289507, 1.422377949000616 ], [ 103.785401650936322, 1.419767374538513 ], [ 103.785401758273608, 1.414546028836902 ], [ 103.780908882086862, 1.411935258319582 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "488" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.780908529241344, 1.427599293985856 ], [ 103.77641550536039, 1.43020985869756 ], [ 103.776415376490021, 1.435431202932143 ], [ 103.78090829184606, 1.438041983241433 ], [ 103.78540132654922, 1.43543141021964 ], [ 103.785401435074135, 1.430210065230752 ], [ 103.780908529241344, 1.427599293985856 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "489" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.780908172498911, 1.44326332751003 ], [ 103.776415117338956, 1.445873890682488 ], [ 103.77641498705826, 1.451095234196509 ], [ 103.780907932505613, 1.453706015324493 ], [ 103.785400998599115, 1.451095443746938 ], [ 103.785401108311717, 1.445874099478603 ], [ 103.780908172498911, 1.44326332751003 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "490" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.78540581830724, 1.200470662002829 ], [ 103.780913214385095, 1.203081256216859 ], [ 103.780913114518299, 1.208302610413062 ], [ 103.785405635691404, 1.210913371116874 ], [ 103.789898248765979, 1.208302769937912 ], [ 103.789898331515033, 1.20308141505217 ], [ 103.78540581830724, 1.200470662002829 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "491" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.785404984070894, 1.247462846610265 ], [ 103.780912300002825, 1.250073436656544 ], [ 103.780912196240692, 1.25529478900816 ], [ 103.785404794332038, 1.25790555203516 ], [ 103.789897487886435, 1.255294954738972 ], [ 103.789897573863144, 1.250073601697794 ], [ 103.785404984070894, 1.247462846610265 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "492" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.785404698868987, 1.263126904433435 ], [ 103.780911987417895, 1.265737493082609 ], [ 103.780911882357231, 1.270958844803702 ], [ 103.785404506755654, 1.273569608597292 ], [ 103.789897227804403, 1.270959012603214 ], [ 103.789897314857058, 1.265737660192552 ], [ 103.785404698868987, 1.263126904433435 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "493" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.785404410105357, 1.278790960361133 ], [ 103.780911670937314, 1.281401547609274 ], [ 103.780911564578091, 1.286622898692014 ], [ 103.785404215617461, 1.289233663248292 ], [ 103.789896964494432, 1.286623068560251 ], [ 103.78989705262309, 1.281401716787933 ], [ 103.785404410105357, 1.278790960361133 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "494" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.785404117779876, 1.294455014369869 ], [ 103.780911350561027, 1.297065600213049 ], [ 103.780911242903187, 1.302286950649606 ], [ 103.785403920917361, 1.304897715964669 ], [ 103.789896697956436, 1.302287122586592 ], [ 103.789896787161112, 1.29706577146045 ], [ 103.785404117779876, 1.294455014369869 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "495" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.78540382189243, 1.310119066436152 ], [ 103.780911026288862, 1.312729650870446 ], [ 103.780910917332378, 1.317951000652989 ], [ 103.78540362265521, 1.320561766722936 ], [ 103.789896428190346, 1.317951174658748 ], [ 103.789896518471068, 1.312729824186611 ], [ 103.78540382189243, 1.310119066436152 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "496" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.78540352244292, 1.325783116536496 ], [ 103.780910698120721, 1.328393699557974 ], [ 103.780910587865549, 1.333615048678675 ], [ 103.785403320830952, 1.336225815499603 ], [ 103.789896155196033, 1.333615224753232 ], [ 103.789896246552843, 1.328393874942928 ], [ 103.78540352244292, 1.325783116536496 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "497" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.785403219431245, 1.341447164647411 ], [ 103.780910366056489, 1.344057746252146 ], [ 103.780910254502587, 1.349279094703176 ], [ 103.78540301544443, 1.351889862271184 ], [ 103.789895878973397, 1.349279272846555 ], [ 103.789895971406324, 1.344057923705915 ], [ 103.785403219431245, 1.341447164647411 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "498" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.785402912857293, 1.35711121074541 ], [ 103.780910030096024, 1.359721790929474 ], [ 103.780909917243363, 1.364943138703003 ], [ 103.785402706495546, 1.36755390701419 ], [ 103.789895599522339, 1.36494331891523 ], [ 103.789895693031411, 1.359721970452083 ], [ 103.785402912857293, 1.35711121074541 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "499" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.785402602720936, 1.372775254807005 ], [ 103.780909690239227, 1.375385833566471 ], [ 103.780909576087751, 1.38060718065467 ], [ 103.785402393984199, 1.383217949705136 ], [ 103.78989531684276, 1.380607362935772 ], [ 103.78989541142802, 1.375386015157945 ], [ 103.785402602720936, 1.372775254807005 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "500" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.785402289022059, 1.388439296808711 ], [ 103.78090934648597, 1.391049874139651 ], [ 103.780909231035636, 1.396271220534692 ], [ 103.785402077910248, 1.398881990320535 ], [ 103.789895030934559, 1.396271404884693 ], [ 103.789895126596036, 1.391050057800016 ], [ 103.785402289022059, 1.388439296808711 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "501" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.785401971760564, 1.404103336727043 ], [ 103.780908998836097, 1.406713912625528 ], [ 103.780908882086862, 1.411935258319582 ], [ 103.785401758273608, 1.414546028836902 ], [ 103.789894741797625, 1.411935444738509 ], [ 103.789894838535346, 1.40671409835481 ], [ 103.785401971760564, 1.404103336727043 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "502" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.785401650936322, 1.419767374538513 ], [ 103.780908647289507, 1.422377949000616 ], [ 103.780908529241344, 1.427599293985856 ], [ 103.785401435074135, 1.430210065230752 ], [ 103.789894449431841, 1.427599482473736 ], [ 103.789894547245865, 1.422378136798842 ], [ 103.785401650936322, 1.419767374538513 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "503" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.78540132654922, 1.43543141021964 ], [ 103.78090829184606, 1.438041983241433 ], [ 103.780908172498911, 1.44326332751003 ], [ 103.785401108311717, 1.445874099478603 ], [ 103.789894153837096, 1.443263518066888 ], [ 103.78989425272745, 1.438042173108629 ], [ 103.78540132654922, 1.43543141021964 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "504" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.785400998599115, 1.451095443746938 ], [ 103.780907932505613, 1.453706015324493 ], [ 103.78090781185945, 1.458927358868619 ], [ 103.785400777986226, 1.461538131556969 ], [ 103.789893855013318, 1.458927551494484 ], [ 103.789893954980045, 1.453706207260686 ], [ 103.785400998599115, 1.451095443746938 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "505" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.789898248765979, 1.208302769937912 ], [ 103.785405635691404, 1.210913371116874 ], [ 103.785405543789921, 1.21613472537147 ], [ 103.789898082192039, 1.218745479104112 ], [ 103.794390704419058, 1.216134870880401 ], [ 103.794390779091529, 1.210913516000898 ], [ 103.789898248765979, 1.208302769937912 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "506" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.789897487886435, 1.255294954738972 ], [ 103.785404794332038, 1.25790555203516 ], [ 103.785404698868987, 1.263126904433435 ], [ 103.789897314857058, 1.265737660192552 ], [ 103.794390017897783, 1.263127055566635 ], [ 103.794390095464124, 1.257905702543432 ], [ 103.789897487886435, 1.255294954738972 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "507" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.789897227804403, 1.270959012603214 ], [ 103.785404506755654, 1.273569608597292 ], [ 103.785404410105357, 1.278790960361133 ], [ 103.78989705262309, 1.281401716787933 ], [ 103.794389783269452, 1.278791113369132 ], [ 103.794389861800454, 1.273569760980355 ], [ 103.789897227804403, 1.270959012603214 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "508" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.789896964494432, 1.286623068560251 ], [ 103.785404215617461, 1.289233663248292 ], [ 103.785404117779876, 1.294455014369869 ], [ 103.789896787161112, 1.29706577146045 ], [ 103.794389545747038, 1.294455169252688 ], [ 103.794389625242744, 1.289233817506169 ], [ 103.789896964494432, 1.286623068560251 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "509" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.789896697956436, 1.302287122586592 ], [ 103.785403920917361, 1.304897715964669 ], [ 103.78540382189243, 1.310119066436152 ], [ 103.789896518471068, 1.312729824186611 ], [ 103.794389305330427, 1.310119223193815 ], [ 103.794389385790865, 1.304897872097382 ], [ 103.789896697956436, 1.302287122586592 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "510" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.789896428190346, 1.317951174658748 ], [ 103.78540362265521, 1.320561766722936 ], [ 103.78540352244292, 1.325783116536496 ], [ 103.789896246552843, 1.328393874942928 ], [ 103.794389062019533, 1.325783275169023 ], [ 103.794389143444761, 1.320561924730506 ], [ 103.789896428190346, 1.317951174658748 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "511" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.789896155196033, 1.333615224753232 ], [ 103.785403320830952, 1.336225815499603 ], [ 103.785403219431245, 1.341447164647411 ], [ 103.789895971406324, 1.344057923705915 ], [ 103.794388815814301, 1.341447325154826 ], [ 103.794388898204318, 1.336225975382054 ], [ 103.789896155196033, 1.333615224753232 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "512" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.789895878973397, 1.349279272846555 ], [ 103.78540301544443, 1.351889862271184 ], [ 103.785402912857293, 1.35711121074541 ], [ 103.789895693031411, 1.359721970452083 ], [ 103.794388566714602, 1.357111373127735 ], [ 103.79438865006945, 1.351890024028537 ], [ 103.789895878973397, 1.349279272846555 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "513" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.789895599522339, 1.36494331891523 ], [ 103.785402706495546, 1.36755390701419 ], [ 103.785402602720936, 1.372775254807005 ], [ 103.78989541142802, 1.375386015157945 ], [ 103.794388314720365, 1.372775419064264 ], [ 103.794388399040059, 1.367554070646469 ], [ 103.789895599522339, 1.36494331891523 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "514" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.78989531684276, 1.380607362935772 ], [ 103.785402393984199, 1.383217949705136 ], [ 103.785402289022059, 1.388439296808711 ], [ 103.789895126596036, 1.391050057800016 ], [ 103.794388059831476, 1.388439462940927 ], [ 103.794388145116073, 1.383218115212363 ], [ 103.78989531684276, 1.380607362935772 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "515" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.789895030934559, 1.396271404884693 ], [ 103.785402077910248, 1.398881990320535 ], [ 103.785401971760564, 1.404103336727043 ], [ 103.789894838535346, 1.40671409835481 ], [ 103.794387802047865, 1.404103504734239 ], [ 103.794387888297379, 1.398882157702734 ], [ 103.789895030934559, 1.396271404884693 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "516" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.789894741797625, 1.411935444738509 ], [ 103.785401758273608, 1.414546028836902 ], [ 103.785401650936322, 1.419767374538513 ], [ 103.789894547245865, 1.422378136798842 ], [ 103.794387541369431, 1.419767544420714 ], [ 103.794387628583905, 1.414546198094098 ], [ 103.789894741797625, 1.411935444738509 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "517" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.789894449431841, 1.427599482473736 ], [ 103.785401435074135, 1.430210065230752 ], [ 103.78540132654922, 1.43543141021964 ], [ 103.78989425272745, 1.438042173108629 ], [ 103.794387277796062, 1.435431581976868 ], [ 103.79438736597551, 1.430210236362969 ], [ 103.789894449431841, 1.427599482473736 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "518" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.789894153837096, 1.443263518066888 ], [ 103.785401108311717, 1.445874099478603 ], [ 103.785400998599115, 1.451095443746938 ], [ 103.789893954980045, 1.453706207260686 ], [ 103.794387011327672, 1.45109561737922 ], [ 103.79438710047215, 1.445874272485864 ], [ 103.789894153837096, 1.443263518066888 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "519" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.789893855013318, 1.458927551494484 ], [ 103.785400777986226, 1.461538131556969 ], [ 103.785400667085923, 1.466759475096925 ], [ 103.789893654003478, 1.469370239231531 ], [ 103.794386741964175, 1.466759650604283 ], [ 103.794386832073698, 1.461538306439299 ], [ 103.789893855013318, 1.458927551494484 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "520" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.794390927471866, 1.200470805637045 ], [ 103.789898331515033, 1.20308141505217 ], [ 103.789898248765979, 1.208302769937912 ], [ 103.794390779091529, 1.210913516000898 ], [ 103.798883384089507, 1.2083028995562 ], [ 103.798883449720805, 1.203081544110189 ], [ 103.794390927471866, 1.200470805637045 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "521" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.794390017897783, 1.263127055566635 ], [ 103.789897314857058, 1.265737660192552 ], [ 103.789897227804403, 1.270959012603214 ], [ 103.794389861800454, 1.273569760980355 ], [ 103.798882574327536, 1.270959148944891 ], [ 103.798882643372195, 1.265737795973935 ], [ 103.794390017897783, 1.263127055566635 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "522" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.794389783269452, 1.278791113369132 ], [ 103.78989705262309, 1.281401716787933 ], [ 103.789896964494432, 1.286623068560251 ], [ 103.794389625242744, 1.289233817506169 ], [ 103.798882365486776, 1.286623206582822 ], [ 103.798882435384826, 1.281401854250205 ], [ 103.794389783269452, 1.278791113369132 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "523" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.794389545747038, 1.294455169252688 ], [ 103.789896787161112, 1.29706577146045 ], [ 103.789896697956436, 1.302287122586592 ], [ 103.794389385790865, 1.304897872097382 ], [ 103.798882154085746, 1.302287262290078 ], [ 103.798882224837243, 1.297065910603629 ], [ 103.794389545747038, 1.294455169252688 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "524" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.794389305330427, 1.310119223193815 ], [ 103.789896518471068, 1.312729824186611 ], [ 103.789896428190346, 1.317951174658748 ], [ 103.794389143444761, 1.320561924730506 ], [ 103.798881940124389, 1.317951316043169 ], [ 103.798882011729333, 1.312729965010718 ], [ 103.794389305330427, 1.310119223193815 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "525" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.794389062019533, 1.325783275169023 ], [ 103.789896246552843, 1.328393874942928 ], [ 103.789896155196033, 1.333615224753232 ], [ 103.794388898204318, 1.336225975382054 ], [ 103.798881723602605, 1.333615367818608 ], [ 103.798881796061039, 1.328394017447984 ], [ 103.794389062019533, 1.325783275169023 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "526" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.794388815814301, 1.341447325154826 ], [ 103.789895971406324, 1.344057923705915 ], [ 103.789895878973397, 1.349279272846555 ], [ 103.79438865006945, 1.351890024028537 ], [ 103.798881504520338, 1.349279417592905 ], [ 103.798881577832262, 1.344058067891938 ], [ 103.794388815814301, 1.341447325154826 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "527" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.794388566714602, 1.357111373127735 ], [ 103.789895693031411, 1.359721970452083 ], [ 103.789895599522339, 1.36494331891523 ], [ 103.794388399040059, 1.367554070646469 ], [ 103.798881282877488, 1.364943465342576 ], [ 103.798881357042958, 1.359722116319094 ], [ 103.794388566714602, 1.357111373127735 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "528" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.794388314720365, 1.372775419064264 ], [ 103.78989541142802, 1.375386015157945 ], [ 103.78989531684276, 1.380607362935772 ], [ 103.794388145116073, 1.383218115212363 ], [ 103.798881058673985, 1.380607511044134 ], [ 103.798881133693015, 1.375386162705966 ], [ 103.794388314720365, 1.372775419064264 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "529" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.794388059831476, 1.388439462940927 ], [ 103.789895126596036, 1.391050057800016 ], [ 103.789895030934559, 1.396271404884693 ], [ 103.794387888297379, 1.398882157702734 ], [ 103.798880831909713, 1.396271554674093 ], [ 103.798880907782348, 1.391050207029067 ], [ 103.794388059831476, 1.388439462940927 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "530" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.794387802047865, 1.404103504734239 ], [ 103.789894838535346, 1.40671409835481 ], [ 103.789894741797625, 1.411935444738509 ], [ 103.794387628583905, 1.414546198094098 ], [ 103.798880602584632, 1.411935596208967 ], [ 103.798880679310869, 1.406714249264913 ], [ 103.794387802047865, 1.404103504734239 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "531" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.794387541369431, 1.419767544420714 ], [ 103.789894547245865, 1.422378136798842 ], [ 103.789894449431841, 1.427599482473736 ], [ 103.79438736597551, 1.430210236362969 ], [ 103.798880370698654, 1.427599635625274 ], [ 103.798880448278524, 1.422378289390018 ], [ 103.794387541369431, 1.419767544420714 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "532" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.794387277796062, 1.435431581976868 ], [ 103.78989425272745, 1.438042173108629 ], [ 103.789894153837096, 1.443263518066888 ], [ 103.79438710047215, 1.445874272485864 ], [ 103.798880136251654, 1.443263672899529 ], [ 103.798880214685227, 1.4380423273809 ], [ 103.794387277796062, 1.435431581976868 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "533" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.794387011327672, 1.45109561737922 ], [ 103.789893954980045, 1.453706207260686 ], [ 103.789893855013318, 1.458927551494484 ], [ 103.794386832073698, 1.461538306439299 ], [ 103.798879899243587, 1.458927708008248 ], [ 103.798879978530834, 1.453706363214073 ], [ 103.794387011327672, 1.45109561737922 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "534" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.798883580130109, 1.192638832617239 ], [ 103.794391001179761, 1.195249450154435 ], [ 103.794390927471866, 1.200470805637045 ], [ 103.798883449720805, 1.203081544110189 ], [ 103.803376037601055, 1.200470919558595 ], [ 103.803376094302465, 1.195249563580354 ], [ 103.798883580130109, 1.192638832617239 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "535" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.798882574327536, 1.270959148944891 ], [ 103.794389861800454, 1.273569760980355 ], [ 103.794389783269452, 1.278791113369132 ], [ 103.798882435384826, 1.281401854250205 ], [ 103.803375157398264, 1.278791234725372 ], [ 103.803375217809958, 1.273569881840936 ], [ 103.798882574327536, 1.270959148944891 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "536" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.798882365486776, 1.286623206582822 ], [ 103.794389625242744, 1.289233817506169 ], [ 103.794389545747038, 1.294455169252688 ], [ 103.798882224837243, 1.297065910603629 ], [ 103.803374974678917, 1.294455292095917 ], [ 103.803375035832744, 1.289233939853733 ], [ 103.798882365486776, 1.286623206582822 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "537" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.798882154085746, 1.302287262290078 ], [ 103.794389385790865, 1.304897872097382 ], [ 103.794389305330427, 1.310119223193815 ], [ 103.798882011729333, 1.312729965010718 ], [ 103.803374789733184, 1.31011934752405 ], [ 103.803374851629158, 1.304897995931946 ], [ 103.798882154085746, 1.302287262290078 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "538" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.798881940124389, 1.317951316043169 ], [ 103.794389143444761, 1.320561924730506 ], [ 103.794389062019533, 1.325783275169023 ], [ 103.798881796061039, 1.328394017447984 ], [ 103.803374602560964, 1.325783400986283 ], [ 103.803374665199087, 1.320562050052089 ], [ 103.798881940124389, 1.317951316043169 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "539" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.798881723602605, 1.333615367818608 ], [ 103.794388898204318, 1.336225975382054 ], [ 103.794388815814301, 1.341447325154826 ], [ 103.798881577832262, 1.344058067891938 ], [ 103.803374413162175, 1.341447452459127 ], [ 103.803374476542501, 1.336226102190672 ], [ 103.798881723602605, 1.333615367818608 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "540" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.798881504520338, 1.349279417592905 ], [ 103.79438865006945, 1.351890024028537 ], [ 103.794388566714602, 1.357111373127735 ], [ 103.798881357042958, 1.359722116319094 ], [ 103.803374221536771, 1.357111501919096 ], [ 103.803374285659302, 1.351890152324209 ], [ 103.798881504520338, 1.349279417592905 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "541" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.798881282877488, 1.364943465342576 ], [ 103.794388399040059, 1.367554070646469 ], [ 103.794388314720365, 1.372775419064264 ], [ 103.798881133693015, 1.375386162705966 ], [ 103.803374027684669, 1.372775549342703 ], [ 103.803374092549447, 1.367554200429213 ], [ 103.798881282877488, 1.364943465342576 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "542" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.798881058673985, 1.380607511044134 ], [ 103.794388145116073, 1.383218115212363 ], [ 103.794388059831476, 1.388439462940927 ], [ 103.798880907782348, 1.391050207029067 ], [ 103.803373831605811, 1.388439594706463 ], [ 103.803373897212865, 1.383218246482198 ], [ 103.798881058673985, 1.380607511044134 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "543" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.798880831909713, 1.396271554674093 ], [ 103.794387888297379, 1.398882157702734 ], [ 103.794387802047865, 1.404103504734239 ], [ 103.798880679310869, 1.406714249264913 ], [ 103.803373633300112, 1.40410363798689 ], [ 103.803373699649441, 1.398882290459679 ], [ 103.798880831909713, 1.396271554674093 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "544" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.798880602584632, 1.411935596208967 ], [ 103.794387628583905, 1.414546198094098 ], [ 103.794387541369431, 1.419767544420714 ], [ 103.798880448278524, 1.422378289390018 ], [ 103.803373432767515, 1.4197676791605 ], [ 103.803373499859148, 1.414546332338171 ], [ 103.798880602584632, 1.411935596208967 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "545" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.798880370698654, 1.427599635625274 ], [ 103.79438736597551, 1.430210236362969 ], [ 103.794387277796062, 1.435431581976868 ], [ 103.798880214685227, 1.4380423273809 ], [ 103.803373230007921, 1.435431718203808 ], [ 103.803373297841901, 1.430210372094189 ], [ 103.798880370698654, 1.427599635625274 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "546" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.798880136251654, 1.443263672899529 ], [ 103.79438710047215, 1.445874272485864 ], [ 103.794387011327672, 1.45109561737922 ], [ 103.798879978530834, 1.453706363214073 ], [ 103.803373025021273, 1.451095755093333 ], [ 103.803373093597614, 1.44587440970425 ], [ 103.798880136251654, 1.443263672899529 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "547" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.798879899243587, 1.458927708008248 ], [ 103.794386832073698, 1.461538306439299 ], [ 103.794386741964175, 1.466759650604283 ], [ 103.798879739815334, 1.469370396866057 ], [ 103.803372817807499, 1.466759789805589 ], [ 103.803372887126216, 1.461538445144871 ], [ 103.798879899243587, 1.458927708008248 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "548" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.803376037601055, 1.200470919558595 ], [ 103.798883449720805, 1.203081544110189 ], [ 103.798883384089507, 1.2083028995562 ], [ 103.803375923456215, 1.210913630913716 ], [ 103.807868520266339, 1.208302999267909 ], [ 103.807868568779881, 1.203081643390899 ], [ 103.803376037601055, 1.200470919558595 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "549" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.803375337891239, 1.263127175435904 ], [ 103.798882643372195, 1.265737795973935 ], [ 103.798882574327536, 1.270959148944891 ], [ 103.803375217809958, 1.273569881840936 ], [ 103.807867921704073, 1.270959253828715 ], [ 103.807867972740709, 1.26573790042674 ], [ 103.803375337891239, 1.263127175435904 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "550" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.803375157398264, 1.278791234725372 ], [ 103.798882435384826, 1.281401854250205 ], [ 103.798882365486776, 1.286623206582822 ], [ 103.803375035832744, 1.289233939853733 ], [ 103.807867767332539, 1.286623312759712 ], [ 103.80786781899999, 1.281401959996071 ], [ 103.803375157398264, 1.278791234725372 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "551" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.803374974678917, 1.294455292095917 ], [ 103.798882224837243, 1.297065910603629 ], [ 103.798882154085746, 1.302287262290078 ], [ 103.803374851629158, 1.304897995931946 ], [ 103.807867611068502, 1.302287369760048 ], [ 103.807867663366792, 1.29706601764257 ], [ 103.803374974678917, 1.294455292095917 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "552" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.803374789733184, 1.31011934752405 ], [ 103.798882011729333, 1.312729965010718 ], [ 103.798881940124389, 1.317951316043169 ], [ 103.803374665199087, 1.320562050052089 ], [ 103.807867452911907, 1.317951424806235 ], [ 103.80786750584106, 1.31273007334275 ], [ 103.803374789733184, 1.31011934752405 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "553" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.803374602560964, 1.325783400986283 ], [ 103.798881796061039, 1.328394017447984 ], [ 103.798881723602605, 1.333615367818608 ], [ 103.803374476542501, 1.336226102190672 ], [ 103.807867292862696, 1.333615477874784 ], [ 103.807867346422725, 1.328394127073121 ], [ 103.803374602560964, 1.325783400986283 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "554" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.803374413162175, 1.341447452459127 ], [ 103.798881577832262, 1.344058067891938 ], [ 103.798881504520338, 1.349279417592905 ], [ 103.803374285659302, 1.351890152324209 ], [ 103.807867130920812, 1.349279528942209 ], [ 103.807867185111746, 1.344058178810198 ], [ 103.803374413162175, 1.341447452459127 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "555" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.803374221536771, 1.357111501919096 ], [ 103.798881357042958, 1.359722116319094 ], [ 103.798881282877488, 1.364943465342576 ], [ 103.803374092549447, 1.367554200429213 ], [ 103.807866967086184, 1.364943577985023 ], [ 103.807867021908038, 1.359722228530491 ], [ 103.803374221536771, 1.357111501919096 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "556" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.803374027684669, 1.372775549342703 ], [ 103.798881133693015, 1.375386162705966 ], [ 103.798881058673985, 1.380607511044134 ], [ 103.803373897212865, 1.383218246482198 ], [ 103.80786680135877, 1.380607624979739 ], [ 103.807866856811557, 1.375386276210516 ], [ 103.803374027684669, 1.372775549342703 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "557" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.803373831605811, 1.388439594706463 ], [ 103.798880907782348, 1.391050207029067 ], [ 103.798880831909713, 1.396271554674093 ], [ 103.803373699649441, 1.398882290459679 ], [ 103.807866633738499, 1.396271669902873 ], [ 103.807866689822248, 1.391050321826787 ], [ 103.803373831605811, 1.388439594706463 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "558" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.803373633300112, 1.40410363798689 ], [ 103.798880679310869, 1.406714249264913 ], [ 103.798880602584632, 1.411935596208967 ], [ 103.803373499859148, 1.414546332338171 ], [ 103.807866464225299, 1.411935712730938 ], [ 103.807866520940024, 1.406714365355818 ], [ 103.803373633300112, 1.40410363798689 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "559" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.803373432767515, 1.4197676791605 ], [ 103.798880448278524, 1.422378289390018 ], [ 103.798880370698654, 1.427599635625274 ], [ 103.803373297841901, 1.430210372094189 ], [ 103.807866292819128, 1.427599753440453 ], [ 103.807866350164844, 1.422378406774125 ], [ 103.803373432767515, 1.4197676791605 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "560" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.803373230007921, 1.435431718203808 ], [ 103.798880214685227, 1.4380423273809 ], [ 103.798880136251654, 1.443263672899529 ], [ 103.803373093597614, 1.44587440970425 ], [ 103.8078661195199, 1.443263792007932 ], [ 103.807866177496663, 1.438042446058226 ], [ 103.803373230007921, 1.435431718203808 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "561" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.803373025021273, 1.451095755093333 ], [ 103.798879978530834, 1.453706363214073 ], [ 103.798879899243587, 1.458927708008248 ], [ 103.803372887126216, 1.461538445144871 ], [ 103.807865944327574, 1.458927828409893 ], [ 103.807866002935356, 1.453706483184635 ], [ 103.803373025021273, 1.451095755093333 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "562" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.803372817807499, 1.466759789805589 ], [ 103.798879739815334, 1.469370396866057 ], [ 103.798879659674341, 1.474591740927951 ], [ 103.803372678427635, 1.477202478392571 ], [ 103.807865767242063, 1.474591862622854 ], [ 103.807865826480921, 1.469370518129872 ], [ 103.803372817807499, 1.466759789805589 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "563" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.807868074183162, 1.255295192990546 ], [ 103.803375397560842, 1.257905821917047 ], [ 103.803375337891239, 1.263127175435904 ], [ 103.807867972740709, 1.26573790042674 ], [ 103.812360658626801, 1.263127264041226 ], [ 103.812360700399665, 1.25790591015599 ], [ 103.807868074183162, 1.255295192990546 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "564" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.807867921704073, 1.270959253828715 ], [ 103.803375217809958, 1.273569881840936 ], [ 103.803375157398264, 1.278791234725372 ], [ 103.80786781899999, 1.281401959996071 ], [ 103.812360532269182, 1.278791324429838 ], [ 103.812360574561566, 1.27356997117902 ], [ 103.807867921704073, 1.270959253828715 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "565" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.807867767332539, 1.286623312759712 ], [ 103.803375035832744, 1.289233939853733 ], [ 103.803374974678917, 1.294455292095917 ], [ 103.807867663366792, 1.29706601764257 ], [ 103.812360404352958, 1.29445538289954 ], [ 103.812360447164878, 1.289234030290969 ], [ 103.807867767332539, 1.286623312759712 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "566" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.807867611068502, 1.302287369760048 ], [ 103.803374851629158, 1.304897995931946 ], [ 103.803374789733184, 1.31011934752405 ], [ 103.80786750584106, 1.31273007334275 ], [ 103.812360274878102, 1.310119439426843 ], [ 103.812360318209571, 1.304898087468348 ], [ 103.807867611068502, 1.302287369760048 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "567" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.807867452911907, 1.317951424806235 ], [ 103.803374665199087, 1.320562050052089 ], [ 103.803374602560964, 1.325783400986283 ], [ 103.807867346422725, 1.328394127073121 ], [ 103.812360143844543, 1.325783493988258 ], [ 103.812360187695589, 1.320562142687669 ], [ 103.807867452911907, 1.317951424806235 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "568" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.807867292862696, 1.333615477874784 ], [ 103.803374476542501, 1.336226102190672 ], [ 103.803374413162175, 1.341447452459127 ], [ 103.807867185111746, 1.344058178810198 ], [ 103.812360011252238, 1.341447546560299 ], [ 103.812360055622875, 1.336226195925444 ], [ 103.807867292862696, 1.333615477874784 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "569" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.807867130920812, 1.349279528942209 ], [ 103.803374285659302, 1.351890152324209 ], [ 103.803374221536771, 1.357111501919096 ], [ 103.807867021908038, 1.359722228530491 ], [ 103.812359877101159, 1.357111597119477 ], [ 103.812359921991387, 1.351890247158186 ], [ 103.807867130920812, 1.349279528942209 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "570" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.807866967086184, 1.364943577985023 ], [ 103.803374092549447, 1.367554200429213 ], [ 103.803374027684669, 1.372775549342703 ], [ 103.807866856811557, 1.375386276210516 ], [ 103.812359741391234, 1.372775645642308 ], [ 103.812359786801082, 1.367554296362408 ], [ 103.807866967086184, 1.364943577985023 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "571" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.80786680135877, 1.380607624979739 ], [ 103.803373897212865, 1.383218246482198 ], [ 103.803373831605811, 1.388439594706463 ], [ 103.807866689822248, 1.391050321826787 ], [ 103.81235960412242, 1.388439692105304 ], [ 103.812359650051917, 1.383218343514625 ], [ 103.80786680135877, 1.380607624979739 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "572" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.807866633738499, 1.396271669902873 ], [ 103.803373699649441, 1.398882290459679 ], [ 103.803373633300112, 1.40410363798689 ], [ 103.807866520940024, 1.406714365355818 ], [ 103.812359465294662, 1.404103736484982 ], [ 103.812359511743807, 1.398882388591352 ], [ 103.807866633738499, 1.396271669902873 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "573" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.807866464225299, 1.411935712730938 ], [ 103.803373499859148, 1.414546332338171 ], [ 103.803373432767515, 1.4197676791605 ], [ 103.807866350164844, 1.422378406774125 ], [ 103.812359324907916, 1.419767778757856 ], [ 103.812359371876738, 1.414546431569103 ], [ 103.807866464225299, 1.411935712730938 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "574" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.807866292819128, 1.427599753440453 ], [ 103.803373297841901, 1.430210372094189 ], [ 103.803373230007921, 1.435431718203808 ], [ 103.807866177496663, 1.438042446058226 ], [ 103.812359182962126, 1.435431818900442 ], [ 103.812359230450625, 1.430210472424395 ], [ 103.807866292819128, 1.427599753440453 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "575" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.8078661195199, 1.443263792007932 ], [ 103.803373093597614, 1.44587440970425 ], [ 103.803373025021273, 1.451095755093333 ], [ 103.807866002935356, 1.453706483184635 ], [ 103.812359039457249, 1.45109585688926 ], [ 103.812359087465438, 1.445874511133745 ], [ 103.8078661195199, 1.443263792007932 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "576" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.807865944327574, 1.458927828409893 ], [ 103.803372887126216, 1.461538445144871 ], [ 103.803372817807499, 1.466759789805589 ], [ 103.807865826480921, 1.469370518129872 ], [ 103.812358894393213, 1.466759892700823 ], [ 103.812358942921136, 1.461538547673668 ], [ 103.807865944327574, 1.458927828409893 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "577" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.812360783425873, 1.247463201757192 ], [ 103.807868124589007, 1.250073838958067 ], [ 103.807868074183162, 1.255295192990546 ], [ 103.812360700399665, 1.25790591015599 ], [ 103.816853368389005, 1.255295265511279 ], [ 103.816853401009382, 1.250073911177061 ], [ 103.812360783425873, 1.247463201757192 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "578" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.812360658626801, 1.263127264041226 ], [ 103.807867972740709, 1.26573790042674 ], [ 103.807867921704073, 1.270959253828715 ], [ 103.812360574561566, 1.27356997117902 ], [ 103.81685326971143, 1.270959327254673 ], [ 103.816853302740029, 1.265737973550956 ], [ 103.812360658626801, 1.263127264041226 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "579" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.812360532269182, 1.278791324429838 ], [ 103.80786781899999, 1.281401959996071 ], [ 103.807867767332539, 1.286623312759712 ], [ 103.812360447164878, 1.289234030290969 ], [ 103.81685316980915, 1.286623387090906 ], [ 103.816853203245984, 1.281402034025518 ], [ 103.812360532269182, 1.278791324429838 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "580" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.812360404352958, 1.29445538289954 ], [ 103.807867663366792, 1.29706601764257 ], [ 103.807867611068502, 1.302287369760048 ], [ 103.812360318209571, 1.304898087468348 ], [ 103.816853068682107, 1.302287444996488 ], [ 103.816853102527205, 1.29706609257726 ], [ 103.812360404352958, 1.29445538289954 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "581" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.812360274878102, 1.310119439426843 ], [ 103.80786750584106, 1.31273007334275 ], [ 103.807867452911907, 1.317951424806235 ], [ 103.812360187695589, 1.320562142687669 ], [ 103.816852966330302, 1.317951500947931 ], [ 103.816853000583663, 1.312730149182693 ], [ 103.812360274878102, 1.310119439426843 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "582" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.812360143844543, 1.325783493988258 ], [ 103.807867346422725, 1.328394127073121 ], [ 103.807867292862696, 1.333615477874784 ], [ 103.812360055622875, 1.336226195925444 ], [ 103.816852862753677, 1.333615554921749 ], [ 103.816852897415316, 1.328394203818329 ], [ 103.812360143844543, 1.325783493988258 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "583" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.812360011252238, 1.341447546560299 ], [ 103.807867185111746, 1.344058178810198 ], [ 103.807867130920812, 1.349279528942209 ], [ 103.812359921991387, 1.351890247158186 ], [ 103.816852757952191, 1.349279606894452 ], [ 103.816852793022122, 1.34405825646068 ], [ 103.812360011252238, 1.341447546560299 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "584" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.812359877101159, 1.357111597119477 ], [ 103.807867021908038, 1.359722228530491 ], [ 103.807866967086184, 1.364943577985023 ], [ 103.812359786801082, 1.367554296362408 ], [ 103.816852651925828, 1.364943656842555 ], [ 103.816852687404051, 1.359722307086259 ], [ 103.812359877101159, 1.357111597119477 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "585" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.812359741391234, 1.372775645642308 ], [ 103.807866856811557, 1.375386276210516 ], [ 103.80786680135877, 1.380607624979739 ], [ 103.812359650051917, 1.383218343514625 ], [ 103.816852544674518, 1.380607704742572 ], [ 103.816852580561061, 1.375386355671582 ], [ 103.812359741391234, 1.372775645642308 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "586" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.81235960412242, 1.388439692105304 ], [ 103.807866689822248, 1.391050321826787 ], [ 103.807866633738499, 1.396271669902873 ], [ 103.812359511743807, 1.398882388591352 ], [ 103.816852436198246, 1.396271750571018 ], [ 103.81685247249311, 1.39105040219316 ], [ 103.81235960412242, 1.388439692105304 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "587" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.812359465294662, 1.404103736484982 ], [ 103.807866520940024, 1.406714365355818 ], [ 103.807866464225299, 1.411935712730938 ], [ 103.812359371876738, 1.414546431569103 ], [ 103.816852326496956, 1.411935794304408 ], [ 103.816852363200169, 1.406714446627512 ], [ 103.812359465294662, 1.404103736484982 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "588" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.812359324907916, 1.419767778757856 ], [ 103.807866350164844, 1.422378406774125 ], [ 103.807866292819128, 1.427599753440453 ], [ 103.812359230450625, 1.430210472424395 ], [ 103.81685221557062, 1.427599835919257 ], [ 103.816852252682182, 1.42237848895115 ], [ 103.812359324907916, 1.419767778757856 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "589" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.812359182962126, 1.435431818900442 ], [ 103.807866177496663, 1.438042446058226 ], [ 103.8078661195199, 1.443263792007932 ], [ 103.812359087465438, 1.445874511133745 ], [ 103.81685210341918, 1.443263875392083 ], [ 103.816852140939119, 1.438042529140594 ], [ 103.812359182962126, 1.435431818900442 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "590" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.812359039457249, 1.45109585688926 ], [ 103.807866002935356, 1.453706483184635 ], [ 103.807865944327574, 1.458927828409893 ], [ 103.812358942921136, 1.461538547673668 ], [ 103.816851990042608, 1.458927912699403 ], [ 103.816852027970924, 1.453706567172358 ], [ 103.812359039457249, 1.45109585688926 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "591" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.812358894393213, 1.466759892700823 ], [ 103.807865826480921, 1.469370518129872 ], [ 103.807865767242063, 1.474591862622854 ], [ 103.812358796817634, 1.477202582020686 ], [ 103.816851875440861, 1.474591947817735 ], [ 103.816851913777583, 1.469370603022961 ], [ 103.812358894393213, 1.466759892700823 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "592" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.81685346584193, 1.239631201884214 ], [ 103.812360824679232, 1.242241847245369 ], [ 103.812360783425873, 1.247463201757192 ], [ 103.816853401009382, 1.250073911177061 ], [ 103.821346051213283, 1.247463258387248 ], [ 103.821346074792473, 1.242241903638325 ], [ 103.81685346584193, 1.239631201884214 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "593" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.816853368389005, 1.255295265511279 ], [ 103.812360700399665, 1.25790591015599 ], [ 103.812360658626801, 1.263127264041226 ], [ 103.816853302740029, 1.265737973550956 ], [ 103.821345979881869, 1.26312732138259 ], [ 103.821346003757981, 1.257905967260251 ], [ 103.816853368389005, 1.255295265511279 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "594" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.81685326971143, 1.270959327254673 ], [ 103.812360574561566, 1.27356997117902 ], [ 103.812360532269182, 1.278791324429838 ], [ 103.816853203245984, 1.281402034025518 ], [ 103.821345907659619, 1.278791382482519 ], [ 103.821345931832695, 1.273570028994595 ], [ 103.81685326971143, 1.270959327254673 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "595" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.81685316980915, 1.286623387090906 ], [ 103.812360447164878, 1.289234030290969 ], [ 103.812360404352958, 1.29445538289954 ], [ 103.816853102527205, 1.29706609257726 ], [ 103.821345834546548, 1.294455441663546 ], [ 103.82134585901656, 1.289234088817865 ], [ 103.81685316980915, 1.286623387090906 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "596" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.816853068682107, 1.302287444996488 ], [ 103.812360318209571, 1.304898087468348 ], [ 103.812360274878102, 1.310119439426843 ], [ 103.816853000583663, 1.312730149182693 ], [ 103.821345760542584, 1.310119498902182 ], [ 103.821345785309546, 1.304898146706575 ], [ 103.816853068682107, 1.302287444996488 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "597" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.816852966330302, 1.317951500947931 ], [ 103.812360187695589, 1.320562142687669 ], [ 103.812360143844543, 1.325783493988258 ], [ 103.816852897415316, 1.328394203818329 ], [ 103.821345685647714, 1.325783554174939 ], [ 103.821345710711668, 1.320562202637234 ], [ 103.816852966330302, 1.317951500947931 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "598" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.816852862753677, 1.333615554921749 ], [ 103.812360055622875, 1.336226195925444 ], [ 103.812360011252238, 1.341447546560299 ], [ 103.816852793022122, 1.34405825646068 ], [ 103.821345609861922, 1.341447607458329 ], [ 103.821345635222841, 1.336226256586357 ], [ 103.816852862753677, 1.333615554921749 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "599" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.816852757952191, 1.349279606894452 ], [ 103.812359921991387, 1.351890247158186 ], [ 103.812359877101159, 1.357111597119477 ], [ 103.816852687404051, 1.359722307086259 ], [ 103.821345533185166, 1.357111658728867 ], [ 103.821345558843078, 1.351890308530454 ], [ 103.816852757952191, 1.349279606894452 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "600" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.816852651925828, 1.364943656842555 ], [ 103.812359786801082, 1.367554296362408 ], [ 103.812359741391234, 1.372775645642308 ], [ 103.816852580561061, 1.375386355671582 ], [ 103.821345455617433, 1.372775707963064 ], [ 103.821345481572351, 1.367554358446041 ], [ 103.816852651925828, 1.364943656842555 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "601" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.816852544674518, 1.380607704742572 ], [ 103.812359650051917, 1.383218343514625 ], [ 103.81235960412242, 1.388439692105304 ], [ 103.81685247249311, 1.39105040219316 ], [ 103.821345377158679, 1.388439755137437 ], [ 103.821345403410589, 1.383218406309632 ], [ 103.816852544674518, 1.380607704742572 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "602" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.816852436198246, 1.396271750571018 ], [ 103.812359511743807, 1.398882388591352 ], [ 103.812359465294662, 1.404103736484982 ], [ 103.816852363200169, 1.406714446627512 ], [ 103.821345297808875, 1.4041038002285 ], [ 103.821345324357821, 1.398882452097741 ], [ 103.816852436198246, 1.396271750571018 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "603" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.816852326496956, 1.411935794304408 ], [ 103.812359371876738, 1.414546431569103 ], [ 103.812359324907916, 1.419767778757856 ], [ 103.816852252682182, 1.42237848895115 ], [ 103.821345217568009, 1.419767843212768 ], [ 103.821345244413976, 1.414546495786883 ], [ 103.816852326496956, 1.411935794304408 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "604" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.81685221557062, 1.427599835919257 ], [ 103.812359230450625, 1.430210472424395 ], [ 103.812359182962126, 1.435431818900442 ], [ 103.816852140939119, 1.438042529140594 ], [ 103.821345136436037, 1.435431884066759 ], [ 103.821345163579053, 1.430210537353576 ], [ 103.81685221557062, 1.427599835919257 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "605" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.81685210341918, 1.443263875392083 ], [ 103.812359087465438, 1.445874511133745 ], [ 103.812359039457249, 1.45109585688926 ], [ 103.816852027970924, 1.453706567172358 ], [ 103.82134505441293, 1.451095922766988 ], [ 103.821345081852996, 1.445874576774335 ], [ 103.81685210341918, 1.443263875392083 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "606" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.816851990042608, 1.458927912699403 ], [ 103.812358942921136, 1.461538547673668 ], [ 103.812358894393213, 1.466759892700823 ], [ 103.816851913777583, 1.469370603022961 ], [ 103.821344971498675, 1.466759959289974 ], [ 103.821344999235777, 1.461538614025678 ], [ 103.816851990042608, 1.458927912699403 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "607" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.821346051213283, 1.247463258387248 ], [ 103.816853401009382, 1.250073911177061 ], [ 103.816853368389005, 1.255295265511279 ], [ 103.821346003757981, 1.257905967260251 ], [ 103.825838663003083, 1.255295306961963 ], [ 103.825838677838007, 1.25007395245528 ], [ 103.821346051213283, 1.247463258387248 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "608" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.821345979881869, 1.26312732138259 ], [ 103.816853302740029, 1.265737973550956 ], [ 103.81685326971143, 1.270959327254673 ], [ 103.821345931832695, 1.273570028994595 ], [ 103.825838618127023, 1.270959369222757 ], [ 103.825838633147583, 1.265738015346572 ], [ 103.821345979881869, 1.26312732138259 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "609" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.821345907659619, 1.278791382482519 ], [ 103.816853203245984, 1.281402034025518 ], [ 103.81685316980915, 1.286623387090906 ], [ 103.82134585901656, 1.289234088817865 ], [ 103.825838572693982, 1.286623429576395 ], [ 103.825838587900208, 1.281402076338538 ], [ 103.821345907659619, 1.278791382482519 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "610" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.821345834546548, 1.294455441663546 ], [ 103.816853102527205, 1.29706609257726 ], [ 103.816853068682107, 1.302287444996488 ], [ 103.821345785309546, 1.304898146706575 ], [ 103.825838526703976, 1.302287487999389 ], [ 103.825838542095866, 1.29706613540769 ], [ 103.821345834546548, 1.294455441663546 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "611" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.821345760542584, 1.310119498902182 ], [ 103.816853000583663, 1.312730149182693 ], [ 103.816852966330302, 1.317951500947931 ], [ 103.821345710711668, 1.320562202637234 ], [ 103.82583848015696, 1.31795154446825 ], [ 103.825838495734516, 1.312730192530539 ], [ 103.821345760542584, 1.310119498902182 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "612" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.821345685647714, 1.325783554174939 ], [ 103.816852897415316, 1.328394203818329 ], [ 103.816852862753677, 1.333615554921749 ], [ 103.821345635222841, 1.336226256586357 ], [ 103.825838433052937, 1.333615598959491 ], [ 103.825838448816171, 1.328394247683596 ], [ 103.821345685647714, 1.325783554174939 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "613" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.821345609861922, 1.341447607458329 ], [ 103.816852793022122, 1.34405825646068 ], [ 103.816852757952191, 1.349279606894452 ], [ 103.821345558843078, 1.351890308530454 ], [ 103.825838385391876, 1.349279651449625 ], [ 103.825838401340789, 1.344058300843375 ], [ 103.821345609861922, 1.341447607458329 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "614" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.821345533185166, 1.357111658728867 ], [ 103.816852687404051, 1.359722307086259 ], [ 103.816852651925828, 1.364943656842555 ], [ 103.821345481572351, 1.367554358446041 ], [ 103.825838337173764, 1.364943701915165 ], [ 103.825838353308384, 1.359722351986389 ], [ 103.821345533185166, 1.357111658728867 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "615" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.821345455617433, 1.372775707963064 ], [ 103.816852580561061, 1.375386355671582 ], [ 103.816852544674518, 1.380607704742572 ], [ 103.821345403410589, 1.383218406309632 ], [ 103.8258382883986, 1.380607750332625 ], [ 103.825838304718886, 1.375386401089152 ], [ 103.821345455617433, 1.372775707963064 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "616" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.821345377158679, 1.388439755137437 ], [ 103.81685247249311, 1.39105040219316 ], [ 103.816852436198246, 1.396271750571018 ], [ 103.821345324357821, 1.398882452097741 ], [ 103.825838239066343, 1.39627179667852 ], [ 103.825838255572322, 1.391050448128178 ], [ 103.821345377158679, 1.388439755137437 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "617" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.821345297808875, 1.4041038002285 ], [ 103.816852363200169, 1.406714446627512 ], [ 103.816852326496956, 1.411935794304408 ], [ 103.821345244413976, 1.414546495786883 ], [ 103.825838189176963, 1.411935840929365 ], [ 103.825838205868649, 1.406714493079983 ], [ 103.821345297808875, 1.4041038002285 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "618" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.821345217568009, 1.419767843212768 ], [ 103.816852252682182, 1.42237848895115 ], [ 103.81685221557062, 1.427599835919257 ], [ 103.821345163579053, 1.430210537353576 ], [ 103.825838138730475, 1.427599883061677 ], [ 103.825838155607869, 1.422378535921082 ], [ 103.821345217568009, 1.419767843212768 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "619" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.821345136436037, 1.435431884066759 ], [ 103.816852140939119, 1.438042529140594 ], [ 103.81685210341918, 1.443263875392083 ], [ 103.821345081852996, 1.445874576774335 ], [ 103.825838087726851, 1.443263923051973 ], [ 103.825838104789966, 1.438042576627992 ], [ 103.821345136436037, 1.435431884066759 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "620" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.82134505441293, 1.451095922766988 ], [ 103.816852027970924, 1.453706567172358 ], [ 103.816851990042608, 1.458927912699403 ], [ 103.821344999235777, 1.461538614025678 ], [ 103.825838036166047, 1.458927960876768 ], [ 103.825838053414898, 1.45370661517723 ], [ 103.82134505441293, 1.451095922766988 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "621" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.821344971498675, 1.466759959289974 ], [ 103.816851913777583, 1.469370603022961 ], [ 103.816851875440861, 1.474591947817735 ], [ 103.821344915727394, 1.477202649084123 ], [ 103.825837984048079, 1.474591996512583 ], [ 103.825838001482651, 1.469370651545314 ], [ 103.821344971498675, 1.466759959289974 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "622" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.825838707322205, 1.239631242817504 ], [ 103.821346074792473, 1.242241903638325 ], [ 103.821346051213283, 1.247463258387248 ], [ 103.825838677838007, 1.25007395245528 ], [ 103.830331319297642, 1.247463284141164 ], [ 103.830331325202664, 1.242241929284412 ], [ 103.825838707322205, 1.239631242817504 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "623" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.825838663003083, 1.255295306961963 ], [ 103.821346003757981, 1.257905967260251 ], [ 103.821345979881869, 1.26312732138259 ], [ 103.825838633147583, 1.265738015346572 ], [ 103.830331301433873, 1.263127347459991 ], [ 103.83033130741326, 1.257905993229823 ], [ 103.825838663003083, 1.255295306961963 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "624" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.825838618127023, 1.270959369222757 ], [ 103.821345931832695, 1.273570028994595 ], [ 103.821345907659619, 1.278791382482519 ], [ 103.825838587900208, 1.281402076338538 ], [ 103.830331283347036, 1.278791408883409 ], [ 103.830331289400775, 1.273570055287654 ], [ 103.825838618127023, 1.270959369222757 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "625" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.825838572693982, 1.286623429576395 ], [ 103.82134585901656, 1.289234088817865 ], [ 103.821345834546548, 1.294455441663546 ], [ 103.825838542095866, 1.29706613540769 ], [ 103.830331265037088, 1.294455468387928 ], [ 103.830331271165193, 1.289234115434416 ], [ 103.825838572693982, 1.286623429576395 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "626" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.825838526703976, 1.302287487999389 ], [ 103.821345785309546, 1.304898146706575 ], [ 103.821345760542584, 1.310119498902182 ], [ 103.825838495734516, 1.312730192530539 ], [ 103.830331246504031, 1.31011952595006 ], [ 103.830331252706515, 1.30489817364662 ], [ 103.825838526703976, 1.302287487999389 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "627" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.82583848015696, 1.31795154446825 ], [ 103.821345710711668, 1.320562202637234 ], [ 103.821345685647714, 1.325783554174939 ], [ 103.825838448816171, 1.328394247683596 ], [ 103.830331227747877, 1.325783581546317 ], [ 103.830331234024712, 1.320562229900778 ], [ 103.82583848015696, 1.31795154446825 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "628" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.825838433052937, 1.333615598959491 ], [ 103.821345635222841, 1.336226256586357 ], [ 103.821345609861922, 1.341447607458329 ], [ 103.825838401340789, 1.344058300843375 ], [ 103.830331208768584, 1.341447635153211 ], [ 103.830331215119799, 1.336226284173403 ], [ 103.825838433052937, 1.333615598959491 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "629" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.825838385391876, 1.349279651449625 ], [ 103.821345558843078, 1.351890308530454 ], [ 103.821345533185166, 1.357111658728867 ], [ 103.825838353308384, 1.359722351986389 ], [ 103.830331189566181, 1.357111686747257 ], [ 103.830331195991761, 1.351890336441008 ], [ 103.825838385391876, 1.349279651449625 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "630" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.825838337173764, 1.364943701915165 ], [ 103.821345481572351, 1.367554358446041 ], [ 103.821345455617433, 1.372775707963064 ], [ 103.825838304718886, 1.375386401089152 ], [ 103.830331170140639, 1.372775736304966 ], [ 103.830331176640598, 1.367554386680105 ], [ 103.825838337173764, 1.364943701915165 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "631" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.8258382883986, 1.380607750332625 ], [ 103.821345403410589, 1.383218406309632 ], [ 103.821345377158679, 1.388439755137437 ], [ 103.825838255572322, 1.391050448128178 ], [ 103.830331150491958, 1.388439783802855 ], [ 103.830331157066297, 1.383218434867211 ], [ 103.8258382883986, 1.380607750332625 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "632" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.825838239066343, 1.39627179667852 ], [ 103.821345324357821, 1.398882452097741 ], [ 103.821345297808875, 1.4041038002285 ], [ 103.825838205868649, 1.406714493079983 ], [ 103.83033113062011, 1.404103829217437 ], [ 103.830331137268857, 1.398882480978838 ], [ 103.825838239066343, 1.39627179667852 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "633" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.825838189176963, 1.411935840929365 ], [ 103.821345244413976, 1.414546495786883 ], [ 103.821345217568009, 1.419767843212768 ], [ 103.825838155607869, 1.422378535921082 ], [ 103.830331110525137, 1.41976787252523 ], [ 103.830331117248264, 1.414546524991503 ], [ 103.825838189176963, 1.411935840929365 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "634" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.825838138730475, 1.427599883061677 ], [ 103.821345163579053, 1.430210537353576 ], [ 103.821345136436037, 1.435431884066759 ], [ 103.825838104789966, 1.438042576627992 ], [ 103.830331090206997, 1.435431913702748 ], [ 103.830331097004503, 1.430210566881723 ], [ 103.825838138730475, 1.427599883061677 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "635" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.825838087726851, 1.443263923051973 ], [ 103.821345081852996, 1.445874576774335 ], [ 103.82134505441293, 1.451095922766988 ], [ 103.825838053414898, 1.45370661517723 ], [ 103.830331069665675, 1.451095952726511 ], [ 103.83033107653759, 1.445874606626013 ], [ 103.825838087726851, 1.443263923051973 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "636" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.825838036166047, 1.458927960876768 ], [ 103.821344999235777, 1.461538614025678 ], [ 103.821344971498675, 1.466759959289974 ], [ 103.825838001482651, 1.469370651545314 ], [ 103.830331048901201, 1.466759989573033 ], [ 103.830331055847495, 1.461538644200891 ], [ 103.825838036166047, 1.458927960876768 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "637" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.830331336938329, 1.231799218950417 ], [ 103.825838721971479, 1.234409887688152 ], [ 103.825838707322205, 1.239631242817504 ], [ 103.830331325202664, 1.242241929284412 ], [ 103.834823948988117, 1.239631253068561 ], [ 103.834823946074508, 1.234409897896019 ], [ 103.830331336938329, 1.231799218950417 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "638" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.830331319297642, 1.247463284141164 ], [ 103.825838677838007, 1.25007395245528 ], [ 103.825838663003083, 1.255295306961963 ], [ 103.83033130741326, 1.257905993229823 ], [ 103.834823957802797, 1.255295317342593 ], [ 103.834823954852268, 1.250073962792719 ], [ 103.830331319297642, 1.247463284141164 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "639" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.830331301433873, 1.263127347459991 ], [ 103.825838633147583, 1.265738015346572 ], [ 103.825838618127023, 1.270959369222757 ], [ 103.830331289400775, 1.273570055287654 ], [ 103.834823966728266, 1.270959379732961 ], [ 103.834823963740803, 1.265738025813585 ], [ 103.830331301433873, 1.263127347459991 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "640" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.830331283347036, 1.278791408883409 ], [ 103.825838587900208, 1.281402076338538 ], [ 103.825838572693982, 1.286623429576395 ], [ 103.830331271165193, 1.289234115434416 ], [ 103.834823975764493, 1.286623440216175 ], [ 103.834823972740111, 1.281402086935126 ], [ 103.830331283347036, 1.278791408883409 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "641" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.830331265037088, 1.294455468387928 ], [ 103.825838542095866, 1.29706613540769 ], [ 103.825838526703976, 1.302287487999389 ], [ 103.830331252706515, 1.30489817364662 ], [ 103.834823984911509, 1.302287498768745 ], [ 103.834823981850192, 1.297066146133854 ], [ 103.830331265037088, 1.294455468387928 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "642" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.830331246504031, 1.31011952595006 ], [ 103.825838495734516, 1.312730192530539 ], [ 103.82583848015696, 1.31795154446825 ], [ 103.830331234024712, 1.320562229900778 ], [ 103.834823994169298, 1.317951555367185 ], [ 103.834823991071062, 1.312730203386281 ], [ 103.830331246504031, 1.31011952595006 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "643" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.830331227747877, 1.325783581546317 ], [ 103.825838448816171, 1.328394247683596 ], [ 103.825838433052937, 1.333615598959491 ], [ 103.830331215119799, 1.336226284173403 ], [ 103.834824003537875, 1.333615609988007 ], [ 103.834824000402705, 1.328394258668918 ], [ 103.830331227747877, 1.325783581546317 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "644" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.830331208768584, 1.341447635153211 ], [ 103.825838401340789, 1.344058300843375 ], [ 103.825838385391876, 1.349279651449625 ], [ 103.830331195991761, 1.351890336441008 ], [ 103.83482401301724, 1.349279662607722 ], [ 103.83482400984515, 1.344058311958278 ], [ 103.830331208768584, 1.341447635153211 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "645" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.830331189566181, 1.357111686747257 ], [ 103.825838353308384, 1.359722351986389 ], [ 103.825838337173764, 1.364943701915165 ], [ 103.830331176640598, 1.367554386680105 ], [ 103.834824022607407, 1.364943713202845 ], [ 103.834824019398383, 1.359722363230875 ], [ 103.830331189566181, 1.357111686747257 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "646" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.830331170140639, 1.372775736304966 ], [ 103.825838304718886, 1.375386401089152 ], [ 103.8258382883986, 1.380607750332625 ], [ 103.830331157066297, 1.383218434867211 ], [ 103.834824032308362, 1.38060776174989 ], [ 103.834824029062403, 1.375386412463222 ], [ 103.830331170140639, 1.372775736304966 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "647" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.830331150491958, 1.388439783802855 ], [ 103.825838255572322, 1.391050448128178 ], [ 103.825838239066343, 1.39627179667852 ], [ 103.830331137268857, 1.398882480978838 ], [ 103.834824042120118, 1.396271808225372 ], [ 103.834824038837226, 1.391050459631834 ], [ 103.830331150491958, 1.388439783802855 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "648" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.83033113062011, 1.404103829217437 ], [ 103.825838205868649, 1.406714493079983 ], [ 103.825838189176963, 1.411935840929365 ], [ 103.830331117248264, 1.414546524991503 ], [ 103.834824052042691, 1.411935852605805 ], [ 103.834824048722851, 1.406714504713227 ], [ 103.83033113062011, 1.404103829217437 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "649" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.830331110525137, 1.41976787252523 ], [ 103.825838155607869, 1.422378535921082 ], [ 103.825838138730475, 1.427599883061677 ], [ 103.830331097004503, 1.430210566881723 ], [ 103.834824062076052, 1.427599894867707 ], [ 103.834824058719278, 1.422378547683915 ], [ 103.830331110525137, 1.41976787252523 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "650" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.830331090206997, 1.435431913702748 ], [ 103.825838104789966, 1.438042576627992 ], [ 103.825838087726851, 1.443263923051973 ], [ 103.83033107653759, 1.445874606626013 ], [ 103.834824072220229, 1.443263934987594 ], [ 103.834824068826521, 1.438042588520416 ], [ 103.830331090206997, 1.435431913702748 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "651" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.830331069665675, 1.451095952726511 ], [ 103.825838053414898, 1.45370661517723 ], [ 103.825838036166047, 1.458927960876768 ], [ 103.830331055847495, 1.461538644200891 ], [ 103.834824082475208, 1.458927972941983 ], [ 103.83482407904458, 1.453706627199247 ], [ 103.830331069665675, 1.451095952726511 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "652" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.830331048901201, 1.466759989573033 ], [ 103.825838001482651, 1.469370651545314 ], [ 103.825837984048079, 1.474591996512583 ], [ 103.830331034934204, 1.477202679582876 ], [ 103.834824092841018, 1.474592008707392 ], [ 103.834824089373441, 1.469370663696925 ], [ 103.830331048901201, 1.466759989573033 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "653" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.834823931691048, 1.208303118963465 ], [ 103.830331360112211, 1.210913795824813 ], [ 103.83033135435592, 1.21613515191124 ], [ 103.834823937407506, 1.218745831146974 ], [ 103.839316517582404, 1.216135146917686 ], [ 103.839316506109668, 1.210913790852704 ], [ 103.834823931691048, 1.208303118963465 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "654" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.83482394028421, 1.223967186934355 ], [ 103.830331342768972, 1.226577863474912 ], [ 103.830331336938329, 1.231799218950417 ], [ 103.834823946074508, 1.234409897896019 ], [ 103.839316552297078, 1.231799213892526 ], [ 103.839316540676123, 1.226577858438467 ], [ 103.83482394028421, 1.223967186934355 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "655" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.834823948988117, 1.239631253068561 ], [ 103.830331325202664, 1.242241929284412 ], [ 103.830331319297642, 1.247463284141164 ], [ 103.834823954852268, 1.250073962792719 ], [ 103.839316587456352, 1.247463279018935 ], [ 103.839316575687207, 1.24224192418363 ], [ 103.834823948988117, 1.239631253068561 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "656" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.834823957802797, 1.255295317342593 ], [ 103.83033130741326, 1.257905993229823 ], [ 103.830331301433873, 1.263127347459991 ], [ 103.834823963740803, 1.265738025813585 ], [ 103.839316623060256, 1.263127342273424 ], [ 103.839316611142891, 1.257905988064702 ], [ 103.834823957802797, 1.255295317342593 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "657" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.834823966728266, 1.270959379732961 ], [ 103.830331289400775, 1.273570055287654 ], [ 103.830331283347036, 1.278791408883409 ], [ 103.834823972740111, 1.281402086935126 ], [ 103.839316659108803, 1.278791403632502 ], [ 103.839316647043205, 1.273570050058194 ], [ 103.834823966728266, 1.270959379732961 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "658" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.834823975764493, 1.286623440216175 ], [ 103.830331271165193, 1.289234115434416 ], [ 103.830331265037088, 1.294455468387928 ], [ 103.834823981850192, 1.297066146133854 ], [ 103.83931669560198, 1.294455463072682 ], [ 103.839316683388191, 1.289234110140616 ], [ 103.834823975764493, 1.286623440216175 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "659" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.834823984911509, 1.302287498768745 ], [ 103.830331252706515, 1.30489817364662 ], [ 103.830331246504031, 1.31011952595006 ], [ 103.834823991071062, 1.312730203386281 ], [ 103.839316732539857, 1.310119520570473 ], [ 103.839316720177834, 1.30489816828848 ], [ 103.834823984911509, 1.302287498768745 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "660" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.834823994169298, 1.317951555367185 ], [ 103.830331234024712, 1.320562229900778 ], [ 103.830331227747877, 1.325783581546317 ], [ 103.834824000402705, 1.328394258668918 ], [ 103.839316769922391, 1.325783576102389 ], [ 103.839316757412135, 1.320562224478298 ], [ 103.834823994169298, 1.317951555367185 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "661" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.834824003537875, 1.333615609988007 ], [ 103.830331215119799, 1.336226284173403 ], [ 103.830331208768584, 1.341447635153211 ], [ 103.83482400984515, 1.344058311958278 ], [ 103.839316807749611, 1.341447629644941 ], [ 103.839316795091122, 1.336226278686581 ], [ 103.834824003537875, 1.333615609988007 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "662" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.83482401301724, 1.349279662607722 ], [ 103.830331195991761, 1.351890336441008 ], [ 103.830331189566181, 1.357111686747257 ], [ 103.834824019398383, 1.359722363230875 ], [ 103.839316846021546, 1.357111681174643 ], [ 103.839316833214824, 1.351890330889842 ], [ 103.83482401301724, 1.349279662607722 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "663" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.834824022607407, 1.364943713202845 ], [ 103.830331176640598, 1.367554386680105 ], [ 103.830331170140639, 1.372775736304966 ], [ 103.834824029062403, 1.375386412463222 ], [ 103.83931688473821, 1.372775730668009 ], [ 103.83931687178324, 1.367554381064597 ], [ 103.834824022607407, 1.364943713202845 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "664" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.834824032308362, 1.38060776174989 ], [ 103.830331157066297, 1.383218434867211 ], [ 103.830331150491958, 1.388439783802855 ], [ 103.834824038837226, 1.391050459631834 ], [ 103.839316923899602, 1.388439778101553 ], [ 103.839316910796398, 1.383218429187357 ], [ 103.834824032308362, 1.38060776174989 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "665" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.834824042120118, 1.396271808225372 ], [ 103.830331137268857, 1.398882480978838 ], [ 103.83033113062011, 1.404103829217437 ], [ 103.834824048722851, 1.406714504713227 ], [ 103.839316963505738, 1.404103823451791 ], [ 103.839316950254286, 1.39888247523464 ], [ 103.834824042120118, 1.396271808225372 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "666" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.834824052042691, 1.411935852605805 ], [ 103.830331117248264, 1.414546524991503 ], [ 103.830331110525137, 1.41976787252523 ], [ 103.834824058719278, 1.422378547683915 ], [ 103.839317003556644, 1.419767866695237 ], [ 103.839316990156931, 1.414546519182959 ], [ 103.834824052042691, 1.411935852605805 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "667" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.834824062076052, 1.427599894867707 ], [ 103.830331097004503, 1.430210566881723 ], [ 103.830331090206997, 1.435431913702748 ], [ 103.834824068826521, 1.438042588520416 ], [ 103.839317044052336, 1.435431907808409 ], [ 103.839317030504361, 1.430210561008832 ], [ 103.834824062076052, 1.427599894867707 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "668" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.834824072220229, 1.443263934987594 ], [ 103.83033107653759, 1.445874606626013 ], [ 103.830331069665675, 1.451095952726511 ], [ 103.83482407904458, 1.453706627199247 ], [ 103.839317084992814, 1.451095946767823 ], [ 103.839317071296577, 1.445874600688775 ], [ 103.834824072220229, 1.443263934987594 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "669" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.834824082475208, 1.458927972941983 ], [ 103.830331055847495, 1.461538644200891 ], [ 103.830331048901201, 1.466759989573033 ], [ 103.834824089373441, 1.469370663696925 ], [ 103.839317126378106, 1.466759983549997 ], [ 103.839317112533578, 1.461538638199305 ], [ 103.834824082475208, 1.458927972941983 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "670" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.839316517582404, 1.216135146917686 ], [ 103.834823937407506, 1.218745831146974 ], [ 103.83482394028421, 1.223967186934355 ], [ 103.839316540676123, 1.226577858438467 ], [ 103.843809129447095, 1.223967166761423 ], [ 103.843809109230065, 1.218745811060124 ], [ 103.839316517582404, 1.216135146917686 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "671" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.839316552297078, 1.231799213892526 ], [ 103.834823946074508, 1.234409897896019 ], [ 103.834823948988117, 1.239631253068561 ], [ 103.839316575687207, 1.24224192418363 ], [ 103.843809190617108, 1.239631232637384 ], [ 103.843809170140602, 1.234409877550924 ], [ 103.839316552297078, 1.231799213892526 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "672" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.839316587456352, 1.247463279018935 ], [ 103.834823954852268, 1.250073962792719 ], [ 103.834823957802797, 1.255295317342593 ], [ 103.839316611142891, 1.257905988064702 ], [ 103.843809252565592, 1.255295296653168 ], [ 103.843809231829596, 1.250073942189376 ], [ 103.839316587456352, 1.247463279018935 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "673" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.839316623060256, 1.263127342273424 ], [ 103.834823963740803, 1.265738025813585 ], [ 103.834823966728266, 1.270959379732961 ], [ 103.839316647043205, 1.273570050058194 ], [ 103.843809315292589, 1.270959358785284 ], [ 103.843809294297088, 1.265738004951992 ], [ 103.839316623060256, 1.263127342273424 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "674" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.839316659108803, 1.278791403632502 ], [ 103.834823972740111, 1.281402086935126 ], [ 103.834823975764493, 1.286623440216175 ], [ 103.839316683388191, 1.289234110140616 ], [ 103.84380937879807, 1.286623419010243 ], [ 103.84380935754308, 1.281402065815279 ], [ 103.839316659108803, 1.278791403632502 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "675" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.83931669560198, 1.294455463072682 ], [ 103.834823981850192, 1.297066146133854 ], [ 103.834823984911509, 1.302287498768745 ], [ 103.839316720177834, 1.30489816828848 ], [ 103.843809443082108, 1.302287477304557 ], [ 103.843809421567585, 1.297066124755751 ], [ 103.83931669560198, 1.294455463072682 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "676" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.839316732539857, 1.310119520570473 ], [ 103.834823991071062, 1.312730203386281 ], [ 103.834823994169298, 1.317951555367185 ], [ 103.839316757412135, 1.320562224478298 ], [ 103.843809508144702, 1.317951533644736 ], [ 103.84380948637066, 1.312730181749919 ], [ 103.839316732539857, 1.310119520570473 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "677" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.839316769922391, 1.325783576102389 ], [ 103.834824000402705, 1.328394258668918 ], [ 103.834824003537875, 1.333615609988007 ], [ 103.839316795091122, 1.336226278686581 ], [ 103.843809573985894, 1.333615588007293 ], [ 103.843809551952319, 1.328394236774293 ], [ 103.839316769922391, 1.325783576102389 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "678" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.839316807749611, 1.341447629644941 ], [ 103.83482400984515, 1.344058311958278 ], [ 103.83482401301724, 1.349279662607722 ], [ 103.839316833214824, 1.351890330889842 ], [ 103.843809640605684, 1.349279640368742 ], [ 103.843809618312562, 1.344058289805387 ], [ 103.839316807749611, 1.341447629644941 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "679" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.839316846021546, 1.357111681174643 ], [ 103.834824019398383, 1.359722363230875 ], [ 103.834824022607407, 1.364943713202845 ], [ 103.83931687178324, 1.367554381064597 ], [ 103.843809708004102, 1.364943690705595 ], [ 103.843809685451461, 1.359722340819715 ], [ 103.839316846021546, 1.357111681174643 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "680" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.83931688473821, 1.372775730668009 ], [ 103.834824029062403, 1.375386412463222 ], [ 103.834824032308362, 1.38060776174989 ], [ 103.839316910796398, 1.383218429187357 ], [ 103.843809776181203, 1.380607738994367 ], [ 103.843809753368987, 1.375386389793791 ], [ 103.83931688473821, 1.372775730668009 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "681" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.839316923899602, 1.388439778101553 ], [ 103.834824038837226, 1.391050459631834 ], [ 103.834824042120118, 1.396271808225372 ], [ 103.839316950254286, 1.39888247523464 ], [ 103.843809845136974, 1.396271785211572 ], [ 103.843809822065197, 1.391050436704127 ], [ 103.839316923899602, 1.388439778101553 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "682" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.839316963505738, 1.404103823451791 ], [ 103.834824048722851, 1.406714504713227 ], [ 103.834824052042691, 1.411935852605805 ], [ 103.839316990156931, 1.414546519182959 ], [ 103.843809914871457, 1.411935829333726 ], [ 103.843809891540104, 1.406714481527241 ], [ 103.839316963505738, 1.404103823451791 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "683" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.839317003556644, 1.419767866695237 ], [ 103.834824058719278, 1.422378547683915 ], [ 103.834824062076052, 1.427599894867707 ], [ 103.839317030504361, 1.430210561008832 ], [ 103.843809985384681, 1.427599871337345 ], [ 103.843809961793738, 1.422378524239648 ], [ 103.839317003556644, 1.419767866695237 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "684" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.839317044052336, 1.435431907808409 ], [ 103.834824068826521, 1.438042588520416 ], [ 103.834824072220229, 1.443263934987594 ], [ 103.839317071296577, 1.445874600688775 ], [ 103.843810056676659, 1.443263911198946 ], [ 103.843810032826141, 1.438042564817864 ], [ 103.839317044052336, 1.435431907808409 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "685" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.839317084992814, 1.451095946767823 ], [ 103.83482407904458, 1.453706627199247 ], [ 103.834824082475208, 1.458927972941983 ], [ 103.839317112533578, 1.461538638199305 ], [ 103.843810128747435, 1.458927948895045 ], [ 103.843810104637313, 1.453706603238406 ], [ 103.839317084992814, 1.451095946767823 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "686" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.843809129447095, 1.223967166761423 ], [ 103.839316540676123, 1.226577858438467 ], [ 103.839316552297078, 1.231799213892526 ], [ 103.843809170140602, 1.234409877550924 ], [ 103.848301767507635, 1.23179917834631 ], [ 103.848301738435069, 1.226577823042968 ], [ 103.843809129447095, 1.223967166761423 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "687" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.843809190617108, 1.239631232637384 ], [ 103.839316575687207, 1.24224192418363 ], [ 103.839316587456352, 1.247463279018935 ], [ 103.843809231829596, 1.250073942189376 ], [ 103.848301855466858, 1.247463243020562 ], [ 103.84830182602353, 1.242241888335976 ], [ 103.843809190617108, 1.239631232637384 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "688" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.843809252565592, 1.255295296653168 ], [ 103.839316611142891, 1.257905988064702 ], [ 103.839316623060256, 1.263127342273424 ], [ 103.843809294297088, 1.265738004951992 ], [ 103.84830194453842, 1.263127305822889 ], [ 103.848301914724317, 1.257905951764889 ], [ 103.843809252565592, 1.255295296653168 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "689" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.843809315292589, 1.270959358785284 ], [ 103.839316647043205, 1.273570050058194 ], [ 103.839316659108803, 1.278791403632502 ], [ 103.84380935754308, 1.281402065815279 ], [ 103.848302034722352, 1.278791366729801 ], [ 103.84830200453743, 1.273570013306216 ], [ 103.843809315292589, 1.270959358785284 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "690" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.84380937879807, 1.286623419010243 ], [ 103.839316683388191, 1.289234110140616 ], [ 103.83931669560198, 1.294455463072682 ], [ 103.843809421567585, 1.297066124755751 ], [ 103.848302126018666, 1.294455425717809 ], [ 103.848302095462969, 1.289234072936468 ], [ 103.84380937879807, 1.286623419010243 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "691" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.843809443082108, 1.302287477304557 ], [ 103.839316720177834, 1.30489816828848 ], [ 103.839316732539857, 1.310119520570473 ], [ 103.84380948637066, 1.312730181749919 ], [ 103.848302218427435, 1.310119482763423 ], [ 103.84830218750092, 1.304898130632156 ], [ 103.843809443082108, 1.302287477304557 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "692" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.843809508144702, 1.317951533644736 ], [ 103.839316757412135, 1.320562224478298 ], [ 103.839316769922391, 1.325783576102389 ], [ 103.843809551952319, 1.328394236774293 ], [ 103.848302311948686, 1.325783537843155 ], [ 103.848302280651325, 1.320562186369793 ], [ 103.843809508144702, 1.317951533644736 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "693" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.843809573985894, 1.333615588007293 ], [ 103.839316795091122, 1.336226278686581 ], [ 103.839316807749611, 1.341447629644941 ], [ 103.843809618312562, 1.344058289805387 ], [ 103.848302406582405, 1.34144759093352 ], [ 103.848302374914226, 1.336226240125889 ], [ 103.843809573985894, 1.333615588007293 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "694" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.843809640605684, 1.349279640368742 ], [ 103.839316833214824, 1.351890330889842 ], [ 103.839316846021546, 1.357111681174643 ], [ 103.843809685451461, 1.359722340819715 ], [ 103.848302502328693, 1.357111642011028 ], [ 103.848302470289639, 1.351890291876959 ], [ 103.843809640605684, 1.349279640368742 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "695" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.843809708004102, 1.364943690705595 ], [ 103.83931687178324, 1.367554381064597 ], [ 103.83931688473821, 1.372775730668009 ], [ 103.843809753368987, 1.375386389793791 ], [ 103.848302599187534, 1.372775691052195 ], [ 103.848302566777633, 1.367554341599516 ], [ 103.843809708004102, 1.364943690705595 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "696" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.843809776181203, 1.380607738994367 ], [ 103.839316910796398, 1.383218429187357 ], [ 103.839316923899602, 1.388439778101553 ], [ 103.843809822065197, 1.391050436704127 ], [ 103.848302697158999, 1.388439738033534 ], [ 103.848302664378224, 1.383218389270074 ], [ 103.843809776181203, 1.380607738994367 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "697" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.843809845136974, 1.396271785211572 ], [ 103.839316950254286, 1.39888247523464 ], [ 103.839316963505738, 1.404103823451791 ], [ 103.843809891540104, 1.406714481527241 ], [ 103.848302796243118, 1.404103782931561 ], [ 103.848302763091439, 1.398882434865147 ], [ 103.843809845136974, 1.396271785211572 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "698" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.843809914871457, 1.411935829333726 ], [ 103.839316990156931, 1.414546519182959 ], [ 103.839317003556644, 1.419767866695237 ], [ 103.843809961793738, 1.422378524239648 ], [ 103.848302896439904, 1.419767825722791 ], [ 103.848302862917336, 1.414546478361252 ], [ 103.843809914871457, 1.411935829333726 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "699" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.843809985384681, 1.427599871337345 ], [ 103.839317030504361, 1.430210561008832 ], [ 103.839317044052336, 1.435431907808409 ], [ 103.843810032826141, 1.438042564817864 ], [ 103.848302997749414, 1.43543186638374 ], [ 103.848302963855943, 1.430210519734905 ], [ 103.843809985384681, 1.427599871337345 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "700" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.843810056676659, 1.443263911198946 ], [ 103.839317071296577, 1.445874600688775 ], [ 103.839317084992814, 1.451095946767823 ], [ 103.843810104637313, 1.453706603238406 ], [ 103.848303100171677, 1.451095904890927 ], [ 103.848303065907288, 1.445874558962621 ], [ 103.843810056676659, 1.443263911198946 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "701" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.843810128747435, 1.458927948895045 ], [ 103.839317112533578, 1.461538638199305 ], [ 103.839317126378106, 1.466759983549997 ], [ 103.843810177227297, 1.469370639477793 ], [ 103.848303203706749, 1.466759941220867 ], [ 103.848303169071414, 1.461538596020919 ], [ 103.843810128747435, 1.458927948895045 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "702" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.848301680660711, 1.216135111823621 ], [ 103.843809109230065, 1.218745811060124 ], [ 103.843809129447095, 1.223967166761423 ], [ 103.848301738435069, 1.226577823042968 ], [ 103.85279431835049, 1.223967116294077 ], [ 103.852794280793148, 1.21874576080813 ], [ 103.848301680660711, 1.216135111823621 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "703" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.848301767507635, 1.23179917834631 ], [ 103.843809170140602, 1.234409877550924 ], [ 103.843809190617108, 1.239631232637384 ], [ 103.84830182602353, 1.242241888335976 ], [ 103.852794431986609, 1.239631181523975 ], [ 103.852794393947221, 1.23440982665287 ], [ 103.848301767507635, 1.23179917834631 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "704" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.848301855466858, 1.247463243020562 ], [ 103.843809231829596, 1.250073942189376 ], [ 103.843809252565592, 1.255295296653168 ], [ 103.848301914724317, 1.257905951764889 ], [ 103.852794547068896, 1.255295244893689 ], [ 103.852794508547447, 1.250073890645255 ], [ 103.848301855466858, 1.247463243020562 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "705" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.84830194453842, 1.263127305822889 ], [ 103.843809294297088, 1.265738004951992 ], [ 103.843809315292589, 1.270959358785284 ], [ 103.84830200453743, 1.273570013306216 ], [ 103.852794663597393, 1.270959306379728 ], [ 103.852794624593869, 1.265737952761796 ], [ 103.84830194453842, 1.263127305822889 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "706" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.848302034722352, 1.278791366729801 ], [ 103.84380935754308, 1.281402065815279 ], [ 103.84380937879807, 1.286623419010243 ], [ 103.848302095462969, 1.289234072936468 ], [ 103.852794781572143, 1.286623365958603 ], [ 103.85279474208653, 1.281402012979001 ], [ 103.848302034722352, 1.278791366729801 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "707" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.848302126018666, 1.294455425717809 ], [ 103.843809421567585, 1.297066124755751 ], [ 103.843809443082108, 1.302287477304557 ], [ 103.84830218750092, 1.304898130632156 ], [ 103.852794900993189, 1.302287423606824 ], [ 103.852794861025473, 1.297066071273384 ], [ 103.848302126018666, 1.294455425717809 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "708" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.848302218427435, 1.310119482763423 ], [ 103.84380948637066, 1.312730181749919 ], [ 103.843809508144702, 1.317951533644736 ], [ 103.848302280651325, 1.320562186369793 ], [ 103.852795021860587, 1.317951479300904 ], [ 103.852794981410753, 1.312730127621454 ], [ 103.848302218427435, 1.310119482763423 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "709" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.848302311948686, 1.325783537843155 ], [ 103.843809551952319, 1.328394236774293 ], [ 103.843809573985894, 1.333615588007293 ], [ 103.848302374914226, 1.336226240125889 ], [ 103.852795144174365, 1.333615533017354 ], [ 103.8527951032424, 1.328394181999724 ], [ 103.848302311948686, 1.325783537843155 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "710" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.848302406582405, 1.34144759093352 ], [ 103.843809618312562, 1.344058289805387 ], [ 103.843809640605684, 1.349279640368742 ], [ 103.848302470289639, 1.351890291876959 ], [ 103.852795267934567, 1.349279584732688 ], [ 103.852795226520456, 1.344058234384706 ], [ 103.848302406582405, 1.34144759093352 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "711" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.848302502328693, 1.357111642011028 ], [ 103.843809685451461, 1.359722340819715 ], [ 103.843809708004102, 1.364943690705595 ], [ 103.848302566777633, 1.367554341599516 ], [ 103.852795393141264, 1.364943634423418 ], [ 103.852795351244978, 1.359722284752913 ], [ 103.848302502328693, 1.357111642011028 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "712" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.848302599187534, 1.372775691052195 ], [ 103.843809753368987, 1.375386389793791 ], [ 103.843809776181203, 1.380607738994367 ], [ 103.848302664378224, 1.383218389270074 ], [ 103.852795519794469, 1.380607682066058 ], [ 103.852795477416009, 1.37538633308086 ], [ 103.848302599187534, 1.372775691052195 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "713" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.848302697158999, 1.388439738033534 ], [ 103.843809822065197, 1.391050436704127 ], [ 103.843809845136974, 1.396271785211572 ], [ 103.848302763091439, 1.398882434865147 ], [ 103.852795647894254, 1.396271727637125 ], [ 103.852795605033592, 1.391050379345061 ], [ 103.848302697158999, 1.388439738033534 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "714" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.848302796243118, 1.404103782931561 ], [ 103.843809891540104, 1.406714481527241 ], [ 103.843809914871457, 1.411935829333726 ], [ 103.848302862917336, 1.414546478361252 ], [ 103.852795777440662, 1.411935771113132 ], [ 103.852795734097782, 1.40671442352203 ], [ 103.848302796243118, 1.404103782931561 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "715" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.848302896439904, 1.419767825722791 ], [ 103.843809961793738, 1.422378524239648 ], [ 103.843809985384681, 1.427599871337345 ], [ 103.848302963855943, 1.430210519734905 ], [ 103.852795908433734, 1.427599812470595 ], [ 103.852795864608623, 1.422378465588283 ], [ 103.848302896439904, 1.419767825722791 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "716" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.848302997749414, 1.43543186638374 ], [ 103.843810032826141, 1.438042564817864 ], [ 103.843810056676659, 1.443263911198946 ], [ 103.848303065907288, 1.445874558962621 ], [ 103.852796040873514, 1.443263851686031 ], [ 103.852795996566172, 1.438042505520339 ], [ 103.848302997749414, 1.43543186638374 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "717" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.848303100171677, 1.451095904890927 ], [ 103.843810104637313, 1.453706603238406 ], [ 103.843810128747435, 1.458927948895045 ], [ 103.848303169071414, 1.461538596020919 ], [ 103.852796174760059, 1.458927888735958 ], [ 103.852796129970457, 1.453706543294711 ], [ 103.848303100171677, 1.451095904890927 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "718" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.85279420616051, 1.208303049227485 ], [ 103.84830165195892, 1.210913755909356 ], [ 103.848301680660711, 1.216135111823621 ], [ 103.852794280793148, 1.21874576080813 ], [ 103.857286843368257, 1.216135046629051 ], [ 103.857286797437411, 1.210913690994773 ], [ 103.85279420616051, 1.208303049227485 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "719" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.85279431835049, 1.223967116294077 ], [ 103.848301738435069, 1.226577823042968 ], [ 103.848301767507635, 1.23179917834631 ], [ 103.852794393947221, 1.23440982665287 ], [ 103.857286982347432, 1.231799112311774 ], [ 103.857286935823268, 1.226577757288422 ], [ 103.85279431835049, 1.223967116294077 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "720" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.852794431986609, 1.239631181523975 ], [ 103.84830182602353, 1.242241888335976 ], [ 103.848301855466858, 1.247463243020562 ], [ 103.852794508547447, 1.250073890645255 ], [ 103.857287123106588, 1.247463176146051 ], [ 103.857287075989092, 1.242241821741458 ], [ 103.852794431986609, 1.239631181523975 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "721" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.852794547068896, 1.255295244893689 ], [ 103.848301914724317, 1.257905951764889 ], [ 103.84830194453842, 1.263127305822889 ], [ 103.852794624593869, 1.265737952761796 ], [ 103.857287265645795, 1.263127238108393 ], [ 103.857287217934939, 1.257905884330388 ], [ 103.852794547068896, 1.255295244893689 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "722" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.852794663597393, 1.270959306379728 ], [ 103.84830200453743, 1.273570013306216 ], [ 103.848302034722352, 1.278791366729801 ], [ 103.85279474208653, 1.281402012979001 ], [ 103.857287409965096, 1.27879129817531 ], [ 103.857287361660866, 1.273569945031724 ], [ 103.852794663597393, 1.270959306379728 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "723" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.852794781572143, 1.286623365958603 ], [ 103.848302095462969, 1.289234072936468 ], [ 103.848302126018666, 1.294455425717809 ], [ 103.852794861025473, 1.297066071273384 ], [ 103.857287556064549, 1.294455356323313 ], [ 103.85728750716693, 1.289234003821975 ], [ 103.852794781572143, 1.286623365958603 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "724" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.852794900993189, 1.302287423606824 ], [ 103.84830218750092, 1.304898130632156 ], [ 103.848302218427435, 1.310119482763423 ], [ 103.852794981410753, 1.312730127621454 ], [ 103.857287703944223, 1.310119412528913 ], [ 103.857287654453188, 1.304898060677652 ], [ 103.852794900993189, 1.302287423606824 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "725" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.852795021860587, 1.317951479300904 ], [ 103.848302280651325, 1.320562186369793 ], [ 103.848302311948686, 1.325783537843155 ], [ 103.8527951032424, 1.328394181999724 ], [ 103.857287853604134, 1.325783466768621 ], [ 103.857287803519682, 1.320562115575268 ], [ 103.852795021860587, 1.317951479300904 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "726" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.852795144174365, 1.333615533017354 ], [ 103.848302374914226, 1.336226240125889 ], [ 103.848302406582405, 1.34144759093352 ], [ 103.852795226520456, 1.344058234384706 ], [ 103.857288005044367, 1.341447519018951 ], [ 103.85728795436647, 1.336226168491333 ], [ 103.852795144174365, 1.333615533017354 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "727" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.852795267934567, 1.349279584732688 ], [ 103.848302470289639, 1.351890291876959 ], [ 103.848302502328693, 1.357111642011028 ], [ 103.852795351244978, 1.359722284752913 ], [ 103.857288158264979, 1.357111569256415 ], [ 103.857288106993622, 1.351890219402362 ], [ 103.852795267934567, 1.349279584732688 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "728" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.852795393141264, 1.364943634423418 ], [ 103.848302566777633, 1.367554341599516 ], [ 103.848302599187534, 1.372775691052195 ], [ 103.852795477416009, 1.37538633308086 ], [ 103.857288313265997, 1.372775617457527 ], [ 103.857288261401166, 1.367554268284868 ], [ 103.852795393141264, 1.364943634423418 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "729" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.852795519794469, 1.380607682066058 ], [ 103.848302664378224, 1.383218389270074 ], [ 103.848302697158999, 1.388439738033534 ], [ 103.852795605033592, 1.391050379345061 ], [ 103.857288470047521, 1.388439663598801 ], [ 103.857288417589189, 1.383218315115364 ], [ 103.852795519794469, 1.380607682066058 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "730" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.852795647894254, 1.396271727637125 ], [ 103.848302763091439, 1.398882434865147 ], [ 103.848302796243118, 1.404103782931561 ], [ 103.852795734097782, 1.40671442352203 ], [ 103.857288628609595, 1.404103707656752 ], [ 103.857288575557718, 1.398882359870365 ], [ 103.852795647894254, 1.396271727637125 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "731" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.852795777440662, 1.411935771113132 ], [ 103.848302862917336, 1.414546478361252 ], [ 103.848302896439904, 1.419767825722791 ], [ 103.852795864608623, 1.422378465588283 ], [ 103.85728878895226, 1.419767749607896 ], [ 103.857288735306852, 1.414546402526387 ], [ 103.852795777440662, 1.411935771113132 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "732" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.852795908433734, 1.427599812470595 ], [ 103.848302963855943, 1.430210519734905 ], [ 103.848302997749414, 1.43543186638374 ], [ 103.852795996566172, 1.438042505520339 ], [ 103.857288951075589, 1.435431789428748 ], [ 103.857288896836621, 1.430210443059946 ], [ 103.852795908433734, 1.427599812470595 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "733" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.852796040873514, 1.443263851686031 ], [ 103.848303065907288, 1.445874558962621 ], [ 103.848303100171677, 1.451095904890927 ], [ 103.852796129970457, 1.453706543294711 ], [ 103.857289114979622, 1.451095827095826 ], [ 103.857289060147082, 1.445874481447558 ], [ 103.852796040873514, 1.443263851686031 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "734" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.857286843368257, 1.216135046629051 ], [ 103.852794280793148, 1.21874576080813 ], [ 103.85279431835049, 1.223967116294077 ], [ 103.857286935823268, 1.226577757288422 ], [ 103.861779506771867, 1.223967035532322 ], [ 103.861779451874199, 1.218745680390999 ], [ 103.857286843368257, 1.216135046629051 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "735" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.857286982347432, 1.231799112311774 ], [ 103.852794393947221, 1.23440982665287 ], [ 103.852794431986609, 1.239631181523975 ], [ 103.857287075989092, 1.242241821741458 ], [ 103.86177967287405, 1.239631099728341 ], [ 103.861779617271793, 1.234409745201863 ], [ 103.857286982347432, 1.231799112311774 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "736" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.857287265645795, 1.263127238108393 ], [ 103.852794624593869, 1.265737952761796 ], [ 103.852794663597393, 1.270959306379728 ], [ 103.857287361660866, 1.273569945031724 ], [ 103.861780011420123, 1.2709592225163 ], [ 103.861779954408576, 1.265737869243004 ], [ 103.857287265645795, 1.263127238108393 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "737" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.857287409965096, 1.27879129817531 ], [ 103.85279474208653, 1.281402012979001 ], [ 103.852794781572143, 1.286623365958603 ], [ 103.85728750716693, 1.289234003821975 ], [ 103.861780183864099, 1.286623281061261 ], [ 103.861780126147892, 1.281401928426299 ], [ 103.857287409965096, 1.27879129817531 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "738" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.857287556064549, 1.294455356323313 ], [ 103.852794861025473, 1.297066071273384 ], [ 103.852794900993189, 1.302287423606824 ], [ 103.857287654453188, 1.304898060677652 ], [ 103.861780358422152, 1.302287337675556 ], [ 103.861780300001243, 1.297065985686759 ], [ 103.857287556064549, 1.294455356323313 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "739" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.857287703944223, 1.310119412528913 ], [ 103.852794981410753, 1.312730127621454 ], [ 103.852795021860587, 1.317951479300904 ], [ 103.857287803519682, 1.320562115575268 ], [ 103.86178053509434, 1.317951392335697 ], [ 103.8617804759687, 1.312730041000895 ], [ 103.857287703944223, 1.310119412528913 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "740" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.857287853604134, 1.325783466768621 ], [ 103.8527951032424, 1.328394181999724 ], [ 103.852795144174365, 1.333615533017354 ], [ 103.85728795436647, 1.336226168491333 ], [ 103.861780713880691, 1.333615445018196 ], [ 103.861780654050321, 1.328394094345217 ], [ 103.857287853604134, 1.325783466768621 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "741" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.857288005044367, 1.341447519018951 ], [ 103.852795226520456, 1.344058234384706 ], [ 103.852795267934567, 1.349279584732688 ], [ 103.857288106993622, 1.351890219402362 ], [ 103.861780894781305, 1.349279495699566 ], [ 103.861780834246176, 1.34405814569624 ], [ 103.857288005044367, 1.341447519018951 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "742" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.857288158264979, 1.357111569256415 ], [ 103.852795351244978, 1.359722284752913 ], [ 103.852795393141264, 1.364943634423418 ], [ 103.857288261401166, 1.367554268284868 ], [ 103.861781077796238, 1.36494354435632 ], [ 103.861781016556336, 1.359722195030475 ], [ 103.857288158264979, 1.357111569256415 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "743" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.857288313265997, 1.372775617457527 ], [ 103.852795477416009, 1.37538633308086 ], [ 103.852795519794469, 1.380607682066058 ], [ 103.857288417589189, 1.383218315115364 ], [ 103.861781262925561, 1.380607590964972 ], [ 103.861781200980843, 1.375386242324438 ], [ 103.857288313265997, 1.372775617457527 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "744" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.857288470047521, 1.388439663598801 ], [ 103.852795605033592, 1.391050379345061 ], [ 103.852795647894254, 1.396271727637125 ], [ 103.857288575557718, 1.398882359870365 ], [ 103.861781450169332, 1.396271635502036 ], [ 103.861781387519798, 1.39105028755464 ], [ 103.857288470047521, 1.388439663598801 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "745" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.857288628609595, 1.404103707656752 ], [ 103.852795734097782, 1.40671442352203 ], [ 103.852795777440662, 1.411935771113132 ], [ 103.857288735306852, 1.414546402526387 ], [ 103.861781639527635, 1.411935677944028 ], [ 103.861781576173257, 1.406714330697599 ], [ 103.857288628609595, 1.404103707656752 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "746" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.85728878895226, 1.419767749607896 ], [ 103.852795864608623, 1.422378465588283 ], [ 103.852795908433734, 1.427599812470595 ], [ 103.857288896836621, 1.430210443059946 ], [ 103.861781831000542, 1.427599718267463 ], [ 103.861781766941277, 1.422378371729829 ], [ 103.85728878895226, 1.419767749607896 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "747" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.857288951075589, 1.435431789428748 ], [ 103.852795996566172, 1.438042505520339 ], [ 103.852796040873514, 1.443263851686031 ], [ 103.857289060147082, 1.445874481447558 ], [ 103.861782024588109, 1.443263756448858 ], [ 103.861781959823944, 1.438042410627847 ], [ 103.857288951075589, 1.435431789428748 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "748" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.857289114979622, 1.451095827095826 ], [ 103.852796129970457, 1.453706543294711 ], [ 103.852796174760059, 1.458927888735958 ], [ 103.857289225238304, 1.46153851766574 ], [ 103.861782220290408, 1.458927792464729 ], [ 103.861782154821341, 1.453706447368169 ], [ 103.857289114979622, 1.451095827095826 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "749" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.861779506771867, 1.223967035532322 ], [ 103.857286935823268, 1.226577757288422 ], [ 103.857286982347432, 1.231799112311774 ], [ 103.861779617271793, 1.234409745201863 ], [ 103.866272196593883, 1.231799015788925 ], [ 103.866272132618121, 1.226577661174836 ], [ 103.861779506771867, 1.223967035532322 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "750" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.861779841090112, 1.255295162064164 ], [ 103.857287217934939, 1.257905884330388 ], [ 103.857287265645795, 1.263127238108393 ], [ 103.861779954408576, 1.265737869243004 ], [ 103.866272586159795, 1.263127139129942 ], [ 103.866272520552201, 1.257905785761209 ], [ 103.861779841090112, 1.255295162064164 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "751" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.861780011420123, 1.2709592225163 ], [ 103.857287361660866, 1.273569945031724 ], [ 103.857287409965096, 1.27879129817531 ], [ 103.861780126147892, 1.281401928426299 ], [ 103.866272784614466, 1.278791197969037 ], [ 103.866272718190913, 1.273569845234726 ], [ 103.861780011420123, 1.2709592225163 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "752" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.861780183864099, 1.286623281061261 ], [ 103.85728750716693, 1.289234003821975 ], [ 103.857287556064549, 1.294455356323313 ], [ 103.861780300001243, 1.297065985686759 ], [ 103.866272985517028, 1.294455254889204 ], [ 103.866272918277502, 1.289233902797146 ], [ 103.861780183864099, 1.286623281061261 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "753" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.861780358422152, 1.302287337675556 ], [ 103.857287654453188, 1.304898060677652 ], [ 103.857287703944223, 1.310119412528913 ], [ 103.8617804759687, 1.312730041000895 ], [ 103.866273188867552, 1.310119309866953 ], [ 103.866273120812039, 1.304897958424977 ], [ 103.861780358422152, 1.302287337675556 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "754" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.86178053509434, 1.317951392335697 ], [ 103.857287803519682, 1.320562115575268 ], [ 103.857287853604134, 1.325783466768621 ], [ 103.861780654050321, 1.328394094345217 ], [ 103.866273394666152, 1.325783362878796 ], [ 103.866273325794609, 1.320562012094732 ], [ 103.86178053509434, 1.317951392335697 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "755" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.861780713880691, 1.333615445018196 ], [ 103.85728795436647, 1.336226168491333 ], [ 103.857288005044367, 1.341447519018951 ], [ 103.861780834246176, 1.34405814569624 ], [ 103.866273602912869, 1.341447413901245 ], [ 103.866273533225268, 1.336226063782923 ], [ 103.861780713880691, 1.333615445018196 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "756" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.861780894781305, 1.349279495699566 ], [ 103.857288106993622, 1.351890219402362 ], [ 103.857288158264979, 1.357111569256415 ], [ 103.861781016556336, 1.359722195030475 ], [ 103.866273813607776, 1.357111462910814 ], [ 103.866273743104117, 1.351890113466061 ], [ 103.861780894781305, 1.349279495699566 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "757" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.861781077796238, 1.36494354435632 ], [ 103.857288261401166, 1.367554268284868 ], [ 103.857288313265997, 1.372775617457527 ], [ 103.861781200980843, 1.375386242324438 ], [ 103.866274026750972, 1.372775509884016 ], [ 103.866273955431211, 1.367554161120662 ], [ 103.861781077796238, 1.36494354435632 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "758" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.861781262925561, 1.380607590964972 ], [ 103.857288417589189, 1.383218315115364 ], [ 103.857288470047521, 1.388439663598801 ], [ 103.861781387519798, 1.39105028755464 ], [ 103.866274242342527, 1.388439554797364 ], [ 103.866274170206637, 1.383218206723237 ], [ 103.861781262925561, 1.380607590964972 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "759" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.861781450169332, 1.396271635502036 ], [ 103.857288575557718, 1.398882359870365 ], [ 103.857288628609595, 1.404103707656752 ], [ 103.861781576173257, 1.406714330697599 ], [ 103.866274460382527, 1.404103597627374 ], [ 103.866274387430479, 1.398882250250302 ], [ 103.861781450169332, 1.396271635502036 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "760" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.861781639527635, 1.411935677944028 ], [ 103.857288735306852, 1.414546402526387 ], [ 103.85728878895226, 1.419767749607896 ], [ 103.861781766941277, 1.422378371729829 ], [ 103.866274680871044, 1.419767638350561 ], [ 103.86627460710281, 1.414546291678373 ], [ 103.861781639527635, 1.411935677944028 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "761" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.861781831000542, 1.427599718267463 ], [ 103.857288896836621, 1.430210443059946 ], [ 103.857288951075589, 1.435431789428748 ], [ 103.861781959823944, 1.438042410627847 ], [ 103.866274903808161, 1.435431676943441 ], [ 103.866274829223727, 1.430210330983965 ], [ 103.861781831000542, 1.427599718267463 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "762" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.861782024588109, 1.443263756448858 ], [ 103.857289060147082, 1.445874481447558 ], [ 103.857289114979622, 1.451095827095826 ], [ 103.861782154821341, 1.453706447368169 ], [ 103.866275129193951, 1.451095713382531 ], [ 103.866275053793288, 1.445874368143594 ], [ 103.861782024588109, 1.443263756448858 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "763" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.866272005482486, 1.216134951333984 ], [ 103.861779451874199, 1.218745680390999 ], [ 103.861779506771867, 1.223967035532322 ], [ 103.866272132618121, 1.226577661174836 ], [ 103.870764694488628, 1.223966924476167 ], [ 103.870764622250647, 1.218745569808739 ], [ 103.866272005482486, 1.216134951333984 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "764" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.866272586159795, 1.263127139129942 ], [ 103.861779954408576, 1.265737869243004 ], [ 103.861780011420123, 1.2709592225163 ], [ 103.866272718190913, 1.273569845234726 ], [ 103.870765358538179, 1.270959107195011 ], [ 103.870765283518608, 1.265737754395625 ], [ 103.866272586159795, 1.263127139129942 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "765" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.866272784614466, 1.278791197969037 ], [ 103.861780126147892, 1.281401928426299 ], [ 103.861780183864099, 1.286623281061261 ], [ 103.866272918277502, 1.289233902797146 ], [ 103.870765585451394, 1.286623164318227 ], [ 103.870765509504565, 1.281401812157182 ], [ 103.866272784614466, 1.278791197969037 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "766" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.866272985517028, 1.294455254889204 ], [ 103.861780300001243, 1.297065985686759 ], [ 103.861780358422152, 1.302287337675556 ], [ 103.866273120812039, 1.304897958424977 ], [ 103.870765815146413, 1.302287219510761 ], [ 103.870765738272311, 1.297065867995886 ], [ 103.866272985517028, 1.294455254889204 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "767" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.866273188867552, 1.310119309866953 ], [ 103.8617804759687, 1.312730041000895 ], [ 103.86178053509434, 1.317951392335697 ], [ 103.866273325794609, 1.320562012094732 ], [ 103.870766047623349, 1.317951272749125 ], [ 103.870765969821932, 1.31272992188825 ], [ 103.866273188867552, 1.310119309866953 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "768" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.866273394666152, 1.325783362878796 ], [ 103.861780654050321, 1.328394094345217 ], [ 103.861780713880691, 1.333615445018196 ], [ 103.866273533225268, 1.336226063782923 ], [ 103.870766282882258, 1.333615324009829 ], [ 103.870766204153512, 1.328393973810784 ], [ 103.866273394666152, 1.325783362878796 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "769" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.866273602912869, 1.341447413901245 ], [ 103.861780834246176, 1.34405814569624 ], [ 103.861780894781305, 1.349279495699566 ], [ 103.866273743104117, 1.351890113466061 ], [ 103.870766520923254, 1.349279373269388 ], [ 103.870766441267151, 1.344058023740001 ], [ 103.866273602912869, 1.341447413901245 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "770" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.866273813607776, 1.357111462910814 ], [ 103.861781016556336, 1.359722195030475 ], [ 103.861781077796238, 1.36494354435632 ], [ 103.866273955431211, 1.367554161120662 ], [ 103.87076676174641, 1.364943420504312 ], [ 103.870766681162891, 1.359722071652413 ], [ 103.866273813607776, 1.357111462910814 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "771" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.866274026750972, 1.372775509884016 ], [ 103.861781200980843, 1.375386242324438 ], [ 103.861781262925561, 1.380607590964972 ], [ 103.866274170206637, 1.383218206723237 ], [ 103.870767005351823, 1.380607465691117 ], [ 103.870766923840876, 1.375386117524534 ], [ 103.866274026750972, 1.372775509884016 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "772" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.866274242342527, 1.388439554797364 ], [ 103.861781387519798, 1.39105028755464 ], [ 103.861781450169332, 1.396271635502036 ], [ 103.866274387430479, 1.398882250250302 ], [ 103.870767251739579, 1.396271508806317 ], [ 103.87076716930116, 1.391050161332879 ], [ 103.866274242342527, 1.388439554797364 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "773" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.866274460382527, 1.404103597627374 ], [ 103.861781576173257, 1.406714330697599 ], [ 103.861781639527635, 1.411935677944028 ], [ 103.86627460710281, 1.414546291678373 ], [ 103.87076750090975, 1.411935549826426 ], [ 103.87076741754386, 1.406714203053961 ], [ 103.866274460382527, 1.404103597627374 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "774" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.866274680871044, 1.419767638350561 ], [ 103.861781766941277, 1.422378371729829 ], [ 103.861781831000542, 1.427599718267463 ], [ 103.866274829223727, 1.430210330983965 ], [ 103.870767752862463, 1.427599588727961 ], [ 103.870767668569044, 1.422378242664296 ], [ 103.866274680871044, 1.419767638350561 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "775" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.866274903808161, 1.435431676943441 ], [ 103.861781959823944, 1.438042410627847 ], [ 103.861782024588109, 1.443263756448858 ], [ 103.866275053793288, 1.445874368143594 ], [ 103.870768007597789, 1.443263625487436 ], [ 103.870767922376814, 1.438042280140401 ], [ 103.866274903808161, 1.435431676943441 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "776" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.870765358538179, 1.270959107195011 ], [ 103.866272718190913, 1.273569845234726 ], [ 103.866272784614466, 1.278791197969037 ], [ 103.870765509504565, 1.281401812157182 ], [ 103.875258158447863, 1.278791066110995 ], [ 103.875258073905016, 1.273569713915236 ], [ 103.870765358538179, 1.270959107195011 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "777" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.870765585451394, 1.286623164318227 ], [ 103.866272918277502, 1.289233902797146 ], [ 103.866272985517028, 1.294455254889204 ], [ 103.870765738272311, 1.297065867995886 ], [ 103.875258414153507, 1.294455121415493 ], [ 103.875258328572102, 1.289233769861993 ], [ 103.870765585451394, 1.286623164318227 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "778" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.870765815146413, 1.302287219510761 ], [ 103.866273120812039, 1.304897958424977 ], [ 103.866273188867552, 1.310119309866953 ], [ 103.870765969821932, 1.31272992188825 ], [ 103.875258672974894, 1.310119174777554 ], [ 103.875258586354903, 1.304897823874144 ], [ 103.870765815146413, 1.302287219510761 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "779" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.870766047623349, 1.317951272749125 ], [ 103.866273325794609, 1.320562012094732 ], [ 103.866273394666152, 1.325783362878796 ], [ 103.870766204153512, 1.328393973810784 ], [ 103.875258934912125, 1.325783226173691 ], [ 103.875258847253505, 1.320561875928198 ], [ 103.870766047623349, 1.317951272749125 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "780" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.870766282882258, 1.333615324009829 ], [ 103.866273533225268, 1.336226063782923 ], [ 103.866273602912869, 1.341447413901245 ], [ 103.870766441267151, 1.344058023740001 ], [ 103.875259199965299, 1.341447275580415 ], [ 103.875259111268008, 1.336225926000669 ], [ 103.870766282882258, 1.333615324009829 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "781" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.870766520923254, 1.349279373269388 ], [ 103.866273743104117, 1.351890113466061 ], [ 103.866273813607776, 1.357111462910814 ], [ 103.870766681162891, 1.359722071652413 ], [ 103.875259468134487, 1.357111322974238 ], [ 103.875259378398525, 1.351889974068069 ], [ 103.870766520923254, 1.349279373269388 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "782" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.87076676174641, 1.364943420504312 ], [ 103.866273955431211, 1.367554161120662 ], [ 103.866274026750972, 1.372775509884016 ], [ 103.870766923840876, 1.375386117524534 ], [ 103.875259739419832, 1.372775368331674 ], [ 103.875259648645141, 1.36755402010691 ], [ 103.87076676174641, 1.364943420504312 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "783" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.870767005351823, 1.380607465691117 ], [ 103.866274170206637, 1.383218206723237 ], [ 103.866274242342527, 1.388439554797364 ], [ 103.87076716930116, 1.391050161332879 ], [ 103.875260013821389, 1.388439411629236 ], [ 103.875259922007956, 1.383218064093707 ], [ 103.870767005351823, 1.380607465691117 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "784" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.870767251739579, 1.396271508806317 ], [ 103.866274387430479, 1.398882250250302 ], [ 103.866274460382527, 1.404103597627374 ], [ 103.87076741754386, 1.406714203053961 ], [ 103.875260291339302, 1.404103452843441 ], [ 103.875260198487069, 1.398882106004973 ], [ 103.870767251739579, 1.396271508806317 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "785" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.87076750090975, 1.411935549826426 ], [ 103.86627460710281, 1.414546291678373 ], [ 103.866274680871044, 1.419767638350561 ], [ 103.870767668569044, 1.422378242664296 ], [ 103.875260571973641, 1.419767491950801 ], [ 103.875260478082581, 1.414546145817224 ], [ 103.87076750090975, 1.411935549826426 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "786" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.870767752862463, 1.427599588727961 ], [ 103.866274829223727, 1.430210330983965 ], [ 103.866274903808161, 1.435431676943441 ], [ 103.870767922376814, 1.438042280140401 ], [ 103.87526085572452, 1.435431528927833 ], [ 103.875260760794603, 1.430210183506975 ], [ 103.870767752862463, 1.427599588727961 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "787" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.870768007597789, 1.443263625487436 ], [ 103.866275053793288, 1.445874368143594 ], [ 103.866275129193951, 1.451095713382531 ], [ 103.870768178967282, 1.453706315458791 ], [ 103.875261142592052, 1.451095563751055 ], [ 103.875261046623251, 1.445874219050743 ], [ 103.870768007597789, 1.443263625487436 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "788" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.875258158447863, 1.278791066110995 ], [ 103.870765509504565, 1.281401812157182 ], [ 103.870765585451394, 1.286623164318227 ], [ 103.875258328572102, 1.289233769861993 ], [ 103.879750986111404, 1.286623015729516 ], [ 103.87975089193398, 1.281401664171665 ], [ 103.875258158447863, 1.278791066110995 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "789" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.875258414153507, 1.294455121415493 ], [ 103.870765738272311, 1.297065867995886 ], [ 103.870765815146413, 1.302287219510761 ], [ 103.875258586354903, 1.304897823874144 ], [ 103.879751270943387, 1.302287069112456 ], [ 103.879751175616093, 1.297065718200782 ], [ 103.875258414153507, 1.294455121415493 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "790" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.875258672974894, 1.310119174777554 ], [ 103.870765969821932, 1.31272992188825 ], [ 103.870766047623349, 1.317951272749125 ], [ 103.875258847253505, 1.320561875928198 ], [ 103.879751559225042, 1.317951120541202 ], [ 103.879751462747848, 1.312729770283536 ], [ 103.875258672974894, 1.310119174777554 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "791" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.875258934912125, 1.325783226173691 ], [ 103.870766204153512, 1.328393973810784 ], [ 103.870766282882258, 1.333615324009829 ], [ 103.875259111268008, 1.336225926000669 ], [ 103.879751850956481, 1.33361516999227 ], [ 103.879751753329359, 1.328393820396439 ], [ 103.875258934912125, 1.325783226173691 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "792" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.875259199965299, 1.341447275580415 ], [ 103.870766441267151, 1.344058023740001 ], [ 103.870766520923254, 1.349279373269388 ], [ 103.875259378398525, 1.351889974068069 ], [ 103.879752146137818, 1.349279217442168 ], [ 103.879752047360725, 1.344057868516003 ], [ 103.875259199965299, 1.341447275580415 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "793" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.875259468134487, 1.357111322974238 ], [ 103.870766681162891, 1.359722071652413 ], [ 103.87076676174641, 1.364943420504312 ], [ 103.875259648645141, 1.36755402010691 ], [ 103.879752444769167, 1.364943262867411 ], [ 103.879752344842046, 1.359721914618741 ], [ 103.875259468134487, 1.357111322974238 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "794" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.875259739419832, 1.372775368331674 ], [ 103.870766923840876, 1.375386117524534 ], [ 103.870767005351823, 1.380607465691117 ], [ 103.875259922007956, 1.383218064093707 ], [ 103.879752746850642, 1.380607306244511 ], [ 103.879752645773465, 1.375385958681166 ], [ 103.875259739419832, 1.372775368331674 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "795" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.875260013821389, 1.388439411629236 ], [ 103.87076716930116, 1.391050161332879 ], [ 103.870767251739579, 1.396271508806317 ], [ 103.875260198487069, 1.398882106004973 ], [ 103.879753052382327, 1.396271347549984 ], [ 103.879752950155066, 1.39105000067979 ], [ 103.875260013821389, 1.388439411629236 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "796" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.875260291339302, 1.404103452843441 ], [ 103.87076741754386, 1.406714203053961 ], [ 103.87076750090975, 1.411935549826426 ], [ 103.875260478082581, 1.414546145817224 ], [ 103.879753361364365, 1.411935386760343 ], [ 103.879753257986962, 1.40671404059113 ], [ 103.875260291339302, 1.404103452843441 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "797" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.875260571973641, 1.419767491950801 ], [ 103.870767668569044, 1.422378242664296 ], [ 103.870767752862463, 1.427599588727961 ], [ 103.875260760794603, 1.430210183506975 ], [ 103.879753673796841, 1.427599423852105 ], [ 103.879753569269283, 1.4223780783917 ], [ 103.875260571973641, 1.419767491950801 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "798" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.87526085572452, 1.435431528927833 ], [ 103.870767922376814, 1.438042280140401 ], [ 103.870768007597789, 1.443263625487436 ], [ 103.875261046623251, 1.445874219050743 ], [ 103.879753989679884, 1.443263458801784 ], [ 103.879753884002142, 1.438042114058017 ], [ 103.87526085572452, 1.435431528927833 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "799" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.879750986111404, 1.286623015729516 ], [ 103.875258328572102, 1.289233769861993 ], [ 103.875258414153507, 1.294455121415493 ], [ 103.879751175616093, 1.297065718200782 ], [ 103.884243841751399, 1.294454955902197 ], [ 103.884243737828129, 1.289233605016534 ], [ 103.879750986111404, 1.286623015729516 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "800" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.879751270943387, 1.302287069112456 ], [ 103.875258586354903, 1.304897823874144 ], [ 103.875258672974894, 1.310119174777554 ], [ 103.879751462747848, 1.312729770283536 ], [ 103.884244156043607, 1.310119007260735 ], [ 103.884244050859138, 1.304897657025168 ], [ 103.879751270943387, 1.302287069112456 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "801" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.879751559225042, 1.317951120541202 ], [ 103.875258847253505, 1.320561875928198 ], [ 103.875258934912125, 1.325783226173691 ], [ 103.879751753329359, 1.328393820396439 ], [ 103.884244474119456, 1.325783056653324 ], [ 103.884244367673759, 1.320561707075683 ], [ 103.879751559225042, 1.317951120541202 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "802" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.879751850956481, 1.33361516999227 ], [ 103.875259111268008, 1.336225926000669 ], [ 103.875259199965299, 1.341447275580415 ], [ 103.879752047360725, 1.344057868516003 ], [ 103.884244795979043, 1.341447104056476 ], [ 103.884244688272091, 1.336225755144591 ], [ 103.879751850956481, 1.33361516999227 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "803" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.879752146137818, 1.349279217442168 ], [ 103.875259378398525, 1.351889974068069 ], [ 103.875259468134487, 1.357111322974238 ], [ 103.879752344842046, 1.359721914618741 ], [ 103.884245121622499, 1.357111149446703 ], [ 103.884245012654233, 1.351889801208402 ], [ 103.879752146137818, 1.349279217442168 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "804" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.879752444769167, 1.364943262867411 ], [ 103.875259648645141, 1.36755402010691 ], [ 103.875259739419832, 1.372775368331674 ], [ 103.879752645773465, 1.375385958681166 ], [ 103.884245451049935, 1.372775192800519 ], [ 103.884245340820328, 1.367553845243631 ], [ 103.879752444769167, 1.364943262867411 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "805" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.879752746850642, 1.380607306244511 ], [ 103.875259922007956, 1.383218064093707 ], [ 103.875260013821389, 1.388439411629236 ], [ 103.879752950155066, 1.39105000067979 ], [ 103.884245784261466, 1.388439234094436 ], [ 103.884245672770504, 1.383217887226791 ], [ 103.879752746850642, 1.380607306244511 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "806" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.879753052382327, 1.396271347549984 ], [ 103.875260198487069, 1.398882106004973 ], [ 103.875260291339302, 1.404103452843441 ], [ 103.879753257986962, 1.40671404059113 ], [ 103.884246121257263, 1.404103273304969 ], [ 103.884246008504846, 1.398881927134395 ], [ 103.879753052382327, 1.396271347549984 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "807" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.879753361364365, 1.411935386760343 ], [ 103.875260478082581, 1.414546145817224 ], [ 103.875260571973641, 1.419767491950801 ], [ 103.879753569269283, 1.4223780783917 ], [ 103.884246462037382, 1.419767310408633 ], [ 103.88424634802351, 1.414545964942958 ], [ 103.879753361364365, 1.411935386760343 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "808" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.879753673796841, 1.427599423852105 ], [ 103.875260760794603, 1.430210183506975 ], [ 103.87526085572452, 1.435431528927833 ], [ 103.879753884002142, 1.438042114058017 ], [ 103.884246806601993, 1.435431345381943 ], [ 103.884246691326624, 1.430210000628996 ], [ 103.879753673796841, 1.427599423852105 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "809" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.884243531242703, 1.278790902601199 ], [ 103.87975089193398, 1.281401664171665 ], [ 103.879750986111404, 1.286623015729516 ], [ 103.884243737828129, 1.289233605016534 ], [ 103.888736385621556, 1.286622835295147 ], [ 103.888736273213553, 1.281401484469766 ], [ 103.884243531242703, 1.278790902601199 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "810" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.884243841751399, 1.294454955902197 ], [ 103.879751175616093, 1.297065718200782 ], [ 103.879751270943387, 1.302287069112456 ], [ 103.884244050859138, 1.304897657025168 ], [ 103.888736725590448, 1.302286886480657 ], [ 103.888736611810003, 1.297065536301462 ], [ 103.884243841751399, 1.294454955902197 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "811" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.884244156043607, 1.310119007260735 ], [ 103.879751462747848, 1.312729770283536 ], [ 103.879751559225042, 1.317951120541202 ], [ 103.884244367673759, 1.320561707075683 ], [ 103.888737069676793, 1.317950935711949 ], [ 103.88873695452385, 1.312729586186771 ], [ 103.884244156043607, 1.310119007260735 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "812" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.884244474119456, 1.325783056653324 ], [ 103.879751753329359, 1.328393820396439 ], [ 103.879751850956481, 1.33361516999227 ], [ 103.884244688272091, 1.336225755144591 ], [ 103.888737417880748, 1.333614982965535 ], [ 103.888737301355249, 1.328393634102201 ], [ 103.884244474119456, 1.325783056653324 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "813" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.884244795979043, 1.341447104056476 ], [ 103.879752047360725, 1.344057868516003 ], [ 103.879752146137818, 1.349279217442168 ], [ 103.884245012654233, 1.351889801208402 ], [ 103.888737770202397, 1.349279028217926 ], [ 103.888737652304314, 1.344057680024267 ], [ 103.884244795979043, 1.341447104056476 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "814" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.884245121622499, 1.357111149446703 ], [ 103.879752344842046, 1.359721914618741 ], [ 103.879752444769167, 1.364943262867411 ], [ 103.884245340820328, 1.367553845243631 ], [ 103.888738126641897, 1.364943071445634 ], [ 103.888738007371188, 1.359721723929479 ], [ 103.884245121622499, 1.357111149446703 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "815" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.884245451049935, 1.372775192800519 ], [ 103.879752645773465, 1.375385958681166 ], [ 103.879752746850642, 1.380607306244511 ], [ 103.884245672770504, 1.383217887226791 ], [ 103.88873848719939, 1.380607112625173 ], [ 103.888738366555998, 1.375385765794351 ], [ 103.884245451049935, 1.372775192800519 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "816" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.884245784261466, 1.388439234094436 ], [ 103.879752950155066, 1.39105000067979 ], [ 103.879753052382327, 1.396271347549984 ], [ 103.884246008504846, 1.398881927134395 ], [ 103.888738851874962, 1.396271151733057 ], [ 103.888738729858858, 1.391049805595396 ], [ 103.884245784261466, 1.388439234094436 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "817" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.884246121257263, 1.404103273304969 ], [ 103.879753257986962, 1.40671404059113 ], [ 103.879753361364365, 1.411935386760343 ], [ 103.88424634802351, 1.414545964942958 ], [ 103.888739220668811, 1.411935188745799 ], [ 103.888739097279938, 1.406713843309128 ], [ 103.884246121257263, 1.404103273304969 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "818" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.884246462037382, 1.419767310408633 ], [ 103.879753569269283, 1.4223780783917 ], [ 103.879753673796841, 1.427599423852105 ], [ 103.884246691326624, 1.430210000628996 ], [ 103.888739593581036, 1.427599223639915 ], [ 103.888739468819352, 1.422377878912062 ], [ 103.884246462037382, 1.419767310408633 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "819" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.888736385621556, 1.286622835295147 ], [ 103.884243737828129, 1.289233605016534 ], [ 103.884243841751399, 1.294454955902197 ], [ 103.888736611810003, 1.297065536301462 ], [ 103.893229268088135, 1.294454758349337 ], [ 103.893229145822986, 1.289233408260787 ], [ 103.888736385621556, 1.286622835295147 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "820" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.888736725590448, 1.302286886480657 ], [ 103.884244050859138, 1.304897657025168 ], [ 103.884244156043607, 1.310119007260735 ], [ 103.88873695452385, 1.312729586186771 ], [ 103.893229637851121, 1.310118807316515 ], [ 103.893229514102188, 1.304897457878071 ], [ 103.888736725590448, 1.302286886480657 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "821" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.888737069676793, 1.317950935711949 ], [ 103.884244367673759, 1.320561707075683 ], [ 103.884244474119456, 1.325783056653324 ], [ 103.888737301355249, 1.328393634102201 ], [ 103.89323001206553, 1.325782854317716 ], [ 103.893229886832785, 1.320561505537207 ], [ 103.888737069676793, 1.317950935711949 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "822" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.888737417880748, 1.333614982965535 ], [ 103.884244688272091, 1.336225755144591 ], [ 103.884244795979043, 1.341447104056476 ], [ 103.888737652304314, 1.344057680024267 ], [ 103.893230390731503, 1.341446899329451 ], [ 103.893230264014889, 1.336225551214708 ], [ 103.888737417880748, 1.333614982965535 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "823" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.888737770202397, 1.349279028217926 ], [ 103.884245012654233, 1.351889801208402 ], [ 103.884245121622499, 1.357111149446703 ], [ 103.888738007371188, 1.359721723929479 ], [ 103.893230773849169, 1.357110942328232 ], [ 103.893230645648643, 1.351889594887083 ], [ 103.888737770202397, 1.349279028217926 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "824" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.888738126641897, 1.364943071445634 ], [ 103.884245340820328, 1.367553845243631 ], [ 103.884245451049935, 1.372775192800519 ], [ 103.888738366555998, 1.375385765794351 ], [ 103.893231161418655, 1.372774983290572 ], [ 103.893231031734175, 1.367553636530846 ], [ 103.888738126641897, 1.364943071445634 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "825" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.88873848719939, 1.380607112625173 ], [ 103.884245672770504, 1.383217887226791 ], [ 103.884245784261466, 1.388439234094436 ], [ 103.888738729858858, 1.391049805595396 ], [ 103.89323155344016, 1.388439022192984 ], [ 103.893231422271654, 1.383217676122511 ], [ 103.88873848719939, 1.380607112625173 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "826" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.888738851874962, 1.396271151733057 ], [ 103.884246008504846, 1.398881927134395 ], [ 103.884246121257263, 1.404103273304969 ], [ 103.888739097279938, 1.406713843309128 ], [ 103.893231949913755, 1.404103059011982 ], [ 103.893231817261196, 1.398881713638589 ], [ 103.888738851874962, 1.396271151733057 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "827" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.888739220668811, 1.411935188745799 ], [ 103.88424634802351, 1.414545964942958 ], [ 103.884246462037382, 1.419767310408633 ], [ 103.888739468819352, 1.422377878912062 ], [ 103.893232350839639, 1.41976709372408 ], [ 103.89323221670297, 1.414545749055597 ], [ 103.888739220668811, 1.411935188745799 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "828" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.893229268088135, 1.294454758349337 ], [ 103.888736611810003, 1.297065536301462 ], [ 103.888736725590448, 1.302286886480657 ], [ 103.893229514102188, 1.304897457878071 ], [ 103.897722178865038, 1.302286671615388 ], [ 103.897722046631429, 1.297065322297951 ], [ 103.893229268088135, 1.294454758349337 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "829" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.893229637851121, 1.310118807316515 ], [ 103.88873695452385, 1.312729586186771 ], [ 103.888737069676793, 1.317950935711949 ], [ 103.893229886832785, 1.320561505537207 ], [ 103.897722578756031, 1.317950718261388 ], [ 103.897722444927325, 1.312729369597977 ], [ 103.893229637851121, 1.310118807316515 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "830" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.89323001206553, 1.325782854317716 ], [ 103.888737301355249, 1.328393634102201 ], [ 103.888737417880748, 1.333614982965535 ], [ 103.893230264014889, 1.336225551214708 ], [ 103.897722983432416, 1.33361476292965 ], [ 103.89772284800857, 1.328393414928094 ], [ 103.89323001206553, 1.325782854317716 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "831" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.893230390731503, 1.341446899329451 ], [ 103.888737652304314, 1.344057680024267 ], [ 103.888737770202397, 1.349279028217926 ], [ 103.893230645648643, 1.351889594887083 ], [ 103.897723392894363, 1.349278805596685 ], [ 103.897723255875306, 1.344057458264815 ], [ 103.893230390731503, 1.341446899329451 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "832" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.893230773849169, 1.357110942328232 ], [ 103.888738007371188, 1.359721723929479 ], [ 103.888738126641897, 1.364943071445634 ], [ 103.893231031734175, 1.367553636530846 ], [ 103.897723807141958, 1.364942846239006 ], [ 103.897723668527675, 1.35972149958465 ], [ 103.893230773849169, 1.357110942328232 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "833" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.893231161418655, 1.372774983290572 ], [ 103.888738366555998, 1.375385765794351 ], [ 103.88873848719939, 1.380607112625173 ], [ 103.893231422271654, 1.383217676122511 ], [ 103.897724226175427, 1.380606884833127 ], [ 103.897724085965834, 1.375385538864114 ], [ 103.893231161418655, 1.372774983290572 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "834" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.89323155344016, 1.388439022192984 ], [ 103.888738729858858, 1.391049805595396 ], [ 103.888738851874962, 1.396271151733057 ], [ 103.893231817261196, 1.398881713638589 ], [ 103.897724649994871, 1.396270921355559 ], [ 103.897724508189924, 1.391049576079719 ], [ 103.89323155344016, 1.388439022192984 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "835" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.893231949913755, 1.404103059011982 ], [ 103.888739097279938, 1.406713843309128 ], [ 103.888739220668811, 1.411935188745799 ], [ 103.89323221670297, 1.414545749055597 ], [ 103.897725078600473, 1.411934955782817 ], [ 103.897724935200131, 1.406713611207978 ], [ 103.893231949913755, 1.404103059011982 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "836" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.893232350839639, 1.41976709372408 ], [ 103.888739468819352, 1.422377878912062 ], [ 103.888739593581036, 1.427599223639915 ], [ 103.893232620597118, 1.430209782350048 ], [ 103.897725511992391, 1.427598988091417 ], [ 103.897725366996582, 1.422377644225406 ], [ 103.893232350839639, 1.41976709372408 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "837" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.897721783759266, 1.286622623015141 ], [ 103.893229145822986, 1.289233408260787 ], [ 103.893229268088135, 1.294454758349337 ], [ 103.897722046631429, 1.297065322297951 ], [ 103.902214692941101, 1.294454528756936 ], [ 103.902214552334101, 1.289233179594778 ], [ 103.897721783759266, 1.286622623015141 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "838" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.897722178865038, 1.302286671615388 ], [ 103.893229514102188, 1.304897457878071 ], [ 103.893229637851121, 1.310118807316515 ], [ 103.897722444927325, 1.312729369597977 ], [ 103.902215118174823, 1.310118574944919 ], [ 103.902214975861469, 1.304897226432877 ], [ 103.897722178865038, 1.302286671615388 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "839" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.897722578756031, 1.317950718261388 ], [ 103.893229886832785, 1.320561505537207 ], [ 103.89323001206553, 1.325782854317716 ], [ 103.89772284800857, 1.328393414928094 ], [ 103.902215548527764, 1.325782619166891 ], [ 103.90221540450797, 1.320561271312796 ], [ 103.897722578756031, 1.317950718261388 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "840" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.897722983432416, 1.33361476292965 ], [ 103.893230264014889, 1.336225551214708 ], [ 103.893230390731503, 1.341446899329451 ], [ 103.897723255875306, 1.344057458264815 ], [ 103.902215984000065, 1.341446661399364 ], [ 103.902215838273804, 1.336225314211045 ], [ 103.897722983432416, 1.33361476292965 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "841" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.897723392894363, 1.349278805596685 ], [ 103.893230645648643, 1.351889594887083 ], [ 103.893230773849169, 1.357110942328232 ], [ 103.897723668527675, 1.35972149958465 ], [ 103.902216424591899, 1.357110701618849 ], [ 103.902216277159098, 1.351889355104136 ], [ 103.897723392894363, 1.349278805596685 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "842" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.897723807141958, 1.364942846239006 ], [ 103.893231031734175, 1.367553636530846 ], [ 103.893231161418655, 1.372774983290572 ], [ 103.897724085965834, 1.375385538864114 ], [ 103.902216870303405, 1.372774739801859 ], [ 103.902216721164038, 1.367553393968581 ], [ 103.897723807141958, 1.364942846239006 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "843" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.897724226175427, 1.380606884833127 ], [ 103.893231422271654, 1.383217676122511 ], [ 103.89323155344016, 1.388439022192984 ], [ 103.897724508189924, 1.391049576079719 ], [ 103.902217321134785, 1.388438775924907 ], [ 103.902217170288765, 1.383217430780892 ], [ 103.897724226175427, 1.380606884833127 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "844" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.897724649994871, 1.396270921355559 ], [ 103.893231817261196, 1.398881713638589 ], [ 103.893231949913755, 1.404103059011982 ], [ 103.897724935200131, 1.406713611207978 ], [ 103.902217777086179, 1.404102809964505 ], [ 103.902217624533478, 1.398881465517583 ], [ 103.897724649994871, 1.396270921355559 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "845" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.897725078600473, 1.411934955782817 ], [ 103.89323221670297, 1.414545749055597 ], [ 103.893232350839639, 1.41976709372408 ], [ 103.897725366996582, 1.422377644225406 ], [ 103.902218238157744, 1.419766841897169 ], [ 103.902218083898305, 1.414545498155168 ], [ 103.897725078600473, 1.411934955782817 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "846" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.902214692941101, 1.294454528756936 ], [ 103.897722046631429, 1.297065322297951 ], [ 103.897722178865038, 1.302286671615388 ], [ 103.902214975861469, 1.304897226432877 ], [ 103.906707630544531, 1.302286424516676 ], [ 103.906707479857786, 1.297065076190274 ], [ 103.902214692941101, 1.294454528756936 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "847" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.902215118174823, 1.310118574944919 ], [ 103.897722444927325, 1.312729369597977 ], [ 103.897722578756031, 1.317950718261388 ], [ 103.90221540450797, 1.320561271312796 ], [ 103.906708086240144, 1.317950468189544 ], [ 103.906707933735703, 1.31272912051718 ], [ 103.902215118174823, 1.310118574944919 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "848" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.902215548527764, 1.325782619166891 ], [ 103.89772284800857, 1.328393414928094 ], [ 103.897722983432416, 1.33361476292965 ], [ 103.902215838273804, 1.336225314211045 ], [ 103.906708547388931, 1.333614509884639 ], [ 103.906708393066751, 1.328393162874143 ], [ 103.902215548527764, 1.325782619166891 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "849" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.902215984000065, 1.341446661399364 ], [ 103.897723255875306, 1.344057458264815 ], [ 103.897723392894363, 1.349278805596685 ], [ 103.902216277159098, 1.351889355104136 ], [ 103.906709013991076, 1.349278549578472 ], [ 103.906708857851086, 1.344057203237674 ], [ 103.902215984000065, 1.341446661399364 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "850" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.902216424591899, 1.357110701618849 ], [ 103.897723668527675, 1.35972149958465 ], [ 103.897723807141958, 1.364942846239006 ], [ 103.902216721164038, 1.367553393968581 ], [ 103.906709486046751, 1.364942587247555 ], [ 103.906709328088894, 1.359721241584283 ], [ 103.902216424591899, 1.357110701618849 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "851" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.902216870303405, 1.372774739801859 ], [ 103.897724085965834, 1.375385538864114 ], [ 103.897724226175427, 1.380606884833127 ], [ 103.902217170288765, 1.383217430780892 ], [ 103.906709963556125, 1.3806066228684 ], [ 103.906709803780359, 1.375385277890483 ], [ 103.902216870303405, 1.372774739801859 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "852" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.902217321134785, 1.388438775924907 ], [ 103.897724508189924, 1.391049576079719 ], [ 103.897724649994871, 1.396270921355559 ], [ 103.902217624533478, 1.398881465517583 ], [ 103.906710446519369, 1.39627065641752 ], [ 103.906710284925637, 1.391049312132787 ], [ 103.902217321134785, 1.388438775924907 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "853" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.902217777086179, 1.404102809964505 ], [ 103.897724935200131, 1.406713611207978 ], [ 103.897725078600473, 1.411934955782817 ], [ 103.902218083898305, 1.414545498155168 ], [ 103.906710934936683, 1.411934687871427 ], [ 103.906710771524899, 1.406713344287709 ], [ 103.902217777086179, 1.404102809964505 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "854" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.906707630544531, 1.302286424516676 ], [ 103.902214975861469, 1.304897226432877 ], [ 103.902215118174823, 1.310118574944919 ], [ 103.906707933735703, 1.31272912051718 ], [ 103.911200596792128, 1.310118310145975 ], [ 103.911200435914338, 1.304896962689615 ], [ 103.906707630544531, 1.302286424516676 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "855" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.906708086240144, 1.317950468189544 ], [ 103.90221540450797, 1.320561271312796 ], [ 103.902215548527764, 1.325782619166891 ], [ 103.906708393066751, 1.328393162874143 ], [ 103.911201083283544, 1.325782351200879 ], [ 103.911200920476716, 1.320561004402477 ], [ 103.906708086240144, 1.317950468189544 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "856" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.906708547388931, 1.333614509884639 ], [ 103.902215838273804, 1.336225314211045 ], [ 103.902215984000065, 1.341446661399364 ], [ 103.906708857851086, 1.344057203237674 ], [ 103.911201575562117, 1.341446390266245 ], [ 103.911201410826237, 1.336225044133633 ], [ 103.906708547388931, 1.333614509884639 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "857" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.906709013991076, 1.349278549578472 ], [ 103.902216277159098, 1.351889355104136 ], [ 103.902216424591899, 1.357110701618849 ], [ 103.906709328088894, 1.359721241584283 ], [ 103.911202073628047, 1.357110427318585 ], [ 103.911201906963029, 1.351889081859591 ], [ 103.906709013991076, 1.349278549578472 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "858" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.906709486046751, 1.364942587247555 ], [ 103.902216721164038, 1.367553393968581 ], [ 103.902216870303405, 1.372774739801859 ], [ 103.906709803780359, 1.375385277890483 ], [ 103.911202577481532, 1.372774462334411 ], [ 103.911202408887306, 1.367553117556865 ], [ 103.906709486046751, 1.364942587247555 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "859" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.906709963556125, 1.3806066228684 ], [ 103.902217170288765, 1.383217430780892 ], [ 103.902217321134785, 1.388438775924907 ], [ 103.906710284925637, 1.391049312132787 ], [ 103.911203087122729, 1.388438495290235 ], [ 103.911202916599237, 1.383217151201966 ], [ 103.906709963556125, 1.3806066228684 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "860" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.906710446519369, 1.39627065641752 ], [ 103.902217624533478, 1.398881465517583 ], [ 103.902217777086179, 1.404102809964505 ], [ 103.906710771524899, 1.406713344287709 ], [ 103.911203602551865, 1.40410252616257 ], [ 103.911203430099036, 1.398881182771406 ], [ 103.906710446519369, 1.39627065641752 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "861" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.906710934936683, 1.411934687871427 ], [ 103.902218083898305, 1.414545498155168 ], [ 103.902218238157744, 1.419766841897169 ], [ 103.906711263578345, 1.422377374331762 ], [ 103.911204123769068, 1.419766554927929 ], [ 103.911203949386874, 1.414545212241701 ], [ 103.906710934936683, 1.411934687871427 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "862" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.911200116087727, 1.294454267125024 ], [ 103.906707479857786, 1.297065076190274 ], [ 103.906707630544531, 1.302286424516676 ], [ 103.911200435914338, 1.304896962689615 ], [ 103.915693080406356, 1.30228614518455 ], [ 103.91569291126649, 1.297064797978462 ], [ 103.911200116087727, 1.294454267125024 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "863" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.911200596792128, 1.310118310145975 ], [ 103.906707933735703, 1.31272912051718 ], [ 103.906708086240144, 1.317950468189544 ], [ 103.911200920476716, 1.320561004402477 ], [ 103.915693591906503, 1.317950185496449 ], [ 103.915693420726356, 1.312728838944413 ], [ 103.911200596792128, 1.310118310145975 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "864" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.911201083283544, 1.325782351200879 ], [ 103.906708393066751, 1.328393162874143 ], [ 103.906708547388931, 1.333614509884639 ], [ 103.911201410826237, 1.336225044133633 ], [ 103.915694109527649, 1.333614223830536 ], [ 103.91569393630715, 1.328392877940381 ], [ 103.911201083283544, 1.325782351200879 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "865" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.911201575562117, 1.341446390266245 ], [ 103.906708857851086, 1.344057203237674 ], [ 103.906709013991076, 1.349278549578472 ], [ 103.911201906963029, 1.351889081859591 ], [ 103.915694633269965, 1.34927826016332 ], [ 103.915694458009042, 1.344056914942875 ], [ 103.911201575562117, 1.341446390266245 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "866" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.911202073628047, 1.357110427318585 ], [ 103.906709328088894, 1.359721241584283 ], [ 103.906709486046751, 1.364942587247555 ], [ 103.911202408887306, 1.367553117556865 ], [ 103.91569516313362, 1.364942294471312 ], [ 103.915694985832246, 1.359720949928408 ], [ 103.911202073628047, 1.357110427318585 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "867" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.911202577481532, 1.372774462334411 ], [ 103.906709803780359, 1.375385277890483 ], [ 103.906709963556125, 1.3806066228684 ], [ 103.911202916599237, 1.383217151201966 ], [ 103.915695699118871, 1.380606326731025 ], [ 103.915695519776946, 1.37538498287349 ], [ 103.911202577481532, 1.372774462334411 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "868" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.911203087122729, 1.388438495290235 ], [ 103.906710284925637, 1.391049312132787 ], [ 103.906710446519369, 1.39627065641752 ], [ 103.911203430099036, 1.398881182771406 ], [ 103.915696241225874, 1.39627035691897 ], [ 103.915696059843341, 1.391049013754635 ], [ 103.911203087122729, 1.388438495290235 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "869" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.911203602551865, 1.40410252616257 ], [ 103.906710771524899, 1.406713344287709 ], [ 103.906710934936683, 1.411934687871427 ], [ 103.911203949386874, 1.414545212241701 ], [ 103.915696789454827, 1.411934385011661 ], [ 103.915696606031617, 1.406713042548354 ], [ 103.911203602551865, 1.40410252616257 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "870" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.911204123769068, 1.419766554927929 ], [ 103.906711263578345, 1.422377374331762 ], [ 103.906711428808251, 1.427598717206638 ], [ 103.911204474462934, 1.430209239589362 ], [ 103.915697343805959, 1.427598410985613 ], [ 103.915697158341999, 1.422377069231161 ], [ 103.911204123769068, 1.419766554927929 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "871" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.915693080406356, 1.30228614518455 ], [ 103.911200435914338, 1.304896962689615 ], [ 103.911200596792128, 1.310118310145975 ], [ 103.915693420726356, 1.312728838944413 ], [ 103.920186073480437, 1.310118012919717 ], [ 103.920185894038241, 1.304896666648316 ], [ 103.915693080406356, 1.30228614518455 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "872" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.915693591906503, 1.317950185496449 ], [ 103.911200920476716, 1.320561004402477 ], [ 103.911201083283544, 1.325782351200879 ], [ 103.91569393630715, 1.328392877940381 ], [ 103.920186616110257, 1.325782050419712 ], [ 103.920186434516438, 1.320560704806285 ], [ 103.915693591906503, 1.317950185496449 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "873" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.915694109527649, 1.333614223830536 ], [ 103.911201410826237, 1.336225044133633 ], [ 103.911201575562117, 1.341446390266245 ], [ 103.915694458009042, 1.344056914942875 ], [ 103.92018716519506, 1.341446085930127 ], [ 103.920186981449561, 1.336224740982503 ], [ 103.915694109527649, 1.333614223830536 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "874" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.915694633269965, 1.34927826016332 ], [ 103.911201906963029, 1.351889081859591 ], [ 103.911202073628047, 1.357110427318585 ], [ 103.915694985832246, 1.359720949928408 ], [ 103.920187720735044, 1.357110119427473 ], [ 103.920187534837794, 1.351888775153482 ], [ 103.915694633269965, 1.34927826016332 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "875" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.91569516313362, 1.364942294471312 ], [ 103.911202408887306, 1.367553117556865 ], [ 103.911202577481532, 1.372774462334411 ], [ 103.915695519776946, 1.37538498287349 ], [ 103.920188282730408, 1.372774150888261 ], [ 103.92018809468135, 1.367552807295733 ], [ 103.91569516313362, 1.364942294471312 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "876" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.915695699118871, 1.380606326731025 ], [ 103.911202916599237, 1.383217151201966 ], [ 103.911203087122729, 1.388438495290235 ], [ 103.915696059843341, 1.391049013754635 ], [ 103.920188851181379, 1.388438180289002 ], [ 103.920188660980429, 1.383216837385766 ], [ 103.915695699118871, 1.380606326731025 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "877" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.915696241225874, 1.39627035691897 ], [ 103.911203430099036, 1.398881182771406 ], [ 103.911203602551865, 1.40410252616257 ], [ 103.915696606031617, 1.406713042548354 ], [ 103.920189426088172, 1.40410220760621 ], [ 103.920189233735258, 1.398880865400095 ], [ 103.915696241225874, 1.39627035691897 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "878" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.915696789454827, 1.411934385011661 ], [ 103.911203949386874, 1.414545212241701 ], [ 103.911204123769068, 1.419766554927929 ], [ 103.915697158341999, 1.422377069231161 ], [ 103.920190007450969, 1.419766232816398 ], [ 103.92018981294602, 1.414544891315232 ], [ 103.915696789454827, 1.411934385011661 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "879" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.9201855373054, 1.294453973453631 ], [ 103.91569291126649, 1.297064797978462 ], [ 103.915693080406356, 1.30228614518455 ], [ 103.920185894038241, 1.304896666648316 ], [ 103.924678528227915, 1.302285833619045 ], [ 103.924678340634955, 1.297064487662549 ], [ 103.9201855373054, 1.294453973453631 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "880" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.920186073480437, 1.310118012919717 ], [ 103.915693420726356, 1.312728838944413 ], [ 103.915693591906503, 1.317950185496449 ], [ 103.920186434516438, 1.320560704806285 ], [ 103.924679095532554, 1.317949870182139 ], [ 103.924678905676714, 1.312728524879709 ], [ 103.920186073480437, 1.310118012919717 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "881" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.920186616110257, 1.325782050419712 ], [ 103.91569393630715, 1.328392877940381 ], [ 103.915694109527649, 1.333614223830536 ], [ 103.920186981449561, 1.336224740982503 ], [ 103.924679669625974, 1.333613904767375 ], [ 103.924679477507183, 1.328392560126841 ], [ 103.920186616110257, 1.325782050419712 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "882" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.92018716519506, 1.341446085930127 ], [ 103.915694458009042, 1.344056914942875 ], [ 103.915694633269965, 1.34927826016332 ], [ 103.920187534837794, 1.351888775153482 ], [ 103.924680250508374, 1.349277937351263 ], [ 103.924680056126562, 1.344056593380456 ], [ 103.92018716519506, 1.341446085930127 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "883" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.920187720735044, 1.357110119427473 ], [ 103.915694985832246, 1.359720949928408 ], [ 103.91569516313362, 1.364942294471312 ], [ 103.92018809468135, 1.367552807295733 ], [ 103.924680838179995, 1.364941967910314 ], [ 103.92468064153509, 1.359720624617062 ], [ 103.920187720735044, 1.357110119427473 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "884" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.920188282730408, 1.372774150888261 ], [ 103.915695519776946, 1.37538498287349 ], [ 103.915695699118871, 1.380606326731025 ], [ 103.920188660980429, 1.383216837385766 ], [ 103.924681432641023, 1.380605996421038 ], [ 103.924681233732954, 1.375384653813172 ], [ 103.920188282730408, 1.372774150888261 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "885" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.920188851181379, 1.388438180289002 ], [ 103.915696059843341, 1.391049013754635 ], [ 103.915696241225874, 1.39627035691897 ], [ 103.920189233735258, 1.398880865400095 ], [ 103.924682033891713, 1.396270022859949 ], [ 103.92468183272041, 1.391048680945297 ], [ 103.920188851181379, 1.388438180289002 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "886" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.920189426088172, 1.40410220760621 ], [ 103.915696606031617, 1.406713042548354 ], [ 103.915696789454827, 1.411934385011661 ], [ 103.92018981294602, 1.414544891315232 ], [ 103.92468264193225, 1.411934047203558 ], [ 103.924682438497626, 1.406712705989949 ], [ 103.920189426088172, 1.40410220760621 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "887" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.924678528227915, 1.302285833619045 ], [ 103.920185894038241, 1.304896666648316 ], [ 103.920186073480437, 1.310118012919717 ], [ 103.924678905676714, 1.312728524879709 ], [ 103.929171548017138, 1.31011768326618 ], [ 103.929171350010563, 1.304896338309018 ], [ 103.924678528227915, 1.302285833619045 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "888" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.924679095532554, 1.317949870182139 ], [ 103.920186434516438, 1.320560704806285 ], [ 103.920186616110257, 1.325782050419712 ], [ 103.924679477507183, 1.328392560126841 ], [ 103.929172146785319, 1.325781716823428 ], [ 103.929171946404523, 1.320560372524255 ], [ 103.924679095532554, 1.317949870182139 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "889" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.924679669625974, 1.333613904767375 ], [ 103.920186981449561, 1.336224740982503 ], [ 103.92018716519506, 1.341446085930127 ], [ 103.924680056126562, 1.344056593380456 ], [ 103.929172752676266, 1.341445748391048 ], [ 103.929172549921176, 1.336224404757695 ], [ 103.924679669625974, 1.333613904767375 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "890" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.924680250508374, 1.349277937351263 ], [ 103.920187534837794, 1.351888775153482 ], [ 103.920187720735044, 1.357110119427473 ], [ 103.92468064153509, 1.359720624617062 ], [ 103.929173365690232, 1.357109777945551 ], [ 103.929173160560779, 1.351888434985847 ], [ 103.924680250508374, 1.349277937351263 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "891" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.924680838179995, 1.364941967910314 ], [ 103.92018809468135, 1.367552807295733 ], [ 103.920188282730408, 1.372774150888261 ], [ 103.924681233732954, 1.375384653813172 ], [ 103.929173985827433, 1.372773805463448 ], [ 103.929173778323545, 1.367552463185222 ], [ 103.924680838179995, 1.364941967910314 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "892" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.924681432641023, 1.380605996421038 ], [ 103.920188660980429, 1.383216837385766 ], [ 103.920188851181379, 1.388438180289002 ], [ 103.92468183272041, 1.391048680945297 ], [ 103.929174613088108, 1.388437830921249 ], [ 103.9291744032097, 1.383216489332331 ], [ 103.924681432641023, 1.380605996421038 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "893" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.924682033891713, 1.396270022859949 ], [ 103.920189233735258, 1.398880865400095 ], [ 103.920189426088172, 1.40410220760621 ], [ 103.924682438497626, 1.406712705989949 ], [ 103.929175247472472, 1.404101854295467 ], [ 103.929175035219487, 1.398880513403686 ], [ 103.924682033891713, 1.396270022859949 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "894" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.92468264193225, 1.411934047203558 ], [ 103.92018981294602, 1.414544891315232 ], [ 103.920190007450969, 1.419766232816398 ], [ 103.924683051064875, 1.422376728923642 ], [ 103.929175888980794, 1.419765875562614 ], [ 103.929175674353118, 1.4145445353758 ], [ 103.92468264193225, 1.411934047203558 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "895" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.92917095637155, 1.294453647742795 ], [ 103.924678340634955, 1.297064487662549 ], [ 103.924678528227915, 1.302285833619045 ], [ 103.929171350010563, 1.304896338309018 ], [ 103.933663973786622, 1.302285489820199 ], [ 103.933663767740583, 1.297064145242573 ], [ 103.92917095637155, 1.294453647742795 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "896" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.929171548017138, 1.31011768326618 ], [ 103.924678905676714, 1.312728524879709 ], [ 103.924679095532554, 1.317949870182139 ], [ 103.929171946404523, 1.320560372524255 ], [ 103.933664596895667, 1.31794952224665 ], [ 103.933664388364164, 1.312728178323108 ], [ 103.929171548017138, 1.31011768326618 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "897" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.929172146785319, 1.325781716823428 ], [ 103.924679477507183, 1.328392560126841 ], [ 103.924679669625974, 1.333613904767375 ], [ 103.929172549921176, 1.336224404757695 ], [ 103.933665227461304, 1.333613552695195 ], [ 103.933665016444237, 1.328392209433564 ], [ 103.929172146785319, 1.325781716823428 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "898" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.929172752676266, 1.341445748391048 ], [ 103.924680056126562, 1.344056593380456 ], [ 103.924680250508374, 1.349277937351263 ], [ 103.929173160560779, 1.351888434985847 ], [ 103.933665865483732, 1.349277581142341 ], [ 103.933665651981045, 1.344056238550454 ], [ 103.929172752676266, 1.341445748391048 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "899" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.929173365690232, 1.357109777945551 ], [ 103.92468064153509, 1.359720624617062 ], [ 103.924680838179995, 1.364941967910314 ], [ 103.929173778323545, 1.367552463185222 ], [ 103.933666510963207, 1.3649416075646 ], [ 103.933666294974813, 1.359720265650284 ], [ 103.929173365690232, 1.357109777945551 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "900" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.929173985827433, 1.372773805463448 ], [ 103.924681233732954, 1.375384653813172 ], [ 103.924681432641023, 1.380605996421038 ], [ 103.9291744032097, 1.383216489332331 ], [ 103.933667163899983, 1.380605631938481 ], [ 103.933666945425784, 1.375384290709568 ], [ 103.929173985827433, 1.372773805463448 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "901" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.929174613088108, 1.388437830921249 ], [ 103.92468183272041, 1.391048680945297 ], [ 103.924682033891713, 1.396270022859949 ], [ 103.929175035219487, 1.398880513403686 ], [ 103.933667824294261, 1.396269654240496 ], [ 103.933667603334214, 1.391048313704815 ], [ 103.929174613088108, 1.388437830921249 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "902" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.929175247472472, 1.404101854295467 ], [ 103.924682438497626, 1.406712705989949 ], [ 103.92468264193225, 1.411934047203558 ], [ 103.929175674353118, 1.4145445353758 ], [ 103.933668492146325, 1.411933674447157 ], [ 103.933668268700302, 1.406712334612537 ], [ 103.929175247472472, 1.404101854295467 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "903" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.929175888980794, 1.419765875562614 ], [ 103.924683051064875, 1.422376728923642 ], [ 103.924683256762904, 1.427598069428378 ], [ 103.92917632061085, 1.430208555225185 ], [ 103.933669167456387, 1.427597692534977 ], [ 103.933668941524346, 1.422376353409247 ], [ 103.929175888980794, 1.419765875562614 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "904" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.933663973786622, 1.302285489820199 ], [ 103.929171350010563, 1.304896338309018 ], [ 103.929171548017138, 1.31011768326618 ], [ 103.933664388364164, 1.312728178323108 ], [ 103.938157020179659, 1.310117321185406 ], [ 103.93815680360872, 1.304895977671761 ], [ 103.933663973786622, 1.302285489820199 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "905" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.933664596895667, 1.31794952224665 ], [ 103.929171946404523, 1.320560372524255 ], [ 103.929172146785319, 1.325781716823428 ], [ 103.933665016444237, 1.328392209433564 ], [ 103.938157675086103, 1.325781350412067 ], [ 103.938157455918358, 1.320560007556429 ], [ 103.933664596895667, 1.31794952224665 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "906" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.933665227461304, 1.333613552695195 ], [ 103.929172549921176, 1.336224404757695 ], [ 103.929172752676266, 1.341445748391048 ], [ 103.933665651981045, 1.344056238550454 ], [ 103.938158337783136, 1.341445377649049 ], [ 103.938158116018485, 1.336224035459248 ], [ 103.933665227461304, 1.333613552695195 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "907" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.933665865483732, 1.349277581142341 ], [ 103.929173160560779, 1.351888434985847 ], [ 103.929173365690232, 1.357109777945551 ], [ 103.933666294974813, 1.359720265650284 ], [ 103.938159008271001, 1.357109402872861 ], [ 103.938158783909387, 1.351888061356726 ], [ 103.933665865483732, 1.349277581142341 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "908" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.933666510963207, 1.3649416075646 ], [ 103.929173778323545, 1.367552463185222 ], [ 103.929173985827433, 1.372773805463448 ], [ 103.933666945425784, 1.375384290709568 ], [ 103.938159686549966, 1.372773426060014 ], [ 103.938159459591276, 1.367552085225375 ], [ 103.933666510963207, 1.3649416075646 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "909" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.933667163899983, 1.380605631938481 ], [ 103.9291744032097, 1.383216489332331 ], [ 103.929174613088108, 1.388437830921249 ], [ 103.933667603334214, 1.391048313704815 ], [ 103.938160372620246, 1.388437447187016 ], [ 103.938160143064437, 1.383216107041704 ], [ 103.933667163899983, 1.380605631938481 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "910" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.933667824294261, 1.396269654240496 ], [ 103.929175035219487, 1.398880513403686 ], [ 103.929175247472472, 1.404101854295467 ], [ 103.933668268700302, 1.406712334612537 ], [ 103.938161066482152, 1.404101466230382 ], [ 103.938160834329096, 1.398880126782225 ], [ 103.933667824294261, 1.396269654240496 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "911" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.933668492146325, 1.411933674447157 ], [ 103.929175674353118, 1.4145445353758 ], [ 103.929175888980794, 1.419765875562614 ], [ 103.933668941524346, 1.422376353409247 ], [ 103.938161768135885, 1.419765483166621 ], [ 103.938161533385525, 1.414544144423449 ], [ 103.933668492146325, 1.411933674447157 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "912" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.933669167456387, 1.427597692534977 ], [ 103.92917632061085, 1.430208555225185 ], [ 103.929176537613259, 1.435429894699203 ], [ 103.933669621806573, 1.438040370071458 ], [ 103.938162477581713, 1.435429497972247 ], [ 103.938162240233964, 1.430208159941889 ], [ 103.933669167456387, 1.427597692534977 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "913" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.938157020179659, 1.310117321185406 ], [ 103.933664388364164, 1.312728178323108 ], [ 103.933664596895667, 1.31794952224665 ], [ 103.938157455918358, 1.320560007556429 ], [ 103.942650095773274, 1.317949141690028 ], [ 103.942649868566122, 1.31272779927465 ], [ 103.938157020179659, 1.310117321185406 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "914" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.938157675086103, 1.325781350412067 ], [ 103.933665016444237, 1.328392209433564 ], [ 103.933665227461304, 1.333613552695195 ], [ 103.938158116018485, 1.336224035459248 ], [ 103.942650782811029, 1.33361316761404 ], [ 103.942650552895728, 1.328391825860593 ], [ 103.938157675086103, 1.325781350412067 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "915" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.938158337783136, 1.341445377649049 ], [ 103.933665651981045, 1.344056238550454 ], [ 103.933665865483732, 1.349277581142341 ], [ 103.938158783909387, 1.351888061356726 ], [ 103.942651477973413, 1.349277191536599 ], [ 103.942651245349865, 1.344055850452913 ], [ 103.938158337783136, 1.341445377649049 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "916" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.938159008271001, 1.357109402872861 ], [ 103.933666294974813, 1.359720265650284 ], [ 103.933666510963207, 1.3649416075646 ], [ 103.938159459591276, 1.367552085225375 ], [ 103.942652181260684, 1.364941213434215 ], [ 103.942651945928802, 1.35971987302812 ], [ 103.938159008271001, 1.357109402872861 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "917" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.938159686549966, 1.372773426060014 ], [ 103.933666945425784, 1.375384290709568 ], [ 103.933667163899983, 1.380605631938481 ], [ 103.938160143064437, 1.383216107041704 ], [ 103.942652892673081, 1.380605233283397 ], [ 103.942652654632809, 1.375383893562723 ], [ 103.938159686549966, 1.372773426060014 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "918" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.938160372620246, 1.388437447187016 ], [ 103.933667603334214, 1.391048313704815 ], [ 103.933667824294261, 1.396269654240496 ], [ 103.938160834329096, 1.398880126782225 ], [ 103.94265361221089, 1.396269251060657 ], [ 103.942653371462114, 1.391047912033234 ], [ 103.938160372620246, 1.388437447187016 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "919" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.938161066482152, 1.404101466230382 ], [ 103.933668268700302, 1.406712334612537 ], [ 103.933668492146325, 1.411933674447157 ], [ 103.938161533385525, 1.414544144423449 ], [ 103.94265433987438, 1.411933266742506 ], [ 103.942654096417016, 1.406711928416163 ], [ 103.938161066482152, 1.404101466230382 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "920" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.938161768135885, 1.419765483166621 ], [ 103.933668941524346, 1.422376353409247 ], [ 103.933669167456387, 1.427597692534977 ], [ 103.938162240233964, 1.430208159941889 ], [ 103.942655075663794, 1.427597280305456 ], [ 103.942654829497755, 1.422375942688022 ], [ 103.938161768135885, 1.419765483166621 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "921" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.942649416859879, 1.302285113788054 ], [ 103.93815680360872, 1.304895977671761 ], [ 103.938157020179659, 1.310117321185406 ], [ 103.942649868566122, 1.31272779927465 ], [ 103.947142489745403, 1.310116926677438 ], [ 103.947142254610128, 1.304895584736589 ], [ 103.942649416859879, 1.302285113788054 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "922" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.942650095773274, 1.317949141690028 ], [ 103.938157455918358, 1.320560007556429 ], [ 103.938157675086103, 1.325781350412067 ], [ 103.942650552895728, 1.328391825860593 ], [ 103.947143200790023, 1.325780951185675 ], [ 103.947142962835343, 1.320559609902851 ], [ 103.942650095773274, 1.317949141690028 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "923" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.942650782811029, 1.33361316761404 ], [ 103.938158116018485, 1.336224035459248 ], [ 103.938158337783136, 1.341445377649049 ], [ 103.942651245349865, 1.344055850452913 ], [ 103.947143920293058, 1.341444973704176 ], [ 103.947143679518874, 1.336223633087208 ], [ 103.942650782811029, 1.33361316761404 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "924" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.942651477973413, 1.349277191536599 ], [ 103.938158783909387, 1.351888061356726 ], [ 103.938159008271001, 1.357109402872861 ], [ 103.942651945928802, 1.35971987302812 ], [ 103.947144648254749, 1.35710899420945 ], [ 103.947144404660975, 1.351887654266167 ], [ 103.942651477973413, 1.349277191536599 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "925" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.942652181260684, 1.364941213434215 ], [ 103.938159459591276, 1.367552085225375 ], [ 103.938159686549966, 1.372773426060014 ], [ 103.942652654632809, 1.375383893562723 ], [ 103.947145384675366, 1.372773012678005 ], [ 103.947145138261931, 1.367551673416239 ], [ 103.942652181260684, 1.364941213434215 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "926" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.942652892673081, 1.380605233283397 ], [ 103.938160143064437, 1.383216107041704 ], [ 103.938160372620246, 1.388437447187016 ], [ 103.942653371462114, 1.391047912033234 ], [ 103.947146129555207, 1.388437029086353 ], [ 103.947145880321997, 1.383215690513932 ], [ 103.942652892673081, 1.380605233283397 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "927" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.94265433987438, 1.411933266742506 ], [ 103.938161533385525, 1.414544144423449 ], [ 103.938161768135885, 1.419765483166621 ], [ 103.942654829497755, 1.422375942688022 ], [ 103.947147644693601, 1.419765055628468 ], [ 103.947147389820586, 1.414543718458228 ], [ 103.94265433987438, 1.411933266742506 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "928" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.947142489745403, 1.310116926677438 ], [ 103.942649868566122, 1.31272779927465 ], [ 103.942650095773274, 1.317949141690028 ], [ 103.947142962835343, 1.320559609902851 ], [ 103.951635591942733, 1.317948728512317 ], [ 103.951635346059973, 1.312727387734384 ], [ 103.947142489745403, 1.310116926677438 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "929" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.947143200790023, 1.325780951185675 ], [ 103.942650552895728, 1.328391825860593 ], [ 103.942650782811029, 1.33361316761404 ], [ 103.947143679518874, 1.336223633087208 ], [ 103.951636335452548, 1.333612749523957 ], [ 103.951636086639027, 1.328391409407974 ], [ 103.947143200790023, 1.325780951185675 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "930" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.947143920293058, 1.341444973704176 ], [ 103.942651245349865, 1.344055850452913 ], [ 103.942651477973413, 1.349277191536599 ], [ 103.947144404660975, 1.351887654266167 ], [ 103.95163708775479, 1.349276768534084 ], [ 103.951636836010422, 1.344055429087882 ], [ 103.947143920293058, 1.341444973704176 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "931" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.947144648254749, 1.35710899420945 ], [ 103.942651945928802, 1.35971987302812 ], [ 103.942652181260684, 1.364941213434215 ], [ 103.947145138261931, 1.367551673416239 ], [ 103.951637848849757, 1.364940785519207 ], [ 103.951637594174457, 1.359719446750616 ], [ 103.947144648254749, 1.35710899420945 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "932" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.947145384675366, 1.372773012678005 ], [ 103.942652654632809, 1.375383893562723 ], [ 103.942652892673081, 1.380605233283397 ], [ 103.947145880321997, 1.383215690513932 ], [ 103.951638618737718, 1.380604800455836 ], [ 103.951638361131387, 1.375383462372687 ], [ 103.947145384675366, 1.372773012678005 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "933" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.947146129555207, 1.388437029086353 ], [ 103.942653371462114, 1.391047912033234 ], [ 103.94265361221089, 1.396269251060657 ], [ 103.947146630841459, 1.398879705535758 ], [ 103.951639397418958, 1.396268813320482 ], [ 103.951639136881496, 1.391047475930604 ], [ 103.947146129555207, 1.388437029086353 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "934" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.947146882894515, 1.404101043411003 ], [ 103.942654096417016, 1.406711928416163 ], [ 103.94265433987438, 1.411933266742506 ], [ 103.947147389820586, 1.414543718458228 ], [ 103.951640184893776, 1.411932824089654 ], [ 103.951639921425084, 1.406711487400877 ], [ 103.947146882894515, 1.404101043411003 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "935" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.947147644693601, 1.419765055628468 ], [ 103.942654829497755, 1.422375942688022 ], [ 103.942655075663794, 1.427597280305456 ], [ 103.947148157259662, 1.430207729257853 ], [ 103.951640981162456, 1.427596832739864 ], [ 103.951640714762462, 1.422375496760017 ], [ 103.947147644693601, 1.419765055628468 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "936" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.951634857225102, 1.302284705522658 ], [ 103.947142254610128, 1.304895584736589 ], [ 103.947142489745403, 1.310116926677438 ], [ 103.951635346059973, 1.312727387734384 ], [ 103.956127956491756, 1.310116499742326 ], [ 103.956127702792188, 1.304895159503551 ], [ 103.951634857225102, 1.302284705522658 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "937" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.951635591942733, 1.317948728512317 ], [ 103.947142962835343, 1.320559609902851 ], [ 103.947143200790023, 1.325780951185675 ], [ 103.951636086639027, 1.328391409407974 ], [ 103.956128723674496, 1.325780519144301 ], [ 103.95612846693291, 1.320559179563571 ], [ 103.951635591942733, 1.317948728512317 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "938" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.951636335452548, 1.333612749523957 ], [ 103.947143679518874, 1.336223633087208 ], [ 103.947143920293058, 1.341444973704176 ], [ 103.951636836010422, 1.344055429087882 ], [ 103.956129499983419, 1.341444536556479 ], [ 103.956129240199743, 1.336223197641625 ], [ 103.951636335452548, 1.333612749523957 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "939" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.95163708775479, 1.349276768534084 ], [ 103.947144404660975, 1.351887654266167 ], [ 103.947144648254749, 1.35710899420945 ], [ 103.951637594174457, 1.359719446750616 ], [ 103.956130285418851, 1.357108551955367 ], [ 103.956130022592973, 1.35188721371422 ], [ 103.95163708775479, 1.349276768534084 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "940" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.951637848849757, 1.364940785519207 ], [ 103.947145138261931, 1.367551673416239 ], [ 103.947145384675366, 1.372773012678005 ], [ 103.951638361131387, 1.375383462372687 ], [ 103.956131079981049, 1.372772565317474 ], [ 103.956130814112882, 1.367551227757864 ], [ 103.951637848849757, 1.364940785519207 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "941" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.951638618737718, 1.380604800455836 ], [ 103.947145880321997, 1.383215690513932 ], [ 103.947146129555207, 1.388437029086353 ], [ 103.951639136881496, 1.391047475930604 ], [ 103.956131883670324, 1.38843657661931 ], [ 103.956131614759769, 1.383215239749067 ], [ 103.951638618737718, 1.380604800455836 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "942" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.951639397418958, 1.396268813320482 ], [ 103.947146630841459, 1.398879705535758 ], [ 103.947146882894515, 1.404101043411003 ], [ 103.951639921425084, 1.406711487400877 ], [ 103.956132696486975, 1.404100585837384 ], [ 103.956132424533934, 1.398879249664338 ], [ 103.951639397418958, 1.396268813320482 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "943" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.951640184893776, 1.411932824089654 ], [ 103.947147389820586, 1.414543718458228 ], [ 103.947147644693601, 1.419765055628468 ], [ 103.951640714762462, 1.422375496760017 ], [ 103.956133518431301, 1.419764592948207 ], [ 103.956133243435659, 1.414543257480188 ], [ 103.951640184893776, 1.411932824089654 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "944" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.956127956491756, 1.310116499742326 ], [ 103.951635346059973, 1.312727387734384 ], [ 103.951635591942733, 1.317948728512317 ], [ 103.95612846693291, 1.320559179563571 ], [ 103.960621085181501, 1.31794828271357 ], [ 103.960620820623134, 1.312726943702361 ], [ 103.956127956491756, 1.310116499742326 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "945" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.956128723674496, 1.325780519144301 ], [ 103.951636086639027, 1.328391409407974 ], [ 103.951636335452548, 1.333612749523957 ], [ 103.956129240199743, 1.336223197641625 ], [ 103.960621885163249, 1.333612298424997 ], [ 103.960621617451551, 1.328390960075758 ], [ 103.956128723674496, 1.325780519144301 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "946" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.956129499983419, 1.341444536556479 ], [ 103.951636836010422, 1.344055429087882 ], [ 103.95163708775479, 1.349276768534084 ], [ 103.956130022592973, 1.35188721371422 ], [ 103.960622694605263, 1.349276312134847 ], [ 103.960622423740105, 1.344054974455412 ], [ 103.956129499983419, 1.341444536556479 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "947" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.956130285418851, 1.357108551955367 ], [ 103.951637594174457, 1.359719446750616 ], [ 103.951637848849757, 1.364940785519207 ], [ 103.956130814112882, 1.367551227757864 ], [ 103.960623513507841, 1.36494032381963 ], [ 103.960623239489124, 1.359718986817827 ], [ 103.956130285418851, 1.357108551955367 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "948" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.956131079981049, 1.372772565317474 ], [ 103.951638361131387, 1.375383462372687 ], [ 103.951638618737718, 1.380604800455836 ], [ 103.956131614759769, 1.383215239749067 ], [ 103.960624341871267, 1.380604333455852 ], [ 103.960624064698891, 1.375382997139513 ], [ 103.956131079981049, 1.372772565317474 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "949" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.956132696486975, 1.404100585837384 ], [ 103.951639921425084, 1.406711487400877 ], [ 103.951640184893776, 1.411932824089654 ], [ 103.956133243435659, 1.414543257480188 ], [ 103.960626026981913, 1.411932346488656 ], [ 103.960625743501922, 1.406711011566734 ], [ 103.956132696486975, 1.404100585837384 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "950" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.960621085181501, 1.31794828271357 ], [ 103.95612846693291, 1.320559179563571 ], [ 103.956128723674496, 1.325780519144301 ], [ 103.960621617451551, 1.328390960075758 ], [ 103.965114243516879, 1.325780054287998 ], [ 103.96511396798843, 1.320558716538642 ], [ 103.960621085181501, 1.31794828271357 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "951" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.960621885163249, 1.333612298424997 ], [ 103.956129240199743, 1.336223197641625 ], [ 103.956129499983419, 1.341444536556479 ], [ 103.960622423740105, 1.344054974455412 ], [ 103.965115076631633, 1.341444066206011 ], [ 103.965114797838481, 1.336222729122553 ], [ 103.960621885163249, 1.333612298424997 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "952" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.960622694605263, 1.349276312134847 ], [ 103.956130022592973, 1.35188721371422 ], [ 103.956130285418851, 1.357108551955367 ], [ 103.960623239489124, 1.359718986817827 ], [ 103.965115919540693, 1.357108076110667 ], [ 103.965115637482725, 1.351886739700938 ], [ 103.960622694605263, 1.349276312134847 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "953" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.960623513507841, 1.36494032381963 ], [ 103.956130814112882, 1.367551227757864 ], [ 103.956131079981049, 1.372772565317474 ], [ 103.960624064698891, 1.375382997139513 ], [ 103.965116772244372, 1.372772083978474 ], [ 103.965116486921502, 1.367550748250305 ], [ 103.960623513507841, 1.36494032381963 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "954" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.960624341871267, 1.380604333455852 ], [ 103.956131614759769, 1.383215239749067 ], [ 103.956131883670324, 1.38843657661931 ], [ 103.960624899369733, 1.391047005396978 ], [ 103.965117634743009, 1.388436089785942 ], [ 103.965117346155111, 1.383214754747163 ], [ 103.960624341871267, 1.380604333455852 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "955" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.960625179695839, 1.396268341020025 ], [ 103.956132424533934, 1.398879249664338 ], [ 103.956132696486975, 1.404100585837384 ], [ 103.960625743501922, 1.406711011566734 ], [ 103.965118507036891, 1.404100093509579 ], [ 103.965118215183878, 1.39887875916802 ], [ 103.960625179695839, 1.396268341020025 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "956" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.960626026981913, 1.411932346488656 ], [ 103.956133243435659, 1.414543257480188 ], [ 103.956133518431301, 1.419764592948207 ], [ 103.960626597095796, 1.422375015625288 ], [ 103.965119389126357, 1.419764095125896 ], [ 103.965119094008116, 1.414542761489387 ], [ 103.960626026981913, 1.411932346488656 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "957" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.965113420196161, 1.310116040380122 ], [ 103.960620820623134, 1.312726943702361 ], [ 103.960621085181501, 1.31794828271357 ], [ 103.96511396798843, 1.320558716538642 ], [ 103.969606575266923, 1.317947804293841 ], [ 103.969606292033006, 1.312726467178634 ], [ 103.965113420196161, 1.310116040380122 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "958" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.965114243516879, 1.325780054287998 ], [ 103.960621617451551, 1.328390960075758 ], [ 103.960621885163249, 1.333612298424997 ], [ 103.965114797838481, 1.336222729122553 ], [ 103.969607431720547, 1.333611814317217 ], [ 103.969607145110672, 1.328390477864003 ], [ 103.965114243516879, 1.325780054287998 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "959" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.965115076631633, 1.341444066206011 ], [ 103.960622423740105, 1.344054974455412 ], [ 103.960622694605263, 1.349276312134847 ], [ 103.965115637482725, 1.351886739700938 ], [ 103.969608298302219, 1.349275822338947 ], [ 103.969608008316314, 1.344054486555559 ], [ 103.965115076631633, 1.341444066206011 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "960" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.965115919540693, 1.357108076110667 ], [ 103.960623239489124, 1.359718986817827 ], [ 103.960623513507841, 1.36494032381963 ], [ 103.965116486921502, 1.367550748250305 ], [ 103.969609175012295, 1.364939828335539 ], [ 103.969608881650217, 1.359718493229807 ], [ 103.965115919540693, 1.357108076110667 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "961" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.965116772244372, 1.372772083978474 ], [ 103.960624064698891, 1.375382997139513 ], [ 103.960624341871267, 1.380604333455852 ], [ 103.965117346155111, 1.383214754747163 ], [ 103.969610061851085, 1.380603832283502 ], [ 103.969609765112722, 1.375382497863257 ], [ 103.965116772244372, 1.372772083978474 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "962" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.965118507036891, 1.404100093509579 ], [ 103.960625743501922, 1.406711011566734 ], [ 103.960626026981913, 1.411932346488656 ], [ 103.965119094008116, 1.414542761489387 ], [ 103.969611865916093, 1.411931833939571 ], [ 103.969611562424859, 1.406710500913791 ], [ 103.965118507036891, 1.404100093509579 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "963" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.969606575266923, 1.317947804293841 ], [ 103.96511396798843, 1.320558716538642 ], [ 103.965114243516879, 1.325780054287998 ], [ 103.969607145110672, 1.328390477864003 ], [ 103.974099760094617, 1.325779556616823 ], [ 103.974099465779332, 1.320558220828121 ], [ 103.969606575266923, 1.317947804293841 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "964" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.969607431720547, 1.333611814317217 ], [ 103.965114797838481, 1.336222729122553 ], [ 103.965115076631633, 1.341444066206011 ], [ 103.969608008316314, 1.344054486555559 ], [ 103.97410065001506, 1.34144356265283 ], [ 103.974100352212474, 1.336222227530049 ], [ 103.969607431720547, 1.333611814317217 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "965" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.969608298302219, 1.349275822338947 ], [ 103.965115637482725, 1.351886739700938 ], [ 103.965115919540693, 1.357108076110667 ], [ 103.969608881650217, 1.359718493229807 ], [ 103.974101550397648, 1.357107566675408 ], [ 103.974101249107648, 1.35188623222638 ], [ 103.969608298302219, 1.349275822338947 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "966" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.969609175012295, 1.364939828335539 ], [ 103.965116486921502, 1.367550748250305 ], [ 103.965116772244372, 1.372772083978474 ], [ 103.969609765112722, 1.375382497863257 ], [ 103.974102461242708, 1.372771568661066 ], [ 103.974102156465179, 1.367550234893621 ], [ 103.969609175012295, 1.364939828335539 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "967" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.969610061851085, 1.380603832283502 ], [ 103.965117346155111, 1.383214754747163 ], [ 103.965117634743009, 1.388436089785942 ], [ 103.96961065870417, 1.391046500432415 ], [ 103.974103382550595, 1.388435568586311 ], [ 103.974103074285395, 1.383214235508281 ], [ 103.969610061851085, 1.380603832283502 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "968" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.969610958818905, 1.396267834159343 ], [ 103.965118215183878, 1.39887875916802 ], [ 103.965118507036891, 1.404100093509579 ], [ 103.969611562424859, 1.406710500913791 ], [ 103.974104314321607, 1.404099566427651 ], [ 103.974104002568666, 1.398878234046866 ], [ 103.969610958818905, 1.396267834159343 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "969" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.969611865916093, 1.411931833939571 ], [ 103.965119094008116, 1.414542761489387 ], [ 103.965119389126357, 1.419764095125896 ], [ 103.969612476275145, 1.422374499283894 ], [ 103.974105256556101, 1.419763562161595 ], [ 103.974104941315318, 1.414542230485885 ], [ 103.969611865916093, 1.411931833939571 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "970" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.974098880635964, 1.310115548590883 ], [ 103.969606292033006, 1.312726467178634 ], [ 103.969606575266923, 1.317947804293841 ], [ 103.974099465779332, 1.320558220828121 ], [ 103.978592061976443, 1.317947293253189 ], [ 103.978591760067005, 1.312725958163262 ], [ 103.974098880635964, 1.310115548590883 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "971" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.974099760094617, 1.325779556616823 ], [ 103.969607145110672, 1.328390477864003 ], [ 103.969607431720547, 1.333611814317217 ], [ 103.974100352212474, 1.336222227530049 ], [ 103.978592974901815, 1.333611297200675 ], [ 103.978592669393819, 1.328389962772766 ], [ 103.974099760094617, 1.325779556616823 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "972" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.97410065001506, 1.34144356265283 ], [ 103.969608008316314, 1.344054486555559 ], [ 103.969608298302219, 1.349275822338947 ], [ 103.974101249107648, 1.35188623222638 ], [ 103.97859389862306, 1.349275299146442 ], [ 103.978593589516407, 1.344053965388383 ], [ 103.97410065001506, 1.34144356265283 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "973" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.974101550397648, 1.357107566675408 ], [ 103.969608881650217, 1.359718493229807 ], [ 103.969609175012295, 1.364939828335539 ], [ 103.974102156465179, 1.367550234893621 ], [ 103.978594833140534, 1.364939299066997 ], [ 103.978594520435095, 1.359717965986619 ], [ 103.974101550397648, 1.357107566675408 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "974" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.974102461242708, 1.372771568661066 ], [ 103.969609765112722, 1.375382497863257 ], [ 103.969610061851085, 1.380603832283502 ], [ 103.974103074285395, 1.383214235508281 ], [ 103.978595778454562, 1.380603296938847 ], [ 103.978595462150238, 1.375381964543981 ], [ 103.974102461242708, 1.372771568661066 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "975" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.974103382550595, 1.388435568586311 ], [ 103.96961065870417, 1.391046500432415 ], [ 103.969610958818905, 1.396267834159343 ], [ 103.974104002568666, 1.398878234046866 ], [ 103.9785967345655, 1.396267292738499 ], [ 103.978596414662178, 1.391045961036976 ], [ 103.974103382550595, 1.388435568586311 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "976" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.974104314321607, 1.404099566427651 ], [ 103.969611562424859, 1.406710500913791 ], [ 103.969611865916093, 1.411931833939571 ], [ 103.974104941315318, 1.414542230485885 ], [ 103.978597701473717, 1.411931286442461 ], [ 103.978597377971255, 1.406709955442112 ], [ 103.974104314321607, 1.404099566427651 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "977" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.978592061976443, 1.317947293253189 ], [ 103.974099465779332, 1.320558220828121 ], [ 103.974099760094617, 1.325779556616823 ], [ 103.978592669393819, 1.328389962772766 ], [ 103.983085273185054, 1.325779026130838 ], [ 103.983084960082977, 1.320557692432067 ], [ 103.978592061976443, 1.317947293253189 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "978" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.978592974901815, 1.333611297200675 ], [ 103.974100352212474, 1.336222227530049 ], [ 103.97410065001506, 1.34144356265283 ], [ 103.978593589516407, 1.344053965388383 ], [ 103.983086219911115, 1.341443025896998 ], [ 103.983085903099123, 1.336221692864174 ], [ 103.978592974901815, 1.333611297200675 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "979" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.97859389862306, 1.349275299146442 ], [ 103.974101249107648, 1.35188623222638 ], [ 103.974101550397648, 1.357107566675408 ], [ 103.978594520435095, 1.359717965986619 ], [ 103.983087177767132, 1.357107023649654 ], [ 103.983086857245098, 1.351885691290609 ], [ 103.97859389862306, 1.349275299146442 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "980" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.978594833140534, 1.364939299066997 ], [ 103.974102156465179, 1.367550234893621 ], [ 103.974102461242708, 1.372771568661066 ], [ 103.978595462150238, 1.375381964543981 ], [ 103.98308814675346, 1.372771019365312 ], [ 103.983087822521284, 1.367549687687876 ], [ 103.978594833140534, 1.364939299066997 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "981" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.978595778454562, 1.380603296938847 ], [ 103.974103074285395, 1.383214235508281 ], [ 103.974103382550595, 1.388435568586311 ], [ 103.978596414662178, 1.391045961036976 ], [ 103.983089126870453, 1.388435013020479 ], [ 103.983088798928023, 1.383213682032484 ], [ 103.978595778454562, 1.380603296938847 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "982" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.9785967345655, 1.396267292738499 ], [ 103.974104002568666, 1.398878234046866 ], [ 103.974104314321607, 1.404099566427651 ], [ 103.978597377971255, 1.406709955442112 ], [ 103.983090118118483, 1.404099004591662 ], [ 103.983089786465669, 1.398877674300938 ], [ 103.9785967345655, 1.396267292738499 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "983" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.978597701473717, 1.411931286442461 ], [ 103.974104941315318, 1.414542230485885 ], [ 103.974105256556101, 1.419763562161595 ], [ 103.978598352077853, 1.422373947735897 ], [ 103.983091120497917, 1.41976299405537 ], [ 103.983090785134593, 1.414541664469748 ], [ 103.978597701473717, 1.411931286442461 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "984" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.983084337588622, 1.310115024374669 ], [ 103.978591760067005, 1.312725958163262 ], [ 103.978592061976443, 1.317947293253189 ], [ 103.983084960082977, 1.320557692432067 ], [ 103.987577545087433, 1.317946749591677 ], [ 103.98757722450253, 1.312725416656308 ], [ 103.983084337588622, 1.310115024374669 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "985" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.983085273185054, 1.325779026130838 ], [ 103.978592669393819, 1.328389962772766 ], [ 103.978592974901815, 1.333611297200675 ], [ 103.983085903099123, 1.336221692864174 ], [ 103.987578514484454, 1.333610747075435 ], [ 103.987578190078381, 1.328389414802111 ], [ 103.983085273185054, 1.325779026130838 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "986" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.983086219911115, 1.341443025896998 ], [ 103.978593589516407, 1.344053965388383 ], [ 103.97859389862306, 1.349275299146442 ], [ 103.983086857245098, 1.351885691290609 ], [ 103.987579495345145, 1.349274742557397 ], [ 103.987579167117815, 1.344053410953949 ], [ 103.983086219911115, 1.341443025896998 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "987" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.983087177767132, 1.357107023649654 ], [ 103.978594520435095, 1.359717965986619 ], [ 103.978594833140534, 1.364939299066997 ], [ 103.983087822521284, 1.367549687687876 ], [ 103.987580487669902, 1.364938736014068 ], [ 103.987580155621174, 1.359717405088327 ], [ 103.983087177767132, 1.357107023649654 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "988" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.98308814675346, 1.372771019365312 ], [ 103.978595462150238, 1.375381964543981 ], [ 103.978595778454562, 1.380603296938847 ], [ 103.983088798928023, 1.383213682032484 ], [ 103.987581491459068, 1.380602727421953 ], [ 103.987581155588828, 1.375381397181751 ], [ 103.98308814675346, 1.372771019365312 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "989" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.983089126870453, 1.388435013020479 ], [ 103.978596414662178, 1.391045961036976 ], [ 103.9785967345655, 1.396267292738499 ], [ 103.983089786465669, 1.398877674300938 ], [ 103.987582506713025, 1.39626671675756 ], [ 103.987582167021145, 1.391045387210728 ], [ 103.983089126870453, 1.388435013020479 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "990" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.983090118118483, 1.404099004591662 ], [ 103.978597377971255, 1.406709955442112 ], [ 103.978597701473717, 1.411931286442461 ], [ 103.983090785134593, 1.414541664469748 ], [ 103.987583533432144, 1.411930703997395 ], [ 103.98758318991851, 1.406709375151764 ], [ 103.983090118118483, 1.404099004591662 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "991" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.987577545087433, 1.317946749591677 ], [ 103.983084960082977, 1.320557692432067 ], [ 103.983085273185054, 1.325779026130838 ], [ 103.987578190078381, 1.328389414802111 ], [ 103.992070782565662, 1.325778462830108 ], [ 103.992070450676792, 1.320557131350548 ], [ 103.987577545087433, 1.317946749591677 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "992" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.987578514484454, 1.333610747075435 ], [ 103.983085903099123, 1.336221692864174 ], [ 103.983086219911115, 1.341443025896998 ], [ 103.987579167117815, 1.344053410953949 ], [ 103.992071786097185, 1.341442455938582 ], [ 103.99207145027583, 1.336221125124996 ], [ 103.987578514484454, 1.333610747075435 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "993" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.987579495345145, 1.349274742557397 ], [ 103.983086857245098, 1.351885691290609 ], [ 103.983087177767132, 1.357107023649654 ], [ 103.987580155621174, 1.359717405088327 ], [ 103.992072801426502, 1.357106447033471 ], [ 103.992072461672507, 1.351885116893691 ], [ 103.987579495345145, 1.349274742557397 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "994" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.987580487669902, 1.364938736014068 ], [ 103.983087822521284, 1.367549687687876 ], [ 103.98308814675346, 1.372771019365312 ], [ 103.987581155588828, 1.375381397181751 ], [ 103.99207382855397, 1.372770436091281 ], [ 103.99207348486722, 1.367549106633137 ], [ 103.987580487669902, 1.364938736014068 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "995" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.987581491459068, 1.380602727421953 ], [ 103.983088798928023, 1.383213682032484 ], [ 103.983089126870453, 1.388435013020479 ], [ 103.987582167021145, 1.391045387210728 ], [ 103.992074867479971, 1.388434423088516 ], [ 103.992074519860324, 1.383213094319841 ], [ 103.987581491459068, 1.380602727421953 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "996" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.987582506713025, 1.39626671675756 ], [ 103.983089786465669, 1.398877674300938 ], [ 103.983090118118483, 1.404099004591662 ], [ 103.98758318991851, 1.406709375151764 ], [ 103.99207591820489, 1.404098408001684 ], [ 103.992075566652233, 1.398877079930308 ], [ 103.987582506713025, 1.39626671675756 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "997" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.987583533432144, 1.411930703997395 ], [ 103.983090785134593, 1.414541664469748 ], [ 103.983091120497917, 1.41976299405537 ], [ 103.987584224281278, 1.422373360981367 ], [ 103.992076980729124, 1.419762390807291 ], [ 103.992076625243328, 1.414541063441046 ], [ 103.987583533432144, 1.411930703997395 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "998" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.992069790831522, 1.310114467731544 ], [ 103.98757722450253, 1.312725416656308 ], [ 103.987577545087433, 1.317946749591677 ], [ 103.992070450676792, 1.320557131350548 ], [ 103.996563024377323, 1.317946173309371 ], [ 103.99656268511697, 1.312724842657839 ], [ 103.992069790831522, 1.310114467731544 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "999" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.992070782565662, 1.325778462830108 ], [ 103.987578190078381, 1.328389414802111 ], [ 103.987578514484454, 1.333610747075435 ], [ 103.99207145027583, 1.336221125124996 ], [ 103.996564050245865, 1.333610163941566 ], [ 103.996563706941757, 1.328388833952105 ], [ 103.992070782565662, 1.325778462830108 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1000" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.992071786097185, 1.341442455938582 ], [ 103.987579167117815, 1.344053410953949 ], [ 103.987579495345145, 1.349274742557397 ], [ 103.992072461672507, 1.351885116893691 ], [ 103.996565088245887, 1.349274152571881 ], [ 103.996564740897909, 1.344052823252324 ], [ 103.992071786097185, 1.341442455938582 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1001" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.992072801426502, 1.357106447033471 ], [ 103.987580155621174, 1.359717405088327 ], [ 103.987580487669902, 1.364938736014068 ], [ 103.99207348486722, 1.367549106633137 ], [ 103.996566138377801, 1.364938139176821 ], [ 103.996565786985812, 1.359716810535 ], [ 103.992072801426502, 1.357106447033471 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1002" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.99207382855397, 1.372770436091281 ], [ 103.987581155588828, 1.375381397181751 ], [ 103.987581491459068, 1.380602727421953 ], [ 103.992074519860324, 1.383213094319841 ], [ 103.996567200641962, 1.380602123732891 ], [ 103.996566845205862, 1.375380795776637 ], [ 103.99207382855397, 1.372770436091281 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1003" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.992074867479971, 1.388434423088516 ], [ 103.987582167021145, 1.391045387210728 ], [ 103.987582506713025, 1.39626671675756 ], [ 103.992075566652233, 1.398877079930308 ], [ 103.996568275038811, 1.396266106216597 ], [ 103.99656791555843, 1.391044778953741 ], [ 103.992074867479971, 1.388434423088516 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1004" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.99207591820489, 1.404098408001684 ], [ 103.98758318991851, 1.406709375151764 ], [ 103.987583533432144, 1.411930703997395 ], [ 103.992076625243328, 1.414541063441046 ], [ 103.996569361568703, 1.411930086604444 ], [ 103.996568998043941, 1.406708760042819 ], [ 103.99207591820489, 1.404098408001684 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1005" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.99656201063992, 1.302282180698794 ], [ 103.992069462875065, 1.304893135593842 ], [ 103.992069790831522, 1.310114467731544 ], [ 103.99656268511697, 1.312724842657839 ], [ 104.00105524014208, 1.310113878661578 ], [ 104.0010548936215, 1.304892548872337 ], [ 103.99656201063992, 1.302282180698794 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1006" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.996563024377323, 1.317946173309371 ], [ 103.992070450676792, 1.320557131350548 ], [ 103.992070782565662, 1.325778462830108 ], [ 103.996563706941757, 1.328388833952105 ], [ 104.001056288013757, 1.325777866714702 ], [ 104.001055937338194, 1.320556537583631 ], [ 103.996563024377323, 1.317946173309371 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1007" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.996564050245865, 1.333610163941566 ], [ 103.99207145027583, 1.336221125124996 ], [ 103.992071786097185, 1.341442455938582 ], [ 103.996564740897909, 1.344052823252324 ], [ 104.001057348350656, 1.341441852777652 ], [ 104.001056993519995, 1.336220524312583 ], [ 103.996564050245865, 1.333610163941566 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1008" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.996565088245887, 1.349274152571881 ], [ 103.992072461672507, 1.351885116893691 ], [ 103.992072801426502, 1.357106447033471 ], [ 103.996565786985812, 1.359716810535 ], [ 104.001058421153147, 1.357105836826931 ], [ 104.001058062167232, 1.351884509035696 ], [ 103.996565088245887, 1.349274152571881 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1009" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.996566138377801, 1.364938139176821 ], [ 103.99207348486722, 1.367549106633137 ], [ 103.99207382855397, 1.372770436091281 ], [ 103.996566845205862, 1.375380795776637 ], [ 104.00105950642164, 1.372769818839043 ], [ 104.001059143280344, 1.367548491729475 ], [ 103.996566138377801, 1.364938139176821 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1010" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.996567200641962, 1.380602123732891 ], [ 103.992074519860324, 1.383213094319841 ], [ 103.992074867479971, 1.388434423088516 ], [ 103.99656791555843, 1.391044778953741 ], [ 104.001060604156521, 1.388433798790494 ], [ 104.001060236859715, 1.383212472370423 ], [ 103.996567200641962, 1.380602123732891 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1011" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.996568275038811, 1.396266106216597 ], [ 103.992075566652233, 1.398877079930308 ], [ 103.99207591820489, 1.404098408001684 ], [ 103.996568998043941, 1.406708760042819 ], [ 104.001061714358201, 1.404097776657789 ], [ 104.001061342905757, 1.398876450935047 ], [ 103.996568275038811, 1.396266106216597 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1012" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.996569361568703, 1.411930086604444 ], [ 103.992076625243328, 1.414541063441046 ], [ 103.992076980729124, 1.419762390807291 ], [ 103.996570092662751, 1.422372739020375 ], [ 104.001062837027106, 1.419761752417433 ], [ 104.001062461418869, 1.414540427399852 ], [ 103.996569361568703, 1.411930086604444 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1013" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.00105524014208, 1.310113878661578 ], [ 103.99656268511697, 1.312724842657839 ], [ 103.996563024377323, 1.317946173309371 ], [ 104.001055937338194, 1.320556537583631 ], [ 104.005548499623515, 1.317945564406344 ], [ 104.005548141687754, 1.312724236167925 ], [ 104.00105524014208, 1.310113878661578 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1014" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.001056288013757, 1.325777866714702 ], [ 103.996563706941757, 1.328388833952105 ], [ 103.996564050245865, 1.333610163941566 ], [ 104.001056993519995, 1.336220524312583 ], [ 104.005549581963436, 1.333609547799139 ], [ 104.005549219761349, 1.328388220222821 ], [ 104.001056288013757, 1.325777866714702 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1015" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.001057348350656, 1.341441852777652 ], [ 103.996564740897909, 1.344052823252324 ], [ 103.996565088245887, 1.349274152571881 ], [ 104.001058062167232, 1.351884509035696 ], [ 104.005550677102661, 1.349273529189966 ], [ 104.005550310634078, 1.344052202283581 ], [ 104.001057348350656, 1.341441852777652 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1016" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.001058421153147, 1.357105836826931 ], [ 103.996565786985812, 1.359716810535 ], [ 103.996566138377801, 1.364938139176821 ], [ 104.001059143280344, 1.367548491729475 ], [ 104.005551785041604, 1.36493750855533 ], [ 104.005551414306396, 1.359716182326711 ], [ 104.001058421153147, 1.357105836826931 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1017" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.00105950642164, 1.372769818839043 ], [ 103.996566845205862, 1.375380795776637 ], [ 103.996567200641962, 1.380602123732891 ], [ 104.001060236859715, 1.383212472370423 ], [ 104.005552905780661, 1.380601485871735 ], [ 104.005552530778715, 1.375380160328712 ], [ 104.00105950642164, 1.372769818839043 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1018" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.001061714358201, 1.404097776657789 ], [ 103.996568998043941, 1.406708760042819 ], [ 103.996569361568703, 1.411930086604444 ], [ 104.001062461418869, 1.414540427399852 ], [ 104.005555185660796, 1.411929434263684 ], [ 104.005554802124919, 1.406708110115351 ], [ 104.001061714358201, 1.404097776657789 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1019" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.005547430082501, 1.302281579035079 ], [ 104.0010548936215, 1.304892548872337 ], [ 104.00105524014208, 1.310113878661578 ], [ 104.005548141687754, 1.312724236167925 ], [ 104.010040685297696, 1.310113257164842 ], [ 104.010040320213022, 1.304891929853339 ], [ 104.005547430082501, 1.302281579035079 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1020" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.005548499623515, 1.317945564406344 ], [ 104.001055937338194, 1.320556537583631 ], [ 104.001056288013757, 1.325777866714702 ], [ 104.005549219761349, 1.328388220222821 ], [ 104.010041789306825, 1.325777237784693 ], [ 104.010041419844569, 1.32055591113139 ], [ 104.005548499623515, 1.317945564406344 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1021" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.005549581963436, 1.333609547799139 ], [ 104.001056993519995, 1.336220524312583 ], [ 104.001057348350656, 1.341441852777652 ], [ 104.005550310634078, 1.344052202283581 ], [ 104.010042906448945, 1.341441216414281 ], [ 104.010042532608978, 1.33621989042701 ], [ 104.005549581963436, 1.333609547799139 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1022" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.005550677102661, 1.349273529189966 ], [ 104.001058062167232, 1.351884509035696 ], [ 104.001058421153147, 1.357105836826931 ], [ 104.005551414306396, 1.359716182326711 ], [ 104.01004403672448, 1.357105193030107 ], [ 104.010043658506675, 1.3518838677167 ], [ 104.005550677102661, 1.349273529189966 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1023" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.005551785041604, 1.36493750855533 ], [ 104.001059143280344, 1.367548491729475 ], [ 104.00105950642164, 1.372769818839043 ], [ 104.005552530778715, 1.375380160328712 ], [ 104.010045180133844, 1.372769167608676 ], [ 104.010044797538043, 1.367547842976965 ], [ 104.005551785041604, 1.36493750855533 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1024" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.005552905780661, 1.380601485871735 ], [ 104.001060236859715, 1.383212472370423 ], [ 104.001060604156521, 1.388433798790494 ], [ 104.005553660051405, 1.391044136266091 ], [ 104.010046336677476, 1.38843314012649 ], [ 104.010045949703539, 1.383211816184308 ], [ 104.005552905780661, 1.380601485871735 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1025" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.005554039320245, 1.396265461115684 ], [ 104.001061342905757, 1.398876450935047 ], [ 104.001061714358201, 1.404097776657789 ], [ 104.005554802124919, 1.406708110115351 ], [ 104.010047506355775, 1.404097110560054 ], [ 104.010047115003573, 1.398875787315233 ], [ 104.005554039320245, 1.396265461115684 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1026" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.005555185660796, 1.411929434263684 ], [ 104.001062461418869, 1.414540427399852 ], [ 104.001062837027106, 1.419761752417433 ], [ 104.005555956999672, 1.422372081852999 ], [ 104.010048689169196, 1.419761078885874 ], [ 104.010048293438572, 1.414539756346245 ], [ 104.005555185660796, 1.411929434263684 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1027" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.010040685297696, 1.310113257164842 ], [ 104.005548141687754, 1.312724236167925 ], [ 104.005548499623515, 1.317945564406344 ], [ 104.010041419844569, 1.32055591113139 ], [ 104.014533970603395, 1.317944922882669 ], [ 104.014533593992297, 1.312723597186642 ], [ 104.010040685297696, 1.310113257164842 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1028" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.010041789306825, 1.325777237784693 ], [ 104.005549219761349, 1.328388220222821 ], [ 104.005549581963436, 1.333609547799139 ], [ 104.010042532608978, 1.33621989042701 ], [ 104.014535109414581, 1.333608898648229 ], [ 104.01453472831453, 1.328387573614332 ], [ 104.010041789306825, 1.325777237784693 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1029" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.010042906448945, 1.341441216414281 ], [ 104.005550310634078, 1.344052202283581 ], [ 104.005550677102661, 1.349273529189966 ], [ 104.010043658506675, 1.3518838677167 ], [ 104.014536261692868, 1.349272872411729 ], [ 104.014535876103736, 1.344051548047797 ], [ 104.010042906448945, 1.341441216414281 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1030" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.01004403672448, 1.357105193030107 ], [ 104.005551414306396, 1.359716182326711 ], [ 104.005551785041604, 1.36493750855533 ], [ 104.010044797538043, 1.367547842976965 ], [ 104.014537427438711, 1.364936844149673 ], [ 104.014537037360341, 1.359715520463537 ], [ 104.01004403672448, 1.357105193030107 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1031" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.010045180133844, 1.372769167608676 ], [ 104.005552530778715, 1.375380160328712 ], [ 104.005552905780661, 1.380601485871735 ], [ 104.010045949703539, 1.383211816184308 ], [ 104.014538606652494, 1.380600813838563 ], [ 104.014538212084759, 1.375379490838056 ], [ 104.010045180133844, 1.372769167608676 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1032" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.010047506355775, 1.404097110560054 ], [ 104.005554802124919, 1.406708110115351 ], [ 104.005555185660796, 1.411929434263684 ], [ 104.010048293438572, 1.414539756346245 ], [ 104.014541005485739, 1.411928746975195 ], [ 104.014540601938833, 1.406707425369442 ], [ 104.010047506355775, 1.404097110560054 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1033" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.010048689169196, 1.419761078885874 ], [ 104.005555956999672, 1.422372081852999 ], [ 104.005556344802699, 1.42759340529224 ], [ 104.010049485008992, 1.430203723253849 ], [ 104.014542225106084, 1.427592710375947 ], [ 104.014541817069357, 1.422371389479318 ], [ 104.010048689169196, 1.419761078885874 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1034" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.014533970603395, 1.317944922882669 ], [ 104.010041419844569, 1.32055591113139 ], [ 104.010041789306825, 1.325777237784693 ], [ 104.01453472831453, 1.328387573614332 ], [ 104.019027286222197, 1.32577657604016 ], [ 104.019026897973333, 1.320555251993902 ], [ 104.014533970603395, 1.317944922882669 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1035" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.014535109414581, 1.333608898648229 ], [ 104.010042532608978, 1.33621989042701 ], [ 104.010042906448945, 1.341441216414281 ], [ 104.014535876103736, 1.344051548047797 ], [ 104.019028460169409, 1.341440546848548 ], [ 104.019028067320221, 1.336219223468354 ], [ 104.014535109414581, 1.333608898648229 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1036" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.014536261692868, 1.349272872411729 ], [ 104.010043658506675, 1.3518838677167 ], [ 104.01004403672448, 1.357105193030107 ], [ 104.014537037360341, 1.359715520463537 ], [ 104.019029647917847, 1.357104515643081 ], [ 104.019029250468208, 1.351883192936782 ], [ 104.014536261692868, 1.349272872411729 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1037" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.014537427438711, 1.364936844149673 ], [ 104.010044797538043, 1.367547842976965 ], [ 104.010045180133844, 1.372769167608676 ], [ 104.014538212084759, 1.375379490838056 ], [ 104.019030849467967, 1.372768482400258 ], [ 104.019030447417705, 1.367547160375689 ], [ 104.014537427438711, 1.364936844149673 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1038" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.014539799334699, 1.396264781454902 ], [ 104.010047115003573, 1.398875787315233 ], [ 104.010047506355775, 1.404097110560054 ], [ 104.014540601938833, 1.406707425369442 ], [ 104.019033293974971, 1.404096409708563 ], [ 104.019032882723081, 1.398875089070948 ], [ 104.014539799334699, 1.396264781454902 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1039" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.014541005485739, 1.411928746975195 ], [ 104.010048293438572, 1.414539756346245 ], [ 104.010048689169196, 1.419761078885874 ], [ 104.014541817069357, 1.422371389479318 ], [ 104.019034536932779, 1.419760370212697 ], [ 104.019034121079827, 1.414539050280307 ], [ 104.014541005485739, 1.411928746975195 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1040" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.014542225106084, 1.427592710375947 ], [ 104.010049485008992, 1.430203723253849 ], [ 104.010049885118178, 1.435425045080454 ], [ 104.014543045669456, 1.43803535145399 ], [ 104.019035793694073, 1.435424328585491 ], [ 104.019035373239888, 1.430203009366159 ], [ 104.014542225106084, 1.427592710375947 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1041" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.019026126075786, 1.310112603241414 ], [ 104.014533593992297, 1.312723597186642 ], [ 104.014533970603395, 1.317944922882669 ], [ 104.019026897973333, 1.320555251993902 ], [ 104.023519437094379, 1.317944248738425 ], [ 104.023519041807958, 1.312722925714067 ], [ 104.019026126075786, 1.310112603241414 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1042" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.019027286222197, 1.32577657604016 ], [ 104.01453472831453, 1.328387573614332 ], [ 104.014535109414581, 1.333608898648229 ], [ 104.019028067320221, 1.336219223468354 ], [ 104.023520632376687, 1.333608216488916 ], [ 104.023520232378715, 1.328386894126721 ], [ 104.019027286222197, 1.32577657604016 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1043" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.019028460169409, 1.341440546848548 ], [ 104.014535876103736, 1.344051548047797 ], [ 104.014536261692868, 1.349272872411729 ], [ 104.019029250468208, 1.351883192936782 ], [ 104.023521841793908, 1.349272182237251 ], [ 104.02352143708427, 1.344050860545052 ], [ 104.019028460169409, 1.341440546848548 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1044" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.019029647917847, 1.357104515643081 ], [ 104.014537037360341, 1.359715520463537 ], [ 104.014537427438711, 1.364936844149673 ], [ 104.019030447417705, 1.367547160375689 ], [ 104.023523065346481, 1.364936145959931 ], [ 104.023522655925007, 1.359714824945561 ], [ 104.019029647917847, 1.357104515643081 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1045" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.019032064820195, 1.388432447096585 ], [ 104.014539400277457, 1.391043459147856 ], [ 104.014539799334699, 1.396264781454902 ], [ 104.019032882723081, 1.398875089070948 ], [ 104.023525554859546, 1.396264067234334 ], [ 104.02352513601393, 1.39104274759912 ], [ 104.019032064820195, 1.388432447096585 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1046" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.019033293974971, 1.404096409708563 ], [ 104.014540601938833, 1.406707425369442 ], [ 104.014541005485739, 1.411928746975195 ], [ 104.019034121079827, 1.414539050280307 ], [ 104.023526820820933, 1.411928024739062 ], [ 104.023526397263041, 1.406706705805175 ], [ 104.019033293974971, 1.404096409708563 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1047" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.019034536932779, 1.419760370212697 ], [ 104.014541817069357, 1.422371389479318 ], [ 104.014542225106084, 1.427592710375947 ], [ 104.019035373239888, 1.430203009366159 ], [ 104.023528100919549, 1.427591980124146 ], [ 104.02352767264918, 1.422370661899418 ], [ 104.019034536932779, 1.419760370212697 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1048" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.023519437094379, 1.317944248738425 ], [ 104.019026897973333, 1.320555251993902 ], [ 104.019027286222197, 1.32577657604016 ], [ 104.023520232378715, 1.328386894126721 ], [ 104.028012778537317, 1.325775881481183 ], [ 104.028012371501859, 1.320554560171248 ], [ 104.023519437094379, 1.317944248738425 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1049" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.023520632376687, 1.333608216488916 ], [ 104.019028067320221, 1.336219223468354 ], [ 104.019028460169409, 1.341440546848548 ], [ 104.02352143708427, 1.344050860545052 ], [ 104.028014009289478, 1.341439844080536 ], [ 104.028013597431098, 1.336218523436698 ], [ 104.023520632376687, 1.333608216488916 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1050" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.023521841793908, 1.349272182237251 ], [ 104.019029250468208, 1.351883192936782 ], [ 104.019029647917847, 1.357104515643081 ], [ 104.023522655925007, 1.359714824945561 ], [ 104.028015254510677, 1.357103804665933 ], [ 104.028014837829232, 1.351882484696024 ], [ 104.023521841793908, 1.349272182237251 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1051" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.023523065346481, 1.364936145959931 ], [ 104.019030447417705, 1.367547160375689 ], [ 104.019030849467967, 1.372768482400258 ], [ 104.023523888901394, 1.37537878730475 ], [ 104.028016514201383, 1.372767763213875 ], [ 104.028016092696731, 1.367546443925729 ], [ 104.023523065346481, 1.364936145959931 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1052" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.023524303034876, 1.380600107633458 ], [ 104.019031658169197, 1.383211125761577 ], [ 104.019032064820195, 1.388432447096585 ], [ 104.02352513601393, 1.39104274759912 ], [ 104.028017788362064, 1.388431719700864 ], [ 104.028017362034035, 1.383210401102313 ], [ 104.023524303034876, 1.380600107633458 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1053" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.023525554859546, 1.396264067234334 ], [ 104.019032882723081, 1.398875089070948 ], [ 104.019033293974971, 1.404096409708563 ], [ 104.023526397263041, 1.406706705805175 ], [ 104.028019076993189, 1.404095674103401 ], [ 104.028018645841613, 1.398874356202278 ], [ 104.023525554859546, 1.396264067234334 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1054" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.023526820820933, 1.411928024739062 ], [ 104.019034121079827, 1.414539050280307 ], [ 104.019034536932779, 1.419760370212697 ], [ 104.02352767264918, 1.422370661899418 ], [ 104.028020380095214, 1.419759626397989 ], [ 104.028019944119961, 1.414538309202126 ], [ 104.023526820820933, 1.411928024739062 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1055" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.023528100919549, 1.427591980124146 ], [ 104.019035373239888, 1.430203009366159 ], [ 104.019035793694073, 1.435424328585491 ], [ 104.023528962172833, 1.438034615858353 ], [ 104.028021697668649, 1.435423576561131 ], [ 104.028021256869536, 1.430202260078361 ], [ 104.023528100919549, 1.427591980124146 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1056" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.028011562253738, 1.310111916891373 ], [ 104.023519041807958, 1.312722925714067 ], [ 104.023519437094379, 1.317944248738425 ], [ 104.028012371501859, 1.320554560171248 ], [ 104.032504898873881, 1.317943541973697 ], [ 104.032504484912195, 1.312722221750283 ], [ 104.028011562253738, 1.310111916891373 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1057" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.028014009289478, 1.341439844080536 ], [ 104.02352143708427, 1.344050860545052 ], [ 104.023521841793908, 1.349272182237251 ], [ 104.028014837829232, 1.351882484696024 ], [ 104.032507417183155, 1.349271458666617 ], [ 104.032506993353039, 1.34405013977543 ], [ 104.028014009289478, 1.341439844080536 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1058" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.028015254510677, 1.357103804665933 ], [ 104.023522655925007, 1.359714824945561 ], [ 104.023523065346481, 1.364936145959931 ], [ 104.028016092696731, 1.367546443925729 ], [ 104.032508698542316, 1.36493541398619 ], [ 104.032508269777779, 1.359714095772867 ], [ 104.028015254510677, 1.357103804665933 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1059" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.028016514201383, 1.372767763213875 ], [ 104.023523888901394, 1.37537878730475 ], [ 104.023524303034876, 1.380600107633458 ], [ 104.028017362034035, 1.383210401102313 ], [ 104.032509994705165, 1.380599367256507 ], [ 104.032509561006009, 1.375378049728881 ], [ 104.028016514201383, 1.372767763213875 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1060" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.028017788362064, 1.388431719700864 ], [ 104.02352513601393, 1.39104274759912 ], [ 104.023525554859546, 1.396264067234334 ], [ 104.028018645841613, 1.398874356202278 ], [ 104.032511305672145, 1.396263318454067 ], [ 104.032510867038212, 1.39104200161997 ], [ 104.028017788362064, 1.388431719700864 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1061" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.028019076993189, 1.404095674103401 ], [ 104.023526397263041, 1.406706705805175 ], [ 104.023526820820933, 1.411928024739062 ], [ 104.028019944119961, 1.414538309202126 ], [ 104.032512631443737, 1.411927267555374 ], [ 104.032512187874886, 1.406705951422639 ], [ 104.028019076993189, 1.404095674103401 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1062" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.028020380095214, 1.419759626397989 ], [ 104.02352767264918, 1.422370661899418 ], [ 104.023528100919549, 1.427591980124146 ], [ 104.028021256869536, 1.430202260078361 ], [ 104.032513972020439, 1.427591214536928 ], [ 104.032513523516513, 1.422369899113388 ], [ 104.028020380095214, 1.419759626397989 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1063" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.028021697668649, 1.435423576561131 ], [ 104.023528962172833, 1.438034615858353 ], [ 104.023529395155819, 1.443255933366091 ], [ 104.028022584090849, 1.445866208807487 ], [ 104.032515327402763, 1.443255159375235 ], [ 104.032514873963564, 1.438033844668722 ], [ 104.028021697668649, 1.435423576561131 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1064" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.032504898873881, 1.317943541973697 ], [ 104.028012371501859, 1.320554560171248 ], [ 104.028012778537317, 1.325775881481183 ], [ 104.032505731731334, 1.328386181760068 ], [ 104.036998266029556, 1.325775154107848 ], [ 104.036997840207576, 1.320553835663513 ], [ 104.032504898873881, 1.317943541973697 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1065" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.032507417183155, 1.349271458666617 ], [ 104.028014837829232, 1.351882484696024 ], [ 104.028015254510677, 1.357103804665933 ], [ 104.032508269777779, 1.359714095772867 ], [ 104.037000856280329, 1.357103060098754 ], [ 104.03700042036715, 1.351881742994515 ], [ 104.032507417183155, 1.349271458666617 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1066" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.032509994705165, 1.380599367256507 ], [ 104.028017362034035, 1.383210401102313 ], [ 104.028017788362064, 1.388431719700864 ], [ 104.032510867038212, 1.39104200161997 ], [ 104.037003507080442, 1.388430957939417 ], [ 104.037003061075453, 1.383209642206607 ], [ 104.032509994705165, 1.380599367256507 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1067" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.032511305672145, 1.396263318454067 ], [ 104.028018645841613, 1.398874356202278 ], [ 104.028019076993189, 1.404095674103401 ], [ 104.032512187874886, 1.406705951422639 ], [ 104.037004855187732, 1.404094903744658 ], [ 104.037004404136567, 1.398873588709312 ], [ 104.032511305672145, 1.396263318454067 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1068" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.032512631443737, 1.411927267555374 ], [ 104.028019944119961, 1.414538309202126 ], [ 104.028020380095214, 1.419759626397989 ], [ 104.032513523516513, 1.422369899113388 ], [ 104.037006218433845, 1.419758847441841 ], [ 104.037005762336349, 1.414537533111792 ], [ 104.032512631443737, 1.411927267555374 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1069" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.032513972020439, 1.427591214536928 ], [ 104.028021256869536, 1.430202260078361 ], [ 104.028021697668649, 1.435423576561131 ], [ 104.032514873963564, 1.438033844668722 ], [ 104.037007596819265, 1.435422789007468 ], [ 104.037007135675282, 1.430201475390549 ], [ 104.032513972020439, 1.427591214536928 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1070" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.03699699360898, 1.310111198114805 ], [ 104.032504484912195, 1.312722221750283 ], [ 104.032504898873881, 1.317943541973697 ], [ 104.036997840207576, 1.320553835663513 ], [ 104.04149035571929, 1.31794280258857 ], [ 104.041489923082395, 1.312721485295377 ], [ 104.03699699360898, 1.310111198114805 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1071" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.037000856280329, 1.357103060098754 ], [ 104.032508269777779, 1.359714095772867 ], [ 104.032508698542316, 1.36493541398619 ], [ 104.037001733152479, 1.367545693627175 ], [ 104.041494326803615, 1.364934648228541 ], [ 104.041493878696045, 1.359713332945546 ], [ 104.037000856280329, 1.357103060098754 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1072" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.037002174111464, 1.372767010049616 ], [ 104.032509561006009, 1.375378049728881 ], [ 104.032509994705165, 1.380599367256507 ], [ 104.037003061075453, 1.383209642206607 ], [ 104.041495681440736, 1.380598592707801 ], [ 104.041495228175947, 1.375377278110539 ], [ 104.037002174111464, 1.372767010049616 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1073" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.037003507080442, 1.388430957939417 ], [ 104.032510867038212, 1.39104200161997 ], [ 104.032511305672145, 1.396263318454067 ], [ 104.037004404136567, 1.398873588709312 ], [ 104.041497051549868, 1.396262535114195 ], [ 104.041496593127675, 1.391041221210499 ], [ 104.037003507080442, 1.388430957939417 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1074" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.037004855187732, 1.404094903744658 ], [ 104.032512187874886, 1.406705951422639 ], [ 104.032512631443737, 1.411927267555374 ], [ 104.037005762336349, 1.414537533111792 ], [ 104.041498437131494, 1.411926475424223 ], [ 104.041497973551756, 1.406705162221927 ], [ 104.037004855187732, 1.404094903744658 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1075" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.037006218433845, 1.419758847441841 ], [ 104.032513523516513, 1.422369899113388 ], [ 104.032513972020439, 1.427591214536928 ], [ 104.037007135675282, 1.430201475390549 ], [ 104.041499838186141, 1.427590413614388 ], [ 104.041499369448672, 1.422369101121324 ], [ 104.037006218433845, 1.419758847441841 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1076" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.037007596819265, 1.435422789007468 ], [ 104.032514873963564, 1.438033844668722 ], [ 104.032515327402763, 1.443255159375235 ], [ 104.037008524153876, 1.445865415522085 ], [ 104.041501254714333, 1.44325434966119 ], [ 104.04150078081895, 1.438033037885191 ], [ 104.037007596819265, 1.435422789007468 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1077" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.041492987638009, 1.349270701699916 ], [ 104.03700042036715, 1.351881742994515 ], [ 104.037000856280329, 1.357103060098754 ], [ 104.041493878696045, 1.359713332945546 ], [ 104.045986453004204, 1.357102281941634 ], [ 104.045985997859347, 1.351880967832344 ], [ 104.041492987638009, 1.349270701699916 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1078" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.041494326803615, 1.364934648228541 ], [ 104.037001733152479, 1.367545693627175 ], [ 104.037002174111464, 1.372767010049616 ], [ 104.041495228175947, 1.375377278110539 ], [ 104.045987828975626, 1.372766222907572 ], [ 104.045987368562322, 1.367544909480118 ], [ 104.041494326803615, 1.364934648228541 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1079" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.041495681440736, 1.380598592707801 ], [ 104.037003061075453, 1.383209642206607 ], [ 104.037003507080442, 1.388430957939417 ], [ 104.041496593127675, 1.391041221210499 ], [ 104.04598922075273, 1.388430161812337 ], [ 104.045988755070809, 1.383208849074552 ], [ 104.041495681440736, 1.380598592707801 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1080" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.041497051549868, 1.396262535114195 ], [ 104.037004404136567, 1.398873588709312 ], [ 104.037004855187732, 1.404094903744658 ], [ 104.041497973551756, 1.406705162221927 ], [ 104.045990628336028, 1.40409409863243 ], [ 104.045990157385319, 1.398872786592146 ], [ 104.041497051549868, 1.396262535114195 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1081" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.041498437131494, 1.411926475424223 ], [ 104.037005762336349, 1.414537533111792 ], [ 104.037006218433845, 1.419758847441841 ], [ 104.041499369448672, 1.422369101121324 ], [ 104.045992051726046, 1.41975803334435 ], [ 104.045991575506363, 1.414536722009402 ], [ 104.041498437131494, 1.411926475424223 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1082" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.041499838186141, 1.427590413614388 ], [ 104.037007135675282, 1.430201475390549 ], [ 104.037007596819265, 1.435422789007468 ], [ 104.04150078081895, 1.438033037885191 ], [ 104.04599349092328, 1.435421965924599 ], [ 104.045993009434483, 1.430200655302819 ], [ 104.041499838186141, 1.427590413614388 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1083" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.045985092837938, 1.341438338938024 ], [ 104.041492544687486, 1.344049385739021 ], [ 104.041492987638009, 1.349270701699916 ], [ 104.045985997859347, 1.351880967832344 ], [ 104.050478552935843, 1.349269911337241 ], [ 104.050478090864971, 1.344048598435917 ], [ 104.045985092837938, 1.341438338938024 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1084" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.045986453004204, 1.357102281941634 ], [ 104.041493878696045, 1.359713332945546 ], [ 104.041494326803615, 1.364934648228541 ], [ 104.045987368562322, 1.367544909480118 ], [ 104.050479949907739, 1.364933848687078 ], [ 104.050479482457206, 1.359712536463692 ], [ 104.045986453004204, 1.357102281941634 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1085" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.045987828975626, 1.372766222907572 ], [ 104.041495228175947, 1.375377278110539 ], [ 104.041495681440736, 1.380598592707801 ], [ 104.045988755070809, 1.383208849074552 ], [ 104.050481363018974, 1.380597783987436 ], [ 104.050480890188609, 1.375376472449821 ], [ 104.045987828975626, 1.372766222907572 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1086" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.04598922075273, 1.388430161812337 ], [ 104.041496593127675, 1.391041221210499 ], [ 104.041497051549868, 1.396262535114195 ], [ 104.045990157385319, 1.398872786592146 ], [ 104.050482792270074, 1.396261717214813 ], [ 104.050482314059707, 1.391040406370802 ], [ 104.04598922075273, 1.388430161812337 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1087" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.045990628336028, 1.40409409863243 ], [ 104.041497973551756, 1.406705162221927 ], [ 104.041498437131494, 1.411926475424223 ], [ 104.045991575506363, 1.414536722009402 ], [ 104.050484237661578, 1.411925648345709 ], [ 104.05048375407101, 1.406704338203137 ], [ 104.045990628336028, 1.40409409863243 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1088" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.045992051726046, 1.41975803334435 ], [ 104.041499369448672, 1.422369101121324 ], [ 104.041499838186141, 1.427590413614388 ], [ 104.045993009434483, 1.430200655302819 ], [ 104.050485699194013, 1.427589577356623 ], [ 104.050485210223059, 1.422368267923322 ], [ 104.045992051726046, 1.41975803334435 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1089" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.04599349092328, 1.435421965924599 ], [ 104.04150078081895, 1.438033037885191 ], [ 104.041501254714333, 1.44325434966119 ], [ 104.045994459170174, 1.445864586448898 ], [ 104.05048717686789, 1.443253504224056 ], [ 104.050486682516407, 1.43803219550786 ], [ 104.04599349092328, 1.435421965924599 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1090" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.050479949907739, 1.364933848687078 ], [ 104.045987368562322, 1.367544909480118 ], [ 104.045987828975626, 1.372766222907572 ], [ 104.050480890188609, 1.375376472449821 ], [ 104.054973478571213, 1.37276540178784 ], [ 104.054972998703676, 1.367544091484655 ], [ 104.050479949907739, 1.364933848687078 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1091" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.050481363018974, 1.380597783987436 ], [ 104.045988755070809, 1.383208849074552 ], [ 104.04598922075273, 1.388430161812337 ], [ 104.050482314059707, 1.391040406370802 ], [ 104.054974929156273, 1.388429331319724 ], [ 104.054974443797505, 1.383208021706245 ], [ 104.050481363018974, 1.380597783987436 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1092" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.050482792270074, 1.396261717214813 ], [ 104.045990157385319, 1.398872786592146 ], [ 104.045990628336028, 1.40409409863243 ], [ 104.05048375407101, 1.406704338203137 ], [ 104.054976396215409, 1.404093258766816 ], [ 104.054975905365211, 1.398871949850879 ], [ 104.050482792270074, 1.396261717214813 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1093" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.050484237661578, 1.411925648345709 ], [ 104.045991575506363, 1.414536722009402 ], [ 104.045992051726046, 1.41975803334435 ], [ 104.050485210223059, 1.422368267923322 ], [ 104.054977879749146, 1.419757184105616 ], [ 104.054977383407362, 1.414535875895055 ], [ 104.050484237661578, 1.411925648345709 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1094" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.050485699194013, 1.427589577356623 ], [ 104.045993009434483, 1.430200655302819 ], [ 104.04599349092328, 1.435421965924599 ], [ 104.050486682516407, 1.43803219550786 ], [ 104.054979379758038, 1.435421107312624 ], [ 104.054978877924469, 1.430199799815271 ], [ 104.050485699194013, 1.427589577356623 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1095" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.054972044459689, 1.357101470194668 ], [ 104.050479482457206, 1.359712536463692 ], [ 104.050479949907739, 1.364933848687078 ], [ 104.054972998703676, 1.367544091484655 ], [ 104.059465567632074, 1.364933015361899 ], [ 104.059465080838649, 1.359711706327401 ], [ 104.054972044459689, 1.357101470194668 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1096" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.054973478571213, 1.37276540178784 ], [ 104.050480890188609, 1.375376472449821 ], [ 104.050481363018974, 1.380597783987436 ], [ 104.054974443797505, 1.383208021706245 ], [ 104.059467039217267, 1.380596941095511 ], [ 104.059466546821369, 1.375375632746824 ], [ 104.054973478571213, 1.37276540178784 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1097" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.054974929156273, 1.388429331319724 ], [ 104.050482314059707, 1.391040406370802 ], [ 104.050482792270074, 1.396261717214813 ], [ 104.054975905365211, 1.398871949850879 ], [ 104.059468527610164, 1.396260864756022 ], [ 104.059468029611651, 1.39103955710098 ], [ 104.054974929156273, 1.388429331319724 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1098" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.054976396215409, 1.404093258766816 ], [ 104.05048375407101, 1.406704338203137 ], [ 104.050484237661578, 1.411925648345709 ], [ 104.054977383407362, 1.414535875895055 ], [ 104.059470032811362, 1.411924786319931 ], [ 104.059469529210006, 1.406703479366368 ], [ 104.054976396215409, 1.404093258766816 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1099" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.054977879749146, 1.419757184105616 ], [ 104.050485210223059, 1.422368267923322 ], [ 104.050485699194013, 1.427589577356623 ], [ 104.054978877924469, 1.430199799815271 ], [ 104.059471554821371, 1.427588705763736 ], [ 104.059471045617016, 1.422367399519485 ], [ 104.054977879749146, 1.419757184105616 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1100" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.059464112854073, 1.349269087578689 ], [ 104.054971570083197, 1.351880159209609 ], [ 104.054972044459689, 1.357101470194668 ], [ 104.059465080838649, 1.359711706327401 ], [ 104.06395763042417, 1.357100624857958 ], [ 104.063957136816114, 1.351879317126407 ], [ 104.059464112854073, 1.349269087578689 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1101" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.059465567632074, 1.364933015361899 ], [ 104.054972998703676, 1.367544091484655 ], [ 104.054973478571213, 1.37276540178784 ], [ 104.059466546821369, 1.375375632746824 ], [ 104.063959122675641, 1.372764546690523 ], [ 104.063958623353912, 1.367543239640886 ], [ 104.059465567632074, 1.364933015361899 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1102" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.059467039217267, 1.380596941095511 ], [ 104.054974443797505, 1.383208021706245 ], [ 104.054974929156273, 1.388429331319724 ], [ 104.059468029611651, 1.39103955710098 ], [ 104.063960632068486, 1.388428466461678 ], [ 104.0639601270329, 1.383207160101789 ], [ 104.059467039217267, 1.380596941095511 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1103" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.059468527610164, 1.396260864756022 ], [ 104.054975905365211, 1.398871949850879 ], [ 104.054976396215409, 1.404093258766816 ], [ 104.059469529210006, 1.406703479366368 ], [ 104.06396215860326, 1.404092384147919 ], [ 104.063961647853631, 1.398871078485613 ], [ 104.059468527610164, 1.396260864756022 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1104" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.059470032811362, 1.411924786319931 ], [ 104.054977383407362, 1.414535875895055 ], [ 104.054977879749146, 1.419757184105616 ], [ 104.059471045617016, 1.422367399519485 ], [ 104.063963702280546, 1.419756299725744 ], [ 104.063963185816689, 1.414534994768855 ], [ 104.059470032811362, 1.411924786319931 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1105" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.059471554821371, 1.427588705763736 ], [ 104.054978877924469, 1.430199799815271 ], [ 104.054979379758038, 1.435421107312624 ], [ 104.059472578833237, 1.438031317536832 ], [ 104.063965263100883, 1.43542021317165 ], [ 104.063964740922614, 1.430198908928012 ], [ 104.059471554821371, 1.427588705763736 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1106" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.063956155313534, 1.341436700987485 ], [ 104.059463631662922, 1.344047777866215 ], [ 104.059464112854073, 1.349269087578689 ], [ 104.063957136816114, 1.351879317126407 ], [ 104.068449667170114, 1.349268230424362 ], [ 104.068449166858713, 1.344046924030016 ], [ 104.063956155313534, 1.341436700987485 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1107" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.06395763042417, 1.357100624857958 ], [ 104.059465080838649, 1.359711706327401 ], [ 104.059465567632074, 1.364933015361899 ], [ 104.063958623353912, 1.367543239640886 ], [ 104.068451179754035, 1.364932148253106 ], [ 104.068450673617747, 1.359710842536777 ], [ 104.06395763042417, 1.357100624857958 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1108" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.063959122675641, 1.372764546690523 ], [ 104.059466546821369, 1.375375632746824 ], [ 104.059467039217267, 1.380596941095511 ], [ 104.0639601270329, 1.383207160101789 ], [ 104.068452709812973, 1.38059606403213 ], [ 104.068452197851627, 1.375374759001653 ], [ 104.063959122675641, 1.372764546690523 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1109" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.063960632068486, 1.388428466461678 ], [ 104.059468029611651, 1.39103955710098 ], [ 104.059468527610164, 1.396260864756022 ], [ 104.063961647853631, 1.398871078485613 ], [ 104.068454257347497, 1.396259977737928 ], [ 104.068453739560894, 1.391038673401138 ], [ 104.063960632068486, 1.388428466461678 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1110" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.06396215860326, 1.404092384147919 ], [ 104.059469529210006, 1.406703479366368 ], [ 104.059470032811362, 1.411924786319931 ], [ 104.063963185816689, 1.414534994768855 ], [ 104.068455822358189, 1.411923889346997 ], [ 104.06845529874613, 1.406702585711728 ], [ 104.06396215860326, 1.404092384147919 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1111" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.063963702280546, 1.419756299725744 ], [ 104.059471045617016, 1.422367399519485 ], [ 104.059471554821371, 1.427588705763736 ], [ 104.063964740922614, 1.430198908928012 ], [ 104.068457404845603, 1.427587798835835 ], [ 104.068456875407904, 1.422366495909921 ], [ 104.063963702280546, 1.419756299725744 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1112" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.063965263100883, 1.43542021317165 ], [ 104.059472578833237, 1.438031317536832 ], [ 104.059473093640776, 1.443252623063936 ], [ 104.063966313171989, 1.445862820939584 ], [ 104.068459004810336, 1.44325170618094 ], [ 104.068458469546798, 1.438030403972215 ], [ 104.063965263100883, 1.43542021317165 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1113" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.068443791573515, 1.286612539082277 ], [ 104.063951362065964, 1.289223607002816 ], [ 104.063951832821147, 1.294444917383673 ], [ 104.068444751425034, 1.297055156493466 ], [ 104.072937187191073, 1.294444079049874 ], [ 104.07293669809475, 1.289222772051642 ], [ 104.068443791573515, 1.286612539082277 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1114" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.068449667170114, 1.349268230424362 ], [ 104.063957136816114, 1.351879317126407 ], [ 104.06395763042417, 1.357100624857958 ], [ 104.068450673617747, 1.359710842536777 ], [ 104.072943210675049, 1.357099745931606 ], [ 104.072942697835487, 1.351878441582843 ], [ 104.068449667170114, 1.349268230424362 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1115" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.068451179754035, 1.364932148253106 ], [ 104.063958623353912, 1.367543239640886 ], [ 104.063959122675641, 1.372764546690523 ], [ 104.068452197851627, 1.375374759001653 ], [ 104.072944761066267, 1.372763657615724 ], [ 104.072944242290419, 1.367542353948917 ], [ 104.068451179754035, 1.364932148253106 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1116" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.068452709812973, 1.38059606403213 ], [ 104.0639601270329, 1.383207160101789 ], [ 104.063960632068486, 1.388428466461678 ], [ 104.068453739560894, 1.391038673401138 ], [ 104.072946329266699, 1.388427567238306 ], [ 104.072945804554394, 1.38320626426129 ], [ 104.068452709812973, 1.38059606403213 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1117" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.068454257347497, 1.396259977737928 ], [ 104.063961647853631, 1.398871078485613 ], [ 104.06396215860326, 1.404092384147919 ], [ 104.06845529874613, 1.406702585711728 ], [ 104.072947915276956, 1.404091474775847 ], [ 104.072947384627966, 1.398870172496455 ], [ 104.068454257347497, 1.396259977737928 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1118" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.068455822358189, 1.411923889346997 ], [ 104.063963185816689, 1.414534994768855 ], [ 104.063963702280546, 1.419756299725744 ], [ 104.068456875407904, 1.422366495909921 ], [ 104.072949519097577, 1.419755380204841 ], [ 104.072948982511733, 1.41453407863091 ], [ 104.068455822358189, 1.411923889346997 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1119" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.068457404845603, 1.427587798835835 ], [ 104.063964740922614, 1.430198908928012 ], [ 104.063965263100883, 1.43542021317165 ], [ 104.068458469546798, 1.438030403972215 ], [ 104.072951140729188, 1.435419283501787 ], [ 104.072950598206276, 1.430197982641151 ], [ 104.068457404845603, 1.427587798835835 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1120" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.072941678092477, 1.341435832209455 ], [ 104.068449166858713, 1.344046924030016 ], [ 104.068449667170114, 1.349268230424362 ], [ 104.072942697835487, 1.351878441582843 ], [ 104.077435215661311, 1.349267339874365 ], [ 104.077434696229744, 1.344046036927425 ], [ 104.072941678092477, 1.341435832209455 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1121" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.072943210675049, 1.357099745931606 ], [ 104.068450673617747, 1.359710842536777 ], [ 104.068451179754035, 1.364932148253106 ], [ 104.072944242290419, 1.367542353948917 ], [ 104.077436786050981, 1.364931247360807 ], [ 104.077436260571901, 1.359709945091927 ], [ 104.072943210675049, 1.357099745931606 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1122" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.072944761066267, 1.372763657615724 ], [ 104.068452197851627, 1.375374759001653 ], [ 104.068452709812973, 1.38059606403213 ], [ 104.072945804554394, 1.38320626426129 ], [ 104.077438374583494, 1.3805951527974 ], [ 104.077437843056742, 1.375373851214414 ], [ 104.072944761066267, 1.372763657615724 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1123" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.072946329266699, 1.388427567238306 ], [ 104.068453739560894, 1.391038673401138 ], [ 104.068454257347497, 1.396259977737928 ], [ 104.072947384627966, 1.398870172496455 ], [ 104.07743998125946, 1.396259056160639 ], [ 104.077439443684824, 1.391037755271383 ], [ 104.072946329266699, 1.388427567238306 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1124" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.072947915276956, 1.404091474775847 ], [ 104.06845529874613, 1.406702585711728 ], [ 104.068455822358189, 1.411923889346997 ], [ 104.072948982511733, 1.41453407863091 ], [ 104.077441606079432, 1.411922957427017 ], [ 104.077441062456742, 1.406701657239326 ], [ 104.072947915276956, 1.404091474775847 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1125" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.072949519097577, 1.419755380204841 ], [ 104.068456875407904, 1.422366495909921 ], [ 104.068457404845603, 1.427587798835835 ], [ 104.072950598206276, 1.430197982641151 ], [ 104.077443249044066, 1.427586856573032 ], [ 104.07744269937308, 1.422365557094741 ], [ 104.072949519097577, 1.419755380204841 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1126" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.077433663413913, 1.33360343036158 ], [ 104.072941171189001, 1.336214527186572 ], [ 104.072941678092477, 1.341435832209455 ], [ 104.077434696229744, 1.344046036927425 ], [ 104.081927194935403, 1.341434930229726 ], [ 104.08192666902309, 1.336213628718867 ], [ 104.077433663413913, 1.33360343036158 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1127" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.077435215661311, 1.349267339874365 ], [ 104.072942697835487, 1.351878441582843 ], [ 104.072943210675049, 1.357099745931606 ], [ 104.077436260571901, 1.359709945091927 ], [ 104.081928784989714, 1.357098833415721 ], [ 104.081928252918686, 1.351877532579024 ], [ 104.077435215661311, 1.349267339874365 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1128" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.077436786050981, 1.364931247360807 ], [ 104.072944242290419, 1.367542353948917 ], [ 104.072944761066267, 1.372763657615724 ], [ 104.077437843056742, 1.375373851214414 ], [ 104.08193039352048, 1.372762734563554 ], [ 104.081929855290582, 1.367541434408857 ], [ 104.077436786050981, 1.364931247360807 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1129" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.077438374583494, 1.3805951527974 ], [ 104.072945804554394, 1.38320626426129 ], [ 104.072946329266699, 1.388427567238306 ], [ 104.077439443684824, 1.391037755271383 ], [ 104.081932020528328, 1.38842663364972 ], [ 104.081931476139331, 1.383205334184857 ], [ 104.077438374583494, 1.3805951527974 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1130" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.07743998125946, 1.396259056160639 ], [ 104.072947384627966, 1.398870172496455 ], [ 104.072947915276956, 1.404091474775847 ], [ 104.077441062456742, 1.406701657239326 ], [ 104.081933666013839, 1.404090530650711 ], [ 104.081933115465546, 1.398869231883517 ], [ 104.07743998125946, 1.396259056160639 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1131" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.077441606079432, 1.411922957427017 ], [ 104.072948982511733, 1.41453407863091 ], [ 104.072949519097577, 1.419755380204841 ], [ 104.07744269937308, 1.422365557094741 ], [ 104.081935329977611, 1.419754425543023 ], [ 104.081934773269836, 1.414533127481334 ], [ 104.077441606079432, 1.411922957427017 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1132" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.081927194935403, 1.341434930229726 ], [ 104.077434696229744, 1.344046036927425 ], [ 104.077435215661311, 1.349267339874365 ], [ 104.081928252918686, 1.351877532579024 ], [ 104.086420758105092, 1.349266415928809 ], [ 104.086420219553403, 1.344045116558552 ], [ 104.081927194935403, 1.341434930229726 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1133" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.08193039352048, 1.372762734563554 ], [ 104.077437843056742, 1.375373851214414 ], [ 104.077438374583494, 1.3805951527974 ], [ 104.081931476139331, 1.383205334184857 ], [ 104.086424033306187, 1.380594207391435 ], [ 104.086423482214116, 1.375372909385221 ], [ 104.08193039352048, 1.372762734563554 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1134" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.081932020528328, 1.38842663364972 ], [ 104.077439443684824, 1.391037755271383 ], [ 104.07743998125946, 1.396259056160639 ], [ 104.081933115465546, 1.398869231883517 ], [ 104.086425699123382, 1.396258100024268 ], [ 104.086425141760813, 1.391036802711829 ], [ 104.081932020528328, 1.38842663364972 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1135" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.081933666013839, 1.404090530650711 ], [ 104.077441062456742, 1.406701657239326 ], [ 104.077441606079432, 1.411922957427017 ], [ 104.081934773269836, 1.414533127481334 ], [ 104.086427383752479, 1.411921990560106 ], [ 104.0864268201192, 1.406700693949277 ], [ 104.081933666013839, 1.404090530650711 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1136" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.086417558144319, 1.317938616360287 ], [ 104.081925103603183, 1.32054972285189 ], [ 104.081925623357009, 1.325771025029078 ], [ 104.086418616438166, 1.328381217105506 ], [ 104.090911077237564, 1.325770100771616 ], [ 104.090910538697557, 1.320548802235685 ], [ 104.086417558144319, 1.317938616360287 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1137" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.086419148719969, 1.333602517146031 ], [ 104.08192666902309, 1.336213628718867 ], [ 104.081927194935403, 1.341434930229726 ], [ 104.086420219553403, 1.344045116558552 ], [ 104.090912705619715, 1.34143399504841 ], [ 104.090912160698608, 1.336212697178849 ], [ 104.086419148719969, 1.333602517146031 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1138" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.086424033306187, 1.380594207391435 ], [ 104.081931476139331, 1.383205334184857 ], [ 104.081932020528328, 1.38842663364972 ], [ 104.086425141760813, 1.391036802711829 ], [ 104.090917705630716, 1.388425665696033 ], [ 104.090917141565114, 1.383204369872605 ], [ 104.086424033306187, 1.380594207391435 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1139" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.086425699123382, 1.396258100024268 ], [ 104.081933115465546, 1.398869231883517 ], [ 104.081933666013839, 1.404090530650711 ], [ 104.0864268201192, 1.406700693949277 ], [ 104.090919410591297, 1.404089551772628 ], [ 104.090918840143772, 1.398868256646915 ], [ 104.086425699123382, 1.396258100024268 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1140" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.086427383752479, 1.411921990560106 ], [ 104.081934773269836, 1.414533127481334 ], [ 104.081935329977611, 1.419754425543023 ], [ 104.086428517289917, 1.422364583074059 ], [ 104.090921134698036, 1.419753435740405 ], [ 104.090920557868401, 1.414532141320243 ], [ 104.086427383752479, 1.411921990560106 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1141" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.090917705630716, 1.388425665696033 ], [ 104.086425141760813, 1.391036802711829 ], [ 104.086425699123382, 1.396258100024268 ], [ 104.090918840143772, 1.398868256646915 ], [ 104.095411410716679, 1.396257109328934 ], [ 104.09541083356622, 1.391035815722593 ], [ 104.090917705630716, 1.388425665696033 ] ] ] } }
    ]
    };

    /* src/page/component/SGMap.svelte generated by Svelte v3.21.0 */

    const { console: console_1 } = globals;
    const file$5 = "src/page/component/SGMap.svelte";

    // (31:4) {#if hoverWord !== 0}
    function create_if_block_1$5(ctx) {
    	let current;

    	const wordmap = new WordMap({
    			props: { hex: /*hex*/ ctx[2] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(wordmap.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(wordmap, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(wordmap.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(wordmap.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(wordmap, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$5.name,
    		type: "if",
    		source: "(31:4) {#if hoverWord !== 0}",
    		ctx
    	});

    	return block;
    }

    // (34:4) {#if clickWord !== 0}
    function create_if_block$5(ctx) {
    	let current;

    	const wordmap = new WordMap({
    			props: { hex: /*hex*/ ctx[2] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(wordmap.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(wordmap, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(wordmap.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(wordmap.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(wordmap, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$5.name,
    		type: "if",
    		source: "(34:4) {#if clickWord !== 0}",
    		ctx
    	});

    	return block;
    }

    // (29:2) <Graphic {width} {height} {...geoScale} padding={20} flipY>
    function create_default_slot(ctx) {
    	let t0;
    	let t1;
    	let if_block1_anchor;
    	let current;

    	const basemap = new BaseMap({
    			props: { hex: /*hex*/ ctx[2] },
    			$$inline: true
    		});

    	let if_block0 = /*hoverWord*/ ctx[0] !== 0 && create_if_block_1$5(ctx);
    	let if_block1 = /*clickWord*/ ctx[1] !== 0 && create_if_block$5(ctx);

    	const block = {
    		c: function create() {
    			create_component(basemap.$$.fragment);
    			t0 = space();
    			if (if_block0) if_block0.c();
    			t1 = space();
    			if (if_block1) if_block1.c();
    			if_block1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			mount_component(basemap, target, anchor);
    			insert_dev(target, t0, anchor);
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t1, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, if_block1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*hoverWord*/ ctx[0] !== 0) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty & /*hoverWord*/ 1) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_1$5(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(t1.parentNode, t1);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (/*clickWord*/ ctx[1] !== 0) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty & /*clickWord*/ 2) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block$5(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(basemap.$$.fragment, local);
    			transition_in(if_block0);
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(basemap.$$.fragment, local);
    			transition_out(if_block0);
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(basemap, detaching);
    			if (detaching) detach_dev(t0);
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t1);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(if_block1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot.name,
    		type: "slot",
    		source: "(29:2) <Graphic {width} {height} {...geoScale} padding={20} flipY>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$e(ctx) {
    	let div;
    	let t0;
    	let button;
    	let current;
    	let dispose;
    	const graphic_spread_levels = [{ width }, { height }, /*geoScale*/ ctx[3], { padding: 20 }, { flipY: true }];

    	let graphic_props = {
    		$$slots: { default: [create_default_slot] },
    		$$scope: { ctx }
    	};

    	for (let i = 0; i < graphic_spread_levels.length; i += 1) {
    		graphic_props = assign(graphic_props, graphic_spread_levels[i]);
    	}

    	const graphic = new Graphic({ props: graphic_props, $$inline: true });

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(graphic.$$.fragment);
    			t0 = space();
    			button = element("button");
    			button.textContent = "Reset Map";
    			attr_dev(div, "class", "basemap");
    			add_location(div, file$5, 27, 0, 926);
    			attr_dev(button, "class", "badge svelte-19v4lnc");
    			add_location(button, file$5, 39, 0, 1173);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor, remount) {
    			insert_dev(target, div, anchor);
    			mount_component(graphic, div, null);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, button, anchor);
    			current = true;
    			if (remount) dispose();
    			dispose = listen_dev(button, "click", /*click_handler*/ ctx[5], false, false, false);
    		},
    		p: function update(ctx, [dirty]) {
    			const graphic_changes = (dirty & /*width, height, geoScale*/ 8)
    			? get_spread_update(graphic_spread_levels, [
    					dirty & /*width*/ 0 && { width },
    					dirty & /*height*/ 0 && { height },
    					dirty & /*geoScale*/ 8 && get_spread_object(/*geoScale*/ ctx[3]),
    					graphic_spread_levels[3],
    					graphic_spread_levels[4]
    				])
    			: {};

    			if (dirty & /*$$scope, clickWord, hoverWord*/ 67) {
    				graphic_changes.$$scope = { dirty, ctx };
    			}

    			graphic.$set(graphic_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(graphic.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(graphic.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(graphic);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(button);
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$e.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const width = 700;
    const height = 500;

    function instance$e($$self, $$props, $$invalidate) {

    	// subscrite data
    	let hoverWord = null;

    	let selectHexId = null;
    	let clickWord = null;
    	hoverWordWrite.subscribe(value => $$invalidate(0, hoverWord = value));
    	clickWordWrite.subscribe(value => $$invalidate(1, clickWord = value));
    	clickHexIdWrite.subscribe(value => $$invalidate(4, selectHexId = value));

    	////// data
    	const hex = new florenceDatacontainer_umd(HEX);

    	////// basemap set up
    	const geoScale = createGeoScales(hex.domain("$geometry"));

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<SGMap> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("SGMap", $$slots, []);

    	const click_handler = () => {
    		$$invalidate(1, clickWord = 0);
    	};

    	$$self.$capture_state = () => ({
    		BaseMap,
    		WordMap,
    		Graphic,
    		createGeoScales,
    		DataContainer: florenceDatacontainer_umd,
    		HEX,
    		hoverWordWrite,
    		clickWordWrite,
    		clickHexIdWrite,
    		hoverWord,
    		selectHexId,
    		clickWord,
    		hex,
    		geoScale,
    		width,
    		height
    	});

    	$$self.$inject_state = $$props => {
    		if ("hoverWord" in $$props) $$invalidate(0, hoverWord = $$props.hoverWord);
    		if ("selectHexId" in $$props) $$invalidate(4, selectHexId = $$props.selectHexId);
    		if ("clickWord" in $$props) $$invalidate(1, clickWord = $$props.clickWord);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*hoverWord, selectHexId, clickWord*/ 19) {
    			 console.log("hoverWord:", hoverWord, "\n selectHexId", selectHexId, "\n clickWord", clickWord);
    		}
    	};

    	return [hoverWord, clickWord, hex, geoScale, selectHexId, click_handler];
    }

    class SGMap extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$e, create_fragment$e, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SGMap",
    			options,
    			id: create_fragment$e.name
    		});
    	}
    }

    function tree_add(d) {
      var x = +this._x.call(null, d),
          y = +this._y.call(null, d);
      return add$1(this.cover(x, y), x, y, d);
    }

    function add$1(tree, x, y, d) {
      if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points

      var parent,
          node = tree._root,
          leaf = {data: d},
          x0 = tree._x0,
          y0 = tree._y0,
          x1 = tree._x1,
          y1 = tree._y1,
          xm,
          ym,
          xp,
          yp,
          right,
          bottom,
          i,
          j;

      // If the tree is empty, initialize the root as a leaf.
      if (!node) return tree._root = leaf, tree;

      // Find the existing leaf for the new point, or add it.
      while (node.length) {
        if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
        if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
        if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;
      }

      // Is the new point is exactly coincident with the existing point?
      xp = +tree._x.call(null, node.data);
      yp = +tree._y.call(null, node.data);
      if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;

      // Otherwise, split the leaf node until the old and new point are separated.
      do {
        parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);
        if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
        if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
      } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | (xp >= xm)));
      return parent[j] = node, parent[i] = leaf, tree;
    }

    function addAll(data) {
      var d, i, n = data.length,
          x,
          y,
          xz = new Array(n),
          yz = new Array(n),
          x0 = Infinity,
          y0 = Infinity,
          x1 = -Infinity,
          y1 = -Infinity;

      // Compute the points and their extent.
      for (i = 0; i < n; ++i) {
        if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;
        xz[i] = x;
        yz[i] = y;
        if (x < x0) x0 = x;
        if (x > x1) x1 = x;
        if (y < y0) y0 = y;
        if (y > y1) y1 = y;
      }

      // If there were no (valid) points, abort.
      if (x0 > x1 || y0 > y1) return this;

      // Expand the tree to cover the new points.
      this.cover(x0, y0).cover(x1, y1);

      // Add the new points.
      for (i = 0; i < n; ++i) {
        add$1(this, xz[i], yz[i], data[i]);
      }

      return this;
    }

    function tree_cover(x, y) {
      if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points

      var x0 = this._x0,
          y0 = this._y0,
          x1 = this._x1,
          y1 = this._y1;

      // If the quadtree has no extent, initialize them.
      // Integer extent are necessary so that if we later double the extent,
      // the existing quadrant boundaries don’t change due to floating point error!
      if (isNaN(x0)) {
        x1 = (x0 = Math.floor(x)) + 1;
        y1 = (y0 = Math.floor(y)) + 1;
      }

      // Otherwise, double repeatedly to cover.
      else {
        var z = x1 - x0,
            node = this._root,
            parent,
            i;

        while (x0 > x || x >= x1 || y0 > y || y >= y1) {
          i = (y < y0) << 1 | (x < x0);
          parent = new Array(4), parent[i] = node, node = parent, z *= 2;
          switch (i) {
            case 0: x1 = x0 + z, y1 = y0 + z; break;
            case 1: x0 = x1 - z, y1 = y0 + z; break;
            case 2: x1 = x0 + z, y0 = y1 - z; break;
            case 3: x0 = x1 - z, y0 = y1 - z; break;
          }
        }

        if (this._root && this._root.length) this._root = node;
      }

      this._x0 = x0;
      this._y0 = y0;
      this._x1 = x1;
      this._y1 = y1;
      return this;
    }

    function tree_data() {
      var data = [];
      this.visit(function(node) {
        if (!node.length) do data.push(node.data); while (node = node.next)
      });
      return data;
    }

    function tree_extent(_) {
      return arguments.length
          ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1])
          : isNaN(this._x0) ? undefined : [[this._x0, this._y0], [this._x1, this._y1]];
    }

    function Quad(node, x0, y0, x1, y1) {
      this.node = node;
      this.x0 = x0;
      this.y0 = y0;
      this.x1 = x1;
      this.y1 = y1;
    }

    function tree_find(x, y, radius) {
      var data,
          x0 = this._x0,
          y0 = this._y0,
          x1,
          y1,
          x2,
          y2,
          x3 = this._x1,
          y3 = this._y1,
          quads = [],
          node = this._root,
          q,
          i;

      if (node) quads.push(new Quad(node, x0, y0, x3, y3));
      if (radius == null) radius = Infinity;
      else {
        x0 = x - radius, y0 = y - radius;
        x3 = x + radius, y3 = y + radius;
        radius *= radius;
      }

      while (q = quads.pop()) {

        // Stop searching if this quadrant can’t contain a closer node.
        if (!(node = q.node)
            || (x1 = q.x0) > x3
            || (y1 = q.y0) > y3
            || (x2 = q.x1) < x0
            || (y2 = q.y1) < y0) continue;

        // Bisect the current quadrant.
        if (node.length) {
          var xm = (x1 + x2) / 2,
              ym = (y1 + y2) / 2;

          quads.push(
            new Quad(node[3], xm, ym, x2, y2),
            new Quad(node[2], x1, ym, xm, y2),
            new Quad(node[1], xm, y1, x2, ym),
            new Quad(node[0], x1, y1, xm, ym)
          );

          // Visit the closest quadrant first.
          if (i = (y >= ym) << 1 | (x >= xm)) {
            q = quads[quads.length - 1];
            quads[quads.length - 1] = quads[quads.length - 1 - i];
            quads[quads.length - 1 - i] = q;
          }
        }

        // Visit this point. (Visiting coincident points isn’t necessary!)
        else {
          var dx = x - +this._x.call(null, node.data),
              dy = y - +this._y.call(null, node.data),
              d2 = dx * dx + dy * dy;
          if (d2 < radius) {
            var d = Math.sqrt(radius = d2);
            x0 = x - d, y0 = y - d;
            x3 = x + d, y3 = y + d;
            data = node.data;
          }
        }
      }

      return data;
    }

    function tree_remove(d) {
      if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this; // ignore invalid points

      var parent,
          node = this._root,
          retainer,
          previous,
          next,
          x0 = this._x0,
          y0 = this._y0,
          x1 = this._x1,
          y1 = this._y1,
          x,
          y,
          xm,
          ym,
          right,
          bottom,
          i,
          j;

      // If the tree is empty, initialize the root as a leaf.
      if (!node) return this;

      // Find the leaf node for the point.
      // While descending, also retain the deepest parent with a non-removed sibling.
      if (node.length) while (true) {
        if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
        if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
        if (!(parent = node, node = node[i = bottom << 1 | right])) return this;
        if (!node.length) break;
        if (parent[(i + 1) & 3] || parent[(i + 2) & 3] || parent[(i + 3) & 3]) retainer = parent, j = i;
      }

      // Find the point to remove.
      while (node.data !== d) if (!(previous = node, node = node.next)) return this;
      if (next = node.next) delete node.next;

      // If there are multiple coincident points, remove just the point.
      if (previous) return (next ? previous.next = next : delete previous.next), this;

      // If this is the root point, remove it.
      if (!parent) return this._root = next, this;

      // Remove this leaf.
      next ? parent[i] = next : delete parent[i];

      // If the parent now contains exactly one leaf, collapse superfluous parents.
      if ((node = parent[0] || parent[1] || parent[2] || parent[3])
          && node === (parent[3] || parent[2] || parent[1] || parent[0])
          && !node.length) {
        if (retainer) retainer[j] = node;
        else this._root = node;
      }

      return this;
    }

    function removeAll(data) {
      for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);
      return this;
    }

    function tree_root() {
      return this._root;
    }

    function tree_size() {
      var size = 0;
      this.visit(function(node) {
        if (!node.length) do ++size; while (node = node.next)
      });
      return size;
    }

    function tree_visit(callback) {
      var quads = [], q, node = this._root, child, x0, y0, x1, y1;
      if (node) quads.push(new Quad(node, this._x0, this._y0, this._x1, this._y1));
      while (q = quads.pop()) {
        if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {
          var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
          if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));
          if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));
          if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));
          if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));
        }
      }
      return this;
    }

    function tree_visitAfter(callback) {
      var quads = [], next = [], q;
      if (this._root) quads.push(new Quad(this._root, this._x0, this._y0, this._x1, this._y1));
      while (q = quads.pop()) {
        var node = q.node;
        if (node.length) {
          var child, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
          if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));
          if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));
          if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));
          if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));
        }
        next.push(q);
      }
      while (q = next.pop()) {
        callback(q.node, q.x0, q.y0, q.x1, q.y1);
      }
      return this;
    }

    function defaultX(d) {
      return d[0];
    }

    function tree_x(_) {
      return arguments.length ? (this._x = _, this) : this._x;
    }

    function defaultY(d) {
      return d[1];
    }

    function tree_y(_) {
      return arguments.length ? (this._y = _, this) : this._y;
    }

    function quadtree(nodes, x, y) {
      var tree = new Quadtree(x == null ? defaultX : x, y == null ? defaultY : y, NaN, NaN, NaN, NaN);
      return nodes == null ? tree : tree.addAll(nodes);
    }

    function Quadtree(x, y, x0, y0, x1, y1) {
      this._x = x;
      this._y = y;
      this._x0 = x0;
      this._y0 = y0;
      this._x1 = x1;
      this._y1 = y1;
      this._root = undefined;
    }

    function leaf_copy(leaf) {
      var copy = {data: leaf.data}, next = copy;
      while (leaf = leaf.next) next = next.next = {data: leaf.data};
      return copy;
    }

    var treeProto = quadtree.prototype = Quadtree.prototype;

    treeProto.copy = function() {
      var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1),
          node = this._root,
          nodes,
          child;

      if (!node) return copy;

      if (!node.length) return copy._root = leaf_copy(node), copy;

      nodes = [{source: node, target: copy._root = new Array(4)}];
      while (node = nodes.pop()) {
        for (var i = 0; i < 4; ++i) {
          if (child = node.source[i]) {
            if (child.length) nodes.push({source: child, target: node.target[i] = new Array(4)});
            else node.target[i] = leaf_copy(child);
          }
        }
      }

      return copy;
    };

    treeProto.add = tree_add;
    treeProto.addAll = addAll;
    treeProto.cover = tree_cover;
    treeProto.data = tree_data;
    treeProto.extent = tree_extent;
    treeProto.find = tree_find;
    treeProto.remove = tree_remove;
    treeProto.removeAll = removeAll;
    treeProto.root = tree_root;
    treeProto.size = tree_size;
    treeProto.visit = tree_visit;
    treeProto.visitAfter = tree_visitAfter;
    treeProto.x = tree_x;
    treeProto.y = tree_y;

    function constant$2(x) {
      return function() {
        return x;
      };
    }

    function jiggle() {
      return (Math.random() - 0.5) * 1e-6;
    }

    function x(d) {
      return d.x + d.vx;
    }

    function y(d) {
      return d.y + d.vy;
    }

    function forceCollide(radius) {
      var nodes,
          radii,
          strength = 1,
          iterations = 1;

      if (typeof radius !== "function") radius = constant$2(radius == null ? 1 : +radius);

      function force() {
        var i, n = nodes.length,
            tree,
            node,
            xi,
            yi,
            ri,
            ri2;

        for (var k = 0; k < iterations; ++k) {
          tree = quadtree(nodes, x, y).visitAfter(prepare);
          for (i = 0; i < n; ++i) {
            node = nodes[i];
            ri = radii[node.index], ri2 = ri * ri;
            xi = node.x + node.vx;
            yi = node.y + node.vy;
            tree.visit(apply);
          }
        }

        function apply(quad, x0, y0, x1, y1) {
          var data = quad.data, rj = quad.r, r = ri + rj;
          if (data) {
            if (data.index > node.index) {
              var x = xi - data.x - data.vx,
                  y = yi - data.y - data.vy,
                  l = x * x + y * y;
              if (l < r * r) {
                if (x === 0) x = jiggle(), l += x * x;
                if (y === 0) y = jiggle(), l += y * y;
                l = (r - (l = Math.sqrt(l))) / l * strength;
                node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));
                node.vy += (y *= l) * r;
                data.vx -= x * (r = 1 - r);
                data.vy -= y * r;
              }
            }
            return;
          }
          return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;
        }
      }

      function prepare(quad) {
        if (quad.data) return quad.r = radii[quad.data.index];
        for (var i = quad.r = 0; i < 4; ++i) {
          if (quad[i] && quad[i].r > quad.r) {
            quad.r = quad[i].r;
          }
        }
      }

      function initialize() {
        if (!nodes) return;
        var i, n = nodes.length, node;
        radii = new Array(n);
        for (i = 0; i < n; ++i) node = nodes[i], radii[node.index] = +radius(node, i, nodes);
      }

      force.initialize = function(_) {
        nodes = _;
        initialize();
      };

      force.iterations = function(_) {
        return arguments.length ? (iterations = +_, force) : iterations;
      };

      force.strength = function(_) {
        return arguments.length ? (strength = +_, force) : strength;
      };

      force.radius = function(_) {
        return arguments.length ? (radius = typeof _ === "function" ? _ : constant$2(+_), initialize(), force) : radius;
      };

      return force;
    }

    var noop$2 = {value: function() {}};

    function dispatch() {
      for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
        if (!(t = arguments[i] + "") || (t in _) || /[\s.]/.test(t)) throw new Error("illegal type: " + t);
        _[t] = [];
      }
      return new Dispatch(_);
    }

    function Dispatch(_) {
      this._ = _;
    }

    function parseTypenames(typenames, types) {
      return typenames.trim().split(/^|\s+/).map(function(t) {
        var name = "", i = t.indexOf(".");
        if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
        if (t && !types.hasOwnProperty(t)) throw new Error("unknown type: " + t);
        return {type: t, name: name};
      });
    }

    Dispatch.prototype = dispatch.prototype = {
      constructor: Dispatch,
      on: function(typename, callback) {
        var _ = this._,
            T = parseTypenames(typename + "", _),
            t,
            i = -1,
            n = T.length;

        // If no callback was specified, return the callback of the given type and name.
        if (arguments.length < 2) {
          while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;
          return;
        }

        // If a type was specified, set the callback for the given type and name.
        // Otherwise, if a null callback was specified, remove callbacks of the given name.
        if (callback != null && typeof callback !== "function") throw new Error("invalid callback: " + callback);
        while (++i < n) {
          if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);
          else if (callback == null) for (t in _) _[t] = set(_[t], typename.name, null);
        }

        return this;
      },
      copy: function() {
        var copy = {}, _ = this._;
        for (var t in _) copy[t] = _[t].slice();
        return new Dispatch(copy);
      },
      call: function(type, that) {
        if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];
        if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
        for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
      },
      apply: function(type, that, args) {
        if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
        for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
      }
    };

    function get(type, name) {
      for (var i = 0, n = type.length, c; i < n; ++i) {
        if ((c = type[i]).name === name) {
          return c.value;
        }
      }
    }

    function set(type, name, callback) {
      for (var i = 0, n = type.length; i < n; ++i) {
        if (type[i].name === name) {
          type[i] = noop$2, type = type.slice(0, i).concat(type.slice(i + 1));
          break;
        }
      }
      if (callback != null) type.push({name: name, value: callback});
      return type;
    }

    var frame = 0, // is an animation frame pending?
        timeout = 0, // is a timeout pending?
        interval = 0, // are any timers active?
        pokeDelay = 1000, // how frequently we check for clock skew
        taskHead,
        taskTail,
        clockLast = 0,
        clockNow = 0,
        clockSkew = 0,
        clock = typeof performance === "object" && performance.now ? performance : Date,
        setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) { setTimeout(f, 17); };

    function now$1() {
      return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
    }

    function clearNow() {
      clockNow = 0;
    }

    function Timer() {
      this._call =
      this._time =
      this._next = null;
    }

    Timer.prototype = timer.prototype = {
      constructor: Timer,
      restart: function(callback, delay, time) {
        if (typeof callback !== "function") throw new TypeError("callback is not a function");
        time = (time == null ? now$1() : +time) + (delay == null ? 0 : +delay);
        if (!this._next && taskTail !== this) {
          if (taskTail) taskTail._next = this;
          else taskHead = this;
          taskTail = this;
        }
        this._call = callback;
        this._time = time;
        sleep();
      },
      stop: function() {
        if (this._call) {
          this._call = null;
          this._time = Infinity;
          sleep();
        }
      }
    };

    function timer(callback, delay, time) {
      var t = new Timer;
      t.restart(callback, delay, time);
      return t;
    }

    function timerFlush() {
      now$1(); // Get the current time, if not already set.
      ++frame; // Pretend we’ve set an alarm, if we haven’t already.
      var t = taskHead, e;
      while (t) {
        if ((e = clockNow - t._time) >= 0) t._call.call(null, e);
        t = t._next;
      }
      --frame;
    }

    function wake() {
      clockNow = (clockLast = clock.now()) + clockSkew;
      frame = timeout = 0;
      try {
        timerFlush();
      } finally {
        frame = 0;
        nap();
        clockNow = 0;
      }
    }

    function poke() {
      var now = clock.now(), delay = now - clockLast;
      if (delay > pokeDelay) clockSkew -= delay, clockLast = now;
    }

    function nap() {
      var t0, t1 = taskHead, t2, time = Infinity;
      while (t1) {
        if (t1._call) {
          if (time > t1._time) time = t1._time;
          t0 = t1, t1 = t1._next;
        } else {
          t2 = t1._next, t1._next = null;
          t1 = t0 ? t0._next = t2 : taskHead = t2;
        }
      }
      taskTail = t0;
      sleep(time);
    }

    function sleep(time) {
      if (frame) return; // Soonest alarm already set, or will be.
      if (timeout) timeout = clearTimeout(timeout);
      var delay = time - clockNow; // Strictly less than if we recomputed clockNow.
      if (delay > 24) {
        if (time < Infinity) timeout = setTimeout(wake, time - clock.now() - clockSkew);
        if (interval) interval = clearInterval(interval);
      } else {
        if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
        frame = 1, setFrame(wake);
      }
    }

    var initialRadius = 10,
        initialAngle = Math.PI * (3 - Math.sqrt(5));

    function forceSimulation(nodes) {
      var simulation,
          alpha = 1,
          alphaMin = 0.001,
          alphaDecay = 1 - Math.pow(alphaMin, 1 / 300),
          alphaTarget = 0,
          velocityDecay = 0.6,
          forces = new Map(),
          stepper = timer(step),
          event = dispatch("tick", "end");

      if (nodes == null) nodes = [];

      function step() {
        tick();
        event.call("tick", simulation);
        if (alpha < alphaMin) {
          stepper.stop();
          event.call("end", simulation);
        }
      }

      function tick(iterations) {
        var i, n = nodes.length, node;

        if (iterations === undefined) iterations = 1;

        for (var k = 0; k < iterations; ++k) {
          alpha += (alphaTarget - alpha) * alphaDecay;

          forces.forEach(function(force) {
            force(alpha);
          });

          for (i = 0; i < n; ++i) {
            node = nodes[i];
            if (node.fx == null) node.x += node.vx *= velocityDecay;
            else node.x = node.fx, node.vx = 0;
            if (node.fy == null) node.y += node.vy *= velocityDecay;
            else node.y = node.fy, node.vy = 0;
          }
        }

        return simulation;
      }

      function initializeNodes() {
        for (var i = 0, n = nodes.length, node; i < n; ++i) {
          node = nodes[i], node.index = i;
          if (node.fx != null) node.x = node.fx;
          if (node.fy != null) node.y = node.fy;
          if (isNaN(node.x) || isNaN(node.y)) {
            var radius = initialRadius * Math.sqrt(i), angle = i * initialAngle;
            node.x = radius * Math.cos(angle);
            node.y = radius * Math.sin(angle);
          }
          if (isNaN(node.vx) || isNaN(node.vy)) {
            node.vx = node.vy = 0;
          }
        }
      }

      function initializeForce(force) {
        if (force.initialize) force.initialize(nodes);
        return force;
      }

      initializeNodes();

      return simulation = {
        tick: tick,

        restart: function() {
          return stepper.restart(step), simulation;
        },

        stop: function() {
          return stepper.stop(), simulation;
        },

        nodes: function(_) {
          return arguments.length ? (nodes = _, initializeNodes(), forces.forEach(initializeForce), simulation) : nodes;
        },

        alpha: function(_) {
          return arguments.length ? (alpha = +_, simulation) : alpha;
        },

        alphaMin: function(_) {
          return arguments.length ? (alphaMin = +_, simulation) : alphaMin;
        },

        alphaDecay: function(_) {
          return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;
        },

        alphaTarget: function(_) {
          return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;
        },

        velocityDecay: function(_) {
          return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;
        },

        force: function(name, _) {
          return arguments.length > 1 ? ((_ == null ? forces.delete(name) : forces.set(name, initializeForce(_))), simulation) : forces.get(name);
        },

        find: function(x, y, radius) {
          var i = 0,
              n = nodes.length,
              dx,
              dy,
              d2,
              node,
              closest;

          if (radius == null) radius = Infinity;
          else radius *= radius;

          for (i = 0; i < n; ++i) {
            node = nodes[i];
            dx = x - node.x;
            dy = y - node.y;
            d2 = dx * dx + dy * dy;
            if (d2 < radius) closest = node, radius = d2;
          }

          return closest;
        },

        on: function(name, _) {
          return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);
        }
      };
    }

    function forceX(x) {
      var strength = constant$2(0.1),
          nodes,
          strengths,
          xz;

      if (typeof x !== "function") x = constant$2(x == null ? 0 : +x);

      function force(alpha) {
        for (var i = 0, n = nodes.length, node; i < n; ++i) {
          node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;
        }
      }

      function initialize() {
        if (!nodes) return;
        var i, n = nodes.length;
        strengths = new Array(n);
        xz = new Array(n);
        for (i = 0; i < n; ++i) {
          strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
        }
      }

      force.initialize = function(_) {
        nodes = _;
        initialize();
      };

      force.strength = function(_) {
        return arguments.length ? (strength = typeof _ === "function" ? _ : constant$2(+_), initialize(), force) : strength;
      };

      force.x = function(_) {
        return arguments.length ? (x = typeof _ === "function" ? _ : constant$2(+_), initialize(), force) : x;
      };

      return force;
    }

    function forceY(y) {
      var strength = constant$2(0.1),
          nodes,
          strengths,
          yz;

      if (typeof y !== "function") y = constant$2(y == null ? 0 : +y);

      function force(alpha) {
        for (var i = 0, n = nodes.length, node; i < n; ++i) {
          node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;
        }
      }

      function initialize() {
        if (!nodes) return;
        var i, n = nodes.length;
        strengths = new Array(n);
        yz = new Array(n);
        for (i = 0; i < n; ++i) {
          strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
        }
      }

      force.initialize = function(_) {
        nodes = _;
        initialize();
      };

      force.strength = function(_) {
        return arguments.length ? (strength = typeof _ === "function" ? _ : constant$2(+_), initialize(), force) : strength;
      };

      force.y = function(_) {
        return arguments.length ? (y = typeof _ === "function" ? _ : constant$2(+_), initialize(), force) : y;
      };

      return force;
    }

    const TRIGRAM_COUNT = [
      {
        "gram": "school",
        "count": 2354
      },
      {
        "gram": "build",
        "count": 1580
      },
      {
        "gram": "student",
        "count": 614
      },
      {
        "gram": "road",
        "count": 581
      },
      {
        "gram": "court",
        "count": 483
      },
      {
        "gram": "house",
        "count": 394
      },
      {
        "gram": "station",
        "count": 360
      },
      {
        "gram": "college",
        "count": 355
      },
      {
        "gram": "art",
        "count": 343
      },
      {
        "gram": "street",
        "count": 317
      },
      {
        "gram": "japanese",
        "count": 297
      },
      {
        "gram": "parliament",
        "count": 287
      },
      {
        "gram": "raffle",
        "count": 287
      },
      {
        "gram": "bridge",
        "count": 280
      },
      {
        "gram": "programme",
        "count": 278
      },
      {
        "gram": "design",
        "count": 276
      },
      {
        "gram": "marina",
        "count": 264
      },
      {
        "gram": "university",
        "count": 257
      },
      {
        "gram": "park",
        "count": 253
      },
      {
        "gram": "river",
        "count": 253
      },
      {
        "gram": "locate",
        "count": 232
      },
      {
        "gram": "airport",
        "count": 229
      },
      {
        "gram": "church",
        "count": 216
      },
      {
        "gram": "chinese",
        "count": 215
      },
      {
        "gram": "temple",
        "count": 213
      },
      {
        "gram": "north",
        "count": 212
      },
      {
        "gram": "national",
        "count": 199
      },
      {
        "gram": "centre",
        "count": 187
      },
      {
        "gram": "changi",
        "count": 179
      },
      {
        "gram": "hold",
        "count": 178
      },
      {
        "gram": "appeal",
        "count": 170
      },
      {
        "gram": "garden",
        "count": 168
      },
      {
        "gram": "korea",
        "count": 168
      },
      {
        "gram": "british",
        "count": 167
      },
      {
        "gram": "junior",
        "count": 166
      },
      {
        "gram": "office",
        "count": 164
      },
      {
        "gram": "include",
        "count": 160
      },
      {
        "gram": "mp",
        "count": 159
      },
      {
        "gram": "police",
        "count": 159
      },
      {
        "gram": "government",
        "count": 158
      },
      {
        "gram": "nus",
        "count": 156
      },
      {
        "gram": "floor",
        "count": 153
      },
      {
        "gram": "junior college",
        "count": 150
      },
      {
        "gram": "public",
        "count": 149
      },
      {
        "gram": "hall",
        "count": 148
      },
      {
        "gram": "hotel",
        "count": 147
      },
      {
        "gram": "orchard",
        "count": 145
      },
      {
        "gram": "speaker",
        "count": 141
      },
      {
        "gram": "library",
        "count": 140
      },
      {
        "gram": "party",
        "count": 138
      },
      {
        "gram": "singapore's",
        "count": 138
      },
      {
        "gram": "theatre",
        "count": 138
      },
      {
        "gram": "tower",
        "count": 138
      },
      {
        "gram": "summit",
        "count": 137
      },
      {
        "gram": "law",
        "count": 136
      },
      {
        "gram": "shop",
        "count": 136
      },
      {
        "gram": "woodland",
        "count": 134
      },
      {
        "gram": "capitol",
        "count": 133
      },
      {
        "gram": "event",
        "count": 132
      },
      {
        "gram": "korean",
        "count": 132
      },
      {
        "gram": "minister",
        "count": 132
      },
      {
        "gram": "north korea",
        "count": 127
      },
      {
        "gram": "museum",
        "count": 122
      },
      {
        "gram": "trump",
        "count": 121
      },
      {
        "gram": "president",
        "count": 120
      },
      {
        "gram": "city",
        "count": 119
      },
      {
        "gram": "quay",
        "count": 117
      },
      {
        "gram": "power",
        "count": 115
      },
      {
        "gram": "yale",
        "count": 113
      },
      {
        "gram": "service",
        "count": 111
      },
      {
        "gram": "community",
        "count": 110
      },
      {
        "gram": "pink",
        "count": 109
      },
      {
        "gram": "kim",
        "count": 108
      },
      {
        "gram": "land",
        "count": 108
      },
      {
        "gram": "seletar",
        "count": 104
      },
      {
        "gram": "stadium",
        "count": 104
      },
      {
        "gram": "bay",
        "count": 102
      },
      {
        "gram": "dot",
        "count": 102
      },
      {
        "gram": "pink dot",
        "count": 101
      },
      {
        "gram": "bill",
        "count": 97
      },
      {
        "gram": "tampines",
        "count": 96
      },
      {
        "gram": "esplanade",
        "count": 94
      },
      {
        "gram": "marina bay",
        "count": 94
      },
      {
        "gram": "lim",
        "count": 92
      },
      {
        "gram": "time",
        "count": 91
      },
      {
        "gram": "jurong",
        "count": 89
      },
      {
        "gram": "chong",
        "count": 88
      },
      {
        "gram": "hwa",
        "count": 88
      },
      {
        "gram": "hwa chong",
        "count": 88
      },
      {
        "gram": "chiau",
        "count": 87
      },
      {
        "gram": "nan",
        "count": 87
      },
      {
        "gram": "nan chiau",
        "count": 87
      },
      {
        "gram": "sit",
        "count": 87
      },
      {
        "gram": "supreme",
        "count": 87
      },
      {
        "gram": "memorial",
        "count": 86
      },
      {
        "gram": "stamford",
        "count": 86
      },
      {
        "gram": "cathedral",
        "count": 84
      },
      {
        "gram": "fire",
        "count": 84
      },
      {
        "gram": "judge",
        "count": 82
      },
      {
        "gram": "meet",
        "count": 82
      },
      {
        "gram": "site",
        "count": 82
      },
      {
        "gram": "film",
        "count": 80
      },
      {
        "gram": "sentosa",
        "count": 79
      },
      {
        "gram": "supreme court",
        "count": 79
      },
      {
        "gram": "club",
        "count": 78
      },
      {
        "gram": "race",
        "count": 78
      },
      {
        "gram": "bus",
        "count": 75
      },
      {
        "gram": "sengkang",
        "count": 74
      },
      {
        "gram": "committee",
        "count": 73
      },
      {
        "gram": "fort",
        "count": 73
      },
      {
        "gram": "south",
        "count": 71
      },
      {
        "gram": "matter",
        "count": 70
      },
      {
        "gram": "council",
        "count": 69
      },
      {
        "gram": "substation",
        "count": 69
      },
      {
        "gram": "war",
        "count": 69
      },
      {
        "gram": "bank",
        "count": 68
      },
      {
        "gram": "seat",
        "count": 67
      },
      {
        "gram": "election",
        "count": 66
      },
      {
        "gram": "gallery",
        "count": 66
      },
      {
        "gram": "hill",
        "count": 65
      },
      {
        "gram": "complete",
        "count": 64
      },
      {
        "gram": "decision",
        "count": 64
      },
      {
        "gram": "npcc",
        "count": 64
      },
      {
        "gram": "smu",
        "count": 64
      },
      {
        "gram": "mall",
        "count": 63
      },
      {
        "gram": "plan",
        "count": 63
      },
      {
        "gram": "andrew's",
        "count": 62
      },
      {
        "gram": "australian",
        "count": 62
      },
      {
        "gram": "can",
        "count": 62
      },
      {
        "gram": "development",
        "count": 62
      },
      {
        "gram": "lap",
        "count": 62
      },
      {
        "gram": "market",
        "count": 62
      },
      {
        "gram": "orchard road",
        "count": 62
      },
      {
        "gram": "award",
        "count": 61
      },
      {
        "gram": "corner",
        "count": 61
      },
      {
        "gram": "feature",
        "count": 61
      },
      {
        "gram": "fort can",
        "count": 61
      },
      {
        "gram": "move",
        "count": 61
      },
      {
        "gram": "building",
        "count": 60
      },
      {
        "gram": "car",
        "count": 60
      },
      {
        "gram": "nuclear",
        "count": 60
      },
      {
        "gram": "yale nus",
        "count": 60
      },
      {
        "gram": "country",
        "count": 59
      },
      {
        "gram": "cisco",
        "count": 58
      },
      {
        "gram": "complex",
        "count": 58
      },
      {
        "gram": "day",
        "count": 58
      },
      {
        "gram": "island",
        "count": 58
      },
      {
        "gram": "space",
        "count": 58
      },
      {
        "gram": "support",
        "count": 58
      },
      {
        "gram": "ayer",
        "count": 57
      },
      {
        "gram": "cadet",
        "count": 57
      },
      {
        "gram": "city hall",
        "count": 57
      },
      {
        "gram": "force",
        "count": 57
      },
      {
        "gram": "fullerton",
        "count": 57
      },
      {
        "gram": "tyersall",
        "count": 57
      },
      {
        "gram": "zoo",
        "count": 57
      },
      {
        "gram": "chapel",
        "count": 56
      },
      {
        "gram": "harbourfront",
        "count": 56
      },
      {
        "gram": "march",
        "count": 56
      },
      {
        "gram": "mrt",
        "count": 56
      },
      {
        "gram": "pit",
        "count": 56
      },
      {
        "gram": "badminton",
        "count": 55
      },
      {
        "gram": "biodiversity",
        "count": 55
      },
      {
        "gram": "business",
        "count": 55
      },
      {
        "gram": "fountain",
        "count": 55
      },
      {
        "gram": "nanyang",
        "count": 55
      },
      {
        "gram": "original",
        "count": 55
      },
      {
        "gram": "speaker corner",
        "count": 55
      },
      {
        "gram": "st",
        "count": 55
      },
      {
        "gram": "chief",
        "count": 54
      },
      {
        "gram": "chinatown",
        "count": 54
      },
      {
        "gram": "construction",
        "count": 54
      },
      {
        "gram": "bedok",
        "count": 53
      },
      {
        "gram": "central",
        "count": 53
      },
      {
        "gram": "ntu",
        "count": 53
      },
      {
        "gram": "officer",
        "count": 53
      },
      {
        "gram": "science",
        "count": 53
      },
      {
        "gram": "act",
        "count": 52
      },
      {
        "gram": "monument",
        "count": 52
      },
      {
        "gram": "payoh",
        "count": 52
      },
      {
        "gram": "terminal",
        "count": 52
      },
      {
        "gram": "toa",
        "count": 52
      },
      {
        "gram": "toa payoh",
        "count": 52
      },
      {
        "gram": "appoint",
        "count": 51
      },
      {
        "gram": "aware",
        "count": 51
      },
      {
        "gram": "faculty",
        "count": 51
      },
      {
        "gram": "hear",
        "count": 51
      },
      {
        "gram": "india",
        "count": 51
      },
      {
        "gram": "june",
        "count": 51
      },
      {
        "gram": "justice",
        "count": 51
      },
      {
        "gram": "kallang",
        "count": 51
      },
      {
        "gram": "nanyang junior",
        "count": 51
      },
      {
        "gram": "unite",
        "count": 51
      }
    ];

    /* src/page/component/Beeswarm.svelte generated by Svelte v3.21.0 */
    const file$6 = "src/page/component/Beeswarm.svelte";

    function get_each_context$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[13] = list[i];
    	return child_ctx;
    }

    // (82:38) {:else}
    function create_else_block(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Hover the word");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block.name,
    		type: "else",
    		source: "(82:38) {:else}",
    		ctx
    	});

    	return block;
    }

    // (82:6) {#if hoverWord !== 0}
    function create_if_block$6(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text(/*hoverWord*/ ctx[1]);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*hoverWord*/ 2) set_data_dev(t, /*hoverWord*/ ctx[1]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$6.name,
    		type: "if",
    		source: "(82:6) {#if hoverWord !== 0}",
    		ctx
    	});

    	return block;
    }

    // (84:4) {#each circles as circle}
    function create_each_block$1(ctx) {
    	let circle;
    	let circle_cx_value;
    	let circle_cy_value;
    	let circle_r_value;
    	let t0;
    	let text_1;
    	let t1_value = /*circle*/ ctx[13].data.gram + "";
    	let t1;
    	let text_1_x_value;
    	let text_1_y_value;
    	let dispose;

    	const block = {
    		c: function create() {
    			circle = svg_element("circle");
    			t0 = space();
    			text_1 = svg_element("text");
    			t1 = text(t1_value);
    			attr_dev(circle, "cx", circle_cx_value = /*circle*/ ctx[13].x);
    			attr_dev(circle, "cy", circle_cy_value = /*circle*/ ctx[13].y);
    			attr_dev(circle, "r", circle_r_value = /*circle*/ ctx[13].radius - 2);
    			attr_dev(circle, "fill", /*circleColor*/ ctx[2]);
    			attr_dev(circle, "fill-opacity", opacityCircle);
    			add_location(circle, file$6, 84, 6, 2679);
    			attr_dev(text_1, "x", text_1_x_value = /*circle*/ ctx[13].x);
    			attr_dev(text_1, "y", text_1_y_value = /*circle*/ ctx[13].y);
    			attr_dev(text_1, "fill", labelColor);
    			attr_dev(text_1, "font-size", fontSize);
    			attr_dev(text_1, "opacity", opacityText);
    			attr_dev(text_1, "text-anchor", "middle");
    			add_location(text_1, file$6, 90, 6, 2834);
    		},
    		m: function mount(target, anchor, remount) {
    			insert_dev(target, circle, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, text_1, anchor);
    			append_dev(text_1, t1);
    			if (remount) run_all(dispose);

    			dispose = [
    				listen_dev(text_1, "mouseover", /*mouseoverHandler*/ ctx[3], false, false, false),
    				listen_dev(text_1, "mouseout", /*mouseoutHandler*/ ctx[4], false, false, false),
    				listen_dev(text_1, "click", /*clickHandler*/ ctx[5], false, false, false)
    			];
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*circles*/ 1 && circle_cx_value !== (circle_cx_value = /*circle*/ ctx[13].x)) {
    				attr_dev(circle, "cx", circle_cx_value);
    			}

    			if (dirty & /*circles*/ 1 && circle_cy_value !== (circle_cy_value = /*circle*/ ctx[13].y)) {
    				attr_dev(circle, "cy", circle_cy_value);
    			}

    			if (dirty & /*circles*/ 1 && circle_r_value !== (circle_r_value = /*circle*/ ctx[13].radius - 2)) {
    				attr_dev(circle, "r", circle_r_value);
    			}

    			if (dirty & /*circles*/ 1 && t1_value !== (t1_value = /*circle*/ ctx[13].data.gram + "")) set_data_dev(t1, t1_value);

    			if (dirty & /*circles*/ 1 && text_1_x_value !== (text_1_x_value = /*circle*/ ctx[13].x)) {
    				attr_dev(text_1, "x", text_1_x_value);
    			}

    			if (dirty & /*circles*/ 1 && text_1_y_value !== (text_1_y_value = /*circle*/ ctx[13].y)) {
    				attr_dev(text_1, "y", text_1_y_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(circle);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(text_1);
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$1.name,
    		type: "each",
    		source: "(84:4) {#each circles as circle}",
    		ctx
    	});

    	return block;
    }

    // (74:2) <Graphic {width} {height} padding={20} {backgroundColor}>
    function create_default_slot$1(ctx) {
    	let text_1;
    	let text_1_x_value;
    	let t;
    	let each_1_anchor;

    	function select_block_type(ctx, dirty) {
    		if (/*hoverWord*/ ctx[1] !== 0) return create_if_block$6;
    		return create_else_block;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);
    	let each_value = /*circles*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			text_1 = svg_element("text");
    			if_block.c();
    			t = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    			attr_dev(text_1, "x", text_1_x_value = width$1 / 2);
    			attr_dev(text_1, "y", "50px");
    			attr_dev(text_1, "text-anchor", "middle");
    			attr_dev(text_1, "fill", "white");
    			attr_dev(text_1, "font-size", "18px");
    			attr_dev(text_1, "font-family", "Acme, sans-serif");
    			add_location(text_1, file$6, 74, 4, 2418);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, text_1, anchor);
    			if_block.m(text_1, null);
    			insert_dev(target, t, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(text_1, null);
    				}
    			}

    			if (dirty & /*circles, labelColor, fontSize, opacityText, mouseoverHandler, mouseoutHandler, clickHandler, circleColor, opacityCircle*/ 61) {
    				each_value = /*circles*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$1(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(text_1);
    			if_block.d();
    			if (detaching) detach_dev(t);
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$1.name,
    		type: "slot",
    		source: "(74:2) <Graphic {width} {height} padding={20} {backgroundColor}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$f(ctx) {
    	let div;
    	let current;

    	const graphic = new Graphic({
    			props: {
    				width: width$1,
    				height: height$1,
    				padding: 20,
    				backgroundColor,
    				$$slots: { default: [create_default_slot$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(graphic.$$.fragment);
    			attr_dev(div, "id", "beeswarm");
    			add_location(div, file$6, 71, 0, 2333);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(graphic, div, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const graphic_changes = {};

    			if (dirty & /*$$scope, circles, hoverWord*/ 65539) {
    				graphic_changes.$$scope = { dirty, ctx };
    			}

    			graphic.$set(graphic_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(graphic.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(graphic.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(graphic);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$f.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const width$1 = 500; // canvas
    const height$1 = 500; // canvas

    // set color
    const backgroundColor = "#b2ded3";

    const axisColor = "#54918d";
    const labelColor = "white";
    const mouseOverColor = "#FF4D4D";

    // set other aes property
    const opacityCircle = 0.7;

    const opacityText = 0.8; // label of circle
    const fontSize = 12; // label of circle & Axis

    function instance$f($$self, $$props, $$invalidate) {
    	const trigramCountContainer = new florenceDatacontainer_umd(TRIGRAM_COUNT); // gram, count
    	const circleColor = axisColor;

    	// countGram <= count all gram regarding hexID
    	let rangeCount = trigramCountContainer.domain("count");

    	const rangeCountLowerBound = rangeCount[0] - 100;
    	const rangeCountUpperBound = rangeCount[1] + 100;
    	rangeCount = [rangeCountLowerBound, rangeCountUpperBound];

    	// scale the data for x position and radius
    	const scaleX = linear$1().domain(rangeCount).range([0, width$1]);

    	const scaleRadius = linear$1().domain(rangeCount).range([10, 40]);

    	// copy data to a new container and format the data structures
    	let circles = TRIGRAM_COUNT.map(d => ({
    		x: scaleX(d.count),
    		y: height$1 / 2,
    		radius: scaleRadius(d.count),
    		data: d
    	})).sort((a, b) => a.x - b.x);

    	// run simulation
    	const simulation = forceSimulation(circles).force("collide", forceCollide(d => d.radius)).force("x", forceX(width$1 / 2)).force("y", forceY(height$1 / 2 + 15)).on("tick", () => $$invalidate(0, circles));

    	let hoverWord = 0;

    	const mouseoverHandler = e => {
    		e.target.style.fontSize = 20;
    		e.target.style.fill = mouseOverColor;
    		$$invalidate(1, hoverWord = e.target.textContent);
    		hoverWordWrite.set(hoverWord);
    	};

    	const mouseoutHandler = e => {
    		e.target.style.fontSize = fontSize;
    		e.target.style.fill = labelColor;
    		$$invalidate(1, hoverWord = 0);
    		hoverWordWrite.set(0);
    	};

    	const clickHandler = e => {
    		clickWordWrite.set(hoverWord);
    	};

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Beeswarm> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Beeswarm", $$slots, []);

    	$$self.$capture_state = () => ({
    		scaleLinear: linear$1,
    		forceSimulation,
    		forceX,
    		forceY,
    		forceCollide,
    		Graphic,
    		Point,
    		Label,
    		XAxis,
    		DataContainer: florenceDatacontainer_umd,
    		TRIGRAM_HEX,
    		TRIGRAM_COUNT,
    		hoverWordWrite,
    		clickWordWrite,
    		trigramCountContainer,
    		width: width$1,
    		height: height$1,
    		backgroundColor,
    		axisColor,
    		labelColor,
    		circleColor,
    		mouseOverColor,
    		opacityCircle,
    		opacityText,
    		fontSize,
    		rangeCount,
    		rangeCountLowerBound,
    		rangeCountUpperBound,
    		scaleX,
    		scaleRadius,
    		circles,
    		simulation,
    		hoverWord,
    		mouseoverHandler,
    		mouseoutHandler,
    		clickHandler
    	});

    	$$self.$inject_state = $$props => {
    		if ("rangeCount" in $$props) rangeCount = $$props.rangeCount;
    		if ("circles" in $$props) $$invalidate(0, circles = $$props.circles);
    		if ("hoverWord" in $$props) $$invalidate(1, hoverWord = $$props.hoverWord);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		circles,
    		hoverWord,
    		circleColor,
    		mouseoverHandler,
    		mouseoutHandler,
    		clickHandler
    	];
    }

    class Beeswarm extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$f, create_fragment$f, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Beeswarm",
    			options,
    			id: create_fragment$f.name
    		});
    	}
    }

    /* node_modules/svelte-tooltip/src/SvelteTooltip.svelte generated by Svelte v3.21.0 */

    const file$7 = "node_modules/svelte-tooltip/src/SvelteTooltip.svelte";

    function create_fragment$g(ctx) {
    	let div;
    	let span0;
    	let t0;
    	let span1;
    	let t1;
    	let current;
    	const default_slot_template = /*$$slots*/ ctx[9].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], null);

    	const block = {
    		c: function create() {
    			div = element("div");
    			span0 = element("span");
    			if (default_slot) default_slot.c();
    			t0 = space();
    			span1 = element("span");
    			t1 = text(/*tip*/ ctx[0]);
    			attr_dev(span0, "class", "tooltip-slot");
    			add_location(span0, file$7, 69, 2, 1099);
    			attr_dev(span1, "class", "tooltip svelte-1c6jmjy");
    			attr_dev(span1, "style", /*style*/ ctx[6]);
    			toggle_class(span1, "active", /*active*/ ctx[5]);
    			toggle_class(span1, "left", /*left*/ ctx[4]);
    			toggle_class(span1, "right", /*right*/ ctx[2]);
    			toggle_class(span1, "bottom", /*bottom*/ ctx[3]);
    			toggle_class(span1, "top", /*top*/ ctx[1]);
    			add_location(span1, file$7, 72, 2, 1151);
    			attr_dev(div, "class", "tooltip-wrapper svelte-1c6jmjy");
    			add_location(div, file$7, 68, 0, 1067);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, span0);

    			if (default_slot) {
    				default_slot.m(span0, null);
    			}

    			append_dev(div, t0);
    			append_dev(div, span1);
    			append_dev(span1, t1);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope*/ 256) {
    					default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[8], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[8], dirty, null));
    				}
    			}

    			if (!current || dirty & /*tip*/ 1) set_data_dev(t1, /*tip*/ ctx[0]);

    			if (dirty & /*active*/ 32) {
    				toggle_class(span1, "active", /*active*/ ctx[5]);
    			}

    			if (dirty & /*left*/ 16) {
    				toggle_class(span1, "left", /*left*/ ctx[4]);
    			}

    			if (dirty & /*right*/ 4) {
    				toggle_class(span1, "right", /*right*/ ctx[2]);
    			}

    			if (dirty & /*bottom*/ 8) {
    				toggle_class(span1, "bottom", /*bottom*/ ctx[3]);
    			}

    			if (dirty & /*top*/ 2) {
    				toggle_class(span1, "top", /*top*/ ctx[1]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$g.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$g($$self, $$props, $$invalidate) {
    	let { tip = "" } = $$props;
    	let { top = false } = $$props;
    	let { right = false } = $$props;
    	let { bottom = false } = $$props;
    	let { left = false } = $$props;
    	let { active = false } = $$props;
    	let { color = "#757575" } = $$props;
    	let style = `background-color: ${color};`;
    	const writable_props = ["tip", "top", "right", "bottom", "left", "active", "color"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<SvelteTooltip> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("SvelteTooltip", $$slots, ['default']);

    	$$self.$set = $$props => {
    		if ("tip" in $$props) $$invalidate(0, tip = $$props.tip);
    		if ("top" in $$props) $$invalidate(1, top = $$props.top);
    		if ("right" in $$props) $$invalidate(2, right = $$props.right);
    		if ("bottom" in $$props) $$invalidate(3, bottom = $$props.bottom);
    		if ("left" in $$props) $$invalidate(4, left = $$props.left);
    		if ("active" in $$props) $$invalidate(5, active = $$props.active);
    		if ("color" in $$props) $$invalidate(7, color = $$props.color);
    		if ("$$scope" in $$props) $$invalidate(8, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		tip,
    		top,
    		right,
    		bottom,
    		left,
    		active,
    		color,
    		style
    	});

    	$$self.$inject_state = $$props => {
    		if ("tip" in $$props) $$invalidate(0, tip = $$props.tip);
    		if ("top" in $$props) $$invalidate(1, top = $$props.top);
    		if ("right" in $$props) $$invalidate(2, right = $$props.right);
    		if ("bottom" in $$props) $$invalidate(3, bottom = $$props.bottom);
    		if ("left" in $$props) $$invalidate(4, left = $$props.left);
    		if ("active" in $$props) $$invalidate(5, active = $$props.active);
    		if ("color" in $$props) $$invalidate(7, color = $$props.color);
    		if ("style" in $$props) $$invalidate(6, style = $$props.style);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [tip, top, right, bottom, left, active, style, color, $$scope, $$slots];
    }

    class SvelteTooltip extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$g, create_fragment$g, safe_not_equal, {
    			tip: 0,
    			top: 1,
    			right: 2,
    			bottom: 3,
    			left: 4,
    			active: 5,
    			color: 7
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SvelteTooltip",
    			options,
    			id: create_fragment$g.name
    		});
    	}

    	get tip() {
    		throw new Error("<SvelteTooltip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set tip(value) {
    		throw new Error("<SvelteTooltip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get top() {
    		throw new Error("<SvelteTooltip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set top(value) {
    		throw new Error("<SvelteTooltip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get right() {
    		throw new Error("<SvelteTooltip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set right(value) {
    		throw new Error("<SvelteTooltip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get bottom() {
    		throw new Error("<SvelteTooltip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set bottom(value) {
    		throw new Error("<SvelteTooltip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get left() {
    		throw new Error("<SvelteTooltip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set left(value) {
    		throw new Error("<SvelteTooltip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get active() {
    		throw new Error("<SvelteTooltip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set active(value) {
    		throw new Error("<SvelteTooltip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error("<SvelteTooltip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<SvelteTooltip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/page/component/Textdemo.svelte generated by Svelte v3.21.0 */

    const file$8 = "src/page/component/Textdemo.svelte";

    function create_fragment$h(ctx) {
    	let div;
    	let h2;
    	let t0;
    	let t1;
    	let t2;
    	let p;

    	const block = {
    		c: function create() {
    			div = element("div");
    			h2 = element("h2");
    			t0 = text("Token: ");
    			t1 = text(/*token*/ ctx[0]);
    			t2 = space();
    			p = element("p");
    			attr_dev(h2, "class", "title svelte-1u36tb7");
    			add_location(h2, file$8, 19, 2, 391);
    			attr_dev(p, "class", "content svelte-1u36tb7");
    			add_location(p, file$8, 20, 2, 431);
    			attr_dev(div, "class", "svelte-1u36tb7");
    			add_location(div, file$8, 18, 0, 383);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h2);
    			append_dev(h2, t0);
    			append_dev(h2, t1);
    			append_dev(div, t2);
    			append_dev(div, p);
    			p.innerHTML = /*renderText*/ ctx[1];
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*token*/ 1) set_data_dev(t1, /*token*/ ctx[0]);
    			if (dirty & /*renderText*/ 2) p.innerHTML = /*renderText*/ ctx[1];		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$h.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$h($$self, $$props, $$invalidate) {
    	let { text } = $$props;
    	let { token } = $$props;
    	let reg = new RegExp("", "gi");
    	let renderText = text;
    	const writable_props = ["text", "token"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Textdemo> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Textdemo", $$slots, []);

    	$$self.$set = $$props => {
    		if ("text" in $$props) $$invalidate(2, text = $$props.text);
    		if ("token" in $$props) $$invalidate(0, token = $$props.token);
    	};

    	$$self.$capture_state = () => ({ text, token, reg, renderText });

    	$$self.$inject_state = $$props => {
    		if ("text" in $$props) $$invalidate(2, text = $$props.text);
    		if ("token" in $$props) $$invalidate(0, token = $$props.token);
    		if ("reg" in $$props) $$invalidate(3, reg = $$props.reg);
    		if ("renderText" in $$props) $$invalidate(1, renderText = $$props.renderText);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*token, text, reg*/ 13) {
    			 {
    				$$invalidate(3, reg = new RegExp(token + "[a-z]+", "gi")); //TODO: cannot match some words

    				$$invalidate(1, renderText = text.replace(reg, str => {
    					return "<span style=\"color:white; background-color: #54918d; >" + str + "</span>";
    				}));
    			}
    		}
    	};

    	return [token, renderText, text];
    }

    class Textdemo extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$h, create_fragment$h, safe_not_equal, { text: 2, token: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Textdemo",
    			options,
    			id: create_fragment$h.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*text*/ ctx[2] === undefined && !("text" in props)) {
    			console.warn("<Textdemo> was created without expected prop 'text'");
    		}

    		if (/*token*/ ctx[0] === undefined && !("token" in props)) {
    			console.warn("<Textdemo> was created without expected prop 'token'");
    		}
    	}

    	get text() {
    		throw new Error("<Textdemo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set text(value) {
    		throw new Error("<Textdemo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get token() {
    		throw new Error("<Textdemo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set token(value) {
    		throw new Error("<Textdemo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    }
    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }

    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var tslib_es6 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        __extends: __extends,
        get __assign () { return __assign; },
        __rest: __rest,
        __decorate: __decorate,
        __param: __param,
        __metadata: __metadata,
        __awaiter: __awaiter,
        __generator: __generator,
        __exportStar: __exportStar,
        __values: __values,
        __read: __read,
        __spread: __spread,
        __spreadArrays: __spreadArrays,
        __await: __await,
        __asyncGenerator: __asyncGenerator,
        __asyncDelegator: __asyncDelegator,
        __asyncValues: __asyncValues,
        __makeTemplateObject: __makeTemplateObject,
        __importStar: __importStar,
        __importDefault: __importDefault,
        __classPrivateFieldGet: __classPrivateFieldGet,
        __classPrivateFieldSet: __classPrivateFieldSet
    });

    var index_cjs = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, '__esModule', { value: true });



    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.
     */
    var CONSTANTS = {
        /**
         * @define {boolean} Whether this is the client Node.js SDK.
         */
        NODE_CLIENT: false,
        /**
         * @define {boolean} Whether this is the Admin Node.js SDK.
         */
        NODE_ADMIN: false,
        /**
         * Firebase SDK Version
         */
        SDK_VERSION: '${JSCORE_VERSION}'
    };

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Throws an error if the provided assertion is falsy
     */
    var assert = function (assertion, message) {
        if (!assertion) {
            throw assertionError(message);
        }
    };
    /**
     * Returns an Error object suitable for throwing.
     */
    var assertionError = function (message) {
        return new Error('Firebase Database (' +
            CONSTANTS.SDK_VERSION +
            ') INTERNAL ASSERT FAILED: ' +
            message);
    };

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var stringToByteArray = function (str) {
        // TODO(user): Use native implementations if/when available
        var out = [];
        var p = 0;
        for (var i = 0; i < str.length; i++) {
            var c = str.charCodeAt(i);
            if (c < 128) {
                out[p++] = c;
            }
            else if (c < 2048) {
                out[p++] = (c >> 6) | 192;
                out[p++] = (c & 63) | 128;
            }
            else if ((c & 0xfc00) === 0xd800 &&
                i + 1 < str.length &&
                (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {
                // Surrogate Pair
                c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);
                out[p++] = (c >> 18) | 240;
                out[p++] = ((c >> 12) & 63) | 128;
                out[p++] = ((c >> 6) & 63) | 128;
                out[p++] = (c & 63) | 128;
            }
            else {
                out[p++] = (c >> 12) | 224;
                out[p++] = ((c >> 6) & 63) | 128;
                out[p++] = (c & 63) | 128;
            }
        }
        return out;
    };
    /**
     * Turns an array of numbers into the string given by the concatenation of the
     * characters to which the numbers correspond.
     * @param bytes Array of numbers representing characters.
     * @return Stringification of the array.
     */
    var byteArrayToString = function (bytes) {
        // TODO(user): Use native implementations if/when available
        var out = [];
        var pos = 0, c = 0;
        while (pos < bytes.length) {
            var c1 = bytes[pos++];
            if (c1 < 128) {
                out[c++] = String.fromCharCode(c1);
            }
            else if (c1 > 191 && c1 < 224) {
                var c2 = bytes[pos++];
                out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
            }
            else if (c1 > 239 && c1 < 365) {
                // Surrogate Pair
                var c2 = bytes[pos++];
                var c3 = bytes[pos++];
                var c4 = bytes[pos++];
                var u = (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -
                    0x10000;
                out[c++] = String.fromCharCode(0xd800 + (u >> 10));
                out[c++] = String.fromCharCode(0xdc00 + (u & 1023));
            }
            else {
                var c2 = bytes[pos++];
                var c3 = bytes[pos++];
                out[c++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
            }
        }
        return out.join('');
    };
    // We define it as an object literal instead of a class because a class compiled down to es5 can't
    // be treeshaked. https://github.com/rollup/rollup/issues/1691
    // Static lookup maps, lazily populated by init_()
    var base64 = {
        /**
         * Maps bytes to characters.
         */
        byteToCharMap_: null,
        /**
         * Maps characters to bytes.
         */
        charToByteMap_: null,
        /**
         * Maps bytes to websafe characters.
         * @private
         */
        byteToCharMapWebSafe_: null,
        /**
         * Maps websafe characters to bytes.
         * @private
         */
        charToByteMapWebSafe_: null,
        /**
         * Our default alphabet, shared between
         * ENCODED_VALS and ENCODED_VALS_WEBSAFE
         */
        ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',
        /**
         * Our default alphabet. Value 64 (=) is special; it means "nothing."
         */
        get ENCODED_VALS() {
            return this.ENCODED_VALS_BASE + '+/=';
        },
        /**
         * Our websafe alphabet.
         */
        get ENCODED_VALS_WEBSAFE() {
            return this.ENCODED_VALS_BASE + '-_.';
        },
        /**
         * Whether this browser supports the atob and btoa functions. This extension
         * started at Mozilla but is now implemented by many browsers. We use the
         * ASSUME_* variables to avoid pulling in the full useragent detection library
         * but still allowing the standard per-browser compilations.
         *
         */
        HAS_NATIVE_SUPPORT: typeof atob === 'function',
        /**
         * Base64-encode an array of bytes.
         *
         * @param input An array of bytes (numbers with
         *     value in [0, 255]) to encode.
         * @param webSafe Boolean indicating we should use the
         *     alternative alphabet.
         * @return The base64 encoded string.
         */
        encodeByteArray: function (input, webSafe) {
            if (!Array.isArray(input)) {
                throw Error('encodeByteArray takes an array as a parameter');
            }
            this.init_();
            var byteToCharMap = webSafe
                ? this.byteToCharMapWebSafe_
                : this.byteToCharMap_;
            var output = [];
            for (var i = 0; i < input.length; i += 3) {
                var byte1 = input[i];
                var haveByte2 = i + 1 < input.length;
                var byte2 = haveByte2 ? input[i + 1] : 0;
                var haveByte3 = i + 2 < input.length;
                var byte3 = haveByte3 ? input[i + 2] : 0;
                var outByte1 = byte1 >> 2;
                var outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);
                var outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);
                var outByte4 = byte3 & 0x3f;
                if (!haveByte3) {
                    outByte4 = 64;
                    if (!haveByte2) {
                        outByte3 = 64;
                    }
                }
                output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
            }
            return output.join('');
        },
        /**
         * Base64-encode a string.
         *
         * @param input A string to encode.
         * @param webSafe If true, we should use the
         *     alternative alphabet.
         * @return The base64 encoded string.
         */
        encodeString: function (input, webSafe) {
            // Shortcut for Mozilla browsers that implement
            // a native base64 encoder in the form of "btoa/atob"
            if (this.HAS_NATIVE_SUPPORT && !webSafe) {
                return btoa(input);
            }
            return this.encodeByteArray(stringToByteArray(input), webSafe);
        },
        /**
         * Base64-decode a string.
         *
         * @param input to decode.
         * @param webSafe True if we should use the
         *     alternative alphabet.
         * @return string representing the decoded value.
         */
        decodeString: function (input, webSafe) {
            // Shortcut for Mozilla browsers that implement
            // a native base64 encoder in the form of "btoa/atob"
            if (this.HAS_NATIVE_SUPPORT && !webSafe) {
                return atob(input);
            }
            return byteArrayToString(this.decodeStringToByteArray(input, webSafe));
        },
        /**
         * Base64-decode a string.
         *
         * In base-64 decoding, groups of four characters are converted into three
         * bytes.  If the encoder did not apply padding, the input length may not
         * be a multiple of 4.
         *
         * In this case, the last group will have fewer than 4 characters, and
         * padding will be inferred.  If the group has one or two characters, it decodes
         * to one byte.  If the group has three characters, it decodes to two bytes.
         *
         * @param input Input to decode.
         * @param webSafe True if we should use the web-safe alphabet.
         * @return bytes representing the decoded value.
         */
        decodeStringToByteArray: function (input, webSafe) {
            this.init_();
            var charToByteMap = webSafe
                ? this.charToByteMapWebSafe_
                : this.charToByteMap_;
            var output = [];
            for (var i = 0; i < input.length;) {
                var byte1 = charToByteMap[input.charAt(i++)];
                var haveByte2 = i < input.length;
                var byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
                ++i;
                var haveByte3 = i < input.length;
                var byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;
                ++i;
                var haveByte4 = i < input.length;
                var byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;
                ++i;
                if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {
                    throw Error();
                }
                var outByte1 = (byte1 << 2) | (byte2 >> 4);
                output.push(outByte1);
                if (byte3 !== 64) {
                    var outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);
                    output.push(outByte2);
                    if (byte4 !== 64) {
                        var outByte3 = ((byte3 << 6) & 0xc0) | byte4;
                        output.push(outByte3);
                    }
                }
            }
            return output;
        },
        /**
         * Lazy static initialization function. Called before
         * accessing any of the static map variables.
         * @private
         */
        init_: function () {
            if (!this.byteToCharMap_) {
                this.byteToCharMap_ = {};
                this.charToByteMap_ = {};
                this.byteToCharMapWebSafe_ = {};
                this.charToByteMapWebSafe_ = {};
                // We want quick mappings back and forth, so we precompute two maps.
                for (var i = 0; i < this.ENCODED_VALS.length; i++) {
                    this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);
                    this.charToByteMap_[this.byteToCharMap_[i]] = i;
                    this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);
                    this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;
                    // Be forgiving when decoding and correctly decode both encodings.
                    if (i >= this.ENCODED_VALS_BASE.length) {
                        this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;
                        this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;
                    }
                }
            }
        }
    };
    /**
     * URL-safe base64 encoding
     */
    var base64Encode = function (str) {
        var utf8Bytes = stringToByteArray(str);
        return base64.encodeByteArray(utf8Bytes, true);
    };
    /**
     * URL-safe base64 decoding
     *
     * NOTE: DO NOT use the global atob() function - it does NOT support the
     * base64Url variant encoding.
     *
     * @param str To be decoded
     * @return Decoded result, if possible
     */
    var base64Decode = function (str) {
        try {
            return base64.decodeString(str, true);
        }
        catch (e) {
            console.error('base64Decode failed: ', e);
        }
        return null;
    };

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Do a deep-copy of basic JavaScript Objects or Arrays.
     */
    function deepCopy(value) {
        return deepExtend(undefined, value);
    }
    /**
     * Copy properties from source to target (recursively allows extension
     * of Objects and Arrays).  Scalar values in the target are over-written.
     * If target is undefined, an object of the appropriate type will be created
     * (and returned).
     *
     * We recursively copy all child properties of plain Objects in the source- so
     * that namespace- like dictionaries are merged.
     *
     * Note that the target can be a function, in which case the properties in
     * the source Object are copied onto it as static properties of the Function.
     */
    function deepExtend(target, source) {
        if (!(source instanceof Object)) {
            return source;
        }
        switch (source.constructor) {
            case Date:
                // Treat Dates like scalars; if the target date object had any child
                // properties - they will be lost!
                var dateValue = source;
                return new Date(dateValue.getTime());
            case Object:
                if (target === undefined) {
                    target = {};
                }
                break;
            case Array:
                // Always copy the array source and overwrite the target.
                target = [];
                break;
            default:
                // Not a plain Object - treat it as a scalar.
                return source;
        }
        for (var prop in source) {
            if (!source.hasOwnProperty(prop)) {
                continue;
            }
            target[prop] = deepExtend(target[prop], source[prop]);
        }
        return target;
    }

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var Deferred = /** @class */ (function () {
        function Deferred() {
            var _this = this;
            this.reject = function () { };
            this.resolve = function () { };
            this.promise = new Promise(function (resolve, reject) {
                _this.resolve = resolve;
                _this.reject = reject;
            });
        }
        /**
         * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around
         * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback
         * and returns a node-style callback which will resolve or reject the Deferred's promise.
         */
        Deferred.prototype.wrapCallback = function (callback) {
            var _this = this;
            return function (error, value) {
                if (error) {
                    _this.reject(error);
                }
                else {
                    _this.resolve(value);
                }
                if (typeof callback === 'function') {
                    // Attaching noop handler just in case developer wasn't expecting
                    // promises
                    _this.promise.catch(function () { });
                    // Some of our callbacks don't expect a value and our own tests
                    // assert that the parameter length is 1
                    if (callback.length === 1) {
                        callback(error);
                    }
                    else {
                        callback(error, value);
                    }
                }
            };
        };
        return Deferred;
    }());

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns navigator.userAgent string or '' if it's not defined.
     * @return user agent string
     */
    function getUA() {
        if (typeof navigator !== 'undefined' &&
            typeof navigator['userAgent'] === 'string') {
            return navigator['userAgent'];
        }
        else {
            return '';
        }
    }
    /**
     * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.
     *
     * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap
     * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally
     * wait for a callback.
     */
    function isMobileCordova() {
        return (typeof window !== 'undefined' &&
            // @ts-ignore Setting up an broadly applicable index signature for Window
            // just to deal with this case would probably be a bad idea.
            !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&
            /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA()));
    }
    /**
     * Detect Node.js.
     *
     * @return true if Node.js environment is detected.
     */
    // Node detection logic from: https://github.com/iliakan/detect-node/
    function isNode() {
        try {
            return (Object.prototype.toString.call(commonjsGlobal.process) === '[object process]');
        }
        catch (e) {
            return false;
        }
    }
    /**
     * Detect Browser Environment
     */
    function isBrowser() {
        return typeof self === 'object' && self.self === self;
    }
    function isBrowserExtension() {
        var runtime = typeof chrome === 'object'
            ? chrome.runtime
            : typeof browser === 'object'
                ? browser.runtime
                : undefined;
        return typeof runtime === 'object' && runtime.id !== undefined;
    }
    /**
     * Detect React Native.
     *
     * @return true if ReactNative environment is detected.
     */
    function isReactNative() {
        return (typeof navigator === 'object' && navigator['product'] === 'ReactNative');
    }
    /** Detects Electron apps. */
    function isElectron() {
        return getUA().indexOf('Electron/') >= 0;
    }
    /** Detects Internet Explorer. */
    function isIE() {
        var ua = getUA();
        return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;
    }
    /** Detects Universal Windows Platform apps. */
    function isUWP() {
        return getUA().indexOf('MSAppHost/') >= 0;
    }
    /**
     * Detect whether the current SDK build is the Node version.
     *
     * @return true if it's the Node SDK build.
     */
    function isNodeSdk() {
        return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;
    }

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ERROR_NAME = 'FirebaseError';
    // Based on code from:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types
    var FirebaseError = /** @class */ (function (_super) {
        tslib_es6.__extends(FirebaseError, _super);
        function FirebaseError(code, message) {
            var _this = _super.call(this, message) || this;
            _this.code = code;
            _this.name = ERROR_NAME;
            // Fix For ES5
            // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
            Object.setPrototypeOf(_this, FirebaseError.prototype);
            // Maintains proper stack trace for where our error was thrown.
            // Only available on V8.
            if (Error.captureStackTrace) {
                Error.captureStackTrace(_this, ErrorFactory.prototype.create);
            }
            return _this;
        }
        return FirebaseError;
    }(Error));
    var ErrorFactory = /** @class */ (function () {
        function ErrorFactory(service, serviceName, errors) {
            this.service = service;
            this.serviceName = serviceName;
            this.errors = errors;
        }
        ErrorFactory.prototype.create = function (code) {
            var data = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                data[_i - 1] = arguments[_i];
            }
            var customData = data[0] || {};
            var fullCode = this.service + "/" + code;
            var template = this.errors[code];
            var message = template ? replaceTemplate(template, customData) : 'Error';
            // Service Name: Error message (service/code).
            var fullMessage = this.serviceName + ": " + message + " (" + fullCode + ").";
            var error = new FirebaseError(fullCode, fullMessage);
            // Keys with an underscore at the end of their name are not included in
            // error.data for some reason.
            // TODO: Replace with Object.entries when lib is updated to es2017.
            for (var _a = 0, _b = Object.keys(customData); _a < _b.length; _a++) {
                var key = _b[_a];
                if (key.slice(-1) !== '_') {
                    if (key in error) {
                        console.warn("Overwriting FirebaseError base field \"" + key + "\" can cause unexpected behavior.");
                    }
                    error[key] = customData[key];
                }
            }
            return error;
        };
        return ErrorFactory;
    }());
    function replaceTemplate(template, data) {
        return template.replace(PATTERN, function (_, key) {
            var value = data[key];
            return value != null ? value.toString() : "<" + key + "?>";
        });
    }
    var PATTERN = /\{\$([^}]+)}/g;

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Evaluates a JSON string into a javascript object.
     *
     * @param {string} str A string containing JSON.
     * @return {*} The javascript object representing the specified JSON.
     */
    function jsonEval(str) {
        return JSON.parse(str);
    }
    /**
     * Returns JSON representing a javascript object.
     * @param {*} data Javascript object to be stringified.
     * @return {string} The JSON contents of the object.
     */
    function stringify(data) {
        return JSON.stringify(data);
    }

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Decodes a Firebase auth. token into constituent parts.
     *
     * Notes:
     * - May return with invalid / incomplete claims if there's no native base64 decoding support.
     * - Doesn't check if the token is actually valid.
     */
    var decode = function (token) {
        var header = {}, claims = {}, data = {}, signature = '';
        try {
            var parts = token.split('.');
            header = jsonEval(base64Decode(parts[0]) || '');
            claims = jsonEval(base64Decode(parts[1]) || '');
            signature = parts[2];
            data = claims['d'] || {};
            delete claims['d'];
        }
        catch (e) { }
        return {
            header: header,
            claims: claims,
            data: data,
            signature: signature
        };
    };
    /**
     * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the
     * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.
     *
     * Notes:
     * - May return a false negative if there's no native base64 decoding support.
     * - Doesn't check if the token is actually valid.
     */
    var isValidTimestamp = function (token) {
        var claims = decode(token).claims;
        var now = Math.floor(new Date().getTime() / 1000);
        var validSince = 0, validUntil = 0;
        if (typeof claims === 'object') {
            if (claims.hasOwnProperty('nbf')) {
                validSince = claims['nbf'];
            }
            else if (claims.hasOwnProperty('iat')) {
                validSince = claims['iat'];
            }
            if (claims.hasOwnProperty('exp')) {
                validUntil = claims['exp'];
            }
            else {
                // token will expire after 24h by default
                validUntil = validSince + 86400;
            }
        }
        return (!!now &&
            !!validSince &&
            !!validUntil &&
            now >= validSince &&
            now <= validUntil);
    };
    /**
     * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.
     *
     * Notes:
     * - May return null if there's no native base64 decoding support.
     * - Doesn't check if the token is actually valid.
     */
    var issuedAtTime = function (token) {
        var claims = decode(token).claims;
        if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {
            return claims['iat'];
        }
        return null;
    };
    /**
     * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.
     *
     * Notes:
     * - May return a false negative if there's no native base64 decoding support.
     * - Doesn't check if the token is actually valid.
     */
    var isValidFormat = function (token) {
        var decoded = decode(token), claims = decoded.claims;
        return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');
    };
    /**
     * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.
     *
     * Notes:
     * - May return a false negative if there's no native base64 decoding support.
     * - Doesn't check if the token is actually valid.
     */
    var isAdmin = function (token) {
        var claims = decode(token).claims;
        return typeof claims === 'object' && claims['admin'] === true;
    };

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function contains(obj, key) {
        return Object.prototype.hasOwnProperty.call(obj, key);
    }
    function safeGet(obj, key) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
            return obj[key];
        }
        else {
            return undefined;
        }
    }
    function isEmpty(obj) {
        for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) {
                return false;
            }
        }
        return true;
    }
    function map(obj, fn, contextObj) {
        var res = {};
        for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) {
                res[key] = fn.call(contextObj, obj[key], key, obj);
            }
        }
        return res;
    }

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a
     * params object (e.g. {arg: 'val', arg2: 'val2'})
     * Note: You must prepend it with ? when adding it to a URL.
     */
    function querystring(querystringParams) {
        var params = [];
        var _loop_1 = function (key, value) {
            if (Array.isArray(value)) {
                value.forEach(function (arrayVal) {
                    params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));
                });
            }
            else {
                params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));
            }
        };
        for (var _i = 0, _a = Object.entries(querystringParams); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            _loop_1(key, value);
        }
        return params.length ? '&' + params.join('&') : '';
    }
    /**
     * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object
     * (e.g. {arg: 'val', arg2: 'val2'})
     */
    function querystringDecode(querystring) {
        var obj = {};
        var tokens = querystring.replace(/^\?/, '').split('&');
        tokens.forEach(function (token) {
            if (token) {
                var key = token.split('=');
                obj[key[0]] = key[1];
            }
        });
        return obj;
    }

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @fileoverview SHA-1 cryptographic hash.
     * Variable names follow the notation in FIPS PUB 180-3:
     * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.
     *
     * Usage:
     *   var sha1 = new sha1();
     *   sha1.update(bytes);
     *   var hash = sha1.digest();
     *
     * Performance:
     *   Chrome 23:   ~400 Mbit/s
     *   Firefox 16:  ~250 Mbit/s
     *
     */
    /**
     * SHA-1 cryptographic hash constructor.
     *
     * The properties declared here are discussed in the above algorithm document.
     * @constructor
     * @final
     * @struct
     */
    var Sha1 = /** @class */ (function () {
        function Sha1() {
            /**
             * Holds the previous values of accumulated variables a-e in the compress_
             * function.
             * @private
             */
            this.chain_ = [];
            /**
             * A buffer holding the partially computed hash result.
             * @private
             */
            this.buf_ = [];
            /**
             * An array of 80 bytes, each a part of the message to be hashed.  Referred to
             * as the message schedule in the docs.
             * @private
             */
            this.W_ = [];
            /**
             * Contains data needed to pad messages less than 64 bytes.
             * @private
             */
            this.pad_ = [];
            /**
             * @private {number}
             */
            this.inbuf_ = 0;
            /**
             * @private {number}
             */
            this.total_ = 0;
            this.blockSize = 512 / 8;
            this.pad_[0] = 128;
            for (var i = 1; i < this.blockSize; ++i) {
                this.pad_[i] = 0;
            }
            this.reset();
        }
        Sha1.prototype.reset = function () {
            this.chain_[0] = 0x67452301;
            this.chain_[1] = 0xefcdab89;
            this.chain_[2] = 0x98badcfe;
            this.chain_[3] = 0x10325476;
            this.chain_[4] = 0xc3d2e1f0;
            this.inbuf_ = 0;
            this.total_ = 0;
        };
        /**
         * Internal compress helper function.
         * @param buf Block to compress.
         * @param offset Offset of the block in the buffer.
         * @private
         */
        Sha1.prototype.compress_ = function (buf, offset) {
            if (!offset) {
                offset = 0;
            }
            var W = this.W_;
            // get 16 big endian words
            if (typeof buf === 'string') {
                for (var i = 0; i < 16; i++) {
                    // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS
                    // have a bug that turns the post-increment ++ operator into pre-increment
                    // during JIT compilation.  We have code that depends heavily on SHA-1 for
                    // correctness and which is affected by this bug, so I've removed all uses
                    // of post-increment ++ in which the result value is used.  We can revert
                    // this change once the Safari bug
                    // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and
                    // most clients have been updated.
                    W[i] =
                        (buf.charCodeAt(offset) << 24) |
                            (buf.charCodeAt(offset + 1) << 16) |
                            (buf.charCodeAt(offset + 2) << 8) |
                            buf.charCodeAt(offset + 3);
                    offset += 4;
                }
            }
            else {
                for (var i = 0; i < 16; i++) {
                    W[i] =
                        (buf[offset] << 24) |
                            (buf[offset + 1] << 16) |
                            (buf[offset + 2] << 8) |
                            buf[offset + 3];
                    offset += 4;
                }
            }
            // expand to 80 words
            for (var i = 16; i < 80; i++) {
                var t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
                W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;
            }
            var a = this.chain_[0];
            var b = this.chain_[1];
            var c = this.chain_[2];
            var d = this.chain_[3];
            var e = this.chain_[4];
            var f, k;
            // TODO(user): Try to unroll this loop to speed up the computation.
            for (var i = 0; i < 80; i++) {
                if (i < 40) {
                    if (i < 20) {
                        f = d ^ (b & (c ^ d));
                        k = 0x5a827999;
                    }
                    else {
                        f = b ^ c ^ d;
                        k = 0x6ed9eba1;
                    }
                }
                else {
                    if (i < 60) {
                        f = (b & c) | (d & (b | c));
                        k = 0x8f1bbcdc;
                    }
                    else {
                        f = b ^ c ^ d;
                        k = 0xca62c1d6;
                    }
                }
                var t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;
                e = d;
                d = c;
                c = ((b << 30) | (b >>> 2)) & 0xffffffff;
                b = a;
                a = t;
            }
            this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;
            this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;
            this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;
            this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;
            this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;
        };
        Sha1.prototype.update = function (bytes, length) {
            // TODO(johnlenz): tighten the function signature and remove this check
            if (bytes == null) {
                return;
            }
            if (length === undefined) {
                length = bytes.length;
            }
            var lengthMinusBlock = length - this.blockSize;
            var n = 0;
            // Using local instead of member variables gives ~5% speedup on Firefox 16.
            var buf = this.buf_;
            var inbuf = this.inbuf_;
            // The outer while loop should execute at most twice.
            while (n < length) {
                // When we have no data in the block to top up, we can directly process the
                // input buffer (assuming it contains sufficient data). This gives ~25%
                // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that
                // the data is provided in large chunks (or in multiples of 64 bytes).
                if (inbuf === 0) {
                    while (n <= lengthMinusBlock) {
                        this.compress_(bytes, n);
                        n += this.blockSize;
                    }
                }
                if (typeof bytes === 'string') {
                    while (n < length) {
                        buf[inbuf] = bytes.charCodeAt(n);
                        ++inbuf;
                        ++n;
                        if (inbuf === this.blockSize) {
                            this.compress_(buf);
                            inbuf = 0;
                            // Jump to the outer loop so we use the full-block optimization.
                            break;
                        }
                    }
                }
                else {
                    while (n < length) {
                        buf[inbuf] = bytes[n];
                        ++inbuf;
                        ++n;
                        if (inbuf === this.blockSize) {
                            this.compress_(buf);
                            inbuf = 0;
                            // Jump to the outer loop so we use the full-block optimization.
                            break;
                        }
                    }
                }
            }
            this.inbuf_ = inbuf;
            this.total_ += length;
        };
        /** @override */
        Sha1.prototype.digest = function () {
            var digest = [];
            var totalBits = this.total_ * 8;
            // Add pad 0x80 0x00*.
            if (this.inbuf_ < 56) {
                this.update(this.pad_, 56 - this.inbuf_);
            }
            else {
                this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));
            }
            // Add # bits.
            for (var i = this.blockSize - 1; i >= 56; i--) {
                this.buf_[i] = totalBits & 255;
                totalBits /= 256; // Don't use bit-shifting here!
            }
            this.compress_(this.buf_);
            var n = 0;
            for (var i = 0; i < 5; i++) {
                for (var j = 24; j >= 0; j -= 8) {
                    digest[n] = (this.chain_[i] >> j) & 255;
                    ++n;
                }
            }
            return digest;
        };
        return Sha1;
    }());

    /**
     * Helper to make a Subscribe function (just like Promise helps make a
     * Thenable).
     *
     * @param executor Function which can make calls to a single Observer
     *     as a proxy.
     * @param onNoObservers Callback when count of Observers goes to zero.
     */
    function createSubscribe(executor, onNoObservers) {
        var proxy = new ObserverProxy(executor, onNoObservers);
        return proxy.subscribe.bind(proxy);
    }
    /**
     * Implement fan-out for any number of Observers attached via a subscribe
     * function.
     */
    var ObserverProxy = /** @class */ (function () {
        /**
         * @param executor Function which can make calls to a single Observer
         *     as a proxy.
         * @param onNoObservers Callback when count of Observers goes to zero.
         */
        function ObserverProxy(executor, onNoObservers) {
            var _this = this;
            this.observers = [];
            this.unsubscribes = [];
            this.observerCount = 0;
            // Micro-task scheduling by calling task.then().
            this.task = Promise.resolve();
            this.finalized = false;
            this.onNoObservers = onNoObservers;
            // Call the executor asynchronously so subscribers that are called
            // synchronously after the creation of the subscribe function
            // can still receive the very first value generated in the executor.
            this.task
                .then(function () {
                executor(_this);
            })
                .catch(function (e) {
                _this.error(e);
            });
        }
        ObserverProxy.prototype.next = function (value) {
            this.forEachObserver(function (observer) {
                observer.next(value);
            });
        };
        ObserverProxy.prototype.error = function (error) {
            this.forEachObserver(function (observer) {
                observer.error(error);
            });
            this.close(error);
        };
        ObserverProxy.prototype.complete = function () {
            this.forEachObserver(function (observer) {
                observer.complete();
            });
            this.close();
        };
        /**
         * Subscribe function that can be used to add an Observer to the fan-out list.
         *
         * - We require that no event is sent to a subscriber sychronously to their
         *   call to subscribe().
         */
        ObserverProxy.prototype.subscribe = function (nextOrObserver, error, complete) {
            var _this = this;
            var observer;
            if (nextOrObserver === undefined &&
                error === undefined &&
                complete === undefined) {
                throw new Error('Missing Observer.');
            }
            // Assemble an Observer object when passed as callback functions.
            if (implementsAnyMethods(nextOrObserver, [
                'next',
                'error',
                'complete'
            ])) {
                observer = nextOrObserver;
            }
            else {
                observer = {
                    next: nextOrObserver,
                    error: error,
                    complete: complete
                };
            }
            if (observer.next === undefined) {
                observer.next = noop;
            }
            if (observer.error === undefined) {
                observer.error = noop;
            }
            if (observer.complete === undefined) {
                observer.complete = noop;
            }
            var unsub = this.unsubscribeOne.bind(this, this.observers.length);
            // Attempt to subscribe to a terminated Observable - we
            // just respond to the Observer with the final error or complete
            // event.
            if (this.finalized) {
                // eslint-disable-next-line @typescript-eslint/no-floating-promises
                this.task.then(function () {
                    try {
                        if (_this.finalError) {
                            observer.error(_this.finalError);
                        }
                        else {
                            observer.complete();
                        }
                    }
                    catch (e) {
                        // nothing
                    }
                    return;
                });
            }
            this.observers.push(observer);
            return unsub;
        };
        // Unsubscribe is synchronous - we guarantee that no events are sent to
        // any unsubscribed Observer.
        ObserverProxy.prototype.unsubscribeOne = function (i) {
            if (this.observers === undefined || this.observers[i] === undefined) {
                return;
            }
            delete this.observers[i];
            this.observerCount -= 1;
            if (this.observerCount === 0 && this.onNoObservers !== undefined) {
                this.onNoObservers(this);
            }
        };
        ObserverProxy.prototype.forEachObserver = function (fn) {
            if (this.finalized) {
                // Already closed by previous event....just eat the additional values.
                return;
            }
            // Since sendOne calls asynchronously - there is no chance that
            // this.observers will become undefined.
            for (var i = 0; i < this.observers.length; i++) {
                this.sendOne(i, fn);
            }
        };
        // Call the Observer via one of it's callback function. We are careful to
        // confirm that the observe has not been unsubscribed since this asynchronous
        // function had been queued.
        ObserverProxy.prototype.sendOne = function (i, fn) {
            var _this = this;
            // Execute the callback asynchronously
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this.task.then(function () {
                if (_this.observers !== undefined && _this.observers[i] !== undefined) {
                    try {
                        fn(_this.observers[i]);
                    }
                    catch (e) {
                        // Ignore exceptions raised in Observers or missing methods of an
                        // Observer.
                        // Log error to console. b/31404806
                        if (typeof console !== 'undefined' && console.error) {
                            console.error(e);
                        }
                    }
                }
            });
        };
        ObserverProxy.prototype.close = function (err) {
            var _this = this;
            if (this.finalized) {
                return;
            }
            this.finalized = true;
            if (err !== undefined) {
                this.finalError = err;
            }
            // Proxy is no longer needed - garbage collect references
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this.task.then(function () {
                _this.observers = undefined;
                _this.onNoObservers = undefined;
            });
        };
        return ObserverProxy;
    }());
    /** Turn synchronous function into one called asynchronously. */
    function async(fn, onError) {
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            Promise.resolve(true)
                .then(function () {
                fn.apply(void 0, args);
            })
                .catch(function (error) {
                if (onError) {
                    onError(error);
                }
            });
        };
    }
    /**
     * Return true if the object passed in implements any of the named methods.
     */
    function implementsAnyMethods(obj, methods) {
        if (typeof obj !== 'object' || obj === null) {
            return false;
        }
        for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {
            var method = methods_1[_i];
            if (method in obj && typeof obj[method] === 'function') {
                return true;
            }
        }
        return false;
    }
    function noop() {
        // do nothing
    }

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Check to make sure the appropriate number of arguments are provided for a public function.
     * Throws an error if it fails.
     *
     * @param fnName The function name
     * @param minCount The minimum number of arguments to allow for the function call
     * @param maxCount The maximum number of argument to allow for the function call
     * @param argCount The actual number of arguments provided.
     */
    var validateArgCount = function (fnName, minCount, maxCount, argCount) {
        var argError;
        if (argCount < minCount) {
            argError = 'at least ' + minCount;
        }
        else if (argCount > maxCount) {
            argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;
        }
        if (argError) {
            var error = fnName +
                ' failed: Was called with ' +
                argCount +
                (argCount === 1 ? ' argument.' : ' arguments.') +
                ' Expects ' +
                argError +
                '.';
            throw new Error(error);
        }
    };
    /**
     * Generates a string to prefix an error message about failed argument validation
     *
     * @param fnName The function name
     * @param argumentNumber The index of the argument
     * @param optional Whether or not the argument is optional
     * @return The prefix to add to the error thrown for validation.
     */
    function errorPrefix(fnName, argumentNumber, optional) {
        var argName = '';
        switch (argumentNumber) {
            case 1:
                argName = optional ? 'first' : 'First';
                break;
            case 2:
                argName = optional ? 'second' : 'Second';
                break;
            case 3:
                argName = optional ? 'third' : 'Third';
                break;
            case 4:
                argName = optional ? 'fourth' : 'Fourth';
                break;
            default:
                throw new Error('errorPrefix called with argumentNumber > 4.  Need to update it?');
        }
        var error = fnName + ' failed: ';
        error += argName + ' argument ';
        return error;
    }
    /**
     * @param fnName
     * @param argumentNumber
     * @param namespace
     * @param optional
     */
    function validateNamespace(fnName, argumentNumber, namespace, optional) {
        if (optional && !namespace) {
            return;
        }
        if (typeof namespace !== 'string') {
            //TODO: I should do more validation here. We only allow certain chars in namespaces.
            throw new Error(errorPrefix(fnName, argumentNumber, optional) +
                'must be a valid firebase namespace.');
        }
    }
    function validateCallback(fnName, argumentNumber, callback, optional) {
        if (optional && !callback) {
            return;
        }
        if (typeof callback !== 'function') {
            throw new Error(errorPrefix(fnName, argumentNumber, optional) +
                'must be a valid function.');
        }
    }
    function validateContextObject(fnName, argumentNumber, context, optional) {
        if (optional && !context) {
            return;
        }
        if (typeof context !== 'object' || context === null) {
            throw new Error(errorPrefix(fnName, argumentNumber, optional) +
                'must be a valid context object.');
        }
    }

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they
    // automatically replaced '\r\n' with '\n', and they didn't handle surrogate pairs,
    // so it's been modified.
    // Note that not all Unicode characters appear as single characters in JavaScript strings.
    // fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters
    // use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first
    // character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate
    // pair).
    // See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3
    /**
     * @param {string} str
     * @return {Array}
     */
    var stringToByteArray$1 = function (str) {
        var out = [];
        var p = 0;
        for (var i = 0; i < str.length; i++) {
            var c = str.charCodeAt(i);
            // Is this the lead surrogate in a surrogate pair?
            if (c >= 0xd800 && c <= 0xdbff) {
                var high = c - 0xd800; // the high 10 bits.
                i++;
                assert(i < str.length, 'Surrogate pair missing trail surrogate.');
                var low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.
                c = 0x10000 + (high << 10) + low;
            }
            if (c < 128) {
                out[p++] = c;
            }
            else if (c < 2048) {
                out[p++] = (c >> 6) | 192;
                out[p++] = (c & 63) | 128;
            }
            else if (c < 65536) {
                out[p++] = (c >> 12) | 224;
                out[p++] = ((c >> 6) & 63) | 128;
                out[p++] = (c & 63) | 128;
            }
            else {
                out[p++] = (c >> 18) | 240;
                out[p++] = ((c >> 12) & 63) | 128;
                out[p++] = ((c >> 6) & 63) | 128;
                out[p++] = (c & 63) | 128;
            }
        }
        return out;
    };
    /**
     * Calculate length without actually converting; useful for doing cheaper validation.
     * @param {string} str
     * @return {number}
     */
    var stringLength = function (str) {
        var p = 0;
        for (var i = 0; i < str.length; i++) {
            var c = str.charCodeAt(i);
            if (c < 128) {
                p++;
            }
            else if (c < 2048) {
                p += 2;
            }
            else if (c >= 0xd800 && c <= 0xdbff) {
                // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.
                p += 4;
                i++; // skip trail surrogate.
            }
            else {
                p += 3;
            }
        }
        return p;
    };

    exports.CONSTANTS = CONSTANTS;
    exports.Deferred = Deferred;
    exports.ErrorFactory = ErrorFactory;
    exports.FirebaseError = FirebaseError;
    exports.Sha1 = Sha1;
    exports.assert = assert;
    exports.assertionError = assertionError;
    exports.async = async;
    exports.base64 = base64;
    exports.base64Decode = base64Decode;
    exports.base64Encode = base64Encode;
    exports.contains = contains;
    exports.createSubscribe = createSubscribe;
    exports.decode = decode;
    exports.deepCopy = deepCopy;
    exports.deepExtend = deepExtend;
    exports.errorPrefix = errorPrefix;
    exports.getUA = getUA;
    exports.isAdmin = isAdmin;
    exports.isBrowser = isBrowser;
    exports.isBrowserExtension = isBrowserExtension;
    exports.isElectron = isElectron;
    exports.isEmpty = isEmpty;
    exports.isIE = isIE;
    exports.isMobileCordova = isMobileCordova;
    exports.isNode = isNode;
    exports.isNodeSdk = isNodeSdk;
    exports.isReactNative = isReactNative;
    exports.isUWP = isUWP;
    exports.isValidFormat = isValidFormat;
    exports.isValidTimestamp = isValidTimestamp;
    exports.issuedAtTime = issuedAtTime;
    exports.jsonEval = jsonEval;
    exports.map = map;
    exports.querystring = querystring;
    exports.querystringDecode = querystringDecode;
    exports.safeGet = safeGet;
    exports.stringLength = stringLength;
    exports.stringToByteArray = stringToByteArray$1;
    exports.stringify = stringify;
    exports.validateArgCount = validateArgCount;
    exports.validateCallback = validateCallback;
    exports.validateContextObject = validateContextObject;
    exports.validateNamespace = validateNamespace;
    //# sourceMappingURL=index.cjs.js.map
    });

    unwrapExports(index_cjs);
    var index_cjs_1 = index_cjs.CONSTANTS;
    var index_cjs_2 = index_cjs.Deferred;
    var index_cjs_3 = index_cjs.ErrorFactory;
    var index_cjs_4 = index_cjs.FirebaseError;
    var index_cjs_5 = index_cjs.Sha1;
    var index_cjs_6 = index_cjs.assert;
    var index_cjs_7 = index_cjs.assertionError;
    var index_cjs_8 = index_cjs.async;
    var index_cjs_9 = index_cjs.base64;
    var index_cjs_10 = index_cjs.base64Decode;
    var index_cjs_11 = index_cjs.base64Encode;
    var index_cjs_12 = index_cjs.contains;
    var index_cjs_13 = index_cjs.createSubscribe;
    var index_cjs_14 = index_cjs.decode;
    var index_cjs_15 = index_cjs.deepCopy;
    var index_cjs_16 = index_cjs.deepExtend;
    var index_cjs_17 = index_cjs.errorPrefix;
    var index_cjs_18 = index_cjs.getUA;
    var index_cjs_19 = index_cjs.isAdmin;
    var index_cjs_20 = index_cjs.isBrowser;
    var index_cjs_21 = index_cjs.isBrowserExtension;
    var index_cjs_22 = index_cjs.isElectron;
    var index_cjs_23 = index_cjs.isEmpty;
    var index_cjs_24 = index_cjs.isIE;
    var index_cjs_25 = index_cjs.isMobileCordova;
    var index_cjs_26 = index_cjs.isNode;
    var index_cjs_27 = index_cjs.isNodeSdk;
    var index_cjs_28 = index_cjs.isReactNative;
    var index_cjs_29 = index_cjs.isUWP;
    var index_cjs_30 = index_cjs.isValidFormat;
    var index_cjs_31 = index_cjs.isValidTimestamp;
    var index_cjs_32 = index_cjs.issuedAtTime;
    var index_cjs_33 = index_cjs.jsonEval;
    var index_cjs_34 = index_cjs.map;
    var index_cjs_35 = index_cjs.querystring;
    var index_cjs_36 = index_cjs.querystringDecode;
    var index_cjs_37 = index_cjs.safeGet;
    var index_cjs_38 = index_cjs.stringLength;
    var index_cjs_39 = index_cjs.stringToByteArray;
    var index_cjs_40 = index_cjs.stringify;
    var index_cjs_41 = index_cjs.validateArgCount;
    var index_cjs_42 = index_cjs.validateCallback;
    var index_cjs_43 = index_cjs.validateContextObject;
    var index_cjs_44 = index_cjs.validateNamespace;

    var index_cjs$1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, '__esModule', { value: true });




    /**
     * Component for service name T, e.g. `auth`, `auth-internal`
     */
    var Component = /** @class */ (function () {
        /**
         *
         * @param name The public service name, e.g. app, auth, firestore, database
         * @param instanceFactory Service factory responsible for creating the public interface
         * @param type whether the service provided by the component is public or private
         */
        function Component(name, instanceFactory, type) {
            this.name = name;
            this.instanceFactory = instanceFactory;
            this.type = type;
            this.multipleInstances = false;
            /**
             * Properties to be added to the service namespace
             */
            this.serviceProps = {};
            this.instantiationMode = "LAZY" /* LAZY */;
        }
        Component.prototype.setInstantiationMode = function (mode) {
            this.instantiationMode = mode;
            return this;
        };
        Component.prototype.setMultipleInstances = function (multipleInstances) {
            this.multipleInstances = multipleInstances;
            return this;
        };
        Component.prototype.setServiceProps = function (props) {
            this.serviceProps = props;
            return this;
        };
        return Component;
    }());

    /**
     * @license
     * Copyright 2019 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var DEFAULT_ENTRY_NAME = '[DEFAULT]';

    /**
     * @license
     * Copyright 2019 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Provider for instance for service name T, e.g. 'auth', 'auth-internal'
     * NameServiceMapping[T] is an alias for the type of the instance
     */
    var Provider = /** @class */ (function () {
        function Provider(name, container) {
            this.name = name;
            this.container = container;
            this.component = null;
            this.instances = new Map();
            this.instancesDeferred = new Map();
        }
        /**
         * @param identifier A provider can provide mulitple instances of a service
         * if this.component.multipleInstances is true.
         */
        Provider.prototype.get = function (identifier) {
            if (identifier === void 0) { identifier = DEFAULT_ENTRY_NAME; }
            // if multipleInstances is not supported, use the default name
            var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
            if (!this.instancesDeferred.has(normalizedIdentifier)) {
                var deferred = new index_cjs.Deferred();
                this.instancesDeferred.set(normalizedIdentifier, deferred);
                // If the service instance is available, resolve the promise with it immediately
                try {
                    var instance = this.getOrInitializeService(normalizedIdentifier);
                    if (instance) {
                        deferred.resolve(instance);
                    }
                }
                catch (e) {
                    // when the instance factory throws an exception during get(), it should not cause
                    // a fatal error. We just return the unresolved promise in this case.
                }
            }
            return this.instancesDeferred.get(normalizedIdentifier).promise;
        };
        Provider.prototype.getImmediate = function (options) {
            var _a = tslib_es6.__assign({ identifier: DEFAULT_ENTRY_NAME, optional: false }, options), identifier = _a.identifier, optional = _a.optional;
            // if multipleInstances is not supported, use the default name
            var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
            try {
                var instance = this.getOrInitializeService(normalizedIdentifier);
                if (!instance) {
                    if (optional) {
                        return null;
                    }
                    throw Error("Service " + this.name + " is not available");
                }
                return instance;
            }
            catch (e) {
                if (optional) {
                    return null;
                }
                else {
                    throw e;
                }
            }
        };
        Provider.prototype.getComponent = function () {
            return this.component;
        };
        Provider.prototype.setComponent = function (component) {
            var e_1, _a;
            if (component.name !== this.name) {
                throw Error("Mismatching Component " + component.name + " for Provider " + this.name + ".");
            }
            if (this.component) {
                throw Error("Component for " + this.name + " has already been provided");
            }
            this.component = component;
            // if the service is eager, initialize the default instance
            if (isComponentEager(component)) {
                try {
                    this.getOrInitializeService(DEFAULT_ENTRY_NAME);
                }
                catch (e) {
                    // when the instance factory for an eager Component throws an exception during the eager
                    // initialization, it should not cause a fatal error.
                    // TODO: Investigate if we need to make it configurable, because some component may want to cause
                    // a fatal error in this case?
                }
            }
            try {
                // Create service instances for the pending promises and resolve them
                // NOTE: if this.multipleInstances is false, only the default instance will be created
                // and all promises with resolve with it regardless of the identifier.
                for (var _b = tslib_es6.__values(this.instancesDeferred.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var _d = tslib_es6.__read(_c.value, 2), instanceIdentifier = _d[0], instanceDeferred = _d[1];
                    var normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
                    try {
                        // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.
                        var instance = this.getOrInitializeService(normalizedIdentifier);
                        instanceDeferred.resolve(instance);
                    }
                    catch (e) {
                        // when the instance factory throws an exception, it should not cause
                        // a fatal error. We just leave the promise unresolved.
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        };
        Provider.prototype.clearInstance = function (identifier) {
            if (identifier === void 0) { identifier = DEFAULT_ENTRY_NAME; }
            this.instancesDeferred.delete(identifier);
            this.instances.delete(identifier);
        };
        // app.delete() will call this method on every provider to delete the services
        // TODO: should we mark the provider as deleted?
        Provider.prototype.delete = function () {
            return tslib_es6.__awaiter(this, void 0, void 0, function () {
                var services;
                return tslib_es6.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            services = Array.from(this.instances.values());
                            return [4 /*yield*/, Promise.all(services
                                    .filter(function (service) { return 'INTERNAL' in service; })
                                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                                    .map(function (service) { return service.INTERNAL.delete(); }))];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        Provider.prototype.isComponentSet = function () {
            return this.component != null;
        };
        Provider.prototype.getOrInitializeService = function (identifier) {
            var instance = this.instances.get(identifier);
            if (!instance && this.component) {
                instance = this.component.instanceFactory(this.container, normalizeIdentifierForFactory(identifier));
                this.instances.set(identifier, instance);
            }
            return instance || null;
        };
        Provider.prototype.normalizeInstanceIdentifier = function (identifier) {
            if (this.component) {
                return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;
            }
            else {
                return identifier; // assume multiple instances are supported before the component is provided.
            }
        };
        return Provider;
    }());
    // undefined should be passed to the service factory for the default instance
    function normalizeIdentifierForFactory(identifier) {
        return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;
    }
    function isComponentEager(component) {
        return component.instantiationMode === "EAGER" /* EAGER */;
    }

    /**
     * @license
     * Copyright 2019 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`
     */
    var ComponentContainer = /** @class */ (function () {
        function ComponentContainer(name) {
            this.name = name;
            this.providers = new Map();
        }
        /**
         *
         * @param component Component being added
         * @param overwrite When a component with the same name has already been registered,
         * if overwrite is true: overwrite the existing component with the new component and create a new
         * provider with the new component. It can be useful in tests where you want to use different mocks
         * for different tests.
         * if overwrite is false: throw an exception
         */
        ComponentContainer.prototype.addComponent = function (component) {
            var provider = this.getProvider(component.name);
            if (provider.isComponentSet()) {
                throw new Error("Component " + component.name + " has already been registered with " + this.name);
            }
            provider.setComponent(component);
        };
        ComponentContainer.prototype.addOrOverwriteComponent = function (component) {
            var provider = this.getProvider(component.name);
            if (provider.isComponentSet()) {
                // delete the existing provider from the container, so we can register the new component
                this.providers.delete(component.name);
            }
            this.addComponent(component);
        };
        /**
         * getProvider provides a type safe interface where it can only be called with a field name
         * present in NameServiceMapping interface.
         *
         * Firebase SDKs providing services should extend NameServiceMapping interface to register
         * themselves.
         */
        ComponentContainer.prototype.getProvider = function (name) {
            if (this.providers.has(name)) {
                return this.providers.get(name);
            }
            // create a Provider for a service that hasn't registered with Firebase
            var provider = new Provider(name, this);
            this.providers.set(name, provider);
            return provider;
        };
        ComponentContainer.prototype.getProviders = function () {
            return Array.from(this.providers.values());
        };
        return ComponentContainer;
    }());

    exports.Component = Component;
    exports.ComponentContainer = ComponentContainer;
    exports.Provider = Provider;
    //# sourceMappingURL=index.cjs.js.map
    });

    unwrapExports(index_cjs$1);
    var index_cjs_1$1 = index_cjs$1.Component;
    var index_cjs_2$1 = index_cjs$1.ComponentContainer;
    var index_cjs_3$1 = index_cjs$1.Provider;

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */

    function __spreadArrays$1() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var _a;
    /**
     * A container for all of the Logger instances
     */
    var instances = [];
    /**
     * The JS SDK supports 5 log levels and also allows a user the ability to
     * silence the logs altogether.
     *
     * The order is a follows:
     * DEBUG < VERBOSE < INFO < WARN < ERROR
     *
     * All of the log types above the current log level will be captured (i.e. if
     * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and
     * `VERBOSE` logs will not)
     */
    var LogLevel;
    (function (LogLevel) {
        LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
        LogLevel[LogLevel["VERBOSE"] = 1] = "VERBOSE";
        LogLevel[LogLevel["INFO"] = 2] = "INFO";
        LogLevel[LogLevel["WARN"] = 3] = "WARN";
        LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
        LogLevel[LogLevel["SILENT"] = 5] = "SILENT";
    })(LogLevel || (LogLevel = {}));
    var levelStringToEnum = {
        'debug': LogLevel.DEBUG,
        'verbose': LogLevel.VERBOSE,
        'info': LogLevel.INFO,
        'warn': LogLevel.WARN,
        'error': LogLevel.ERROR,
        'silent': LogLevel.SILENT
    };
    /**
     * The default log level
     */
    var defaultLogLevel = LogLevel.INFO;
    /**
     * By default, `console.debug` is not displayed in the developer console (in
     * chrome). To avoid forcing users to have to opt-in to these logs twice
     * (i.e. once for firebase, and once in the console), we are sending `DEBUG`
     * logs to the `console.log` function.
     */
    var ConsoleMethod = (_a = {},
        _a[LogLevel.DEBUG] = 'log',
        _a[LogLevel.VERBOSE] = 'log',
        _a[LogLevel.INFO] = 'info',
        _a[LogLevel.WARN] = 'warn',
        _a[LogLevel.ERROR] = 'error',
        _a);
    /**
     * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR
     * messages on to their corresponding console counterparts (if the log method
     * is supported by the current log level)
     */
    var defaultLogHandler = function (instance, logType) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        if (logType < instance.logLevel) {
            return;
        }
        var now = new Date().toISOString();
        var method = ConsoleMethod[logType];
        if (method) {
            console[method].apply(console, __spreadArrays$1(["[" + now + "]  " + instance.name + ":"], args));
        }
        else {
            throw new Error("Attempted to log a message with an invalid logType (value: " + logType + ")");
        }
    };
    var Logger = /** @class */ (function () {
        /**
         * Gives you an instance of a Logger to capture messages according to
         * Firebase's logging scheme.
         *
         * @param name The name that the logs will be associated with
         */
        function Logger(name) {
            this.name = name;
            /**
             * The log level of the given Logger instance.
             */
            this._logLevel = defaultLogLevel;
            /**
             * The main (internal) log handler for the Logger instance.
             * Can be set to a new function in internal package code but not by user.
             */
            this._logHandler = defaultLogHandler;
            /**
             * The optional, additional, user-defined log handler for the Logger instance.
             */
            this._userLogHandler = null;
            /**
             * Capture the current instance for later use
             */
            instances.push(this);
        }
        Object.defineProperty(Logger.prototype, "logLevel", {
            get: function () {
                return this._logLevel;
            },
            set: function (val) {
                if (!(val in LogLevel)) {
                    throw new TypeError('Invalid value assigned to `logLevel`');
                }
                this._logLevel = val;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Logger.prototype, "logHandler", {
            get: function () {
                return this._logHandler;
            },
            set: function (val) {
                if (typeof val !== 'function') {
                    throw new TypeError('Value assigned to `logHandler` must be a function');
                }
                this._logHandler = val;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Logger.prototype, "userLogHandler", {
            get: function () {
                return this._userLogHandler;
            },
            set: function (val) {
                this._userLogHandler = val;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * The functions below are all based on the `console` interface
         */
        Logger.prototype.debug = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays$1([this, LogLevel.DEBUG], args));
            this._logHandler.apply(this, __spreadArrays$1([this, LogLevel.DEBUG], args));
        };
        Logger.prototype.log = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays$1([this, LogLevel.VERBOSE], args));
            this._logHandler.apply(this, __spreadArrays$1([this, LogLevel.VERBOSE], args));
        };
        Logger.prototype.info = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays$1([this, LogLevel.INFO], args));
            this._logHandler.apply(this, __spreadArrays$1([this, LogLevel.INFO], args));
        };
        Logger.prototype.warn = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays$1([this, LogLevel.WARN], args));
            this._logHandler.apply(this, __spreadArrays$1([this, LogLevel.WARN], args));
        };
        Logger.prototype.error = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays$1([this, LogLevel.ERROR], args));
            this._logHandler.apply(this, __spreadArrays$1([this, LogLevel.ERROR], args));
        };
        return Logger;
    }());
    function setLogLevel(level) {
        var newLevel = typeof level === 'string' ? levelStringToEnum[level] : level;
        instances.forEach(function (inst) {
            inst.logLevel = newLevel;
        });
    }
    function setUserLogHandler(logCallback, options) {
        var _loop_1 = function (instance) {
            var customLogLevel = null;
            if (options && options.level) {
                customLogLevel = levelStringToEnum[options.level];
            }
            if (logCallback === null) {
                instance.userLogHandler = null;
            }
            else {
                instance.userLogHandler = function (instance, level) {
                    var args = [];
                    for (var _i = 2; _i < arguments.length; _i++) {
                        args[_i - 2] = arguments[_i];
                    }
                    var message = args
                        .map(function (arg) {
                        if (arg == null) {
                            return null;
                        }
                        else if (typeof arg === 'string') {
                            return arg;
                        }
                        else if (typeof arg === 'number' || typeof arg === 'boolean') {
                            return arg.toString();
                        }
                        else if (arg instanceof Error) {
                            return arg.message;
                        }
                        else {
                            try {
                                return JSON.stringify(arg);
                            }
                            catch (ignored) {
                                return null;
                            }
                        }
                    })
                        .filter(function (arg) { return arg; })
                        .join(' ');
                    if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) {
                        logCallback({
                            level: LogLevel[level].toLowerCase(),
                            message: message,
                            args: args,
                            type: instance.name
                        });
                    }
                };
            }
        };
        for (var _i = 0, instances_1 = instances; _i < instances_1.length; _i++) {
            var instance = instances_1[_i];
            _loop_1(instance);
        }
    }
    //# sourceMappingURL=index.esm.js.map

    var index_esm = /*#__PURE__*/Object.freeze({
        __proto__: null,
        get LogLevel () { return LogLevel; },
        Logger: Logger,
        setLogLevel: setLogLevel,
        setUserLogHandler: setUserLogHandler
    });

    var index_cjs$2 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, '__esModule', { value: true });






    /**
     * @license
     * Copyright 2019 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var _a;
    var ERRORS = (_a = {},
        _a["no-app" /* NO_APP */] = "No Firebase App '{$appName}' has been created - " +
            'call Firebase App.initializeApp()',
        _a["bad-app-name" /* BAD_APP_NAME */] = "Illegal App name: '{$appName}",
        _a["duplicate-app" /* DUPLICATE_APP */] = "Firebase App named '{$appName}' already exists",
        _a["app-deleted" /* APP_DELETED */] = "Firebase App named '{$appName}' already deleted",
        _a["invalid-app-argument" /* INVALID_APP_ARGUMENT */] = 'firebase.{$appName}() takes either no argument or a ' +
            'Firebase App instance.',
        _a["invalid-log-argument" /* INVALID_LOG_ARGUMENT */] = 'First argument to `onLog` must be null or a function.',
        _a);
    var ERROR_FACTORY = new index_cjs.ErrorFactory('app', 'Firebase', ERRORS);

    var name$1 = "@firebase/app";
    var version = "0.6.2";

    var name$2 = "@firebase/analytics";

    var name$3 = "@firebase/auth";

    var name$4 = "@firebase/database";

    var name$5 = "@firebase/functions";

    var name$6 = "@firebase/installations";

    var name$7 = "@firebase/messaging";

    var name$8 = "@firebase/performance";

    var name$9 = "@firebase/remote-config";

    var name$a = "@firebase/storage";

    var name$b = "@firebase/firestore";

    var name$c = "firebase-wrapper";

    /**
     * @license
     * Copyright 2019 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var _a$1;
    var DEFAULT_ENTRY_NAME = '[DEFAULT]';
    var PLATFORM_LOG_STRING = (_a$1 = {},
        _a$1[name$1] = 'fire-core',
        _a$1[name$2] = 'fire-analytics',
        _a$1[name$3] = 'fire-auth',
        _a$1[name$4] = 'fire-rtdb',
        _a$1[name$5] = 'fire-fn',
        _a$1[name$6] = 'fire-iid',
        _a$1[name$7] = 'fire-fcm',
        _a$1[name$8] = 'fire-perf',
        _a$1[name$9] = 'fire-rc',
        _a$1[name$a] = 'fire-gcs',
        _a$1[name$b] = 'fire-fst',
        _a$1['fire-js'] = 'fire-js',
        _a$1[name$c] = 'fire-js-all',
        _a$1);

    /**
     * @license
     * Copyright 2019 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var logger = new index_esm.Logger('@firebase/app');

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Global context object for a collection of services using
     * a shared authentication state.
     */
    var FirebaseAppImpl = /** @class */ (function () {
        function FirebaseAppImpl(options, config, firebase_) {
            var e_1, _a;
            var _this = this;
            this.firebase_ = firebase_;
            this.isDeleted_ = false;
            this.name_ = config.name;
            this.automaticDataCollectionEnabled_ =
                config.automaticDataCollectionEnabled || false;
            this.options_ = index_cjs.deepCopy(options);
            this.container = new index_cjs$1.ComponentContainer(config.name);
            // add itself to container
            this._addComponent(new index_cjs$1.Component('app', function () { return _this; }, "PUBLIC" /* PUBLIC */));
            try {
                // populate ComponentContainer with existing components
                for (var _b = tslib_es6.__values(this.firebase_.INTERNAL.components.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var component$1 = _c.value;
                    this._addComponent(component$1);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        Object.defineProperty(FirebaseAppImpl.prototype, "automaticDataCollectionEnabled", {
            get: function () {
                this.checkDestroyed_();
                return this.automaticDataCollectionEnabled_;
            },
            set: function (val) {
                this.checkDestroyed_();
                this.automaticDataCollectionEnabled_ = val;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FirebaseAppImpl.prototype, "name", {
            get: function () {
                this.checkDestroyed_();
                return this.name_;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FirebaseAppImpl.prototype, "options", {
            get: function () {
                this.checkDestroyed_();
                return this.options_;
            },
            enumerable: true,
            configurable: true
        });
        FirebaseAppImpl.prototype.delete = function () {
            var _this = this;
            return new Promise(function (resolve) {
                _this.checkDestroyed_();
                resolve();
            })
                .then(function () {
                _this.firebase_.INTERNAL.removeApp(_this.name_);
                return Promise.all(_this.container.getProviders().map(function (provider) { return provider.delete(); }));
            })
                .then(function () {
                _this.isDeleted_ = true;
            });
        };
        /**
         * Return a service instance associated with this app (creating it
         * on demand), identified by the passed instanceIdentifier.
         *
         * NOTE: Currently storage and functions are the only ones that are leveraging this
         * functionality. They invoke it by calling:
         *
         * ```javascript
         * firebase.app().storage('STORAGE BUCKET ID')
         * ```
         *
         * The service name is passed to this already
         * @internal
         */
        FirebaseAppImpl.prototype._getService = function (name, instanceIdentifier) {
            if (instanceIdentifier === void 0) { instanceIdentifier = DEFAULT_ENTRY_NAME; }
            this.checkDestroyed_();
            // getImmediate will always succeed because _getService is only called for registered components.
            return this.container.getProvider(name).getImmediate({
                identifier: instanceIdentifier
            });
        };
        /**
         * Remove a service instance from the cache, so we will create a new instance for this service
         * when people try to get this service again.
         *
         * NOTE: currently only firestore is using this functionality to support firestore shutdown.
         *
         * @param name The service name
         * @param instanceIdentifier instance identifier in case multiple instances are allowed
         * @internal
         */
        FirebaseAppImpl.prototype._removeServiceInstance = function (name, instanceIdentifier) {
            if (instanceIdentifier === void 0) { instanceIdentifier = DEFAULT_ENTRY_NAME; }
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            this.container.getProvider(name).clearInstance(instanceIdentifier);
        };
        /**
         * @param component the component being added to this app's container
         */
        FirebaseAppImpl.prototype._addComponent = function (component) {
            try {
                this.container.addComponent(component);
            }
            catch (e) {
                logger.debug("Component " + component.name + " failed to register with FirebaseApp " + this.name, e);
            }
        };
        FirebaseAppImpl.prototype._addOrOverwriteComponent = function (component) {
            this.container.addOrOverwriteComponent(component);
        };
        /**
         * This function will throw an Error if the App has already been deleted -
         * use before performing API actions on the App.
         */
        FirebaseAppImpl.prototype.checkDestroyed_ = function () {
            if (this.isDeleted_) {
                throw ERROR_FACTORY.create("app-deleted" /* APP_DELETED */, { appName: this.name_ });
            }
        };
        return FirebaseAppImpl;
    }());
    // Prevent dead-code elimination of these methods w/o invalid property
    // copying.
    (FirebaseAppImpl.prototype.name && FirebaseAppImpl.prototype.options) ||
        FirebaseAppImpl.prototype.delete ||
        console.log('dc');

    var version$1 = "7.14.1";

    /**
     * @license
     * Copyright 2019 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Because auth can't share code with other components, we attach the utility functions
     * in an internal namespace to share code.
     * This function return a firebase namespace object without
     * any utility functions, so it can be shared between the regular firebaseNamespace and
     * the lite version.
     */
    function createFirebaseNamespaceCore(firebaseAppImpl) {
        var apps = {};
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var components = new Map();
        // A namespace is a plain JavaScript Object.
        var namespace = {
            // Hack to prevent Babel from modifying the object returned
            // as the firebase namespace.
            // @ts-ignore
            __esModule: true,
            initializeApp: initializeApp,
            // @ts-ignore
            app: app,
            registerVersion: registerVersion,
            setLogLevel: index_esm.setLogLevel,
            onLog: onLog,
            // @ts-ignore
            apps: null,
            SDK_VERSION: version$1,
            INTERNAL: {
                registerComponent: registerComponent,
                removeApp: removeApp,
                components: components,
                useAsService: useAsService
            }
        };
        // Inject a circular default export to allow Babel users who were previously
        // using:
        //
        //   import firebase from 'firebase';
        //   which becomes: var firebase = require('firebase').default;
        //
        // instead of
        //
        //   import * as firebase from 'firebase';
        //   which becomes: var firebase = require('firebase');
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        namespace['default'] = namespace;
        // firebase.apps is a read-only getter.
        Object.defineProperty(namespace, 'apps', {
            get: getApps
        });
        /**
         * Called by App.delete() - but before any services associated with the App
         * are deleted.
         */
        function removeApp(name) {
            delete apps[name];
        }
        /**
         * Get the App object for a given name (or DEFAULT).
         */
        function app(name) {
            name = name || DEFAULT_ENTRY_NAME;
            if (!index_cjs.contains(apps, name)) {
                throw ERROR_FACTORY.create("no-app" /* NO_APP */, { appName: name });
            }
            return apps[name];
        }
        // @ts-ignore
        app['App'] = firebaseAppImpl;
        function initializeApp(options, rawConfig) {
            if (rawConfig === void 0) { rawConfig = {}; }
            if (typeof rawConfig !== 'object' || rawConfig === null) {
                var name_1 = rawConfig;
                rawConfig = { name: name_1 };
            }
            var config = rawConfig;
            if (config.name === undefined) {
                config.name = DEFAULT_ENTRY_NAME;
            }
            var name = config.name;
            if (typeof name !== 'string' || !name) {
                throw ERROR_FACTORY.create("bad-app-name" /* BAD_APP_NAME */, {
                    appName: String(name)
                });
            }
            if (index_cjs.contains(apps, name)) {
                throw ERROR_FACTORY.create("duplicate-app" /* DUPLICATE_APP */, { appName: name });
            }
            var app = new firebaseAppImpl(options, config, namespace);
            apps[name] = app;
            return app;
        }
        /*
         * Return an array of all the non-deleted FirebaseApps.
         */
        function getApps() {
            // Make a copy so caller cannot mutate the apps list.
            return Object.keys(apps).map(function (name) { return apps[name]; });
        }
        function registerComponent(component) {
            var e_1, _a;
            var componentName = component.name;
            if (components.has(componentName)) {
                logger.debug("There were multiple attempts to register component " + componentName + ".");
                return component.type === "PUBLIC" /* PUBLIC */
                    ? // eslint-disable-next-line @typescript-eslint/no-explicit-any
                        namespace[componentName]
                    : null;
            }
            components.set(componentName, component);
            // create service namespace for public components
            if (component.type === "PUBLIC" /* PUBLIC */) {
                // The Service namespace is an accessor function ...
                var serviceNamespace = function (appArg) {
                    if (appArg === void 0) { appArg = app(); }
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    if (typeof appArg[componentName] !== 'function') {
                        // Invalid argument.
                        // This happens in the following case: firebase.storage('gs:/')
                        throw ERROR_FACTORY.create("invalid-app-argument" /* INVALID_APP_ARGUMENT */, {
                            appName: componentName
                        });
                    }
                    // Forward service instance lookup to the FirebaseApp.
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    return appArg[componentName]();
                };
                // ... and a container for service-level properties.
                if (component.serviceProps !== undefined) {
                    index_cjs.deepExtend(serviceNamespace, component.serviceProps);
                }
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                namespace[componentName] = serviceNamespace;
                // Patch the FirebaseAppImpl prototype
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                firebaseAppImpl.prototype[componentName] =
                    // TODO: The eslint disable can be removed and the 'ignoreRestArgs'
                    // option added to the no-explicit-any rule when ESlint releases it.
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    function () {
                        var args = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            args[_i] = arguments[_i];
                        }
                        var serviceFxn = this._getService.bind(this, componentName);
                        return serviceFxn.apply(this, component.multipleInstances ? args : []);
                    };
            }
            try {
                // add the component to existing app instances
                for (var _b = tslib_es6.__values(Object.keys(apps)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var appName = _c.value;
                    apps[appName]._addComponent(component);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return component.type === "PUBLIC" /* PUBLIC */
                ? // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    namespace[componentName]
                : null;
        }
        function registerVersion(libraryKeyOrName, version, variant) {
            var _a;
            // TODO: We can use this check to whitelist strings when/if we set up
            // a good whitelist system.
            var library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;
            if (variant) {
                library += "-" + variant;
            }
            var libraryMismatch = library.match(/\s|\//);
            var versionMismatch = version.match(/\s|\//);
            if (libraryMismatch || versionMismatch) {
                var warning = [
                    "Unable to register library \"" + library + "\" with version \"" + version + "\":"
                ];
                if (libraryMismatch) {
                    warning.push("library name \"" + library + "\" contains illegal characters (whitespace or \"/\")");
                }
                if (libraryMismatch && versionMismatch) {
                    warning.push('and');
                }
                if (versionMismatch) {
                    warning.push("version name \"" + version + "\" contains illegal characters (whitespace or \"/\")");
                }
                logger.warn(warning.join(' '));
                return;
            }
            registerComponent(new index_cjs$1.Component(library + "-version", function () { return ({ library: library, version: version }); }, "VERSION" /* VERSION */));
        }
        function onLog(logCallback, options) {
            if (logCallback !== null && typeof logCallback !== 'function') {
                throw ERROR_FACTORY.create("invalid-log-argument" /* INVALID_LOG_ARGUMENT */, {
                    appName: name
                });
            }
            index_esm.setUserLogHandler(logCallback, options);
        }
        // Map the requested service to a registered service name
        // (used to map auth to serverAuth service when needed).
        function useAsService(app, name) {
            if (name === 'serverAuth') {
                return null;
            }
            var useService = name;
            return useService;
        }
        return namespace;
    }

    /**
     * @license
     * Copyright 2019 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Return a firebase namespace object.
     *
     * In production, this will be called exactly once and the result
     * assigned to the 'firebase' global.  It may be called multiple times
     * in unit tests.
     */
    function createFirebaseNamespace() {
        var namespace = createFirebaseNamespaceCore(FirebaseAppImpl);
        namespace.INTERNAL = tslib_es6.__assign(tslib_es6.__assign({}, namespace.INTERNAL), { createFirebaseNamespace: createFirebaseNamespace,
            extendNamespace: extendNamespace,
            createSubscribe: index_cjs.createSubscribe,
            ErrorFactory: index_cjs.ErrorFactory,
            deepExtend: index_cjs.deepExtend });
        /**
         * Patch the top-level firebase namespace with additional properties.
         *
         * firebase.INTERNAL.extendNamespace()
         */
        function extendNamespace(props) {
            index_cjs.deepExtend(namespace, props);
        }
        return namespace;
    }
    var firebase = createFirebaseNamespace();

    /**
     * @license
     * Copyright 2019 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var PlatformLoggerService = /** @class */ (function () {
        function PlatformLoggerService(container) {
            this.container = container;
        }
        // In initial implementation, this will be called by installations on
        // auth token refresh, and installations will send this string.
        PlatformLoggerService.prototype.getPlatformInfoString = function () {
            var providers = this.container.getProviders();
            // Loop through providers and get library/version pairs from any that are
            // version components.
            return providers
                .map(function (provider) {
                if (isVersionServiceProvider(provider)) {
                    var service = provider.getImmediate();
                    return service.library + "/" + service.version;
                }
                else {
                    return null;
                }
            })
                .filter(function (logString) { return logString; })
                .join(' ');
        };
        return PlatformLoggerService;
    }());
    /**
     *
     * @param provider check if this provider provides a VersionService
     *
     * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider
     * provides VersionService. The provider is not necessarily a 'app-version'
     * provider.
     */
    function isVersionServiceProvider(provider) {
        var component = provider.getComponent();
        return (component === null || component === void 0 ? void 0 : component.type) === "VERSION" /* VERSION */;
    }

    /**
     * @license
     * Copyright 2019 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function registerCoreComponents(firebase, variant) {
        firebase.INTERNAL.registerComponent(new index_cjs$1.Component('platform-logger', function (container) { return new PlatformLoggerService(container); }, "PRIVATE" /* PRIVATE */));
        // Register `app` package.
        firebase.registerVersion(name$1, version, variant);
        // Register platform SDK identifier (no version).
        firebase.registerVersion('fire-js', '');
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // Firebase Lite detection test
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    if (index_cjs.isBrowser() && self.firebase !== undefined) {
        logger.warn("\n    Warning: Firebase is already defined in the global scope. Please make sure\n    Firebase library is only loaded once.\n  ");
        // eslint-disable-next-line
        var sdkVersion = self.firebase.SDK_VERSION;
        if (sdkVersion && sdkVersion.indexOf('LITE') >= 0) {
            logger.warn("\n    Warning: You are trying to load Firebase while using Firebase Performance standalone script.\n    You should load Firebase Performance with this instance of Firebase to avoid loading duplicate code.\n    ");
        }
    }
    var initializeApp = firebase.initializeApp;
    // TODO: This disable can be removed and the 'ignoreRestArgs' option added to
    // the no-explicit-any rule when ESlint releases it.
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    firebase.initializeApp = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        // Environment check before initializing app
        // Do the check in initializeApp, so people have a chance to disable it by setting logLevel
        // in @firebase/logger
        if (index_cjs.isNode()) {
            logger.warn("\n      Warning: This is a browser-targeted Firebase bundle but it appears it is being\n      run in a Node environment.  If running in a Node environment, make sure you\n      are using the bundle specified by the \"main\" field in package.json.\n      \n      If you are using Webpack, you can specify \"main\" as the first item in\n      \"resolve.mainFields\":\n      https://webpack.js.org/configuration/resolve/#resolvemainfields\n      \n      If using Rollup, use the rollup-plugin-node-resolve plugin and specify \"main\"\n      as the first item in \"mainFields\", e.g. ['main', 'module'].\n      https://github.com/rollup/rollup-plugin-node-resolve\n      ");
        }
        return initializeApp.apply(undefined, args);
    };
    var firebase$1 = firebase;
    registerCoreComponents(firebase$1);

    exports.default = firebase$1;
    exports.firebase = firebase$1;
    //# sourceMappingURL=index.cjs.js.map
    });

    unwrapExports(index_cjs$2);
    var index_cjs_1$2 = index_cjs$2.firebase;

    function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

    var firebase = _interopDefault(index_cjs$2);

    var name$1 = "firebase";
    var version = "7.14.2";

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    firebase.registerVersion(name$1, version, 'app');

    var index_cjs$3 = firebase;

    var index_cjs$4 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, '__esModule', { value: true });

    function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

    var firebase = _interopDefault(index_cjs$2);





    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Wraps a DOM Storage object and:
     * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.
     * - prefixes names with "firebase:" to avoid collisions with app data.
     *
     * We automatically (see storage.js) create two such wrappers, one for sessionStorage,
     * and one for localStorage.
     *
     * @constructor
     */
    var DOMStorageWrapper = /** @class */ (function () {
        /**
         * @param {Storage} domStorage_ The underlying storage object (e.g. localStorage or sessionStorage)
         */
        function DOMStorageWrapper(domStorage_) {
            this.domStorage_ = domStorage_;
            // Use a prefix to avoid collisions with other stuff saved by the app.
            this.prefix_ = 'firebase:';
        }
        /**
         * @param {string} key The key to save the value under
         * @param {?Object} value The value being stored, or null to remove the key.
         */
        DOMStorageWrapper.prototype.set = function (key, value) {
            if (value == null) {
                this.domStorage_.removeItem(this.prefixedName_(key));
            }
            else {
                this.domStorage_.setItem(this.prefixedName_(key), index_cjs.stringify(value));
            }
        };
        /**
         * @param {string} key
         * @return {*} The value that was stored under this key, or null
         */
        DOMStorageWrapper.prototype.get = function (key) {
            var storedVal = this.domStorage_.getItem(this.prefixedName_(key));
            if (storedVal == null) {
                return null;
            }
            else {
                return index_cjs.jsonEval(storedVal);
            }
        };
        /**
         * @param {string} key
         */
        DOMStorageWrapper.prototype.remove = function (key) {
            this.domStorage_.removeItem(this.prefixedName_(key));
        };
        /**
         * @param {string} name
         * @return {string}
         */
        DOMStorageWrapper.prototype.prefixedName_ = function (name) {
            return this.prefix_ + name;
        };
        DOMStorageWrapper.prototype.toString = function () {
            return this.domStorage_.toString();
        };
        return DOMStorageWrapper;
    }());

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An in-memory storage implementation that matches the API of DOMStorageWrapper
     * (TODO: create interface for both to implement).
     *
     * @constructor
     */
    var MemoryStorage = /** @class */ (function () {
        function MemoryStorage() {
            this.cache_ = {};
            this.isInMemoryStorage = true;
        }
        MemoryStorage.prototype.set = function (key, value) {
            if (value == null) {
                delete this.cache_[key];
            }
            else {
                this.cache_[key] = value;
            }
        };
        MemoryStorage.prototype.get = function (key) {
            if (index_cjs.contains(this.cache_, key)) {
                return this.cache_[key];
            }
            return null;
        };
        MemoryStorage.prototype.remove = function (key) {
            delete this.cache_[key];
        };
        return MemoryStorage;
    }());

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.
     * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change
     * to reflect this type
     *
     * @param {string} domStorageName Name of the underlying storage object
     *   (e.g. 'localStorage' or 'sessionStorage').
     * @return {?} Turning off type information until a common interface is defined.
     */
    var createStoragefor = function (domStorageName) {
        try {
            // NOTE: just accessing "localStorage" or "window['localStorage']" may throw a security exception,
            // so it must be inside the try/catch.
            if (typeof window !== 'undefined' &&
                typeof window[domStorageName] !== 'undefined') {
                // Need to test cache. Just because it's here doesn't mean it works
                var domStorage = window[domStorageName];
                domStorage.setItem('firebase:sentinel', 'cache');
                domStorage.removeItem('firebase:sentinel');
                return new DOMStorageWrapper(domStorage);
            }
        }
        catch (e) { }
        // Failed to create wrapper.  Just return in-memory storage.
        // TODO: log?
        return new MemoryStorage();
    };
    /** A storage object that lasts across sessions */
    var PersistentStorage = createStoragefor('localStorage');
    /** A storage object that only lasts one session */
    var SessionStorage = createStoragefor('sessionStorage');

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var logClient = new index_esm.Logger('@firebase/database');
    /**
     * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).
     * @type {function(): number} Generated ID.
     */
    var LUIDGenerator = (function () {
        var id = 1;
        return function () {
            return id++;
        };
    })();
    /**
     * Sha1 hash of the input string
     * @param {!string} str The string to hash
     * @return {!string} The resulting hash
     */
    var sha1 = function (str) {
        var utf8Bytes = index_cjs.stringToByteArray(str);
        var sha1 = new index_cjs.Sha1();
        sha1.update(utf8Bytes);
        var sha1Bytes = sha1.digest();
        return index_cjs.base64.encodeByteArray(sha1Bytes);
    };
    /**
     * @param {...*} varArgs
     * @return {string}
     * @private
     */
    var buildLogMessage_ = function () {
        var varArgs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            varArgs[_i] = arguments[_i];
        }
        var message = '';
        for (var i = 0; i < varArgs.length; i++) {
            var arg = varArgs[i];
            if (Array.isArray(arg) ||
                (arg &&
                    typeof arg === 'object' &&
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    typeof arg.length === 'number')) {
                message += buildLogMessage_.apply(null, arg);
            }
            else if (typeof arg === 'object') {
                message += index_cjs.stringify(arg);
            }
            else {
                message += arg;
            }
            message += ' ';
        }
        return message;
    };
    /**
     * Use this for all debug messages in Firebase.
     * @type {?function(string)}
     */
    var logger = null;
    /**
     * Flag to check for log availability on first log message
     * @type {boolean}
     * @private
     */
    var firstLog_ = true;
    /**
     * The implementation of Firebase.enableLogging (defined here to break dependencies)
     * @param {boolean|?function(string)} logger_ A flag to turn on logging, or a custom logger
     * @param {boolean=} persistent Whether or not to persist logging settings across refreshes
     */
    var enableLogging = function (logger_, persistent) {
        index_cjs.assert(!persistent || logger_ === true || logger_ === false, "Can't turn on custom loggers persistently.");
        if (logger_ === true) {
            logClient.logLevel = index_esm.LogLevel.VERBOSE;
            logger = logClient.log.bind(logClient);
            if (persistent) {
                SessionStorage.set('logging_enabled', true);
            }
        }
        else if (typeof logger_ === 'function') {
            logger = logger_;
        }
        else {
            logger = null;
            SessionStorage.remove('logging_enabled');
        }
    };
    /**
     *
     * @param {...(string|Arguments)} varArgs
     */
    var log = function () {
        var varArgs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            varArgs[_i] = arguments[_i];
        }
        if (firstLog_ === true) {
            firstLog_ = false;
            if (logger === null && SessionStorage.get('logging_enabled') === true) {
                enableLogging(true);
            }
        }
        if (logger) {
            var message = buildLogMessage_.apply(null, varArgs);
            logger(message);
        }
    };
    /**
     * @param {!string} prefix
     * @return {function(...[*])}
     */
    var logWrapper = function (prefix) {
        return function () {
            var varArgs = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                varArgs[_i] = arguments[_i];
            }
            log.apply(void 0, tslib_es6.__spread([prefix], varArgs));
        };
    };
    /**
     * @param {...string} varArgs
     */
    var error = function () {
        var varArgs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            varArgs[_i] = arguments[_i];
        }
        var message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_.apply(void 0, tslib_es6.__spread(varArgs));
        logClient.error(message);
    };
    /**
     * @param {...string} varArgs
     */
    var fatal = function () {
        var varArgs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            varArgs[_i] = arguments[_i];
        }
        var message = "FIREBASE FATAL ERROR: " + buildLogMessage_.apply(void 0, tslib_es6.__spread(varArgs));
        logClient.error(message);
        throw new Error(message);
    };
    /**
     * @param {...*} varArgs
     */
    var warn = function () {
        var varArgs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            varArgs[_i] = arguments[_i];
        }
        var message = 'FIREBASE WARNING: ' + buildLogMessage_.apply(void 0, tslib_es6.__spread(varArgs));
        logClient.warn(message);
    };
    /**
     * Logs a warning if the containing page uses https. Called when a call to new Firebase
     * does not use https.
     */
    var warnIfPageIsSecure = function () {
        // Be very careful accessing browser globals. Who knows what may or may not exist.
        if (typeof window !== 'undefined' &&
            window.location &&
            window.location.protocol &&
            window.location.protocol.indexOf('https:') !== -1) {
            warn('Insecure Firebase access from a secure page. ' +
                'Please use https in calls to new Firebase().');
        }
    };
    /**
     * Returns true if data is NaN, or +/- Infinity.
     * @param {*} data
     * @return {boolean}
     */
    var isInvalidJSONNumber = function (data) {
        return (typeof data === 'number' &&
            (data !== data || // NaN
                data === Number.POSITIVE_INFINITY ||
                data === Number.NEGATIVE_INFINITY));
    };
    /**
     * @param {function()} fn
     */
    var executeWhenDOMReady = function (fn) {
        if (index_cjs.isNodeSdk() || document.readyState === 'complete') {
            fn();
        }
        else {
            // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which
            // fire before onload), but fall back to onload.
            var called_1 = false;
            var wrappedFn_1 = function () {
                if (!document.body) {
                    setTimeout(wrappedFn_1, Math.floor(10));
                    return;
                }
                if (!called_1) {
                    called_1 = true;
                    fn();
                }
            };
            if (document.addEventListener) {
                document.addEventListener('DOMContentLoaded', wrappedFn_1, false);
                // fallback to onload.
                window.addEventListener('load', wrappedFn_1, false);
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
            }
            else if (document.attachEvent) {
                // IE.
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                document.attachEvent('onreadystatechange', function () {
                    if (document.readyState === 'complete') {
                        wrappedFn_1();
                    }
                });
                // fallback to onload.
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                window.attachEvent('onload', wrappedFn_1);
                // jQuery has an extra hack for IE that we could employ (based on
                // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.
                // I'm hoping we don't need it.
            }
        }
    };
    /**
     * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names
     * @type {!string}
     */
    var MIN_NAME = '[MIN_NAME]';
    /**
     * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names
     * @type {!string}
     */
    var MAX_NAME = '[MAX_NAME]';
    /**
     * Compares valid Firebase key names, plus min and max name
     * @param {!string} a
     * @param {!string} b
     * @return {!number}
     */
    var nameCompare = function (a, b) {
        if (a === b) {
            return 0;
        }
        else if (a === MIN_NAME || b === MAX_NAME) {
            return -1;
        }
        else if (b === MIN_NAME || a === MAX_NAME) {
            return 1;
        }
        else {
            var aAsInt = tryParseInt(a), bAsInt = tryParseInt(b);
            if (aAsInt !== null) {
                if (bAsInt !== null) {
                    return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;
                }
                else {
                    return -1;
                }
            }
            else if (bAsInt !== null) {
                return 1;
            }
            else {
                return a < b ? -1 : 1;
            }
        }
    };
    /**
     * @param {!string} a
     * @param {!string} b
     * @return {!number} comparison result.
     */
    var stringCompare = function (a, b) {
        if (a === b) {
            return 0;
        }
        else if (a < b) {
            return -1;
        }
        else {
            return 1;
        }
    };
    /**
     * @param {string} key
     * @param {Object} obj
     * @return {*}
     */
    var requireKey = function (key, obj) {
        if (obj && key in obj) {
            return obj[key];
        }
        else {
            throw new Error('Missing required key (' + key + ') in object: ' + index_cjs.stringify(obj));
        }
    };
    /**
     * @param {*} obj
     * @return {string}
     */
    var ObjectToUniqueKey = function (obj) {
        if (typeof obj !== 'object' || obj === null) {
            return index_cjs.stringify(obj);
        }
        var keys = [];
        // eslint-disable-next-line guard-for-in
        for (var k in obj) {
            keys.push(k);
        }
        // Export as json, but with the keys sorted.
        keys.sort();
        var key = '{';
        for (var i = 0; i < keys.length; i++) {
            if (i !== 0) {
                key += ',';
            }
            key += index_cjs.stringify(keys[i]);
            key += ':';
            key += ObjectToUniqueKey(obj[keys[i]]);
        }
        key += '}';
        return key;
    };
    /**
     * Splits a string into a number of smaller segments of maximum size
     * @param {!string} str The string
     * @param {!number} segsize The maximum number of chars in the string.
     * @return {Array.<string>} The string, split into appropriately-sized chunks
     */
    var splitStringBySize = function (str, segsize) {
        var len = str.length;
        if (len <= segsize) {
            return [str];
        }
        var dataSegs = [];
        for (var c = 0; c < len; c += segsize) {
            if (c + segsize > len) {
                dataSegs.push(str.substring(c, len));
            }
            else {
                dataSegs.push(str.substring(c, c + segsize));
            }
        }
        return dataSegs;
    };
    /**
     * Apply a function to each (key, value) pair in an object or
     * apply a function to each (index, value) pair in an array
     * @param obj The object or array to iterate over
     * @param fn The function to apply
     */
    function each(obj, fn) {
        for (var key in obj) {
            if (obj.hasOwnProperty(key)) {
                fn(key, obj[key]);
            }
        }
    }
    /**
     * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)
     * I made one modification at the end and removed the NaN / Infinity
     * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.
     * @param {!number} v A double
     * @return {string}
     */
    var doubleToIEEE754String = function (v) {
        index_cjs.assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL
        var ebits = 11, fbits = 52;
        var bias = (1 << (ebits - 1)) - 1;
        var s, e, f, ln, i;
        // Compute sign, exponent, fraction
        // Skip NaN / Infinity handling --MJL.
        if (v === 0) {
            e = 0;
            f = 0;
            s = 1 / v === -Infinity ? 1 : 0;
        }
        else {
            s = v < 0;
            v = Math.abs(v);
            if (v >= Math.pow(2, 1 - bias)) {
                // Normalized
                ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);
                e = ln + bias;
                f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));
            }
            else {
                // Denormalized
                e = 0;
                f = Math.round(v / Math.pow(2, 1 - bias - fbits));
            }
        }
        // Pack sign, exponent, fraction
        var bits = [];
        for (i = fbits; i; i -= 1) {
            bits.push(f % 2 ? 1 : 0);
            f = Math.floor(f / 2);
        }
        for (i = ebits; i; i -= 1) {
            bits.push(e % 2 ? 1 : 0);
            e = Math.floor(e / 2);
        }
        bits.push(s ? 1 : 0);
        bits.reverse();
        var str = bits.join('');
        // Return the data as a hex string. --MJL
        var hexByteString = '';
        for (i = 0; i < 64; i += 8) {
            var hexByte = parseInt(str.substr(i, 8), 2).toString(16);
            if (hexByte.length === 1) {
                hexByte = '0' + hexByte;
            }
            hexByteString = hexByteString + hexByte;
        }
        return hexByteString.toLowerCase();
    };
    /**
     * Used to detect if we're in a Chrome content script (which executes in an
     * isolated environment where long-polling doesn't work).
     * @return {boolean}
     */
    var isChromeExtensionContentScript = function () {
        return !!(typeof window === 'object' &&
            window['chrome'] &&
            window['chrome']['extension'] &&
            !/^chrome/.test(window.location.href));
    };
    /**
     * Used to detect if we're in a Windows 8 Store app.
     * @return {boolean}
     */
    var isWindowsStoreApp = function () {
        // Check for the presence of a couple WinRT globals
        return typeof Windows === 'object' && typeof Windows.UI === 'object';
    };
    /**
     * Converts a server error code to a Javascript Error
     * @param {!string} code
     * @param {!Query} query
     * @return {Error}
     */
    var errorForServerCode = function (code, query) {
        var reason = 'Unknown Error';
        if (code === 'too_big') {
            reason =
                'The data requested exceeds the maximum size ' +
                    'that can be accessed with a single request.';
        }
        else if (code === 'permission_denied') {
            reason = "Client doesn't have permission to access the desired data.";
        }
        else if (code === 'unavailable') {
            reason = 'The service is unavailable';
        }
        var error = new Error(code + ' at ' + query.path.toString() + ': ' + reason);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        error.code = code.toUpperCase();
        return error;
    };
    /**
     * Used to test for integer-looking strings
     * @type {RegExp}
     * @private
     */
    var INTEGER_REGEXP_ = new RegExp('^-?(0*)\\d{1,10}$');
    /**
     * If the string contains a 32-bit integer, return it.  Else return null.
     * @param {!string} str
     * @return {?number}
     */
    var tryParseInt = function (str) {
        if (INTEGER_REGEXP_.test(str)) {
            var intVal = Number(str);
            if (intVal >= -2147483648 && intVal <= 2147483647) {
                return intVal;
            }
        }
        return null;
    };
    /**
     * Helper to run some code but catch any exceptions and re-throw them later.
     * Useful for preventing user callbacks from breaking internal code.
     *
     * Re-throwing the exception from a setTimeout is a little evil, but it's very
     * convenient (we don't have to try to figure out when is a safe point to
     * re-throw it), and the behavior seems reasonable:
     *
     * * If you aren't pausing on exceptions, you get an error in the console with
     *   the correct stack trace.
     * * If you're pausing on all exceptions, the debugger will pause on your
     *   exception and then again when we rethrow it.
     * * If you're only pausing on uncaught exceptions, the debugger will only pause
     *   on us re-throwing it.
     *
     * @param {!function()} fn The code to guard.
     */
    var exceptionGuard = function (fn) {
        try {
            fn();
        }
        catch (e) {
            // Re-throw exception when it's safe.
            setTimeout(function () {
                // It used to be that "throw e" would result in a good console error with
                // relevant context, but as of Chrome 39, you just get the firebase.js
                // file/line number where we re-throw it, which is useless. So we log
                // e.stack explicitly.
                var stack = e.stack || '';
                warn('Exception was thrown by user callback.', stack);
                throw e;
            }, Math.floor(0));
        }
    };
    /**
     * @return {boolean} true if we think we're currently being crawled.
     */
    var beingCrawled = function () {
        var userAgent = (typeof window === 'object' &&
            window['navigator'] &&
            window['navigator']['userAgent']) ||
            '';
        // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we
        // believe to support JavaScript/AJAX rendering.
        // NOTE: Google Webmaster Tools doesn't really belong, but their "This is how a visitor to your website
        // would have seen the page" is flaky if we don't treat it as a crawler.
        return (userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0);
    };
    /**
     * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.
     *
     * It is removed with clearTimeout() as normal.
     *
     * @param {Function} fn Function to run.
     * @param {number} time Milliseconds to wait before running.
     * @return {number|Object} The setTimeout() return value.
     */
    var setTimeoutNonBlocking = function (fn, time) {
        var timeout = setTimeout(fn, time);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        if (typeof timeout === 'object' && timeout['unref']) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            timeout['unref']();
        }
        return timeout;
    };

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An immutable object representing a parsed path.  It's immutable so that you
     * can pass them around to other functions without worrying about them changing
     * it.
     */
    var Path = /** @class */ (function () {
        /**
         * @param {string|Array.<string>} pathOrString Path string to parse,
         *      or another path, or the raw tokens array
         * @param {number=} pieceNum
         */
        function Path(pathOrString, pieceNum) {
            if (pieceNum === void 0) {
                this.pieces_ = pathOrString.split('/');
                // Remove empty pieces.
                var copyTo = 0;
                for (var i = 0; i < this.pieces_.length; i++) {
                    if (this.pieces_[i].length > 0) {
                        this.pieces_[copyTo] = this.pieces_[i];
                        copyTo++;
                    }
                }
                this.pieces_.length = copyTo;
                this.pieceNum_ = 0;
            }
            else {
                this.pieces_ = pathOrString;
                this.pieceNum_ = pieceNum;
            }
        }
        Object.defineProperty(Path, "Empty", {
            /**
             * Singleton to represent an empty path
             *
             * @const
             */
            get: function () {
                return new Path('');
            },
            enumerable: true,
            configurable: true
        });
        Path.prototype.getFront = function () {
            if (this.pieceNum_ >= this.pieces_.length) {
                return null;
            }
            return this.pieces_[this.pieceNum_];
        };
        /**
         * @return {number} The number of segments in this path
         */
        Path.prototype.getLength = function () {
            return this.pieces_.length - this.pieceNum_;
        };
        /**
         * @return {!Path}
         */
        Path.prototype.popFront = function () {
            var pieceNum = this.pieceNum_;
            if (pieceNum < this.pieces_.length) {
                pieceNum++;
            }
            return new Path(this.pieces_, pieceNum);
        };
        /**
         * @return {?string}
         */
        Path.prototype.getBack = function () {
            if (this.pieceNum_ < this.pieces_.length) {
                return this.pieces_[this.pieces_.length - 1];
            }
            return null;
        };
        Path.prototype.toString = function () {
            var pathString = '';
            for (var i = this.pieceNum_; i < this.pieces_.length; i++) {
                if (this.pieces_[i] !== '') {
                    pathString += '/' + this.pieces_[i];
                }
            }
            return pathString || '/';
        };
        Path.prototype.toUrlEncodedString = function () {
            var pathString = '';
            for (var i = this.pieceNum_; i < this.pieces_.length; i++) {
                if (this.pieces_[i] !== '') {
                    pathString += '/' + encodeURIComponent(String(this.pieces_[i]));
                }
            }
            return pathString || '/';
        };
        /**
         * Shallow copy of the parts of the path.
         *
         * @param {number=} begin
         * @return {!Array<string>}
         */
        Path.prototype.slice = function (begin) {
            if (begin === void 0) { begin = 0; }
            return this.pieces_.slice(this.pieceNum_ + begin);
        };
        /**
         * @return {?Path}
         */
        Path.prototype.parent = function () {
            if (this.pieceNum_ >= this.pieces_.length) {
                return null;
            }
            var pieces = [];
            for (var i = this.pieceNum_; i < this.pieces_.length - 1; i++) {
                pieces.push(this.pieces_[i]);
            }
            return new Path(pieces, 0);
        };
        /**
         * @param {string|!Path} childPathObj
         * @return {!Path}
         */
        Path.prototype.child = function (childPathObj) {
            var pieces = [];
            for (var i = this.pieceNum_; i < this.pieces_.length; i++) {
                pieces.push(this.pieces_[i]);
            }
            if (childPathObj instanceof Path) {
                for (var i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {
                    pieces.push(childPathObj.pieces_[i]);
                }
            }
            else {
                var childPieces = childPathObj.split('/');
                for (var i = 0; i < childPieces.length; i++) {
                    if (childPieces[i].length > 0) {
                        pieces.push(childPieces[i]);
                    }
                }
            }
            return new Path(pieces, 0);
        };
        /**
         * @return {boolean} True if there are no segments in this path
         */
        Path.prototype.isEmpty = function () {
            return this.pieceNum_ >= this.pieces_.length;
        };
        /**
         * @param {!Path} outerPath
         * @param {!Path} innerPath
         * @return {!Path} The path from outerPath to innerPath
         */
        Path.relativePath = function (outerPath, innerPath) {
            var outer = outerPath.getFront(), inner = innerPath.getFront();
            if (outer === null) {
                return innerPath;
            }
            else if (outer === inner) {
                return Path.relativePath(outerPath.popFront(), innerPath.popFront());
            }
            else {
                throw new Error('INTERNAL ERROR: innerPath (' +
                    innerPath +
                    ') is not within ' +
                    'outerPath (' +
                    outerPath +
                    ')');
            }
        };
        /**
         * @param {!Path} left
         * @param {!Path} right
         * @return {number} -1, 0, 1 if left is less, equal, or greater than the right.
         */
        Path.comparePaths = function (left, right) {
            var leftKeys = left.slice();
            var rightKeys = right.slice();
            for (var i = 0; i < leftKeys.length && i < rightKeys.length; i++) {
                var cmp = nameCompare(leftKeys[i], rightKeys[i]);
                if (cmp !== 0) {
                    return cmp;
                }
            }
            if (leftKeys.length === rightKeys.length) {
                return 0;
            }
            return leftKeys.length < rightKeys.length ? -1 : 1;
        };
        /**
         *
         * @param {Path} other
         * @return {boolean} true if paths are the same.
         */
        Path.prototype.equals = function (other) {
            if (this.getLength() !== other.getLength()) {
                return false;
            }
            for (var i = this.pieceNum_, j = other.pieceNum_; i <= this.pieces_.length; i++, j++) {
                if (this.pieces_[i] !== other.pieces_[j]) {
                    return false;
                }
            }
            return true;
        };
        /**
         *
         * @param {!Path} other
         * @return {boolean} True if this path is a parent (or the same as) other
         */
        Path.prototype.contains = function (other) {
            var i = this.pieceNum_;
            var j = other.pieceNum_;
            if (this.getLength() > other.getLength()) {
                return false;
            }
            while (i < this.pieces_.length) {
                if (this.pieces_[i] !== other.pieces_[j]) {
                    return false;
                }
                ++i;
                ++j;
            }
            return true;
        };
        return Path;
    }()); // end Path
    /**
     * Dynamic (mutable) path used to count path lengths.
     *
     * This class is used to efficiently check paths for valid
     * length (in UTF8 bytes) and depth (used in path validation).
     *
     * Throws Error exception if path is ever invalid.
     *
     * The definition of a path always begins with '/'.
     */
    var ValidationPath = /** @class */ (function () {
        /**
         * @param {!Path} path Initial Path.
         * @param {string} errorPrefix_ Prefix for any error messages.
         */
        function ValidationPath(path, errorPrefix_) {
            this.errorPrefix_ = errorPrefix_;
            /** @type {!Array<string>} */
            this.parts_ = path.slice();
            /** @type {number} Initialize to number of '/' chars needed in path. */
            this.byteLength_ = Math.max(1, this.parts_.length);
            for (var i = 0; i < this.parts_.length; i++) {
                this.byteLength_ += index_cjs.stringLength(this.parts_[i]);
            }
            this.checkValid_();
        }
        Object.defineProperty(ValidationPath, "MAX_PATH_DEPTH", {
            /** @const {number} Maximum key depth. */
            get: function () {
                return 32;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ValidationPath, "MAX_PATH_LENGTH_BYTES", {
            /** @const {number} Maximum number of (UTF8) bytes in a Firebase path. */
            get: function () {
                return 768;
            },
            enumerable: true,
            configurable: true
        });
        /** @param {string} child */
        ValidationPath.prototype.push = function (child) {
            // Count the needed '/'
            if (this.parts_.length > 0) {
                this.byteLength_ += 1;
            }
            this.parts_.push(child);
            this.byteLength_ += index_cjs.stringLength(child);
            this.checkValid_();
        };
        ValidationPath.prototype.pop = function () {
            var last = this.parts_.pop();
            this.byteLength_ -= index_cjs.stringLength(last);
            // Un-count the previous '/'
            if (this.parts_.length > 0) {
                this.byteLength_ -= 1;
            }
        };
        ValidationPath.prototype.checkValid_ = function () {
            if (this.byteLength_ > ValidationPath.MAX_PATH_LENGTH_BYTES) {
                throw new Error(this.errorPrefix_ +
                    'has a key path longer than ' +
                    ValidationPath.MAX_PATH_LENGTH_BYTES +
                    ' bytes (' +
                    this.byteLength_ +
                    ').');
            }
            if (this.parts_.length > ValidationPath.MAX_PATH_DEPTH) {
                throw new Error(this.errorPrefix_ +
                    'path specified exceeds the maximum depth that can be written (' +
                    ValidationPath.MAX_PATH_DEPTH +
                    ') or object contains a cycle ' +
                    this.toErrorString());
            }
        };
        /**
         * String for use in error messages - uses '.' notation for path.
         *
         * @return {string}
         */
        ValidationPath.prototype.toErrorString = function () {
            if (this.parts_.length === 0) {
                return '';
            }
            return "in property '" + this.parts_.join('.') + "'";
        };
        return ValidationPath;
    }());

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var PROTOCOL_VERSION = '5';
    var VERSION_PARAM = 'v';
    var TRANSPORT_SESSION_PARAM = 's';
    var REFERER_PARAM = 'r';
    var FORGE_REF = 'f';
    var FORGE_DOMAIN = 'firebaseio.com';
    var LAST_SESSION_PARAM = 'ls';
    var WEBSOCKET = 'websocket';
    var LONG_POLLING = 'long_polling';

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A class that holds metadata about a Repo object
     *
     * @constructor
     */
    var RepoInfo = /** @class */ (function () {
        /**
         * @param {string} host Hostname portion of the url for the repo
         * @param {boolean} secure Whether or not this repo is accessed over ssl
         * @param {string} namespace The namespace represented by the repo
         * @param {boolean} webSocketOnly Whether to prefer websockets over all other transports (used by Nest).
         * @param {string=} persistenceKey Override the default session persistence storage key
         */
        function RepoInfo(host, secure, namespace, webSocketOnly, persistenceKey, includeNamespaceInQueryParams) {
            if (persistenceKey === void 0) { persistenceKey = ''; }
            if (includeNamespaceInQueryParams === void 0) { includeNamespaceInQueryParams = false; }
            this.secure = secure;
            this.namespace = namespace;
            this.webSocketOnly = webSocketOnly;
            this.persistenceKey = persistenceKey;
            this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;
            this.host = host.toLowerCase();
            this.domain = this.host.substr(this.host.indexOf('.') + 1);
            this.internalHost =
                PersistentStorage.get('host:' + host) || this.host;
        }
        RepoInfo.prototype.needsQueryParam = function () {
            return (this.host !== this.internalHost ||
                this.isCustomHost() ||
                this.includeNamespaceInQueryParams);
        };
        RepoInfo.prototype.isCacheableHost = function () {
            return this.internalHost.substr(0, 2) === 's-';
        };
        RepoInfo.prototype.isDemoHost = function () {
            return this.domain === 'firebaseio-demo.com';
        };
        RepoInfo.prototype.isCustomHost = function () {
            return (this.domain !== 'firebaseio.com' && this.domain !== 'firebaseio-demo.com');
        };
        RepoInfo.prototype.updateHost = function (newHost) {
            if (newHost !== this.internalHost) {
                this.internalHost = newHost;
                if (this.isCacheableHost()) {
                    PersistentStorage.set('host:' + this.host, this.internalHost);
                }
            }
        };
        /**
         * Returns the websocket URL for this repo
         * @param {string} type of connection
         * @param {Object} params list
         * @return {string} The URL for this repo
         */
        RepoInfo.prototype.connectionURL = function (type, params) {
            index_cjs.assert(typeof type === 'string', 'typeof type must == string');
            index_cjs.assert(typeof params === 'object', 'typeof params must == object');
            var connURL;
            if (type === WEBSOCKET) {
                connURL =
                    (this.secure ? 'wss://' : 'ws://') + this.internalHost + '/.ws?';
            }
            else if (type === LONG_POLLING) {
                connURL =
                    (this.secure ? 'https://' : 'http://') + this.internalHost + '/.lp?';
            }
            else {
                throw new Error('Unknown connection type: ' + type);
            }
            if (this.needsQueryParam()) {
                params['ns'] = this.namespace;
            }
            var pairs = [];
            each(params, function (key, value) {
                pairs.push(key + '=' + value);
            });
            return connURL + pairs.join('&');
        };
        /** @return {string} */
        RepoInfo.prototype.toString = function () {
            var str = this.toURLString();
            if (this.persistenceKey) {
                str += '<' + this.persistenceKey + '>';
            }
            return str;
        };
        /** @return {string} */
        RepoInfo.prototype.toURLString = function () {
            return (this.secure ? 'https://' : 'http://') + this.host;
        };
        return RepoInfo;
    }());

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @param {!string} pathString
     * @return {string}
     */
    function decodePath(pathString) {
        var pathStringDecoded = '';
        var pieces = pathString.split('/');
        for (var i = 0; i < pieces.length; i++) {
            if (pieces[i].length > 0) {
                var piece = pieces[i];
                try {
                    piece = decodeURIComponent(piece.replace(/\+/g, ' '));
                }
                catch (e) { }
                pathStringDecoded += '/' + piece;
            }
        }
        return pathStringDecoded;
    }
    /**
     * @param {!string} queryString
     * @return {!{[key:string]:string}} key value hash
     */
    function decodeQuery(queryString) {
        var e_1, _a;
        var results = {};
        if (queryString.charAt(0) === '?') {
            queryString = queryString.substring(1);
        }
        try {
            for (var _b = tslib_es6.__values(queryString.split('&')), _c = _b.next(); !_c.done; _c = _b.next()) {
                var segment = _c.value;
                if (segment.length === 0) {
                    continue;
                }
                var kv = segment.split('=');
                if (kv.length === 2) {
                    results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);
                }
                else {
                    warn("Invalid query segment '" + segment + "' in query '" + queryString + "'");
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return results;
    }
    /**
     *
     * @param {!string} dataURL
     * @return {{repoInfo: !RepoInfo, path: !Path}}
     */
    var parseRepoInfo = function (dataURL) {
        var parsedUrl = parseDatabaseURL(dataURL), namespace = parsedUrl.namespace;
        if (parsedUrl.domain === 'firebase') {
            fatal(parsedUrl.host +
                ' is no longer supported. ' +
                'Please use <YOUR FIREBASE>.firebaseio.com instead');
        }
        // Catch common error of uninitialized namespace value.
        if ((!namespace || namespace === 'undefined') &&
            parsedUrl.domain !== 'localhost') {
            fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');
        }
        if (!parsedUrl.secure) {
            warnIfPageIsSecure();
        }
        var webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';
        return {
            repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, webSocketOnly, 
            /*persistenceKey=*/ '', 
            /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain),
            path: new Path(parsedUrl.pathString)
        };
    };
    /**
     *
     * @param {!string} dataURL
     * @return {{host: string, port: number, domain: string, subdomain: string, secure: boolean, scheme: string, pathString: string, namespace: string}}
     */
    var parseDatabaseURL = function (dataURL) {
        // Default to empty strings in the event of a malformed string.
        var host = '', domain = '', subdomain = '', pathString = '', namespace = '';
        // Always default to SSL, unless otherwise specified.
        var secure = true, scheme = 'https', port = 443;
        // Don't do any validation here. The caller is responsible for validating the result of parsing.
        if (typeof dataURL === 'string') {
            // Parse scheme.
            var colonInd = dataURL.indexOf('//');
            if (colonInd >= 0) {
                scheme = dataURL.substring(0, colonInd - 1);
                dataURL = dataURL.substring(colonInd + 2);
            }
            // Parse host, path, and query string.
            var slashInd = dataURL.indexOf('/');
            if (slashInd === -1) {
                slashInd = dataURL.length;
            }
            var questionMarkInd = dataURL.indexOf('?');
            if (questionMarkInd === -1) {
                questionMarkInd = dataURL.length;
            }
            host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));
            if (slashInd < questionMarkInd) {
                // For pathString, questionMarkInd will always come after slashInd
                pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));
            }
            var queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));
            // If we have a port, use scheme for determining if it's secure.
            colonInd = host.indexOf(':');
            if (colonInd >= 0) {
                secure = scheme === 'https' || scheme === 'wss';
                port = parseInt(host.substring(colonInd + 1), 10);
            }
            else {
                colonInd = dataURL.length;
            }
            var parts = host.split('.');
            if (parts.length === 3) {
                // Normalize namespaces to lowercase to share storage / connection.
                domain = parts[1];
                subdomain = parts[0].toLowerCase();
                // We interpret the subdomain of a 3 component URL as the namespace name.
                namespace = subdomain;
            }
            else if (parts.length === 2) {
                domain = parts[0];
            }
            else if (parts[0].slice(0, colonInd).toLowerCase() === 'localhost') {
                domain = 'localhost';
            }
            // Always treat the value of the `ns` as the namespace name if it is present.
            if ('ns' in queryParams) {
                namespace = queryParams['ns'];
            }
        }
        return {
            host: host,
            port: port,
            domain: domain,
            subdomain: subdomain,
            secure: secure,
            scheme: scheme,
            pathString: pathString,
            namespace: namespace
        };
    };

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * True for invalid Firebase keys
     * @type {RegExp}
     * @private
     */
    var INVALID_KEY_REGEX_ = /[\[\].#$\/\u0000-\u001F\u007F]/;
    /**
     * True for invalid Firebase paths.
     * Allows '/' in paths.
     * @type {RegExp}
     * @private
     */
    var INVALID_PATH_REGEX_ = /[\[\].#$\u0000-\u001F\u007F]/;
    /**
     * Maximum number of characters to allow in leaf value
     * @type {number}
     * @private
     */
    var MAX_LEAF_SIZE_ = 10 * 1024 * 1024;
    /**
     * @param {*} key
     * @return {boolean}
     */
    var isValidKey = function (key) {
        return (typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key));
    };
    /**
     * @param {string} pathString
     * @return {boolean}
     */
    var isValidPathString = function (pathString) {
        return (typeof pathString === 'string' &&
            pathString.length !== 0 &&
            !INVALID_PATH_REGEX_.test(pathString));
    };
    /**
     * @param {string} pathString
     * @return {boolean}
     */
    var isValidRootPathString = function (pathString) {
        if (pathString) {
            // Allow '/.info/' at the beginning.
            pathString = pathString.replace(/^\/*\.info(\/|$)/, '/');
        }
        return isValidPathString(pathString);
    };
    /**
     * @param {*} priority
     * @return {boolean}
     */
    var isValidPriority = function (priority) {
        return (priority === null ||
            typeof priority === 'string' ||
            (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||
            (priority &&
                typeof priority === 'object' &&
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                index_cjs.contains(priority, '.sv')));
    };
    /**
     * Pre-validate a datum passed as an argument to Firebase function.
     *
     * @param {string} fnName
     * @param {number} argumentNumber
     * @param {*} data
     * @param {!Path} path
     * @param {boolean} optional
     */
    var validateFirebaseDataArg = function (fnName, argumentNumber, data, path, optional) {
        if (optional && data === undefined) {
            return;
        }
        validateFirebaseData(index_cjs.errorPrefix(fnName, argumentNumber, optional), data, path);
    };
    /**
     * Validate a data object client-side before sending to server.
     *
     * @param {string} errorPrefix
     * @param {*} data
     * @param {!Path|!ValidationPath} path_
     */
    var validateFirebaseData = function (errorPrefix, data, path_) {
        var path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;
        if (data === undefined) {
            throw new Error(errorPrefix + 'contains undefined ' + path.toErrorString());
        }
        if (typeof data === 'function') {
            throw new Error(errorPrefix +
                'contains a function ' +
                path.toErrorString() +
                ' with contents = ' +
                data.toString());
        }
        if (isInvalidJSONNumber(data)) {
            throw new Error(errorPrefix + 'contains ' + data.toString() + ' ' + path.toErrorString());
        }
        // Check max leaf size, but try to avoid the utf8 conversion if we can.
        if (typeof data === 'string' &&
            data.length > MAX_LEAF_SIZE_ / 3 &&
            index_cjs.stringLength(data) > MAX_LEAF_SIZE_) {
            throw new Error(errorPrefix +
                'contains a string greater than ' +
                MAX_LEAF_SIZE_ +
                ' utf8 bytes ' +
                path.toErrorString() +
                " ('" +
                data.substring(0, 50) +
                "...')");
        }
        // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON
        // to save extra walking of large objects.
        if (data && typeof data === 'object') {
            var hasDotValue_1 = false;
            var hasActualChild_1 = false;
            each(data, function (key, value) {
                if (key === '.value') {
                    hasDotValue_1 = true;
                }
                else if (key !== '.priority' && key !== '.sv') {
                    hasActualChild_1 = true;
                    if (!isValidKey(key)) {
                        throw new Error(errorPrefix +
                            ' contains an invalid key (' +
                            key +
                            ') ' +
                            path.toErrorString() +
                            '.  Keys must be non-empty strings ' +
                            'and can\'t contain ".", "#", "$", "/", "[", or "]"');
                    }
                }
                path.push(key);
                validateFirebaseData(errorPrefix, value, path);
                path.pop();
            });
            if (hasDotValue_1 && hasActualChild_1) {
                throw new Error(errorPrefix +
                    ' contains ".value" child ' +
                    path.toErrorString() +
                    ' in addition to actual children.');
            }
        }
    };
    /**
     * Pre-validate paths passed in the firebase function.
     *
     * @param {string} errorPrefix
     * @param {Array<!Path>} mergePaths
     */
    var validateFirebaseMergePaths = function (errorPrefix, mergePaths) {
        var i, curPath;
        for (i = 0; i < mergePaths.length; i++) {
            curPath = mergePaths[i];
            var keys = curPath.slice();
            for (var j = 0; j < keys.length; j++) {
                if (keys[j] === '.priority' && j === keys.length - 1) ;
                else if (!isValidKey(keys[j])) {
                    throw new Error(errorPrefix +
                        'contains an invalid key (' +
                        keys[j] +
                        ') in path ' +
                        curPath.toString() +
                        '. Keys must be non-empty strings ' +
                        'and can\'t contain ".", "#", "$", "/", "[", or "]"');
                }
            }
        }
        // Check that update keys are not descendants of each other.
        // We rely on the property that sorting guarantees that ancestors come
        // right before descendants.
        mergePaths.sort(Path.comparePaths);
        var prevPath = null;
        for (i = 0; i < mergePaths.length; i++) {
            curPath = mergePaths[i];
            if (prevPath !== null && prevPath.contains(curPath)) {
                throw new Error(errorPrefix +
                    'contains a path ' +
                    prevPath.toString() +
                    ' that is ancestor of another path ' +
                    curPath.toString());
            }
            prevPath = curPath;
        }
    };
    /**
     * pre-validate an object passed as an argument to firebase function (
     * must be an object - e.g. for firebase.update()).
     *
     * @param {string} fnName
     * @param {number} argumentNumber
     * @param {*} data
     * @param {!Path} path
     * @param {boolean} optional
     */
    var validateFirebaseMergeDataArg = function (fnName, argumentNumber, data, path, optional) {
        if (optional && data === undefined) {
            return;
        }
        var errorPrefix = index_cjs.errorPrefix(fnName, argumentNumber, optional);
        if (!(data && typeof data === 'object') || Array.isArray(data)) {
            throw new Error(errorPrefix + ' must be an object containing the children to replace.');
        }
        var mergePaths = [];
        each(data, function (key, value) {
            var curPath = new Path(key);
            validateFirebaseData(errorPrefix, value, path.child(curPath));
            if (curPath.getBack() === '.priority') {
                if (!isValidPriority(value)) {
                    throw new Error(errorPrefix +
                        "contains an invalid value for '" +
                        curPath.toString() +
                        "', which must be a valid " +
                        'Firebase priority (a string, finite number, server value, or null).');
                }
            }
            mergePaths.push(curPath);
        });
        validateFirebaseMergePaths(errorPrefix, mergePaths);
    };
    var validatePriority = function (fnName, argumentNumber, priority, optional) {
        if (optional && priority === undefined) {
            return;
        }
        if (isInvalidJSONNumber(priority)) {
            throw new Error(index_cjs.errorPrefix(fnName, argumentNumber, optional) +
                'is ' +
                priority.toString() +
                ', but must be a valid Firebase priority (a string, finite number, ' +
                'server value, or null).');
        }
        // Special case to allow importing data with a .sv.
        if (!isValidPriority(priority)) {
            throw new Error(index_cjs.errorPrefix(fnName, argumentNumber, optional) +
                'must be a valid Firebase priority ' +
                '(a string, finite number, server value, or null).');
        }
    };
    var validateEventType = function (fnName, argumentNumber, eventType, optional) {
        if (optional && eventType === undefined) {
            return;
        }
        switch (eventType) {
            case 'value':
            case 'child_added':
            case 'child_removed':
            case 'child_changed':
            case 'child_moved':
                break;
            default:
                throw new Error(index_cjs.errorPrefix(fnName, argumentNumber, optional) +
                    'must be a valid event type = "value", "child_added", "child_removed", ' +
                    '"child_changed", or "child_moved".');
        }
    };
    var validateKey = function (fnName, argumentNumber, key, optional) {
        if (optional && key === undefined) {
            return;
        }
        if (!isValidKey(key)) {
            throw new Error(index_cjs.errorPrefix(fnName, argumentNumber, optional) +
                'was an invalid key = "' +
                key +
                '".  Firebase keys must be non-empty strings and ' +
                'can\'t contain ".", "#", "$", "/", "[", or "]").');
        }
    };
    var validatePathString = function (fnName, argumentNumber, pathString, optional) {
        if (optional && pathString === undefined) {
            return;
        }
        if (!isValidPathString(pathString)) {
            throw new Error(index_cjs.errorPrefix(fnName, argumentNumber, optional) +
                'was an invalid path = "' +
                pathString +
                '". Paths must be non-empty strings and ' +
                'can\'t contain ".", "#", "$", "[", or "]"');
        }
    };
    var validateRootPathString = function (fnName, argumentNumber, pathString, optional) {
        if (pathString) {
            // Allow '/.info/' at the beginning.
            pathString = pathString.replace(/^\/*\.info(\/|$)/, '/');
        }
        validatePathString(fnName, argumentNumber, pathString, optional);
    };
    var validateWritablePath = function (fnName, path) {
        if (path.getFront() === '.info') {
            throw new Error(fnName + " failed = Can't modify data under /.info/");
        }
    };
    var validateUrl = function (fnName, argumentNumber, parsedUrl) {
        // TODO = Validate server better.
        var pathString = parsedUrl.path.toString();
        if (!(typeof parsedUrl.repoInfo.host === 'string') ||
            parsedUrl.repoInfo.host.length === 0 ||
            (!isValidKey(parsedUrl.repoInfo.namespace) &&
                parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||
            (pathString.length !== 0 && !isValidRootPathString(pathString))) {
            throw new Error(index_cjs.errorPrefix(fnName, argumentNumber, false) +
                'must be a valid firebase URL and ' +
                'the path can\'t contain ".", "#", "$", "[", or "]".');
        }
    };
    var validateBoolean = function (fnName, argumentNumber, bool, optional) {
        if (optional && bool === undefined) {
            return;
        }
        if (typeof bool !== 'boolean') {
            throw new Error(index_cjs.errorPrefix(fnName, argumentNumber, optional) + 'must be a boolean.');
        }
    };

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @constructor
     */
    var OnDisconnect = /** @class */ (function () {
        /**
         * @param {!Repo} repo_
         * @param {!Path} path_
         */
        function OnDisconnect(repo_, path_) {
            this.repo_ = repo_;
            this.path_ = path_;
        }
        /**
         * @param {function(?Error)=} onComplete
         * @return {!firebase.Promise}
         */
        OnDisconnect.prototype.cancel = function (onComplete) {
            index_cjs.validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);
            index_cjs.validateCallback('OnDisconnect.cancel', 1, onComplete, true);
            var deferred = new index_cjs.Deferred();
            this.repo_.onDisconnectCancel(this.path_, deferred.wrapCallback(onComplete));
            return deferred.promise;
        };
        /**
         * @param {function(?Error)=} onComplete
         * @return {!firebase.Promise}
         */
        OnDisconnect.prototype.remove = function (onComplete) {
            index_cjs.validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);
            validateWritablePath('OnDisconnect.remove', this.path_);
            index_cjs.validateCallback('OnDisconnect.remove', 1, onComplete, true);
            var deferred = new index_cjs.Deferred();
            this.repo_.onDisconnectSet(this.path_, null, deferred.wrapCallback(onComplete));
            return deferred.promise;
        };
        /**
         * @param {*} value
         * @param {function(?Error)=} onComplete
         * @return {!firebase.Promise}
         */
        OnDisconnect.prototype.set = function (value, onComplete) {
            index_cjs.validateArgCount('OnDisconnect.set', 1, 2, arguments.length);
            validateWritablePath('OnDisconnect.set', this.path_);
            validateFirebaseDataArg('OnDisconnect.set', 1, value, this.path_, false);
            index_cjs.validateCallback('OnDisconnect.set', 2, onComplete, true);
            var deferred = new index_cjs.Deferred();
            this.repo_.onDisconnectSet(this.path_, value, deferred.wrapCallback(onComplete));
            return deferred.promise;
        };
        /**
         * @param {*} value
         * @param {number|string|null} priority
         * @param {function(?Error)=} onComplete
         * @return {!firebase.Promise}
         */
        OnDisconnect.prototype.setWithPriority = function (value, priority, onComplete) {
            index_cjs.validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);
            validateWritablePath('OnDisconnect.setWithPriority', this.path_);
            validateFirebaseDataArg('OnDisconnect.setWithPriority', 1, value, this.path_, false);
            validatePriority('OnDisconnect.setWithPriority', 2, priority, false);
            index_cjs.validateCallback('OnDisconnect.setWithPriority', 3, onComplete, true);
            var deferred = new index_cjs.Deferred();
            this.repo_.onDisconnectSetWithPriority(this.path_, value, priority, deferred.wrapCallback(onComplete));
            return deferred.promise;
        };
        /**
         * @param {!Object} objectToMerge
         * @param {function(?Error)=} onComplete
         * @return {!firebase.Promise}
         */
        OnDisconnect.prototype.update = function (objectToMerge, onComplete) {
            index_cjs.validateArgCount('OnDisconnect.update', 1, 2, arguments.length);
            validateWritablePath('OnDisconnect.update', this.path_);
            if (Array.isArray(objectToMerge)) {
                var newObjectToMerge = {};
                for (var i = 0; i < objectToMerge.length; ++i) {
                    newObjectToMerge['' + i] = objectToMerge[i];
                }
                objectToMerge = newObjectToMerge;
                warn('Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' +
                    'existing data, or an Object with integer keys if you really do want to only update some of the children.');
            }
            validateFirebaseMergeDataArg('OnDisconnect.update', 1, objectToMerge, this.path_, false);
            index_cjs.validateCallback('OnDisconnect.update', 2, onComplete, true);
            var deferred = new index_cjs.Deferred();
            this.repo_.onDisconnectUpdate(this.path_, objectToMerge, deferred.wrapCallback(onComplete));
            return deferred.promise;
        };
        return OnDisconnect;
    }());

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var TransactionResult = /** @class */ (function () {
        /**
         * A type for the resolve value of Firebase.transaction.
         * @constructor
         * @dict
         * @param {boolean} committed
         * @param {DataSnapshot} snapshot
         */
        function TransactionResult(committed, snapshot) {
            this.committed = committed;
            this.snapshot = snapshot;
        }
        // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary
        // for end-users
        TransactionResult.prototype.toJSON = function () {
            index_cjs.validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);
            return { committed: this.committed, snapshot: this.snapshot.toJSON() };
        };
        return TransactionResult;
    }());

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Fancy ID generator that creates 20-character string identifiers with the
     * following properties:
     *
     * 1. They're based on timestamp so that they sort *after* any existing ids.
     * 2. They contain 72-bits of random data after the timestamp so that IDs won't
     *    collide with other clients' IDs.
     * 3. They sort *lexicographically* (so the timestamp is converted to characters
     *    that will sort properly).
     * 4. They're monotonically increasing. Even if you generate more than one in
     *    the same timestamp, the latter ones will sort after the former ones. We do
     *    this by using the previous random bits but "incrementing" them by 1 (only
     *    in the case of a timestamp collision).
     */
    var nextPushId = (function () {
        // Modeled after base64 web-safe chars, but ordered by ASCII.
        var PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';
        // Timestamp of last push, used to prevent local collisions if you push twice
        // in one ms.
        var lastPushTime = 0;
        // We generate 72-bits of randomness which get turned into 12 characters and
        // appended to the timestamp to prevent collisions with other clients. We
        // store the last characters we generated because in the event of a collision,
        // we'll use those same characters except "incremented" by one.
        var lastRandChars = [];
        return function (now) {
            var duplicateTime = now === lastPushTime;
            lastPushTime = now;
            var i;
            var timeStampChars = new Array(8);
            for (i = 7; i >= 0; i--) {
                timeStampChars[i] = PUSH_CHARS.charAt(now % 64);
                // NOTE: Can't use << here because javascript will convert to int and lose
                // the upper bits.
                now = Math.floor(now / 64);
            }
            index_cjs.assert(now === 0, 'Cannot push at time == 0');
            var id = timeStampChars.join('');
            if (!duplicateTime) {
                for (i = 0; i < 12; i++) {
                    lastRandChars[i] = Math.floor(Math.random() * 64);
                }
            }
            else {
                // If the timestamp hasn't changed since last push, use the same random
                // number, except incremented by 1.
                for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {
                    lastRandChars[i] = 0;
                }
                lastRandChars[i]++;
            }
            for (i = 0; i < 12; i++) {
                id += PUSH_CHARS.charAt(lastRandChars[i]);
            }
            index_cjs.assert(id.length === 20, 'nextPushId: Length should be 20.');
            return id;
        };
    })();

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     *
     * @param {!string} name
     * @param {!Node} node
     * @constructor
     * @struct
     */
    var NamedNode = /** @class */ (function () {
        function NamedNode(name, node) {
            this.name = name;
            this.node = node;
        }
        /**
         *
         * @param {!string} name
         * @param {!Node} node
         * @return {NamedNode}
         */
        NamedNode.Wrap = function (name, node) {
            return new NamedNode(name, node);
        };
        return NamedNode;
    }());

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     *
     * @constructor
     */
    var Index = /** @class */ (function () {
        function Index() {
        }
        /**
         * @return {function(!NamedNode, !NamedNode):number} A standalone comparison function for
         * this index
         */
        Index.prototype.getCompare = function () {
            return this.compare.bind(this);
        };
        /**
         * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,
         * it's possible that the changes are isolated to parts of the snapshot that are not indexed.
         *
         * @param {!Node} oldNode
         * @param {!Node} newNode
         * @return {boolean} True if the portion of the snapshot being indexed changed between oldNode and newNode
         */
        Index.prototype.indexedValueChanged = function (oldNode, newNode) {
            var oldWrapped = new NamedNode(MIN_NAME, oldNode);
            var newWrapped = new NamedNode(MIN_NAME, newNode);
            return this.compare(oldWrapped, newWrapped) !== 0;
        };
        /**
         * @return {!NamedNode} a node wrapper that will sort equal to or less than
         * any other node wrapper, using this index
         */
        Index.prototype.minPost = function () {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            return NamedNode.MIN;
        };
        return Index;
    }());

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var __EMPTY_NODE;
    var KeyIndex = /** @class */ (function (_super) {
        tslib_es6.__extends(KeyIndex, _super);
        function KeyIndex() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(KeyIndex, "__EMPTY_NODE", {
            get: function () {
                return __EMPTY_NODE;
            },
            set: function (val) {
                __EMPTY_NODE = val;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @inheritDoc
         */
        KeyIndex.prototype.compare = function (a, b) {
            return nameCompare(a.name, b.name);
        };
        /**
         * @inheritDoc
         */
        KeyIndex.prototype.isDefinedOn = function (node) {
            // We could probably return true here (since every node has a key), but it's never called
            // so just leaving unimplemented for now.
            throw index_cjs.assertionError('KeyIndex.isDefinedOn not expected to be called.');
        };
        /**
         * @inheritDoc
         */
        KeyIndex.prototype.indexedValueChanged = function (oldNode, newNode) {
            return false; // The key for a node never changes.
        };
        /**
         * @inheritDoc
         */
        KeyIndex.prototype.minPost = function () {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            return NamedNode.MIN;
        };
        /**
         * @inheritDoc
         */
        KeyIndex.prototype.maxPost = function () {
            // TODO: This should really be created once and cached in a static property, but
            // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.
            return new NamedNode(MAX_NAME, __EMPTY_NODE);
        };
        /**
         * @param {*} indexValue
         * @param {string} name
         * @return {!NamedNode}
         */
        KeyIndex.prototype.makePost = function (indexValue, name) {
            index_cjs.assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');
            // We just use empty node, but it'll never be compared, since our comparator only looks at name.
            return new NamedNode(indexValue, __EMPTY_NODE);
        };
        /**
         * @return {!string} String representation for inclusion in a query spec
         */
        KeyIndex.prototype.toString = function () {
            return '.key';
        };
        return KeyIndex;
    }(Index));
    var KEY_INDEX = new KeyIndex();

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var MAX_NODE;
    function setMaxNode(val) {
        MAX_NODE = val;
    }
    /**
     * @param {(!string|!number)} priority
     * @return {!string}
     */
    var priorityHashText = function (priority) {
        if (typeof priority === 'number') {
            return 'number:' + doubleToIEEE754String(priority);
        }
        else {
            return 'string:' + priority;
        }
    };
    /**
     * Validates that a priority snapshot Node is valid.
     *
     * @param {!Node} priorityNode
     */
    var validatePriorityNode = function (priorityNode) {
        if (priorityNode.isLeafNode()) {
            var val = priorityNode.val();
            index_cjs.assert(typeof val === 'string' ||
                typeof val === 'number' ||
                (typeof val === 'object' && index_cjs.contains(val, '.sv')), 'Priority must be a string or number.');
        }
        else {
            index_cjs.assert(priorityNode === MAX_NODE || priorityNode.isEmpty(), 'priority of unexpected type.');
        }
        // Don't call getPriority() on MAX_NODE to avoid hitting assertion.
        index_cjs.assert(priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(), "Priority nodes can't have a priority of their own.");
    };

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var __childrenNodeConstructor;
    /**
     * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It
     * implements Node and stores the value of the node (a string,
     * number, or boolean) accessible via getValue().
     */
    var LeafNode = /** @class */ (function () {
        /**
         * @implements {Node}
         * @param {!(string|number|boolean|Object)} value_ The value to store in this leaf node.
         *                                         The object type is possible in the event of a deferred value
         * @param {!Node=} priorityNode_ The priority of this node.
         */
        function LeafNode(value_, priorityNode_) {
            if (priorityNode_ === void 0) { priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE; }
            this.value_ = value_;
            this.priorityNode_ = priorityNode_;
            this.lazyHash_ = null;
            index_cjs.assert(this.value_ !== undefined && this.value_ !== null, "LeafNode shouldn't be created with null/undefined value.");
            validatePriorityNode(this.priorityNode_);
        }
        Object.defineProperty(LeafNode, "__childrenNodeConstructor", {
            get: function () {
                return __childrenNodeConstructor;
            },
            set: function (val) {
                __childrenNodeConstructor = val;
            },
            enumerable: true,
            configurable: true
        });
        /** @inheritDoc */
        LeafNode.prototype.isLeafNode = function () {
            return true;
        };
        /** @inheritDoc */
        LeafNode.prototype.getPriority = function () {
            return this.priorityNode_;
        };
        /** @inheritDoc */
        LeafNode.prototype.updatePriority = function (newPriorityNode) {
            return new LeafNode(this.value_, newPriorityNode);
        };
        /** @inheritDoc */
        LeafNode.prototype.getImmediateChild = function (childName) {
            // Hack to treat priority as a regular child
            if (childName === '.priority') {
                return this.priorityNode_;
            }
            else {
                return LeafNode.__childrenNodeConstructor.EMPTY_NODE;
            }
        };
        /** @inheritDoc */
        LeafNode.prototype.getChild = function (path) {
            if (path.isEmpty()) {
                return this;
            }
            else if (path.getFront() === '.priority') {
                return this.priorityNode_;
            }
            else {
                return LeafNode.__childrenNodeConstructor.EMPTY_NODE;
            }
        };
        /**
         * @inheritDoc
         */
        LeafNode.prototype.hasChild = function () {
            return false;
        };
        /** @inheritDoc */
        LeafNode.prototype.getPredecessorChildName = function (childName, childNode) {
            return null;
        };
        /** @inheritDoc */
        LeafNode.prototype.updateImmediateChild = function (childName, newChildNode) {
            if (childName === '.priority') {
                return this.updatePriority(newChildNode);
            }
            else if (newChildNode.isEmpty() && childName !== '.priority') {
                return this;
            }
            else {
                return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);
            }
        };
        /** @inheritDoc */
        LeafNode.prototype.updateChild = function (path, newChildNode) {
            var front = path.getFront();
            if (front === null) {
                return newChildNode;
            }
            else if (newChildNode.isEmpty() && front !== '.priority') {
                return this;
            }
            else {
                index_cjs.assert(front !== '.priority' || path.getLength() === 1, '.priority must be the last token in a path');
                return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(path.popFront(), newChildNode));
            }
        };
        /** @inheritDoc */
        LeafNode.prototype.isEmpty = function () {
            return false;
        };
        /** @inheritDoc */
        LeafNode.prototype.numChildren = function () {
            return 0;
        };
        /** @inheritDoc */
        LeafNode.prototype.forEachChild = function (index, action) {
            return false;
        };
        /**
         * @inheritDoc
         */
        LeafNode.prototype.val = function (exportFormat) {
            if (exportFormat && !this.getPriority().isEmpty()) {
                return {
                    '.value': this.getValue(),
                    '.priority': this.getPriority().val()
                };
            }
            else {
                return this.getValue();
            }
        };
        /** @inheritDoc */
        LeafNode.prototype.hash = function () {
            if (this.lazyHash_ === null) {
                var toHash = '';
                if (!this.priorityNode_.isEmpty()) {
                    toHash +=
                        'priority:' +
                            priorityHashText(this.priorityNode_.val()) +
                            ':';
                }
                var type = typeof this.value_;
                toHash += type + ':';
                if (type === 'number') {
                    toHash += doubleToIEEE754String(this.value_);
                }
                else {
                    toHash += this.value_;
                }
                this.lazyHash_ = sha1(toHash);
            }
            return this.lazyHash_;
        };
        /**
         * Returns the value of the leaf node.
         * @return {Object|string|number|boolean} The value of the node.
         */
        LeafNode.prototype.getValue = function () {
            return this.value_;
        };
        /**
         * @inheritDoc
         */
        LeafNode.prototype.compareTo = function (other) {
            if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {
                return 1;
            }
            else if (other instanceof LeafNode.__childrenNodeConstructor) {
                return -1;
            }
            else {
                index_cjs.assert(other.isLeafNode(), 'Unknown node type');
                return this.compareToLeafNode_(other);
            }
        };
        /**
         * Comparison specifically for two leaf nodes
         * @param {!LeafNode} otherLeaf
         * @return {!number}
         * @private
         */
        LeafNode.prototype.compareToLeafNode_ = function (otherLeaf) {
            var otherLeafType = typeof otherLeaf.value_;
            var thisLeafType = typeof this.value_;
            var otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);
            var thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);
            index_cjs.assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);
            index_cjs.assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);
            if (otherIndex === thisIndex) {
                // Same type, compare values
                if (thisLeafType === 'object') {
                    // Deferred value nodes are all equal, but we should also never get to this point...
                    return 0;
                }
                else {
                    // Note that this works because true > false, all others are number or string comparisons
                    if (this.value_ < otherLeaf.value_) {
                        return -1;
                    }
                    else if (this.value_ === otherLeaf.value_) {
                        return 0;
                    }
                    else {
                        return 1;
                    }
                }
            }
            else {
                return thisIndex - otherIndex;
            }
        };
        /**
         * @inheritDoc
         */
        LeafNode.prototype.withIndex = function () {
            return this;
        };
        /**
         * @inheritDoc
         */
        LeafNode.prototype.isIndexed = function () {
            return true;
        };
        /**
         * @inheritDoc
         */
        LeafNode.prototype.equals = function (other) {
            /**
             * @inheritDoc
             */
            if (other === this) {
                return true;
            }
            else if (other.isLeafNode()) {
                var otherLeaf = other;
                return (this.value_ === otherLeaf.value_ &&
                    this.priorityNode_.equals(otherLeaf.priorityNode_));
            }
            else {
                return false;
            }
        };
        /**
         * The sort order for comparing leaf nodes of different types. If two leaf nodes have
         * the same type, the comparison falls back to their value
         * @type {Array.<!string>}
         * @const
         */
        LeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];
        return LeafNode;
    }());

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var nodeFromJSON;
    var MAX_NODE$1;
    function setNodeFromJSON(val) {
        nodeFromJSON = val;
    }
    function setMaxNode$1(val) {
        MAX_NODE$1 = val;
    }
    /**
     * @constructor
     * @extends {Index}
     * @private
     */
    var PriorityIndex = /** @class */ (function (_super) {
        tslib_es6.__extends(PriorityIndex, _super);
        function PriorityIndex() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @inheritDoc
         */
        PriorityIndex.prototype.compare = function (a, b) {
            var aPriority = a.node.getPriority();
            var bPriority = b.node.getPriority();
            var indexCmp = aPriority.compareTo(bPriority);
            if (indexCmp === 0) {
                return nameCompare(a.name, b.name);
            }
            else {
                return indexCmp;
            }
        };
        /**
         * @inheritDoc
         */
        PriorityIndex.prototype.isDefinedOn = function (node) {
            return !node.getPriority().isEmpty();
        };
        /**
         * @inheritDoc
         */
        PriorityIndex.prototype.indexedValueChanged = function (oldNode, newNode) {
            return !oldNode.getPriority().equals(newNode.getPriority());
        };
        /**
         * @inheritDoc
         */
        PriorityIndex.prototype.minPost = function () {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            return NamedNode.MIN;
        };
        /**
         * @inheritDoc
         */
        PriorityIndex.prototype.maxPost = function () {
            return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));
        };
        /**
         * @param {*} indexValue
         * @param {string} name
         * @return {!NamedNode}
         */
        PriorityIndex.prototype.makePost = function (indexValue, name) {
            var priorityNode = nodeFromJSON(indexValue);
            return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));
        };
        /**
         * @return {!string} String representation for inclusion in a query spec
         */
        PriorityIndex.prototype.toString = function () {
            return '.priority';
        };
        return PriorityIndex;
    }(Index));
    var PRIORITY_INDEX = new PriorityIndex();

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An iterator over an LLRBNode.
     */
    var SortedMapIterator = /** @class */ (function () {
        /**
         * @template K, V, T
         * @param {LLRBNode|LLRBEmptyNode} node Node to iterate.
         * @param {?K} startKey
         * @param {function(K, K): number} comparator
         * @param {boolean} isReverse_ Whether or not to iterate in reverse
         * @param {(function(K, V):T)=} resultGenerator_
         */
        function SortedMapIterator(node, startKey, comparator, isReverse_, resultGenerator_) {
            if (resultGenerator_ === void 0) { resultGenerator_ = null; }
            this.isReverse_ = isReverse_;
            this.resultGenerator_ = resultGenerator_;
            /** @private
             * @type {Array.<!LLRBNode>}
             */
            this.nodeStack_ = [];
            var cmp = 1;
            while (!node.isEmpty()) {
                node = node;
                cmp = startKey ? comparator(node.key, startKey) : 1;
                // flip the comparison if we're going in reverse
                if (isReverse_) {
                    cmp *= -1;
                }
                if (cmp < 0) {
                    // This node is less than our start key. ignore it
                    if (this.isReverse_) {
                        node = node.left;
                    }
                    else {
                        node = node.right;
                    }
                }
                else if (cmp === 0) {
                    // This node is exactly equal to our start key. Push it on the stack, but stop iterating;
                    this.nodeStack_.push(node);
                    break;
                }
                else {
                    // This node is greater than our start key, add it to the stack and move to the next one
                    this.nodeStack_.push(node);
                    if (this.isReverse_) {
                        node = node.right;
                    }
                    else {
                        node = node.left;
                    }
                }
            }
        }
        SortedMapIterator.prototype.getNext = function () {
            if (this.nodeStack_.length === 0) {
                return null;
            }
            var node = this.nodeStack_.pop();
            var result;
            if (this.resultGenerator_) {
                result = this.resultGenerator_(node.key, node.value);
            }
            else {
                result = { key: node.key, value: node.value };
            }
            if (this.isReverse_) {
                node = node.left;
                while (!node.isEmpty()) {
                    this.nodeStack_.push(node);
                    node = node.right;
                }
            }
            else {
                node = node.right;
                while (!node.isEmpty()) {
                    this.nodeStack_.push(node);
                    node = node.left;
                }
            }
            return result;
        };
        SortedMapIterator.prototype.hasNext = function () {
            return this.nodeStack_.length > 0;
        };
        SortedMapIterator.prototype.peek = function () {
            if (this.nodeStack_.length === 0) {
                return null;
            }
            var node = this.nodeStack_[this.nodeStack_.length - 1];
            if (this.resultGenerator_) {
                return this.resultGenerator_(node.key, node.value);
            }
            else {
                return { key: node.key, value: node.value };
            }
        };
        return SortedMapIterator;
    }());
    /**
     * Represents a node in a Left-leaning Red-Black tree.
     */
    var LLRBNode = /** @class */ (function () {
        /**
         * @template K, V
         * @param {!K} key Key associated with this node.
         * @param {!V} value Value associated with this node.
         * @param {?boolean} color Whether this node is red.
         * @param {?(LLRBNode|LLRBEmptyNode)=} left Left child.
         * @param {?(LLRBNode|LLRBEmptyNode)=} right Right child.
         */
        function LLRBNode(key, value, color, left, right) {
            this.key = key;
            this.value = value;
            this.color = color != null ? color : LLRBNode.RED;
            this.left =
                left != null ? left : SortedMap.EMPTY_NODE;
            this.right =
                right != null ? right : SortedMap.EMPTY_NODE;
        }
        /**
         * Returns a copy of the current node, optionally replacing pieces of it.
         *
         * @param {?K} key New key for the node, or null.
         * @param {?V} value New value for the node, or null.
         * @param {?boolean} color New color for the node, or null.
         * @param {?LLRBNode|LLRBEmptyNode} left New left child for the node, or null.
         * @param {?LLRBNode|LLRBEmptyNode} right New right child for the node, or null.
         * @return {!LLRBNode} The node copy.
         */
        LLRBNode.prototype.copy = function (key, value, color, left, right) {
            return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);
        };
        /**
         * @return {number} The total number of nodes in the tree.
         */
        LLRBNode.prototype.count = function () {
            return this.left.count() + 1 + this.right.count();
        };
        /**
         * @return {boolean} True if the tree is empty.
         */
        LLRBNode.prototype.isEmpty = function () {
            return false;
        };
        /**
         * Traverses the tree in key order and calls the specified action function
         * for each node.
         *
         * @param {function(!K, !V):*} action Callback function to be called for each
         *   node.  If it returns true, traversal is aborted.
         * @return {*} The first truthy value returned by action, or the last falsey
         *   value returned by action
         */
        LLRBNode.prototype.inorderTraversal = function (action) {
            return (this.left.inorderTraversal(action) ||
                !!action(this.key, this.value) ||
                this.right.inorderTraversal(action));
        };
        /**
         * Traverses the tree in reverse key order and calls the specified action function
         * for each node.
         *
         * @param {function(!Object, !Object)} action Callback function to be called for each
         * node.  If it returns true, traversal is aborted.
         * @return {*} True if traversal was aborted.
         */
        LLRBNode.prototype.reverseTraversal = function (action) {
            return (this.right.reverseTraversal(action) ||
                action(this.key, this.value) ||
                this.left.reverseTraversal(action));
        };
        /**
         * @return {!Object} The minimum node in the tree.
         * @private
         */
        LLRBNode.prototype.min_ = function () {
            if (this.left.isEmpty()) {
                return this;
            }
            else {
                return this.left.min_();
            }
        };
        /**
         * @return {!K} The maximum key in the tree.
         */
        LLRBNode.prototype.minKey = function () {
            return this.min_().key;
        };
        /**
         * @return {!K} The maximum key in the tree.
         */
        LLRBNode.prototype.maxKey = function () {
            if (this.right.isEmpty()) {
                return this.key;
            }
            else {
                return this.right.maxKey();
            }
        };
        /**
         *
         * @param {!Object} key Key to insert.
         * @param {!Object} value Value to insert.
         * @param {Comparator} comparator Comparator.
         * @return {!LLRBNode} New tree, with the key/value added.
         */
        LLRBNode.prototype.insert = function (key, value, comparator) {
            var n = this;
            var cmp = comparator(key, n.key);
            if (cmp < 0) {
                n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);
            }
            else if (cmp === 0) {
                n = n.copy(null, value, null, null, null);
            }
            else {
                n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));
            }
            return n.fixUp_();
        };
        /**
         * @private
         * @return {!LLRBNode|LLRBEmptyNode} New tree, with the minimum key removed.
         */
        LLRBNode.prototype.removeMin_ = function () {
            if (this.left.isEmpty()) {
                return SortedMap.EMPTY_NODE;
            }
            var n = this;
            if (!n.left.isRed_() && !n.left.left.isRed_()) {
                n = n.moveRedLeft_();
            }
            n = n.copy(null, null, null, n.left.removeMin_(), null);
            return n.fixUp_();
        };
        /**
         * @param {!Object} key The key of the item to remove.
         * @param {Comparator} comparator Comparator.
         * @return {!LLRBNode|LLRBEmptyNode} New tree, with the specified item removed.
         */
        LLRBNode.prototype.remove = function (key, comparator) {
            var n, smallest;
            n = this;
            if (comparator(key, n.key) < 0) {
                if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {
                    n = n.moveRedLeft_();
                }
                n = n.copy(null, null, null, n.left.remove(key, comparator), null);
            }
            else {
                if (n.left.isRed_()) {
                    n = n.rotateRight_();
                }
                if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {
                    n = n.moveRedRight_();
                }
                if (comparator(key, n.key) === 0) {
                    if (n.right.isEmpty()) {
                        return SortedMap.EMPTY_NODE;
                    }
                    else {
                        smallest = n.right.min_();
                        n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());
                    }
                }
                n = n.copy(null, null, null, null, n.right.remove(key, comparator));
            }
            return n.fixUp_();
        };
        /**
         * @private
         * @return {boolean} Whether this is a RED node.
         */
        LLRBNode.prototype.isRed_ = function () {
            return this.color;
        };
        /**
         * @private
         * @return {!LLRBNode} New tree after performing any needed rotations.
         */
        LLRBNode.prototype.fixUp_ = function () {
            var n = this;
            if (n.right.isRed_() && !n.left.isRed_()) {
                n = n.rotateLeft_();
            }
            if (n.left.isRed_() && n.left.left.isRed_()) {
                n = n.rotateRight_();
            }
            if (n.left.isRed_() && n.right.isRed_()) {
                n = n.colorFlip_();
            }
            return n;
        };
        /**
         * @private
         * @return {!LLRBNode} New tree, after moveRedLeft.
         */
        LLRBNode.prototype.moveRedLeft_ = function () {
            var n = this.colorFlip_();
            if (n.right.left.isRed_()) {
                n = n.copy(null, null, null, null, n.right.rotateRight_());
                n = n.rotateLeft_();
                n = n.colorFlip_();
            }
            return n;
        };
        /**
         * @private
         * @return {!LLRBNode} New tree, after moveRedRight.
         */
        LLRBNode.prototype.moveRedRight_ = function () {
            var n = this.colorFlip_();
            if (n.left.left.isRed_()) {
                n = n.rotateRight_();
                n = n.colorFlip_();
            }
            return n;
        };
        /**
         * @private
         * @return {!LLRBNode} New tree, after rotateLeft.
         */
        LLRBNode.prototype.rotateLeft_ = function () {
            var nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);
            return this.right.copy(null, null, this.color, nl, null);
        };
        /**
         * @private
         * @return {!LLRBNode} New tree, after rotateRight.
         */
        LLRBNode.prototype.rotateRight_ = function () {
            var nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);
            return this.left.copy(null, null, this.color, null, nr);
        };
        /**
         * @private
         * @return {!LLRBNode} New tree, after colorFlip.
         */
        LLRBNode.prototype.colorFlip_ = function () {
            var left = this.left.copy(null, null, !this.left.color, null, null);
            var right = this.right.copy(null, null, !this.right.color, null, null);
            return this.copy(null, null, !this.color, left, right);
        };
        /**
         * For testing.
         *
         * @private
         * @return {boolean} True if all is well.
         */
        LLRBNode.prototype.checkMaxDepth_ = function () {
            var blackDepth = this.check_();
            return Math.pow(2.0, blackDepth) <= this.count() + 1;
        };
        /**
         * @private
         * @return {number} Not sure what this returns exactly. :-).
         */
        LLRBNode.prototype.check_ = function () {
            if (this.isRed_() && this.left.isRed_()) {
                throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');
            }
            if (this.right.isRed_()) {
                throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');
            }
            var blackDepth = this.left.check_();
            if (blackDepth !== this.right.check_()) {
                throw new Error('Black depths differ');
            }
            else {
                return blackDepth + (this.isRed_() ? 0 : 1);
            }
        };
        LLRBNode.RED = true;
        LLRBNode.BLACK = false;
        return LLRBNode;
    }());
    /**
     * Represents an empty node (a leaf node in the Red-Black Tree).
     */
    var LLRBEmptyNode = /** @class */ (function () {
        function LLRBEmptyNode() {
        }
        /**
         * Returns a copy of the current node.
         *
         * @return {!LLRBEmptyNode} The node copy.
         */
        LLRBEmptyNode.prototype.copy = function (key, value, color, left, right) {
            return this;
        };
        /**
         * Returns a copy of the tree, with the specified key/value added.
         *
         * @param {!K} key Key to be added.
         * @param {!V} value Value to be added.
         * @param {Comparator} comparator Comparator.
         * @return {!LLRBNode} New tree, with item added.
         */
        LLRBEmptyNode.prototype.insert = function (key, value, comparator) {
            return new LLRBNode(key, value, null);
        };
        /**
         * Returns a copy of the tree, with the specified key removed.
         *
         * @param {!K} key The key to remove.
         * @param {Comparator} comparator Comparator.
         * @return {!LLRBEmptyNode} New tree, with item removed.
         */
        LLRBEmptyNode.prototype.remove = function (key, comparator) {
            return this;
        };
        /**
         * @return {number} The total number of nodes in the tree.
         */
        LLRBEmptyNode.prototype.count = function () {
            return 0;
        };
        /**
         * @return {boolean} True if the tree is empty.
         */
        LLRBEmptyNode.prototype.isEmpty = function () {
            return true;
        };
        /**
         * Traverses the tree in key order and calls the specified action function
         * for each node.
         *
         * @param {function(!K, !V):*} action Callback function to be called for each
         * node.  If it returns true, traversal is aborted.
         * @return {boolean} True if traversal was aborted.
         */
        LLRBEmptyNode.prototype.inorderTraversal = function (action) {
            return false;
        };
        /**
         * Traverses the tree in reverse key order and calls the specified action function
         * for each node.
         *
         * @param {function(!K, !V)} action Callback function to be called for each
         * node.  If it returns true, traversal is aborted.
         * @return {boolean} True if traversal was aborted.
         */
        LLRBEmptyNode.prototype.reverseTraversal = function (action) {
            return false;
        };
        /**
         * @return {null}
         */
        LLRBEmptyNode.prototype.minKey = function () {
            return null;
        };
        /**
         * @return {null}
         */
        LLRBEmptyNode.prototype.maxKey = function () {
            return null;
        };
        /**
         * @private
         * @return {number} Not sure what this returns exactly. :-).
         */
        LLRBEmptyNode.prototype.check_ = function () {
            return 0;
        };
        /**
         * @private
         * @return {boolean} Whether this node is red.
         */
        LLRBEmptyNode.prototype.isRed_ = function () {
            return false;
        };
        return LLRBEmptyNode;
    }());
    /**
     * An immutable sorted map implementation, based on a Left-leaning Red-Black
     * tree.
     */
    var SortedMap = /** @class */ (function () {
        /**
         * @template K, V
         * @param {function(K, K):number} comparator_ Key comparator.
         * @param {LLRBNode=} root_ (Optional) Root node for the map.
         */
        function SortedMap(comparator_, root_) {
            if (root_ === void 0) { root_ = SortedMap.EMPTY_NODE; }
            this.comparator_ = comparator_;
            this.root_ = root_;
        }
        /**
         * Returns a copy of the map, with the specified key/value added or replaced.
         * (TODO: We should perhaps rename this method to 'put')
         *
         * @param {!K} key Key to be added.
         * @param {!V} value Value to be added.
         * @return {!SortedMap.<K, V>} New map, with item added.
         */
        SortedMap.prototype.insert = function (key, value) {
            return new SortedMap(this.comparator_, this.root_
                .insert(key, value, this.comparator_)
                .copy(null, null, LLRBNode.BLACK, null, null));
        };
        /**
         * Returns a copy of the map, with the specified key removed.
         *
         * @param {!K} key The key to remove.
         * @return {!SortedMap.<K, V>} New map, with item removed.
         */
        SortedMap.prototype.remove = function (key) {
            return new SortedMap(this.comparator_, this.root_
                .remove(key, this.comparator_)
                .copy(null, null, LLRBNode.BLACK, null, null));
        };
        /**
         * Returns the value of the node with the given key, or null.
         *
         * @param {!K} key The key to look up.
         * @return {?V} The value of the node with the given key, or null if the
         * key doesn't exist.
         */
        SortedMap.prototype.get = function (key) {
            var cmp;
            var node = this.root_;
            while (!node.isEmpty()) {
                cmp = this.comparator_(key, node.key);
                if (cmp === 0) {
                    return node.value;
                }
                else if (cmp < 0) {
                    node = node.left;
                }
                else if (cmp > 0) {
                    node = node.right;
                }
            }
            return null;
        };
        /**
         * Returns the key of the item *before* the specified key, or null if key is the first item.
         * @param {K} key The key to find the predecessor of
         * @return {?K} The predecessor key.
         */
        SortedMap.prototype.getPredecessorKey = function (key) {
            var cmp, node = this.root_, rightParent = null;
            while (!node.isEmpty()) {
                cmp = this.comparator_(key, node.key);
                if (cmp === 0) {
                    if (!node.left.isEmpty()) {
                        node = node.left;
                        while (!node.right.isEmpty()) {
                            node = node.right;
                        }
                        return node.key;
                    }
                    else if (rightParent) {
                        return rightParent.key;
                    }
                    else {
                        return null; // first item.
                    }
                }
                else if (cmp < 0) {
                    node = node.left;
                }
                else if (cmp > 0) {
                    rightParent = node;
                    node = node.right;
                }
            }
            throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');
        };
        /**
         * @return {boolean} True if the map is empty.
         */
        SortedMap.prototype.isEmpty = function () {
            return this.root_.isEmpty();
        };
        /**
         * @return {number} The total number of nodes in the map.
         */
        SortedMap.prototype.count = function () {
            return this.root_.count();
        };
        /**
         * @return {?K} The minimum key in the map.
         */
        SortedMap.prototype.minKey = function () {
            return this.root_.minKey();
        };
        /**
         * @return {?K} The maximum key in the map.
         */
        SortedMap.prototype.maxKey = function () {
            return this.root_.maxKey();
        };
        /**
         * Traverses the map in key order and calls the specified action function
         * for each key/value pair.
         *
         * @param {function(!K, !V):*} action Callback function to be called
         * for each key/value pair.  If action returns true, traversal is aborted.
         * @return {*} The first truthy value returned by action, or the last falsey
         *   value returned by action
         */
        SortedMap.prototype.inorderTraversal = function (action) {
            return this.root_.inorderTraversal(action);
        };
        /**
         * Traverses the map in reverse key order and calls the specified action function
         * for each key/value pair.
         *
         * @param {function(!Object, !Object)} action Callback function to be called
         * for each key/value pair.  If action returns true, traversal is aborted.
         * @return {*} True if the traversal was aborted.
         */
        SortedMap.prototype.reverseTraversal = function (action) {
            return this.root_.reverseTraversal(action);
        };
        /**
         * Returns an iterator over the SortedMap.
         * @template T
         * @param {(function(K, V):T)=} resultGenerator
         * @return {SortedMapIterator.<K, V, T>} The iterator.
         */
        SortedMap.prototype.getIterator = function (resultGenerator) {
            return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);
        };
        SortedMap.prototype.getIteratorFrom = function (key, resultGenerator) {
            return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);
        };
        SortedMap.prototype.getReverseIteratorFrom = function (key, resultGenerator) {
            return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);
        };
        SortedMap.prototype.getReverseIterator = function (resultGenerator) {
            return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);
        };
        /**
         * Always use the same empty node, to reduce memory.
         * @const
         */
        SortedMap.EMPTY_NODE = new LLRBEmptyNode();
        return SortedMap;
    }());

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var LOG_2 = Math.log(2);
    /**
     * @constructor
     */
    var Base12Num = /** @class */ (function () {
        /**
         * @param {number} length
         */
        function Base12Num(length) {
            var logBase2 = function (num) {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                return parseInt((Math.log(num) / LOG_2), 10);
            };
            var bitMask = function (bits) { return parseInt(Array(bits + 1).join('1'), 2); };
            this.count = logBase2(length + 1);
            this.current_ = this.count - 1;
            var mask = bitMask(this.count);
            this.bits_ = (length + 1) & mask;
        }
        /**
         * @return {boolean}
         */
        Base12Num.prototype.nextBitIsOne = function () {
            //noinspection JSBitwiseOperatorUsage
            var result = !(this.bits_ & (0x1 << this.current_));
            this.current_--;
            return result;
        };
        return Base12Num;
    }());
    /**
     * Takes a list of child nodes and constructs a SortedSet using the given comparison
     * function
     *
     * Uses the algorithm described in the paper linked here:
     * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458
     *
     * @template K, V
     * @param {Array.<!NamedNode>} childList Unsorted list of children
     * @param {function(!NamedNode, !NamedNode):number} cmp The comparison method to be used
     * @param {(function(NamedNode):K)=} keyFn An optional function to extract K from a node wrapper, if K's
     *                                                        type is not NamedNode
     * @param {(function(K, K):number)=} mapSortFn An optional override for comparator used by the generated sorted map
     * @return {SortedMap.<K, V>}
     */
    var buildChildSet = function (childList, cmp, keyFn, mapSortFn) {
        childList.sort(cmp);
        var buildBalancedTree = function (low, high) {
            var length = high - low;
            var namedNode;
            var key;
            if (length === 0) {
                return null;
            }
            else if (length === 1) {
                namedNode = childList[low];
                key = keyFn ? keyFn(namedNode) : namedNode;
                return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                var middle = parseInt((length / 2), 10) + low;
                var left = buildBalancedTree(low, middle);
                var right = buildBalancedTree(middle + 1, high);
                namedNode = childList[middle];
                key = keyFn ? keyFn(namedNode) : namedNode;
                return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);
            }
        };
        var buildFrom12Array = function (base12) {
            var node = null;
            var root = null;
            var index = childList.length;
            var buildPennant = function (chunkSize, color) {
                var low = index - chunkSize;
                var high = index;
                index -= chunkSize;
                var childTree = buildBalancedTree(low + 1, high);
                var namedNode = childList[low];
                var key = keyFn ? keyFn(namedNode) : namedNode;
                attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));
            };
            var attachPennant = function (pennant) {
                if (node) {
                    node.left = pennant;
                    node = pennant;
                }
                else {
                    root = pennant;
                    node = pennant;
                }
            };
            for (var i = 0; i < base12.count; ++i) {
                var isOne = base12.nextBitIsOne();
                // The number of nodes taken in each slice is 2^(arr.length - (i + 1))
                var chunkSize = Math.pow(2, base12.count - (i + 1));
                if (isOne) {
                    buildPennant(chunkSize, LLRBNode.BLACK);
                }
                else {
                    // current == 2
                    buildPennant(chunkSize, LLRBNode.BLACK);
                    buildPennant(chunkSize, LLRBNode.RED);
                }
            }
            return root;
        };
        var base12 = new Base12Num(childList.length);
        var root = buildFrom12Array(base12);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return new SortedMap(mapSortFn || cmp, root);
    };

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var _defaultIndexMap;
    var fallbackObject = {};
    var IndexMap = /** @class */ (function () {
        function IndexMap(indexes_, indexSet_) {
            this.indexes_ = indexes_;
            this.indexSet_ = indexSet_;
        }
        Object.defineProperty(IndexMap, "Default", {
            /**
             * The default IndexMap for nodes without a priority
             */
            get: function () {
                index_cjs.assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');
                _defaultIndexMap =
                    _defaultIndexMap ||
                        new IndexMap({ '.priority': fallbackObject }, { '.priority': PRIORITY_INDEX });
                return _defaultIndexMap;
            },
            enumerable: true,
            configurable: true
        });
        IndexMap.prototype.get = function (indexKey) {
            var sortedMap = index_cjs.safeGet(this.indexes_, indexKey);
            if (!sortedMap) {
                throw new Error('No index defined for ' + indexKey);
            }
            if (sortedMap instanceof SortedMap) {
                return sortedMap;
            }
            else {
                // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the
                // regular child map
                return null;
            }
        };
        IndexMap.prototype.hasIndex = function (indexDefinition) {
            return index_cjs.contains(this.indexSet_, indexDefinition.toString());
        };
        IndexMap.prototype.addIndex = function (indexDefinition, existingChildren) {
            index_cjs.assert(indexDefinition !== KEY_INDEX, "KeyIndex always exists and isn't meant to be added to the IndexMap.");
            var childList = [];
            var sawIndexedValue = false;
            var iter = existingChildren.getIterator(NamedNode.Wrap);
            var next = iter.getNext();
            while (next) {
                sawIndexedValue =
                    sawIndexedValue || indexDefinition.isDefinedOn(next.node);
                childList.push(next);
                next = iter.getNext();
            }
            var newIndex;
            if (sawIndexedValue) {
                newIndex = buildChildSet(childList, indexDefinition.getCompare());
            }
            else {
                newIndex = fallbackObject;
            }
            var indexName = indexDefinition.toString();
            var newIndexSet = tslib_es6.__assign({}, this.indexSet_);
            newIndexSet[indexName] = indexDefinition;
            var newIndexes = tslib_es6.__assign({}, this.indexes_);
            newIndexes[indexName] = newIndex;
            return new IndexMap(newIndexes, newIndexSet);
        };
        /**
         * Ensure that this node is properly tracked in any indexes that we're maintaining
         */
        IndexMap.prototype.addToIndexes = function (namedNode, existingChildren) {
            var _this = this;
            var newIndexes = index_cjs.map(this.indexes_, function (indexedChildren, indexName) {
                var index = index_cjs.safeGet(_this.indexSet_, indexName);
                index_cjs.assert(index, 'Missing index implementation for ' + indexName);
                if (indexedChildren === fallbackObject) {
                    // Check to see if we need to index everything
                    if (index.isDefinedOn(namedNode.node)) {
                        // We need to build this index
                        var childList = [];
                        var iter = existingChildren.getIterator(NamedNode.Wrap);
                        var next = iter.getNext();
                        while (next) {
                            if (next.name !== namedNode.name) {
                                childList.push(next);
                            }
                            next = iter.getNext();
                        }
                        childList.push(namedNode);
                        return buildChildSet(childList, index.getCompare());
                    }
                    else {
                        // No change, this remains a fallback
                        return fallbackObject;
                    }
                }
                else {
                    var existingSnap = existingChildren.get(namedNode.name);
                    var newChildren = indexedChildren;
                    if (existingSnap) {
                        newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));
                    }
                    return newChildren.insert(namedNode, namedNode.node);
                }
            });
            return new IndexMap(newIndexes, this.indexSet_);
        };
        /**
         * Create a new IndexMap instance with the given value removed
         */
        IndexMap.prototype.removeFromIndexes = function (namedNode, existingChildren) {
            var newIndexes = index_cjs.map(this.indexes_, function (indexedChildren) {
                if (indexedChildren === fallbackObject) {
                    // This is the fallback. Just return it, nothing to do in this case
                    return indexedChildren;
                }
                else {
                    var existingSnap = existingChildren.get(namedNode.name);
                    if (existingSnap) {
                        return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));
                    }
                    else {
                        // No record of this child
                        return indexedChildren;
                    }
                }
            });
            return new IndexMap(newIndexes, this.indexSet_);
        };
        return IndexMap;
    }());

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function NAME_ONLY_COMPARATOR(left, right) {
        return nameCompare(left.name, right.name);
    }
    function NAME_COMPARATOR(left, right) {
        return nameCompare(left, right);
    }

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // TODO: For memory savings, don't store priorityNode_ if it's empty.
    var EMPTY_NODE;
    /**
     * ChildrenNode is a class for storing internal nodes in a DataSnapshot
     * (i.e. nodes with children).  It implements Node and stores the
     * list of children in the children property, sorted by child name.
     *
     * @constructor
     * @implements {Node}
     */
    var ChildrenNode = /** @class */ (function () {
        /**
         *
         * @param {!SortedMap.<string, !Node>} children_ List of children
         * of this node..
         * @param {?Node} priorityNode_ The priority of this node (as a snapshot node).
         * @param {!IndexMap} indexMap_
         */
        function ChildrenNode(children_, priorityNode_, indexMap_) {
            this.children_ = children_;
            this.priorityNode_ = priorityNode_;
            this.indexMap_ = indexMap_;
            this.lazyHash_ = null;
            /**
             * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use
             * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own
             * class instead of an empty ChildrenNode.
             */
            if (this.priorityNode_) {
                validatePriorityNode(this.priorityNode_);
            }
            if (this.children_.isEmpty()) {
                index_cjs.assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');
            }
        }
        Object.defineProperty(ChildrenNode, "EMPTY_NODE", {
            get: function () {
                return (EMPTY_NODE ||
                    (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default)));
            },
            enumerable: true,
            configurable: true
        });
        /** @inheritDoc */
        ChildrenNode.prototype.isLeafNode = function () {
            return false;
        };
        /** @inheritDoc */
        ChildrenNode.prototype.getPriority = function () {
            return this.priorityNode_ || EMPTY_NODE;
        };
        /** @inheritDoc */
        ChildrenNode.prototype.updatePriority = function (newPriorityNode) {
            if (this.children_.isEmpty()) {
                // Don't allow priorities on empty nodes
                return this;
            }
            else {
                return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);
            }
        };
        /** @inheritDoc */
        ChildrenNode.prototype.getImmediateChild = function (childName) {
            // Hack to treat priority as a regular child
            if (childName === '.priority') {
                return this.getPriority();
            }
            else {
                var child = this.children_.get(childName);
                return child === null ? EMPTY_NODE : child;
            }
        };
        /** @inheritDoc */
        ChildrenNode.prototype.getChild = function (path) {
            var front = path.getFront();
            if (front === null) {
                return this;
            }
            return this.getImmediateChild(front).getChild(path.popFront());
        };
        /** @inheritDoc */
        ChildrenNode.prototype.hasChild = function (childName) {
            return this.children_.get(childName) !== null;
        };
        /** @inheritDoc */
        ChildrenNode.prototype.updateImmediateChild = function (childName, newChildNode) {
            index_cjs.assert(newChildNode, 'We should always be passing snapshot nodes');
            if (childName === '.priority') {
                return this.updatePriority(newChildNode);
            }
            else {
                var namedNode = new NamedNode(childName, newChildNode);
                var newChildren = void 0, newIndexMap = void 0;
                if (newChildNode.isEmpty()) {
                    newChildren = this.children_.remove(childName);
                    newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);
                }
                else {
                    newChildren = this.children_.insert(childName, newChildNode);
                    newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);
                }
                var newPriority = newChildren.isEmpty()
                    ? EMPTY_NODE
                    : this.priorityNode_;
                return new ChildrenNode(newChildren, newPriority, newIndexMap);
            }
        };
        /** @inheritDoc */
        ChildrenNode.prototype.updateChild = function (path, newChildNode) {
            var front = path.getFront();
            if (front === null) {
                return newChildNode;
            }
            else {
                index_cjs.assert(path.getFront() !== '.priority' || path.getLength() === 1, '.priority must be the last token in a path');
                var newImmediateChild = this.getImmediateChild(front).updateChild(path.popFront(), newChildNode);
                return this.updateImmediateChild(front, newImmediateChild);
            }
        };
        /** @inheritDoc */
        ChildrenNode.prototype.isEmpty = function () {
            return this.children_.isEmpty();
        };
        /** @inheritDoc */
        ChildrenNode.prototype.numChildren = function () {
            return this.children_.count();
        };
        /** @inheritDoc */
        ChildrenNode.prototype.val = function (exportFormat) {
            if (this.isEmpty()) {
                return null;
            }
            var obj = {};
            var numKeys = 0, maxKey = 0, allIntegerKeys = true;
            this.forEachChild(PRIORITY_INDEX, function (key, childNode) {
                obj[key] = childNode.val(exportFormat);
                numKeys++;
                if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {
                    maxKey = Math.max(maxKey, Number(key));
                }
                else {
                    allIntegerKeys = false;
                }
            });
            if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {
                // convert to array.
                var array = [];
                // eslint-disable-next-line guard-for-in
                for (var key in obj) {
                    array[key] = obj[key];
                }
                return array;
            }
            else {
                if (exportFormat && !this.getPriority().isEmpty()) {
                    obj['.priority'] = this.getPriority().val();
                }
                return obj;
            }
        };
        /** @inheritDoc */
        ChildrenNode.prototype.hash = function () {
            if (this.lazyHash_ === null) {
                var toHash_1 = '';
                if (!this.getPriority().isEmpty()) {
                    toHash_1 +=
                        'priority:' +
                            priorityHashText(this.getPriority().val()) +
                            ':';
                }
                this.forEachChild(PRIORITY_INDEX, function (key, childNode) {
                    var childHash = childNode.hash();
                    if (childHash !== '') {
                        toHash_1 += ':' + key + ':' + childHash;
                    }
                });
                this.lazyHash_ = toHash_1 === '' ? '' : sha1(toHash_1);
            }
            return this.lazyHash_;
        };
        /** @inheritDoc */
        ChildrenNode.prototype.getPredecessorChildName = function (childName, childNode, index) {
            var idx = this.resolveIndex_(index);
            if (idx) {
                var predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));
                return predecessor ? predecessor.name : null;
            }
            else {
                return this.children_.getPredecessorKey(childName);
            }
        };
        /**
         * @param {!Index} indexDefinition
         * @return {?string}
         */
        ChildrenNode.prototype.getFirstChildName = function (indexDefinition) {
            var idx = this.resolveIndex_(indexDefinition);
            if (idx) {
                var minKey = idx.minKey();
                return minKey && minKey.name;
            }
            else {
                return this.children_.minKey();
            }
        };
        /**
         * @param {!Index} indexDefinition
         * @return {?NamedNode}
         */
        ChildrenNode.prototype.getFirstChild = function (indexDefinition) {
            var minKey = this.getFirstChildName(indexDefinition);
            if (minKey) {
                return new NamedNode(minKey, this.children_.get(minKey));
            }
            else {
                return null;
            }
        };
        /**
         * Given an index, return the key name of the largest value we have, according to that index
         * @param {!Index} indexDefinition
         * @return {?string}
         */
        ChildrenNode.prototype.getLastChildName = function (indexDefinition) {
            var idx = this.resolveIndex_(indexDefinition);
            if (idx) {
                var maxKey = idx.maxKey();
                return maxKey && maxKey.name;
            }
            else {
                return this.children_.maxKey();
            }
        };
        /**
         * @param {!Index} indexDefinition
         * @return {?NamedNode}
         */
        ChildrenNode.prototype.getLastChild = function (indexDefinition) {
            var maxKey = this.getLastChildName(indexDefinition);
            if (maxKey) {
                return new NamedNode(maxKey, this.children_.get(maxKey));
            }
            else {
                return null;
            }
        };
        /**
         * @inheritDoc
         */
        ChildrenNode.prototype.forEachChild = function (index, action) {
            var idx = this.resolveIndex_(index);
            if (idx) {
                return idx.inorderTraversal(function (wrappedNode) {
                    return action(wrappedNode.name, wrappedNode.node);
                });
            }
            else {
                return this.children_.inorderTraversal(action);
            }
        };
        /**
         * @param {!Index} indexDefinition
         * @return {SortedMapIterator}
         */
        ChildrenNode.prototype.getIterator = function (indexDefinition) {
            return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);
        };
        /**
         *
         * @param {!NamedNode} startPost
         * @param {!Index} indexDefinition
         * @return {!SortedMapIterator}
         */
        ChildrenNode.prototype.getIteratorFrom = function (startPost, indexDefinition) {
            var idx = this.resolveIndex_(indexDefinition);
            if (idx) {
                return idx.getIteratorFrom(startPost, function (key) { return key; });
            }
            else {
                var iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);
                var next = iterator.peek();
                while (next != null && indexDefinition.compare(next, startPost) < 0) {
                    iterator.getNext();
                    next = iterator.peek();
                }
                return iterator;
            }
        };
        /**
         * @param {!Index} indexDefinition
         * @return {!SortedMapIterator}
         */
        ChildrenNode.prototype.getReverseIterator = function (indexDefinition) {
            return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);
        };
        /**
         * @param {!NamedNode} endPost
         * @param {!Index} indexDefinition
         * @return {!SortedMapIterator}
         */
        ChildrenNode.prototype.getReverseIteratorFrom = function (endPost, indexDefinition) {
            var idx = this.resolveIndex_(indexDefinition);
            if (idx) {
                return idx.getReverseIteratorFrom(endPost, function (key) {
                    return key;
                });
            }
            else {
                var iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);
                var next = iterator.peek();
                while (next != null && indexDefinition.compare(next, endPost) > 0) {
                    iterator.getNext();
                    next = iterator.peek();
                }
                return iterator;
            }
        };
        /**
         * @inheritDoc
         */
        ChildrenNode.prototype.compareTo = function (other) {
            if (this.isEmpty()) {
                if (other.isEmpty()) {
                    return 0;
                }
                else {
                    return -1;
                }
            }
            else if (other.isLeafNode() || other.isEmpty()) {
                return 1;
            }
            else if (other === MAX_NODE$2) {
                return -1;
            }
            else {
                // Must be another node with children.
                return 0;
            }
        };
        /**
         * @inheritDoc
         */
        ChildrenNode.prototype.withIndex = function (indexDefinition) {
            if (indexDefinition === KEY_INDEX ||
                this.indexMap_.hasIndex(indexDefinition)) {
                return this;
            }
            else {
                var newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);
                return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);
            }
        };
        /**
         * @inheritDoc
         */
        ChildrenNode.prototype.isIndexed = function (index) {
            return index === KEY_INDEX || this.indexMap_.hasIndex(index);
        };
        /**
         * @inheritDoc
         */
        ChildrenNode.prototype.equals = function (other) {
            if (other === this) {
                return true;
            }
            else if (other.isLeafNode()) {
                return false;
            }
            else {
                var otherChildrenNode = other;
                if (!this.getPriority().equals(otherChildrenNode.getPriority())) {
                    return false;
                }
                else if (this.children_.count() === otherChildrenNode.children_.count()) {
                    var thisIter = this.getIterator(PRIORITY_INDEX);
                    var otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);
                    var thisCurrent = thisIter.getNext();
                    var otherCurrent = otherIter.getNext();
                    while (thisCurrent && otherCurrent) {
                        if (thisCurrent.name !== otherCurrent.name ||
                            !thisCurrent.node.equals(otherCurrent.node)) {
                            return false;
                        }
                        thisCurrent = thisIter.getNext();
                        otherCurrent = otherIter.getNext();
                    }
                    return thisCurrent === null && otherCurrent === null;
                }
                else {
                    return false;
                }
            }
        };
        /**
         * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used
         * instead.
         *
         * @private
         * @param {!Index} indexDefinition
         * @return {?SortedMap.<NamedNode, Node>}
         */
        ChildrenNode.prototype.resolveIndex_ = function (indexDefinition) {
            if (indexDefinition === KEY_INDEX) {
                return null;
            }
            else {
                return this.indexMap_.get(indexDefinition.toString());
            }
        };
        /**
         * @private
         * @type {RegExp}
         */
        ChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\d*)$/;
        return ChildrenNode;
    }());
    /**
     * @constructor
     * @extends {ChildrenNode}
     * @private
     */
    var MaxNode = /** @class */ (function (_super) {
        tslib_es6.__extends(MaxNode, _super);
        function MaxNode() {
            return _super.call(this, new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default) || this;
        }
        MaxNode.prototype.compareTo = function (other) {
            if (other === this) {
                return 0;
            }
            else {
                return 1;
            }
        };
        MaxNode.prototype.equals = function (other) {
            // Not that we every compare it, but MAX_NODE is only ever equal to itself
            return other === this;
        };
        MaxNode.prototype.getPriority = function () {
            return this;
        };
        MaxNode.prototype.getImmediateChild = function (childName) {
            return ChildrenNode.EMPTY_NODE;
        };
        MaxNode.prototype.isEmpty = function () {
            return false;
        };
        return MaxNode;
    }(ChildrenNode));
    /**
     * Marker that will sort higher than any other snapshot.
     * @type {!MAX_NODE}
     * @const
     */
    var MAX_NODE$2 = new MaxNode();
    Object.defineProperties(NamedNode, {
        MIN: {
            value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)
        },
        MAX: {
            value: new NamedNode(MAX_NAME, MAX_NODE$2)
        }
    });
    /**
     * Reference Extensions
     */
    KeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;
    LeafNode.__childrenNodeConstructor = ChildrenNode;
    setMaxNode(MAX_NODE$2);
    setMaxNode$1(MAX_NODE$2);

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var USE_HINZE = true;
    /**
     * Constructs a snapshot node representing the passed JSON and returns it.
     * @param {*} json JSON to create a node for.
     * @param {?string|?number=} priority Optional priority to use.  This will be ignored if the
     * passed JSON contains a .priority property.
     * @return {!Node}
     */
    function nodeFromJSON$1(json, priority) {
        if (priority === void 0) { priority = null; }
        if (json === null) {
            return ChildrenNode.EMPTY_NODE;
        }
        if (typeof json === 'object' && '.priority' in json) {
            priority = json['.priority'];
        }
        index_cjs.assert(priority === null ||
            typeof priority === 'string' ||
            typeof priority === 'number' ||
            (typeof priority === 'object' && '.sv' in priority), 'Invalid priority type found: ' + typeof priority);
        if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {
            json = json['.value'];
        }
        // Valid leaf nodes include non-objects or server-value wrapper objects
        if (typeof json !== 'object' || '.sv' in json) {
            var jsonLeaf = json;
            return new LeafNode(jsonLeaf, nodeFromJSON$1(priority));
        }
        if (!(json instanceof Array) && USE_HINZE) {
            var children_1 = [];
            var childrenHavePriority_1 = false;
            var hinzeJsonObj = json;
            each(hinzeJsonObj, function (key, child) {
                if (key.substring(0, 1) !== '.') {
                    // Ignore metadata nodes
                    var childNode = nodeFromJSON$1(child);
                    if (!childNode.isEmpty()) {
                        childrenHavePriority_1 =
                            childrenHavePriority_1 || !childNode.getPriority().isEmpty();
                        children_1.push(new NamedNode(key, childNode));
                    }
                }
            });
            if (children_1.length === 0) {
                return ChildrenNode.EMPTY_NODE;
            }
            var childSet = buildChildSet(children_1, NAME_ONLY_COMPARATOR, function (namedNode) { return namedNode.name; }, NAME_COMPARATOR);
            if (childrenHavePriority_1) {
                var sortedChildSet = buildChildSet(children_1, PRIORITY_INDEX.getCompare());
                return new ChildrenNode(childSet, nodeFromJSON$1(priority), new IndexMap({ '.priority': sortedChildSet }, { '.priority': PRIORITY_INDEX }));
            }
            else {
                return new ChildrenNode(childSet, nodeFromJSON$1(priority), IndexMap.Default);
            }
        }
        else {
            var node_1 = ChildrenNode.EMPTY_NODE;
            each(json, function (key, childData) {
                if (index_cjs.contains(json, key)) {
                    if (key.substring(0, 1) !== '.') {
                        // ignore metadata nodes.
                        var childNode = nodeFromJSON$1(childData);
                        if (childNode.isLeafNode() || !childNode.isEmpty()) {
                            node_1 = node_1.updateImmediateChild(key, childNode);
                        }
                    }
                }
            });
            return node_1.updatePriority(nodeFromJSON$1(priority));
        }
    }
    setNodeFromJSON(nodeFromJSON$1);

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @constructor
     * @extends {Index}
     * @private
     */
    var ValueIndex = /** @class */ (function (_super) {
        tslib_es6.__extends(ValueIndex, _super);
        function ValueIndex() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @inheritDoc
         */
        ValueIndex.prototype.compare = function (a, b) {
            var indexCmp = a.node.compareTo(b.node);
            if (indexCmp === 0) {
                return nameCompare(a.name, b.name);
            }
            else {
                return indexCmp;
            }
        };
        /**
         * @inheritDoc
         */
        ValueIndex.prototype.isDefinedOn = function (node) {
            return true;
        };
        /**
         * @inheritDoc
         */
        ValueIndex.prototype.indexedValueChanged = function (oldNode, newNode) {
            return !oldNode.equals(newNode);
        };
        /**
         * @inheritDoc
         */
        ValueIndex.prototype.minPost = function () {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            return NamedNode.MIN;
        };
        /**
         * @inheritDoc
         */
        ValueIndex.prototype.maxPost = function () {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            return NamedNode.MAX;
        };
        /**
         * @param {*} indexValue
         * @param {string} name
         * @return {!NamedNode}
         */
        ValueIndex.prototype.makePost = function (indexValue, name) {
            var valueNode = nodeFromJSON$1(indexValue);
            return new NamedNode(name, valueNode);
        };
        /**
         * @return {!string} String representation for inclusion in a query spec
         */
        ValueIndex.prototype.toString = function () {
            return '.value';
        };
        return ValueIndex;
    }(Index));
    var VALUE_INDEX = new ValueIndex();

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @param {!Path} indexPath
     * @constructor
     * @extends {Index}
     */
    var PathIndex = /** @class */ (function (_super) {
        tslib_es6.__extends(PathIndex, _super);
        function PathIndex(indexPath_) {
            var _this = _super.call(this) || this;
            _this.indexPath_ = indexPath_;
            index_cjs.assert(!indexPath_.isEmpty() && indexPath_.getFront() !== '.priority', "Can't create PathIndex with empty path or .priority key");
            return _this;
        }
        /**
         * @param {!Node} snap
         * @return {!Node}
         * @protected
         */
        PathIndex.prototype.extractChild = function (snap) {
            return snap.getChild(this.indexPath_);
        };
        /**
         * @inheritDoc
         */
        PathIndex.prototype.isDefinedOn = function (node) {
            return !node.getChild(this.indexPath_).isEmpty();
        };
        /**
         * @inheritDoc
         */
        PathIndex.prototype.compare = function (a, b) {
            var aChild = this.extractChild(a.node);
            var bChild = this.extractChild(b.node);
            var indexCmp = aChild.compareTo(bChild);
            if (indexCmp === 0) {
                return nameCompare(a.name, b.name);
            }
            else {
                return indexCmp;
            }
        };
        /**
         * @inheritDoc
         */
        PathIndex.prototype.makePost = function (indexValue, name) {
            var valueNode = nodeFromJSON$1(indexValue);
            var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);
            return new NamedNode(name, node);
        };
        /**
         * @inheritDoc
         */
        PathIndex.prototype.maxPost = function () {
            var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE$2);
            return new NamedNode(MAX_NAME, node);
        };
        /**
         * @inheritDoc
         */
        PathIndex.prototype.toString = function () {
            return this.indexPath_.slice().join('/');
        };
        return PathIndex;
    }(Index));

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Class representing a firebase data snapshot.  It wraps a SnapshotNode and
     * surfaces the public methods (val, forEach, etc.) we want to expose.
     */
    var DataSnapshot = /** @class */ (function () {
        /**
         * @param {!Node} node_ A SnapshotNode to wrap.
         * @param {!Reference} ref_ The ref of the location this snapshot came from.
         * @param {!Index} index_ The iteration order for this snapshot
         */
        function DataSnapshot(node_, ref_, index_) {
            this.node_ = node_;
            this.ref_ = ref_;
            this.index_ = index_;
        }
        /**
         * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is
         * empty.
         *
         * @return {*} JSON representation of the DataSnapshot contents, or null if empty.
         */
        DataSnapshot.prototype.val = function () {
            index_cjs.validateArgCount('DataSnapshot.val', 0, 0, arguments.length);
            return this.node_.val();
        };
        /**
         * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting
         * the entire node contents.
         * @return {*} JSON representation of the DataSnapshot contents, or null if empty.
         */
        DataSnapshot.prototype.exportVal = function () {
            index_cjs.validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);
            return this.node_.val(true);
        };
        // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary
        // for end-users
        DataSnapshot.prototype.toJSON = function () {
            // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content
            index_cjs.validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);
            return this.exportVal();
        };
        /**
         * Returns whether the snapshot contains a non-null value.
         *
         * @return {boolean} Whether the snapshot contains a non-null value, or is empty.
         */
        DataSnapshot.prototype.exists = function () {
            index_cjs.validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);
            return !this.node_.isEmpty();
        };
        /**
         * Returns a DataSnapshot of the specified child node's contents.
         *
         * @param {!string} childPathString Path to a child.
         * @return {!DataSnapshot} DataSnapshot for child node.
         */
        DataSnapshot.prototype.child = function (childPathString) {
            index_cjs.validateArgCount('DataSnapshot.child', 0, 1, arguments.length);
            // Ensure the childPath is a string (can be a number)
            childPathString = String(childPathString);
            validatePathString('DataSnapshot.child', 1, childPathString, false);
            var childPath = new Path(childPathString);
            var childRef = this.ref_.child(childPath);
            return new DataSnapshot(this.node_.getChild(childPath), childRef, PRIORITY_INDEX);
        };
        /**
         * Returns whether the snapshot contains a child at the specified path.
         *
         * @param {!string} childPathString Path to a child.
         * @return {boolean} Whether the child exists.
         */
        DataSnapshot.prototype.hasChild = function (childPathString) {
            index_cjs.validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);
            validatePathString('DataSnapshot.hasChild', 1, childPathString, false);
            var childPath = new Path(childPathString);
            return !this.node_.getChild(childPath).isEmpty();
        };
        /**
         * Returns the priority of the object, or null if no priority was set.
         *
         * @return {string|number|null} The priority.
         */
        DataSnapshot.prototype.getPriority = function () {
            index_cjs.validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length);
            // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)
            return this.node_.getPriority().val();
        };
        /**
         * Iterates through child nodes and calls the specified action for each one.
         *
         * @param {function(!DataSnapshot)} action Callback function to be called
         * for each child.
         * @return {boolean} True if forEach was canceled by action returning true for
         * one of the child nodes.
         */
        DataSnapshot.prototype.forEach = function (action) {
            var _this = this;
            index_cjs.validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);
            index_cjs.validateCallback('DataSnapshot.forEach', 1, action, false);
            if (this.node_.isLeafNode()) {
                return false;
            }
            var childrenNode = this.node_;
            // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...
            return !!childrenNode.forEachChild(this.index_, function (key, node) {
                return action(new DataSnapshot(node, _this.ref_.child(key), PRIORITY_INDEX));
            });
        };
        /**
         * Returns whether this DataSnapshot has children.
         * @return {boolean} True if the DataSnapshot contains 1 or more child nodes.
         */
        DataSnapshot.prototype.hasChildren = function () {
            index_cjs.validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);
            if (this.node_.isLeafNode()) {
                return false;
            }
            else {
                return !this.node_.isEmpty();
            }
        };
        Object.defineProperty(DataSnapshot.prototype, "key", {
            get: function () {
                return this.ref_.getKey();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Returns the number of children for this DataSnapshot.
         * @return {number} The number of children that this DataSnapshot contains.
         */
        DataSnapshot.prototype.numChildren = function () {
            index_cjs.validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);
            return this.node_.numChildren();
        };
        /**
         * @return {Reference} The Firebase reference for the location this snapshot's data came from.
         */
        DataSnapshot.prototype.getRef = function () {
            index_cjs.validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);
            return this.ref_;
        };
        Object.defineProperty(DataSnapshot.prototype, "ref", {
            get: function () {
                return this.getRef();
            },
            enumerable: true,
            configurable: true
        });
        return DataSnapshot;
    }());

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Encapsulates the data needed to raise an event
     * @implements {Event}
     */
    var DataEvent = /** @class */ (function () {
        /**
         * @param {!string} eventType One of: value, child_added, child_changed, child_moved, child_removed
         * @param {!EventRegistration} eventRegistration The function to call to with the event data. User provided
         * @param {!DataSnapshot} snapshot The data backing the event
         * @param {?string=} prevName Optional, the name of the previous child for child_* events.
         */
        function DataEvent(eventType, eventRegistration, snapshot, prevName) {
            this.eventType = eventType;
            this.eventRegistration = eventRegistration;
            this.snapshot = snapshot;
            this.prevName = prevName;
        }
        /**
         * @inheritDoc
         */
        DataEvent.prototype.getPath = function () {
            var ref = this.snapshot.getRef();
            if (this.eventType === 'value') {
                return ref.path;
            }
            else {
                return ref.getParent().path;
            }
        };
        /**
         * @inheritDoc
         */
        DataEvent.prototype.getEventType = function () {
            return this.eventType;
        };
        /**
         * @inheritDoc
         */
        DataEvent.prototype.getEventRunner = function () {
            return this.eventRegistration.getEventRunner(this);
        };
        /**
         * @inheritDoc
         */
        DataEvent.prototype.toString = function () {
            return (this.getPath().toString() +
                ':' +
                this.eventType +
                ':' +
                index_cjs.stringify(this.snapshot.exportVal()));
        };
        return DataEvent;
    }());
    var CancelEvent = /** @class */ (function () {
        /**
         * @param {EventRegistration} eventRegistration
         * @param {Error} error
         * @param {!Path} path
         */
        function CancelEvent(eventRegistration, error, path) {
            this.eventRegistration = eventRegistration;
            this.error = error;
            this.path = path;
        }
        /**
         * @inheritDoc
         */
        CancelEvent.prototype.getPath = function () {
            return this.path;
        };
        /**
         * @inheritDoc
         */
        CancelEvent.prototype.getEventType = function () {
            return 'cancel';
        };
        /**
         * @inheritDoc
         */
        CancelEvent.prototype.getEventRunner = function () {
            return this.eventRegistration.getEventRunner(this);
        };
        /**
         * @inheritDoc
         */
        CancelEvent.prototype.toString = function () {
            return this.path.toString() + ':cancel';
        };
        return CancelEvent;
    }());

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Represents registration for 'value' events.
     */
    var ValueEventRegistration = /** @class */ (function () {
        /**
         * @param {?function(!DataSnapshot)} callback_
         * @param {?function(Error)} cancelCallback_
         * @param {?Object} context_
         */
        function ValueEventRegistration(callback_, cancelCallback_, context_) {
            this.callback_ = callback_;
            this.cancelCallback_ = cancelCallback_;
            this.context_ = context_;
        }
        /**
         * @inheritDoc
         */
        ValueEventRegistration.prototype.respondsTo = function (eventType) {
            return eventType === 'value';
        };
        /**
         * @inheritDoc
         */
        ValueEventRegistration.prototype.createEvent = function (change, query) {
            var index = query.getQueryParams().getIndex();
            return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, query.getRef(), index));
        };
        /**
         * @inheritDoc
         */
        ValueEventRegistration.prototype.getEventRunner = function (eventData) {
            var ctx = this.context_;
            if (eventData.getEventType() === 'cancel') {
                index_cjs.assert(this.cancelCallback_, 'Raising a cancel event on a listener with no cancel callback');
                var cancelCB_1 = this.cancelCallback_;
                return function () {
                    // We know that error exists, we checked above that this is a cancel event
                    cancelCB_1.call(ctx, eventData.error);
                };
            }
            else {
                var cb_1 = this.callback_;
                return function () {
                    cb_1.call(ctx, eventData.snapshot);
                };
            }
        };
        /**
         * @inheritDoc
         */
        ValueEventRegistration.prototype.createCancelEvent = function (error, path) {
            if (this.cancelCallback_) {
                return new CancelEvent(this, error, path);
            }
            else {
                return null;
            }
        };
        /**
         * @inheritDoc
         */
        ValueEventRegistration.prototype.matches = function (other) {
            if (!(other instanceof ValueEventRegistration)) {
                return false;
            }
            else if (!other.callback_ || !this.callback_) {
                // If no callback specified, we consider it to match any callback.
                return true;
            }
            else {
                return (other.callback_ === this.callback_ && other.context_ === this.context_);
            }
        };
        /**
         * @inheritDoc
         */
        ValueEventRegistration.prototype.hasAnyCallback = function () {
            return this.callback_ !== null;
        };
        return ValueEventRegistration;
    }());
    /**
     * Represents the registration of 1 or more child_xxx events.
     *
     * Currently, it is always exactly 1 child_xxx event, but the idea is we might let you
     * register a group of callbacks together in the future.
     *
     * @constructor
     * @implements {EventRegistration}
     */
    var ChildEventRegistration = /** @class */ (function () {
        /**
         * @param {?Object.<string, function(!DataSnapshot, ?string=)>} callbacks_
         * @param {?function(Error)} cancelCallback_
         * @param {Object=} context_
         */
        function ChildEventRegistration(callbacks_, cancelCallback_, context_) {
            this.callbacks_ = callbacks_;
            this.cancelCallback_ = cancelCallback_;
            this.context_ = context_;
        }
        /**
         * @inheritDoc
         */
        ChildEventRegistration.prototype.respondsTo = function (eventType) {
            var eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;
            eventToCheck =
                eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;
            return index_cjs.contains(this.callbacks_, eventToCheck);
        };
        /**
         * @inheritDoc
         */
        ChildEventRegistration.prototype.createCancelEvent = function (error, path) {
            if (this.cancelCallback_) {
                return new CancelEvent(this, error, path);
            }
            else {
                return null;
            }
        };
        /**
         * @inheritDoc
         */
        ChildEventRegistration.prototype.createEvent = function (change, query) {
            index_cjs.assert(change.childName != null, 'Child events should have a childName.');
            var ref = query.getRef().child(/** @type {!string} */ change.childName);
            var index = query.getQueryParams().getIndex();
            return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, ref, index), change.prevName);
        };
        /**
         * @inheritDoc
         */
        ChildEventRegistration.prototype.getEventRunner = function (eventData) {
            var ctx = this.context_;
            if (eventData.getEventType() === 'cancel') {
                index_cjs.assert(this.cancelCallback_, 'Raising a cancel event on a listener with no cancel callback');
                var cancelCB_2 = this.cancelCallback_;
                return function () {
                    // We know that error exists, we checked above that this is a cancel event
                    cancelCB_2.call(ctx, eventData.error);
                };
            }
            else {
                var cb_2 = this.callbacks_[eventData.eventType];
                return function () {
                    cb_2.call(ctx, eventData.snapshot, eventData.prevName);
                };
            }
        };
        /**
         * @inheritDoc
         */
        ChildEventRegistration.prototype.matches = function (other) {
            var _this = this;
            if (other instanceof ChildEventRegistration) {
                if (!this.callbacks_ || !other.callbacks_) {
                    return true;
                }
                else if (this.context_ === other.context_) {
                    var otherKeys = Object.keys(other.callbacks_);
                    var thisKeys = Object.keys(this.callbacks_);
                    var otherCount = otherKeys.length;
                    var thisCount = thisKeys.length;
                    if (otherCount === thisCount) {
                        // If count is 1, do an exact match on eventType, if either is defined but null, it's a match.
                        // If event types don't match, not a match
                        // If count is not 1, exact match across all
                        if (otherCount === 1) {
                            var otherKey = otherKeys[0];
                            var thisKey = thisKeys[0];
                            return (thisKey === otherKey &&
                                (!other.callbacks_[otherKey] ||
                                    !this.callbacks_[thisKey] ||
                                    other.callbacks_[otherKey] === this.callbacks_[thisKey]));
                        }
                        else {
                            // Exact match on each key.
                            return thisKeys.every(function (eventType) {
                                return other.callbacks_[eventType] === _this.callbacks_[eventType];
                            });
                        }
                    }
                }
            }
            return false;
        };
        /**
         * @inheritDoc
         */
        ChildEventRegistration.prototype.hasAnyCallback = function () {
            return this.callbacks_ !== null;
        };
        return ChildEventRegistration;
    }());

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var __referenceConstructor;
    /**
     * A Query represents a filter to be applied to a firebase location.  This object purely represents the
     * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.
     *
     * Since every Firebase reference is a query, Firebase inherits from this object.
     */
    var Query = /** @class */ (function () {
        function Query(repo, path, queryParams_, orderByCalled_) {
            this.repo = repo;
            this.path = path;
            this.queryParams_ = queryParams_;
            this.orderByCalled_ = orderByCalled_;
        }
        Object.defineProperty(Query, "__referenceConstructor", {
            get: function () {
                index_cjs.assert(__referenceConstructor, 'Reference.ts has not been loaded');
                return __referenceConstructor;
            },
            set: function (val) {
                __referenceConstructor = val;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Validates start/end values for queries.
         * @param {!QueryParams} params
         * @private
         */
        Query.validateQueryEndpoints_ = function (params) {
            var startNode = null;
            var endNode = null;
            if (params.hasStart()) {
                startNode = params.getIndexStartValue();
            }
            if (params.hasEnd()) {
                endNode = params.getIndexEndValue();
            }
            if (params.getIndex() === KEY_INDEX) {
                var tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' +
                    'startAt(), endAt(), or equalTo().';
                var wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), endAt(),' +
                    'or equalTo() must be a string.';
                if (params.hasStart()) {
                    var startName = params.getIndexStartName();
                    if (startName !== MIN_NAME) {
                        throw new Error(tooManyArgsError);
                    }
                    else if (typeof startNode !== 'string') {
                        throw new Error(wrongArgTypeError);
                    }
                }
                if (params.hasEnd()) {
                    var endName = params.getIndexEndName();
                    if (endName !== MAX_NAME) {
                        throw new Error(tooManyArgsError);
                    }
                    else if (typeof endNode !== 'string') {
                        throw new Error(wrongArgTypeError);
                    }
                }
            }
            else if (params.getIndex() === PRIORITY_INDEX) {
                if ((startNode != null && !isValidPriority(startNode)) ||
                    (endNode != null && !isValidPriority(endNode))) {
                    throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' +
                        'endAt(), or equalTo() must be a valid priority value (null, a number, or a string).');
                }
            }
            else {
                index_cjs.assert(params.getIndex() instanceof PathIndex ||
                    params.getIndex() === VALUE_INDEX, 'unknown index type.');
                if ((startNode != null && typeof startNode === 'object') ||
                    (endNode != null && typeof endNode === 'object')) {
                    throw new Error('Query: First argument passed to startAt(), endAt(), or equalTo() cannot be ' +
                        'an object.');
                }
            }
        };
        /**
         * Validates that limit* has been called with the correct combination of parameters
         * @param {!QueryParams} params
         * @private
         */
        Query.validateLimit_ = function (params) {
            if (params.hasStart() &&
                params.hasEnd() &&
                params.hasLimit() &&
                !params.hasAnchoredLimit()) {
                throw new Error("Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.");
            }
        };
        /**
         * Validates that no other order by call has been made
         * @param {!string} fnName
         * @private
         */
        Query.prototype.validateNoPreviousOrderByCall_ = function (fnName) {
            if (this.orderByCalled_ === true) {
                throw new Error(fnName + ": You can't combine multiple orderBy calls.");
            }
        };
        /**
         * @return {!QueryParams}
         */
        Query.prototype.getQueryParams = function () {
            return this.queryParams_;
        };
        /**
         * @return {!Reference}
         */
        Query.prototype.getRef = function () {
            index_cjs.validateArgCount('Query.ref', 0, 0, arguments.length);
            // This is a slight hack. We cannot goog.require('fb.api.Firebase'), since Firebase requires fb.api.Query.
            // However, we will always export 'Firebase' to the global namespace, so it's guaranteed to exist by the time this
            // method gets called.
            return new Query.__referenceConstructor(this.repo, this.path);
        };
        /**
         * @param {!string} eventType
         * @param {!function(DataSnapshot, string=)} callback
         * @param {(function(Error)|Object)=} cancelCallbackOrContext
         * @param {Object=} context
         * @return {!function(DataSnapshot, string=)}
         */
        Query.prototype.on = function (eventType, callback, cancelCallbackOrContext, context) {
            index_cjs.validateArgCount('Query.on', 2, 4, arguments.length);
            validateEventType('Query.on', 1, eventType, false);
            index_cjs.validateCallback('Query.on', 2, callback, false);
            var ret = Query.getCancelAndContextArgs_('Query.on', cancelCallbackOrContext, context);
            if (eventType === 'value') {
                this.onValueEvent(callback, ret.cancel, ret.context);
            }
            else {
                var callbacks = {};
                callbacks[eventType] = callback;
                this.onChildEvent(callbacks, ret.cancel, ret.context);
            }
            return callback;
        };
        /**
         * @param {!function(!DataSnapshot)} callback
         * @param {?function(Error)} cancelCallback
         * @param {?Object} context
         * @protected
         */
        Query.prototype.onValueEvent = function (callback, cancelCallback, context) {
            var container = new ValueEventRegistration(callback, cancelCallback || null, context || null);
            this.repo.addEventCallbackForQuery(this, container);
        };
        /**
         * @param {!Object.<string, !function(!DataSnapshot, ?string)>} callbacks
         * @param {?function(Error)} cancelCallback
         * @param {?Object} context
         * @protected
         */
        Query.prototype.onChildEvent = function (callbacks, cancelCallback, context) {
            var container = new ChildEventRegistration(callbacks, cancelCallback, context);
            this.repo.addEventCallbackForQuery(this, container);
        };
        /**
         * @param {string=} eventType
         * @param {(function(!DataSnapshot, ?string=))=} callback
         * @param {Object=} context
         */
        Query.prototype.off = function (eventType, callback, context) {
            index_cjs.validateArgCount('Query.off', 0, 3, arguments.length);
            validateEventType('Query.off', 1, eventType, true);
            index_cjs.validateCallback('Query.off', 2, callback, true);
            index_cjs.validateContextObject('Query.off', 3, context, true);
            var container = null;
            var callbacks = null;
            if (eventType === 'value') {
                var valueCallback = callback || null;
                container = new ValueEventRegistration(valueCallback, null, context || null);
            }
            else if (eventType) {
                if (callback) {
                    callbacks = {};
                    callbacks[eventType] = callback;
                }
                container = new ChildEventRegistration(callbacks, null, context || null);
            }
            this.repo.removeEventCallbackForQuery(this, container);
        };
        /**
         * Attaches a listener, waits for the first event, and then removes the listener
         * @param {!string} eventType
         * @param {!function(!DataSnapshot, string=)} userCallback
         * @param failureCallbackOrContext
         * @param context
         * @return {!firebase.Promise}
         */
        Query.prototype.once = function (eventType, userCallback, failureCallbackOrContext, context) {
            var _this = this;
            index_cjs.validateArgCount('Query.once', 1, 4, arguments.length);
            validateEventType('Query.once', 1, eventType, false);
            index_cjs.validateCallback('Query.once', 2, userCallback, true);
            var ret = Query.getCancelAndContextArgs_('Query.once', failureCallbackOrContext, context);
            // TODO: Implement this more efficiently (in particular, use 'get' wire protocol for 'value' event)
            // TODO: consider actually wiring the callbacks into the promise. We cannot do this without a breaking change
            // because the API currently expects callbacks will be called synchronously if the data is cached, but this is
            // against the Promise specification.
            var firstCall = true;
            var deferred = new index_cjs.Deferred();
            // A dummy error handler in case a user wasn't expecting promises
            deferred.promise.catch(function () { });
            var onceCallback = function (snapshot) {
                // NOTE: Even though we unsubscribe, we may get called multiple times if a single action (e.g. set() with JSON)
                // triggers multiple events (e.g. child_added or child_changed).
                if (firstCall) {
                    firstCall = false;
                    _this.off(eventType, onceCallback);
                    if (userCallback) {
                        userCallback.bind(ret.context)(snapshot);
                    }
                    deferred.resolve(snapshot);
                }
            };
            this.on(eventType, onceCallback, 
            /*cancel=*/ function (err) {
                _this.off(eventType, onceCallback);
                if (ret.cancel) {
                    ret.cancel.bind(ret.context)(err);
                }
                deferred.reject(err);
            });
            return deferred.promise;
        };
        /**
         * Set a limit and anchor it to the start of the window.
         * @param {!number} limit
         * @return {!Query}
         */
        Query.prototype.limitToFirst = function (limit) {
            index_cjs.validateArgCount('Query.limitToFirst', 1, 1, arguments.length);
            if (typeof limit !== 'number' ||
                Math.floor(limit) !== limit ||
                limit <= 0) {
                throw new Error('Query.limitToFirst: First argument must be a positive integer.');
            }
            if (this.queryParams_.hasLimit()) {
                throw new Error('Query.limitToFirst: Limit was already set (by another call to limit, ' +
                    'limitToFirst, or limitToLast).');
            }
            return new Query(this.repo, this.path, this.queryParams_.limitToFirst(limit), this.orderByCalled_);
        };
        /**
         * Set a limit and anchor it to the end of the window.
         * @param {!number} limit
         * @return {!Query}
         */
        Query.prototype.limitToLast = function (limit) {
            index_cjs.validateArgCount('Query.limitToLast', 1, 1, arguments.length);
            if (typeof limit !== 'number' ||
                Math.floor(limit) !== limit ||
                limit <= 0) {
                throw new Error('Query.limitToLast: First argument must be a positive integer.');
            }
            if (this.queryParams_.hasLimit()) {
                throw new Error('Query.limitToLast: Limit was already set (by another call to limit, ' +
                    'limitToFirst, or limitToLast).');
            }
            return new Query(this.repo, this.path, this.queryParams_.limitToLast(limit), this.orderByCalled_);
        };
        /**
         * Given a child path, return a new query ordered by the specified grandchild path.
         * @param {!string} path
         * @return {!Query}
         */
        Query.prototype.orderByChild = function (path) {
            index_cjs.validateArgCount('Query.orderByChild', 1, 1, arguments.length);
            if (path === '$key') {
                throw new Error('Query.orderByChild: "$key" is invalid.  Use Query.orderByKey() instead.');
            }
            else if (path === '$priority') {
                throw new Error('Query.orderByChild: "$priority" is invalid.  Use Query.orderByPriority() instead.');
            }
            else if (path === '$value') {
                throw new Error('Query.orderByChild: "$value" is invalid.  Use Query.orderByValue() instead.');
            }
            validatePathString('Query.orderByChild', 1, path, false);
            this.validateNoPreviousOrderByCall_('Query.orderByChild');
            var parsedPath = new Path(path);
            if (parsedPath.isEmpty()) {
                throw new Error('Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.');
            }
            var index = new PathIndex(parsedPath);
            var newParams = this.queryParams_.orderBy(index);
            Query.validateQueryEndpoints_(newParams);
            return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);
        };
        /**
         * Return a new query ordered by the KeyIndex
         * @return {!Query}
         */
        Query.prototype.orderByKey = function () {
            index_cjs.validateArgCount('Query.orderByKey', 0, 0, arguments.length);
            this.validateNoPreviousOrderByCall_('Query.orderByKey');
            var newParams = this.queryParams_.orderBy(KEY_INDEX);
            Query.validateQueryEndpoints_(newParams);
            return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);
        };
        /**
         * Return a new query ordered by the PriorityIndex
         * @return {!Query}
         */
        Query.prototype.orderByPriority = function () {
            index_cjs.validateArgCount('Query.orderByPriority', 0, 0, arguments.length);
            this.validateNoPreviousOrderByCall_('Query.orderByPriority');
            var newParams = this.queryParams_.orderBy(PRIORITY_INDEX);
            Query.validateQueryEndpoints_(newParams);
            return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);
        };
        /**
         * Return a new query ordered by the ValueIndex
         * @return {!Query}
         */
        Query.prototype.orderByValue = function () {
            index_cjs.validateArgCount('Query.orderByValue', 0, 0, arguments.length);
            this.validateNoPreviousOrderByCall_('Query.orderByValue');
            var newParams = this.queryParams_.orderBy(VALUE_INDEX);
            Query.validateQueryEndpoints_(newParams);
            return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);
        };
        /**
         * @param {number|string|boolean|null} value
         * @param {?string=} name
         * @return {!Query}
         */
        Query.prototype.startAt = function (value, name) {
            if (value === void 0) { value = null; }
            index_cjs.validateArgCount('Query.startAt', 0, 2, arguments.length);
            validateFirebaseDataArg('Query.startAt', 1, value, this.path, true);
            validateKey('Query.startAt', 2, name, true);
            var newParams = this.queryParams_.startAt(value, name);
            Query.validateLimit_(newParams);
            Query.validateQueryEndpoints_(newParams);
            if (this.queryParams_.hasStart()) {
                throw new Error('Query.startAt: Starting point was already set (by another call to startAt ' +
                    'or equalTo).');
            }
            // Calling with no params tells us to start at the beginning.
            if (value === undefined) {
                value = null;
                name = null;
            }
            return new Query(this.repo, this.path, newParams, this.orderByCalled_);
        };
        /**
         * @param {number|string|boolean|null} value
         * @param {?string=} name
         * @return {!Query}
         */
        Query.prototype.endAt = function (value, name) {
            if (value === void 0) { value = null; }
            index_cjs.validateArgCount('Query.endAt', 0, 2, arguments.length);
            validateFirebaseDataArg('Query.endAt', 1, value, this.path, true);
            validateKey('Query.endAt', 2, name, true);
            var newParams = this.queryParams_.endAt(value, name);
            Query.validateLimit_(newParams);
            Query.validateQueryEndpoints_(newParams);
            if (this.queryParams_.hasEnd()) {
                throw new Error('Query.endAt: Ending point was already set (by another call to endAt or ' +
                    'equalTo).');
            }
            return new Query(this.repo, this.path, newParams, this.orderByCalled_);
        };
        /**
         * Load the selection of children with exactly the specified value, and, optionally,
         * the specified name.
         * @param {number|string|boolean|null} value
         * @param {string=} name
         * @return {!Query}
         */
        Query.prototype.equalTo = function (value, name) {
            index_cjs.validateArgCount('Query.equalTo', 1, 2, arguments.length);
            validateFirebaseDataArg('Query.equalTo', 1, value, this.path, false);
            validateKey('Query.equalTo', 2, name, true);
            if (this.queryParams_.hasStart()) {
                throw new Error('Query.equalTo: Starting point was already set (by another call to startAt or ' +
                    'equalTo).');
            }
            if (this.queryParams_.hasEnd()) {
                throw new Error('Query.equalTo: Ending point was already set (by another call to endAt or ' +
                    'equalTo).');
            }
            return this.startAt(value, name).endAt(value, name);
        };
        /**
         * @return {!string} URL for this location.
         */
        Query.prototype.toString = function () {
            index_cjs.validateArgCount('Query.toString', 0, 0, arguments.length);
            return this.repo.toString() + this.path.toUrlEncodedString();
        };
        // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary
        // for end-users.
        Query.prototype.toJSON = function () {
            // An optional spacer argument is unnecessary for a string.
            index_cjs.validateArgCount('Query.toJSON', 0, 1, arguments.length);
            return this.toString();
        };
        /**
         * An object representation of the query parameters used by this Query.
         * @return {!Object}
         */
        Query.prototype.queryObject = function () {
            return this.queryParams_.getQueryObject();
        };
        /**
         * @return {!string}
         */
        Query.prototype.queryIdentifier = function () {
            var obj = this.queryObject();
            var id = ObjectToUniqueKey(obj);
            return id === '{}' ? 'default' : id;
        };
        /**
         * Return true if this query and the provided query are equivalent; otherwise, return false.
         * @param {Query} other
         * @return {boolean}
         */
        Query.prototype.isEqual = function (other) {
            index_cjs.validateArgCount('Query.isEqual', 1, 1, arguments.length);
            if (!(other instanceof Query)) {
                var error = 'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';
                throw new Error(error);
            }
            var sameRepo = this.repo === other.repo;
            var samePath = this.path.equals(other.path);
            var sameQueryIdentifier = this.queryIdentifier() === other.queryIdentifier();
            return sameRepo && samePath && sameQueryIdentifier;
        };
        /**
         * Helper used by .on and .once to extract the context and or cancel arguments.
         * @param {!string} fnName The function name (on or once)
         * @param {(function(Error)|Object)=} cancelOrContext
         * @param {Object=} context
         * @return {{cancel: ?function(Error), context: ?Object}}
         * @private
         */
        Query.getCancelAndContextArgs_ = function (fnName, cancelOrContext, context) {
            var ret = { cancel: null, context: null };
            if (cancelOrContext && context) {
                ret.cancel = cancelOrContext;
                index_cjs.validateCallback(fnName, 3, ret.cancel, true);
                ret.context = context;
                index_cjs.validateContextObject(fnName, 4, ret.context, true);
            }
            else if (cancelOrContext) {
                // we have either a cancel callback or a context.
                if (typeof cancelOrContext === 'object' && cancelOrContext !== null) {
                    // it's a context!
                    ret.context = cancelOrContext;
                }
                else if (typeof cancelOrContext === 'function') {
                    ret.cancel = cancelOrContext;
                }
                else {
                    throw new Error(index_cjs.errorPrefix(fnName, 3, true) +
                        ' must either be a cancel callback or a context object.');
                }
            }
            return ret;
        };
        Object.defineProperty(Query.prototype, "ref", {
            get: function () {
                return this.getRef();
            },
            enumerable: true,
            configurable: true
        });
        return Query;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ExistingValueProvider = /** @class */ (function () {
        function ExistingValueProvider(node_) {
            this.node_ = node_;
        }
        ExistingValueProvider.prototype.getImmediateChild = function (childName) {
            var child = this.node_.getImmediateChild(childName);
            return new ExistingValueProvider(child);
        };
        ExistingValueProvider.prototype.node = function () {
            return this.node_;
        };
        return ExistingValueProvider;
    }());
    var DeferredValueProvider = /** @class */ (function () {
        function DeferredValueProvider(syncTree, path) {
            this.syncTree_ = syncTree;
            this.path_ = path;
        }
        DeferredValueProvider.prototype.getImmediateChild = function (childName) {
            var childPath = this.path_.child(childName);
            return new DeferredValueProvider(this.syncTree_, childPath);
        };
        DeferredValueProvider.prototype.node = function () {
            return this.syncTree_.calcCompleteEventCache(this.path_);
        };
        return DeferredValueProvider;
    }());
    /**
     * Generate placeholders for deferred values.
     * @param {?Object} values
     * @return {!Object}
     */
    var generateWithValues = function (values) {
        values = values || {};
        values['timestamp'] = values['timestamp'] || new Date().getTime();
        return values;
    };
    /**
     * Value to use when firing local events. When writing server values, fire
     * local events with an approximate value, otherwise return value as-is.
     * @param {(Object|string|number|boolean)} value
     * @param {!Object} serverValues
     * @return {!(string|number|boolean)}
     */
    var resolveDeferredLeafValue = function (value, existingVal, serverValues) {
        if (!value || typeof value !== 'object') {
            return value;
        }
        index_cjs.assert('.sv' in value, 'Unexpected leaf node or priority contents');
        if (typeof value['.sv'] === 'string') {
            return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);
        }
        else if (typeof value['.sv'] === 'object') {
            return resolveComplexDeferredValue(value['.sv'], existingVal);
        }
        else {
            index_cjs.assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));
        }
    };
    var resolveScalarDeferredValue = function (op, existing, serverValues) {
        switch (op) {
            case 'timestamp':
                return serverValues['timestamp'];
            default:
                index_cjs.assert(false, 'Unexpected server value: ' + op);
        }
    };
    var resolveComplexDeferredValue = function (op, existing, unused) {
        if (!op.hasOwnProperty('increment')) {
            index_cjs.assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));
        }
        var delta = op['increment'];
        if (typeof delta !== 'number') {
            index_cjs.assert(false, 'Unexpected increment value: ' + delta);
        }
        var existingNode = existing.node();
        index_cjs.assert(existingNode !== null && typeof existingNode !== 'undefined', 'Expected ChildrenNode.EMPTY_NODE for nulls');
        // Incrementing a non-number sets the value to the incremented amount
        if (!existingNode.isLeafNode()) {
            return delta;
        }
        var leaf = existingNode;
        var existingVal = leaf.getValue();
        if (typeof existingVal !== 'number') {
            return delta;
        }
        // No need to do over/underflow arithmetic here because JS only handles floats under the covers
        return existingVal + delta;
    };
    /**
     * Recursively replace all deferred values and priorities in the tree with the
     * specified generated replacement values.
     * @param {!Path} path path to which write is relative
     * @param {!Node} node new data written at path
     * @param {!SyncTree} syncTree current data
     * @param {!Object} serverValues
     * @return {!SparseSnapshotTree}
     */
    var resolveDeferredValueTree = function (path, node, syncTree, serverValues) {
        return resolveDeferredValue(node, new DeferredValueProvider(syncTree, path), serverValues);
    };
    /**
     * Recursively replace all deferred values and priorities in the node with the
     * specified generated replacement values.  If there are no server values in the node,
     * it'll be returned as-is.
     * @param {!Node} node
     * @param {!Object} serverValues
     * @return {!Node}
     */
    var resolveDeferredValueSnapshot = function (node, existing, serverValues) {
        return resolveDeferredValue(node, new ExistingValueProvider(existing), serverValues);
    };
    function resolveDeferredValue(node, existingVal, serverValues) {
        var rawPri = node.getPriority().val();
        var priority = resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild('.priority'), serverValues);
        var newNode;
        if (node.isLeafNode()) {
            var leafNode = node;
            var value = resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);
            if (value !== leafNode.getValue() ||
                priority !== leafNode.getPriority().val()) {
                return new LeafNode(value, nodeFromJSON$1(priority));
            }
            else {
                return node;
            }
        }
        else {
            var childrenNode = node;
            newNode = childrenNode;
            if (priority !== childrenNode.getPriority().val()) {
                newNode = newNode.updatePriority(new LeafNode(priority));
            }
            childrenNode.forEachChild(PRIORITY_INDEX, function (childName, childNode) {
                var newChildNode = resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);
                if (newChildNode !== childNode) {
                    newNode = newNode.updateImmediateChild(childName, newChildNode);
                }
            });
            return newNode;
        }
    }

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Helper class to store a sparse set of snapshots.
     */
    var SparseSnapshotTree = /** @class */ (function () {
        function SparseSnapshotTree() {
            this.value = null;
            this.children = new Map();
        }
        /**
         * Gets the node stored at the given path if one exists.
         *
         * @param path Path to look up snapshot for.
         * @return The retrieved node, or null.
         */
        SparseSnapshotTree.prototype.find = function (path) {
            if (this.value != null) {
                return this.value.getChild(path);
            }
            else if (!path.isEmpty() && this.children.size > 0) {
                var childKey = path.getFront();
                path = path.popFront();
                if (this.children.has(childKey)) {
                    var childTree = this.children.get(childKey);
                    return childTree.find(path);
                }
                else {
                    return null;
                }
            }
            else {
                return null;
            }
        };
        /**
         * Stores the given node at the specified path. If there is already a node
         * at a shallower path, it merges the new data into that snapshot node.
         *
         * @param path Path to look up snapshot for.
         * @param data The new data, or null.
         */
        SparseSnapshotTree.prototype.remember = function (path, data) {
            if (path.isEmpty()) {
                this.value = data;
                this.children.clear();
            }
            else if (this.value !== null) {
                this.value = this.value.updateChild(path, data);
            }
            else {
                var childKey = path.getFront();
                if (!this.children.has(childKey)) {
                    this.children.set(childKey, new SparseSnapshotTree());
                }
                var child = this.children.get(childKey);
                path = path.popFront();
                child.remember(path, data);
            }
        };
        /**
         * Purge the data at path from the cache.
         *
         * @param path Path to look up snapshot for.
         * @return True if this node should now be removed.
         */
        SparseSnapshotTree.prototype.forget = function (path) {
            if (path.isEmpty()) {
                this.value = null;
                this.children.clear();
                return true;
            }
            else {
                if (this.value !== null) {
                    if (this.value.isLeafNode()) {
                        // We're trying to forget a node that doesn't exist
                        return false;
                    }
                    else {
                        var value = this.value;
                        this.value = null;
                        var self_1 = this;
                        value.forEachChild(PRIORITY_INDEX, function (key, tree) {
                            self_1.remember(new Path(key), tree);
                        });
                        return this.forget(path);
                    }
                }
                else if (this.children.size > 0) {
                    var childKey = path.getFront();
                    path = path.popFront();
                    if (this.children.has(childKey)) {
                        var safeToRemove = this.children.get(childKey).forget(path);
                        if (safeToRemove) {
                            this.children.delete(childKey);
                        }
                    }
                    return this.children.size === 0;
                }
                else {
                    return true;
                }
            }
        };
        /**
         * Recursively iterates through all of the stored tree and calls the
         * callback on each one.
         *
         * @param prefixPath Path to look up node for.
         * @param func The function to invoke for each tree.
         */
        SparseSnapshotTree.prototype.forEachTree = function (prefixPath, func) {
            if (this.value !== null) {
                func(prefixPath, this.value);
            }
            else {
                this.forEachChild(function (key, tree) {
                    var path = new Path(prefixPath.toString() + '/' + key);
                    tree.forEachTree(path, func);
                });
            }
        };
        /**
         * Iterates through each immediate child and triggers the callback.
         *
         * @param func The function to invoke for each child.
         */
        SparseSnapshotTree.prototype.forEachChild = function (func) {
            this.children.forEach(function (tree, key) {
                func(key, tree);
            });
        };
        return SparseSnapshotTree;
    }());

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     *
     * @enum
     */
    var OperationType;
    (function (OperationType) {
        OperationType[OperationType["OVERWRITE"] = 0] = "OVERWRITE";
        OperationType[OperationType["MERGE"] = 1] = "MERGE";
        OperationType[OperationType["ACK_USER_WRITE"] = 2] = "ACK_USER_WRITE";
        OperationType[OperationType["LISTEN_COMPLETE"] = 3] = "LISTEN_COMPLETE";
    })(OperationType || (OperationType = {}));
    /**
     * @param {boolean} fromUser
     * @param {boolean} fromServer
     * @param {?string} queryId
     * @param {boolean} tagged
     * @constructor
     */
    var OperationSource = /** @class */ (function () {
        function OperationSource(fromUser, fromServer, queryId, tagged) {
            this.fromUser = fromUser;
            this.fromServer = fromServer;
            this.queryId = queryId;
            this.tagged = tagged;
            index_cjs.assert(!tagged || fromServer, 'Tagged queries must be from server.');
        }
        /**
         * @const
         * @type {!OperationSource}
         */
        OperationSource.User = new OperationSource(
        /*fromUser=*/ true, false, null, 
        /*tagged=*/ false);
        /**
         * @const
         * @type {!OperationSource}
         */
        OperationSource.Server = new OperationSource(false, 
        /*fromServer=*/ true, null, 
        /*tagged=*/ false);
        /**
         * @param {string} queryId
         * @return {!OperationSource}
         */
        OperationSource.forServerTaggedQuery = function (queryId) {
            return new OperationSource(false, 
            /*fromServer=*/ true, queryId, 
            /*tagged=*/ true);
        };
        return OperationSource;
    }());

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var AckUserWrite = /** @class */ (function () {
        /**
         *
         * @param {!Path} path
         * @param {!ImmutableTree<!boolean>} affectedTree A tree containing true for each affected path. Affected paths can't overlap.
         * @param {!boolean} revert
         */
        function AckUserWrite(
        /** @inheritDoc */ path, 
        /** @inheritDoc */ affectedTree, 
        /** @inheritDoc */ revert) {
            this.path = path;
            this.affectedTree = affectedTree;
            this.revert = revert;
            /** @inheritDoc */
            this.type = OperationType.ACK_USER_WRITE;
            /** @inheritDoc */
            this.source = OperationSource.User;
        }
        /**
         * @inheritDoc
         */
        AckUserWrite.prototype.operationForChild = function (childName) {
            if (!this.path.isEmpty()) {
                index_cjs.assert(this.path.getFront() === childName, 'operationForChild called for unrelated child.');
                return new AckUserWrite(this.path.popFront(), this.affectedTree, this.revert);
            }
            else if (this.affectedTree.value != null) {
                index_cjs.assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');
                // All child locations are affected as well; just return same operation.
                return this;
            }
            else {
                var childTree = this.affectedTree.subtree(new Path(childName));
                return new AckUserWrite(Path.Empty, childTree, this.revert);
            }
        };
        return AckUserWrite;
    }());

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var emptyChildrenSingleton;
    /**
     * Singleton empty children collection.
     *
     * @const
     * @type {!SortedMap.<string, !ImmutableTree.<?>>}
     */
    var EmptyChildren = function () {
        if (!emptyChildrenSingleton) {
            emptyChildrenSingleton = new SortedMap(stringCompare);
        }
        return emptyChildrenSingleton;
    };
    /**
     * A tree with immutable elements.
     */
    var ImmutableTree = /** @class */ (function () {
        /**
         * @template T
         * @param {?T} value
         * @param {SortedMap.<string, !ImmutableTree.<T>>=} children
         */
        function ImmutableTree(value, children) {
            if (children === void 0) { children = EmptyChildren(); }
            this.value = value;
            this.children = children;
        }
        /**
         * @template T
         * @param {!Object.<string, !T>} obj
         * @return {!ImmutableTree.<!T>}
         */
        ImmutableTree.fromObject = function (obj) {
            var tree = ImmutableTree.Empty;
            each(obj, function (childPath, childSnap) {
                tree = tree.set(new Path(childPath), childSnap);
            });
            return tree;
        };
        /**
         * True if the value is empty and there are no children
         * @return {boolean}
         */
        ImmutableTree.prototype.isEmpty = function () {
            return this.value === null && this.children.isEmpty();
        };
        /**
         * Given a path and predicate, return the first node and the path to that node
         * where the predicate returns true.
         *
         * TODO Do a perf test -- If we're creating a bunch of {path: value:} objects
         * on the way back out, it may be better to pass down a pathSoFar obj.
         *
         * @param {!Path} relativePath The remainder of the path
         * @param {function(T):boolean} predicate The predicate to satisfy to return a
         *   node
         * @return {?{path:!Path, value:!T}}
         */
        ImmutableTree.prototype.findRootMostMatchingPathAndValue = function (relativePath, predicate) {
            if (this.value != null && predicate(this.value)) {
                return { path: Path.Empty, value: this.value };
            }
            else {
                if (relativePath.isEmpty()) {
                    return null;
                }
                else {
                    var front = relativePath.getFront();
                    var child = this.children.get(front);
                    if (child !== null) {
                        var childExistingPathAndValue = child.findRootMostMatchingPathAndValue(relativePath.popFront(), predicate);
                        if (childExistingPathAndValue != null) {
                            var fullPath = new Path(front).child(childExistingPathAndValue.path);
                            return { path: fullPath, value: childExistingPathAndValue.value };
                        }
                        else {
                            return null;
                        }
                    }
                    else {
                        return null;
                    }
                }
            }
        };
        /**
         * Find, if it exists, the shortest subpath of the given path that points a defined
         * value in the tree
         * @param {!Path} relativePath
         * @return {?{path: !Path, value: !T}}
         */
        ImmutableTree.prototype.findRootMostValueAndPath = function (relativePath) {
            return this.findRootMostMatchingPathAndValue(relativePath, function () { return true; });
        };
        /**
         * @param {!Path} relativePath
         * @return {!ImmutableTree.<T>} The subtree at the given path
         */
        ImmutableTree.prototype.subtree = function (relativePath) {
            if (relativePath.isEmpty()) {
                return this;
            }
            else {
                var front = relativePath.getFront();
                var childTree = this.children.get(front);
                if (childTree !== null) {
                    return childTree.subtree(relativePath.popFront());
                }
                else {
                    return ImmutableTree.Empty;
                }
            }
        };
        /**
         * Sets a value at the specified path.
         *
         * @param {!Path} relativePath Path to set value at.
         * @param {?T} toSet Value to set.
         * @return {!ImmutableTree.<T>} Resulting tree.
         */
        ImmutableTree.prototype.set = function (relativePath, toSet) {
            if (relativePath.isEmpty()) {
                return new ImmutableTree(toSet, this.children);
            }
            else {
                var front = relativePath.getFront();
                var child = this.children.get(front) || ImmutableTree.Empty;
                var newChild = child.set(relativePath.popFront(), toSet);
                var newChildren = this.children.insert(front, newChild);
                return new ImmutableTree(this.value, newChildren);
            }
        };
        /**
         * Removes the value at the specified path.
         *
         * @param {!Path} relativePath Path to value to remove.
         * @return {!ImmutableTree.<T>} Resulting tree.
         */
        ImmutableTree.prototype.remove = function (relativePath) {
            if (relativePath.isEmpty()) {
                if (this.children.isEmpty()) {
                    return ImmutableTree.Empty;
                }
                else {
                    return new ImmutableTree(null, this.children);
                }
            }
            else {
                var front = relativePath.getFront();
                var child = this.children.get(front);
                if (child) {
                    var newChild = child.remove(relativePath.popFront());
                    var newChildren = void 0;
                    if (newChild.isEmpty()) {
                        newChildren = this.children.remove(front);
                    }
                    else {
                        newChildren = this.children.insert(front, newChild);
                    }
                    if (this.value === null && newChildren.isEmpty()) {
                        return ImmutableTree.Empty;
                    }
                    else {
                        return new ImmutableTree(this.value, newChildren);
                    }
                }
                else {
                    return this;
                }
            }
        };
        /**
         * Gets a value from the tree.
         *
         * @param {!Path} relativePath Path to get value for.
         * @return {?T} Value at path, or null.
         */
        ImmutableTree.prototype.get = function (relativePath) {
            if (relativePath.isEmpty()) {
                return this.value;
            }
            else {
                var front = relativePath.getFront();
                var child = this.children.get(front);
                if (child) {
                    return child.get(relativePath.popFront());
                }
                else {
                    return null;
                }
            }
        };
        /**
         * Replace the subtree at the specified path with the given new tree.
         *
         * @param {!Path} relativePath Path to replace subtree for.
         * @param {!ImmutableTree} newTree New tree.
         * @return {!ImmutableTree} Resulting tree.
         */
        ImmutableTree.prototype.setTree = function (relativePath, newTree) {
            if (relativePath.isEmpty()) {
                return newTree;
            }
            else {
                var front = relativePath.getFront();
                var child = this.children.get(front) || ImmutableTree.Empty;
                var newChild = child.setTree(relativePath.popFront(), newTree);
                var newChildren = void 0;
                if (newChild.isEmpty()) {
                    newChildren = this.children.remove(front);
                }
                else {
                    newChildren = this.children.insert(front, newChild);
                }
                return new ImmutableTree(this.value, newChildren);
            }
        };
        /**
         * Performs a depth first fold on this tree. Transforms a tree into a single
         * value, given a function that operates on the path to a node, an optional
         * current value, and a map of child names to folded subtrees
         * @template V
         * @param {function(Path, ?T, Object.<string, V>):V} fn
         * @return {V}
         */
        ImmutableTree.prototype.fold = function (fn) {
            return this.fold_(Path.Empty, fn);
        };
        /**
         * Recursive helper for public-facing fold() method
         * @template V
         * @param {!Path} pathSoFar
         * @param {function(Path, ?T, Object.<string, V>):V} fn
         * @return {V}
         * @private
         */
        ImmutableTree.prototype.fold_ = function (pathSoFar, fn) {
            var accum = {};
            this.children.inorderTraversal(function (childKey, childTree) {
                accum[childKey] = childTree.fold_(pathSoFar.child(childKey), fn);
            });
            return fn(pathSoFar, this.value, accum);
        };
        /**
         * Find the first matching value on the given path. Return the result of applying f to it.
         * @template V
         * @param {!Path} path
         * @param {!function(!Path, !T):?V} f
         * @return {?V}
         */
        ImmutableTree.prototype.findOnPath = function (path, f) {
            return this.findOnPath_(path, Path.Empty, f);
        };
        ImmutableTree.prototype.findOnPath_ = function (pathToFollow, pathSoFar, f) {
            var result = this.value ? f(pathSoFar, this.value) : false;
            if (result) {
                return result;
            }
            else {
                if (pathToFollow.isEmpty()) {
                    return null;
                }
                else {
                    var front = pathToFollow.getFront();
                    var nextChild = this.children.get(front);
                    if (nextChild) {
                        return nextChild.findOnPath_(pathToFollow.popFront(), pathSoFar.child(front), f);
                    }
                    else {
                        return null;
                    }
                }
            }
        };
        /**
         *
         * @param {!Path} path
         * @param {!function(!Path, !T)} f
         * @returns {!ImmutableTree.<T>}
         */
        ImmutableTree.prototype.foreachOnPath = function (path, f) {
            return this.foreachOnPath_(path, Path.Empty, f);
        };
        ImmutableTree.prototype.foreachOnPath_ = function (pathToFollow, currentRelativePath, f) {
            if (pathToFollow.isEmpty()) {
                return this;
            }
            else {
                if (this.value) {
                    f(currentRelativePath, this.value);
                }
                var front = pathToFollow.getFront();
                var nextChild = this.children.get(front);
                if (nextChild) {
                    return nextChild.foreachOnPath_(pathToFollow.popFront(), currentRelativePath.child(front), f);
                }
                else {
                    return ImmutableTree.Empty;
                }
            }
        };
        /**
         * Calls the given function for each node in the tree that has a value.
         *
         * @param {function(!Path, !T)} f A function to be called with
         *   the path from the root of the tree to a node, and the value at that node.
         *   Called in depth-first order.
         */
        ImmutableTree.prototype.foreach = function (f) {
            this.foreach_(Path.Empty, f);
        };
        ImmutableTree.prototype.foreach_ = function (currentRelativePath, f) {
            this.children.inorderTraversal(function (childName, childTree) {
                childTree.foreach_(currentRelativePath.child(childName), f);
            });
            if (this.value) {
                f(currentRelativePath, this.value);
            }
        };
        /**
         *
         * @param {function(string, !T)} f
         */
        ImmutableTree.prototype.foreachChild = function (f) {
            this.children.inorderTraversal(function (childName, childTree) {
                if (childTree.value) {
                    f(childName, childTree.value);
                }
            });
        };
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        ImmutableTree.Empty = new ImmutableTree(null);
        return ImmutableTree;
    }());

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @param {!OperationSource} source
     * @param {!Path} path
     * @constructor
     * @implements {Operation}
     */
    var ListenComplete = /** @class */ (function () {
        function ListenComplete(source, path) {
            this.source = source;
            this.path = path;
            /** @inheritDoc */
            this.type = OperationType.LISTEN_COMPLETE;
        }
        ListenComplete.prototype.operationForChild = function (childName) {
            if (this.path.isEmpty()) {
                return new ListenComplete(this.source, Path.Empty);
            }
            else {
                return new ListenComplete(this.source, this.path.popFront());
            }
        };
        return ListenComplete;
    }());

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @param {!OperationSource} source
     * @param {!Path} path
     * @param {!Node} snap
     * @constructor
     * @implements {Operation}
     */
    var Overwrite = /** @class */ (function () {
        function Overwrite(source, path, snap) {
            this.source = source;
            this.path = path;
            this.snap = snap;
            /** @inheritDoc */
            this.type = OperationType.OVERWRITE;
        }
        Overwrite.prototype.operationForChild = function (childName) {
            if (this.path.isEmpty()) {
                return new Overwrite(this.source, Path.Empty, this.snap.getImmediateChild(childName));
            }
            else {
                return new Overwrite(this.source, this.path.popFront(), this.snap);
            }
        };
        return Overwrite;
    }());

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @param {!OperationSource} source
     * @param {!Path} path
     * @param {!ImmutableTree.<!Node>} children
     * @constructor
     * @implements {Operation}
     */
    var Merge = /** @class */ (function () {
        function Merge(
        /** @inheritDoc */ source, 
        /** @inheritDoc */ path, 
        /** @inheritDoc */ children) {
            this.source = source;
            this.path = path;
            this.children = children;
            /** @inheritDoc */
            this.type = OperationType.MERGE;
        }
        /**
         * @inheritDoc
         */
        Merge.prototype.operationForChild = function (childName) {
            if (this.path.isEmpty()) {
                var childTree = this.children.subtree(new Path(childName));
                if (childTree.isEmpty()) {
                    // This child is unaffected
                    return null;
                }
                else if (childTree.value) {
                    // We have a snapshot for the child in question.  This becomes an overwrite of the child.
                    return new Overwrite(this.source, Path.Empty, childTree.value);
                }
                else {
                    // This is a merge at a deeper level
                    return new Merge(this.source, Path.Empty, childTree);
                }
            }
            else {
                index_cjs.assert(this.path.getFront() === childName, "Can't get a merge for a child not on the path of the operation");
                return new Merge(this.source, this.path.popFront(), this.children);
            }
        };
        /**
         * @inheritDoc
         */
        Merge.prototype.toString = function () {
            return ('Operation(' +
                this.path +
                ': ' +
                this.source.toString() +
                ' merge: ' +
                this.children.toString() +
                ')');
        };
        return Merge;
    }());

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully
     * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.
     * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks
     * whether a node potentially had children removed due to a filter.
     */
    var CacheNode = /** @class */ (function () {
        /**
         * @param {!Node} node_
         * @param {boolean} fullyInitialized_
         * @param {boolean} filtered_
         */
        function CacheNode(node_, fullyInitialized_, filtered_) {
            this.node_ = node_;
            this.fullyInitialized_ = fullyInitialized_;
            this.filtered_ = filtered_;
        }
        /**
         * Returns whether this node was fully initialized with either server data or a complete overwrite by the client
         * @return {boolean}
         */
        CacheNode.prototype.isFullyInitialized = function () {
            return this.fullyInitialized_;
        };
        /**
         * Returns whether this node is potentially missing children due to a filter applied to the node
         * @return {boolean}
         */
        CacheNode.prototype.isFiltered = function () {
            return this.filtered_;
        };
        /**
         * @param {!Path} path
         * @return {boolean}
         */
        CacheNode.prototype.isCompleteForPath = function (path) {
            if (path.isEmpty()) {
                return this.isFullyInitialized() && !this.filtered_;
            }
            var childKey = path.getFront();
            return this.isCompleteForChild(childKey);
        };
        /**
         * @param {!string} key
         * @return {boolean}
         */
        CacheNode.prototype.isCompleteForChild = function (key) {
            return ((this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key));
        };
        /**
         * @return {!Node}
         */
        CacheNode.prototype.getNode = function () {
            return this.node_;
        };
        return CacheNode;
    }());

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Stores the data we have cached for a view.
     *
     * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).
     *
     * @constructor
     */
    var ViewCache = /** @class */ (function () {
        /**
         *
         * @param {!CacheNode} eventCache_
         * @param {!CacheNode} serverCache_
         */
        function ViewCache(eventCache_, serverCache_) {
            this.eventCache_ = eventCache_;
            this.serverCache_ = serverCache_;
        }
        /**
         * @param {!Node} eventSnap
         * @param {boolean} complete
         * @param {boolean} filtered
         * @return {!ViewCache}
         */
        ViewCache.prototype.updateEventSnap = function (eventSnap, complete, filtered) {
            return new ViewCache(new CacheNode(eventSnap, complete, filtered), this.serverCache_);
        };
        /**
         * @param {!Node} serverSnap
         * @param {boolean} complete
         * @param {boolean} filtered
         * @return {!ViewCache}
         */
        ViewCache.prototype.updateServerSnap = function (serverSnap, complete, filtered) {
            return new ViewCache(this.eventCache_, new CacheNode(serverSnap, complete, filtered));
        };
        /**
         * @return {!CacheNode}
         */
        ViewCache.prototype.getEventCache = function () {
            return this.eventCache_;
        };
        /**
         * @return {?Node}
         */
        ViewCache.prototype.getCompleteEventSnap = function () {
            return this.eventCache_.isFullyInitialized()
                ? this.eventCache_.getNode()
                : null;
        };
        /**
         * @return {!CacheNode}
         */
        ViewCache.prototype.getServerCache = function () {
            return this.serverCache_;
        };
        /**
         * @return {?Node}
         */
        ViewCache.prototype.getCompleteServerSnap = function () {
            return this.serverCache_.isFullyInitialized()
                ? this.serverCache_.getNode()
                : null;
        };
        /**
         * @const
         * @type {ViewCache}
         */
        ViewCache.Empty = new ViewCache(new CacheNode(ChildrenNode.EMPTY_NODE, 
        /*fullyInitialized=*/ false, 
        /*filtered=*/ false), new CacheNode(ChildrenNode.EMPTY_NODE, 
        /*fullyInitialized=*/ false, 
        /*filtered=*/ false));
        return ViewCache;
    }());

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @constructor
     * @struct
     * @param {!string} type The event type
     * @param {!Node} snapshotNode The data
     * @param {string=} childName The name for this child, if it's a child event
     * @param {Node=} oldSnap Used for intermediate processing of child changed events
     * @param {string=} prevName The name for the previous child, if applicable
     */
    var Change = /** @class */ (function () {
        function Change(type, snapshotNode, childName, oldSnap, prevName) {
            this.type = type;
            this.snapshotNode = snapshotNode;
            this.childName = childName;
            this.oldSnap = oldSnap;
            this.prevName = prevName;
        }
        /**
         * @param {!Node} snapshot
         * @return {!Change}
         */
        Change.valueChange = function (snapshot) {
            return new Change(Change.VALUE, snapshot);
        };
        /**
         * @param {string} childKey
         * @param {!Node} snapshot
         * @return {!Change}
         */
        Change.childAddedChange = function (childKey, snapshot) {
            return new Change(Change.CHILD_ADDED, snapshot, childKey);
        };
        /**
         * @param {string} childKey
         * @param {!Node} snapshot
         * @return {!Change}
         */
        Change.childRemovedChange = function (childKey, snapshot) {
            return new Change(Change.CHILD_REMOVED, snapshot, childKey);
        };
        /**
         * @param {string} childKey
         * @param {!Node} newSnapshot
         * @param {!Node} oldSnapshot
         * @return {!Change}
         */
        Change.childChangedChange = function (childKey, newSnapshot, oldSnapshot) {
            return new Change(Change.CHILD_CHANGED, newSnapshot, childKey, oldSnapshot);
        };
        /**
         * @param {string} childKey
         * @param {!Node} snapshot
         * @return {!Change}
         */
        Change.childMovedChange = function (childKey, snapshot) {
            return new Change(Change.CHILD_MOVED, snapshot, childKey);
        };
        //event types
        /** Event type for a child added */
        Change.CHILD_ADDED = 'child_added';
        /** Event type for a child removed */
        Change.CHILD_REMOVED = 'child_removed';
        /** Event type for a child changed */
        Change.CHILD_CHANGED = 'child_changed';
        /** Event type for a child moved */
        Change.CHILD_MOVED = 'child_moved';
        /** Event type for a value change */
        Change.VALUE = 'value';
        return Change;
    }());

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Doesn't really filter nodes but applies an index to the node and keeps track of any changes
     *
     * @constructor
     * @implements {NodeFilter}
     * @param {!Index} index
     */
    var IndexedFilter = /** @class */ (function () {
        function IndexedFilter(index_) {
            this.index_ = index_;
        }
        IndexedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {
            index_cjs.assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');
            var oldChild = snap.getImmediateChild(key);
            // Check if anything actually changed.
            if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {
                // There's an edge case where a child can enter or leave the view because affectedPath was set to null.
                // In this case, affectedPath will appear null in both the old and new snapshots.  So we need
                // to avoid treating these cases as "nothing changed."
                if (oldChild.isEmpty() === newChild.isEmpty()) {
                    // Nothing changed.
                    // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.
                    //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');
                    return snap;
                }
            }
            if (optChangeAccumulator != null) {
                if (newChild.isEmpty()) {
                    if (snap.hasChild(key)) {
                        optChangeAccumulator.trackChildChange(Change.childRemovedChange(key, oldChild));
                    }
                    else {
                        index_cjs.assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');
                    }
                }
                else if (oldChild.isEmpty()) {
                    optChangeAccumulator.trackChildChange(Change.childAddedChange(key, newChild));
                }
                else {
                    optChangeAccumulator.trackChildChange(Change.childChangedChange(key, newChild, oldChild));
                }
            }
            if (snap.isLeafNode() && newChild.isEmpty()) {
                return snap;
            }
            else {
                // Make sure the node is indexed
                return snap.updateImmediateChild(key, newChild).withIndex(this.index_);
            }
        };
        /**
         * @inheritDoc
         */
        IndexedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {
            if (optChangeAccumulator != null) {
                if (!oldSnap.isLeafNode()) {
                    oldSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {
                        if (!newSnap.hasChild(key)) {
                            optChangeAccumulator.trackChildChange(Change.childRemovedChange(key, childNode));
                        }
                    });
                }
                if (!newSnap.isLeafNode()) {
                    newSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {
                        if (oldSnap.hasChild(key)) {
                            var oldChild = oldSnap.getImmediateChild(key);
                            if (!oldChild.equals(childNode)) {
                                optChangeAccumulator.trackChildChange(Change.childChangedChange(key, childNode, oldChild));
                            }
                        }
                        else {
                            optChangeAccumulator.trackChildChange(Change.childAddedChange(key, childNode));
                        }
                    });
                }
            }
            return newSnap.withIndex(this.index_);
        };
        /**
         * @inheritDoc
         */
        IndexedFilter.prototype.updatePriority = function (oldSnap, newPriority) {
            if (oldSnap.isEmpty()) {
                return ChildrenNode.EMPTY_NODE;
            }
            else {
                return oldSnap.updatePriority(newPriority);
            }
        };
        /**
         * @inheritDoc
         */
        IndexedFilter.prototype.filtersNodes = function () {
            return false;
        };
        /**
         * @inheritDoc
         */
        IndexedFilter.prototype.getIndexedFilter = function () {
            return this;
        };
        /**
         * @inheritDoc
         */
        IndexedFilter.prototype.getIndex = function () {
            return this.index_;
        };
        return IndexedFilter;
    }());

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ChildChangeAccumulator = /** @class */ (function () {
        function ChildChangeAccumulator() {
            this.changeMap = new Map();
        }
        ChildChangeAccumulator.prototype.trackChildChange = function (change) {
            var type = change.type;
            var childKey = change.childName;
            index_cjs.assert(type === Change.CHILD_ADDED ||
                type === Change.CHILD_CHANGED ||
                type === Change.CHILD_REMOVED, 'Only child changes supported for tracking');
            index_cjs.assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');
            var oldChange = this.changeMap.get(childKey);
            if (oldChange) {
                var oldType = oldChange.type;
                if (type === Change.CHILD_ADDED && oldType === Change.CHILD_REMOVED) {
                    this.changeMap.set(childKey, Change.childChangedChange(childKey, change.snapshotNode, oldChange.snapshotNode));
                }
                else if (type === Change.CHILD_REMOVED &&
                    oldType === Change.CHILD_ADDED) {
                    this.changeMap.delete(childKey);
                }
                else if (type === Change.CHILD_REMOVED &&
                    oldType === Change.CHILD_CHANGED) {
                    this.changeMap.set(childKey, Change.childRemovedChange(childKey, oldChange.oldSnap));
                }
                else if (type === Change.CHILD_CHANGED &&
                    oldType === Change.CHILD_ADDED) {
                    this.changeMap.set(childKey, Change.childAddedChange(childKey, change.snapshotNode));
                }
                else if (type === Change.CHILD_CHANGED &&
                    oldType === Change.CHILD_CHANGED) {
                    this.changeMap.set(childKey, Change.childChangedChange(childKey, change.snapshotNode, oldChange.oldSnap));
                }
                else {
                    throw index_cjs.assertionError('Illegal combination of changes: ' +
                        change +
                        ' occurred after ' +
                        oldChange);
                }
            }
            else {
                this.changeMap.set(childKey, change);
            }
        };
        ChildChangeAccumulator.prototype.getChanges = function () {
            return Array.from(this.changeMap.values());
        };
        return ChildChangeAccumulator;
    }());

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An implementation of CompleteChildSource that never returns any additional children
     *
     * @private
     * @constructor
     * @implements CompleteChildSource
     */
    // eslint-disable-next-line @typescript-eslint/class-name-casing
    var NoCompleteChildSource_ = /** @class */ (function () {
        function NoCompleteChildSource_() {
        }
        /**
         * @inheritDoc
         */
        NoCompleteChildSource_.prototype.getCompleteChild = function (childKey) {
            return null;
        };
        /**
         * @inheritDoc
         */
        NoCompleteChildSource_.prototype.getChildAfterChild = function (index, child, reverse) {
            return null;
        };
        return NoCompleteChildSource_;
    }());
    /**
     * Singleton instance.
     * @const
     * @type {!CompleteChildSource}
     */
    var NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();
    /**
     * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or
     * old event caches available to calculate complete children.
     *
     *
     * @implements CompleteChildSource
     */
    var WriteTreeCompleteChildSource = /** @class */ (function () {
        /**
         * @param {!WriteTreeRef} writes_
         * @param {!ViewCache} viewCache_
         * @param {?Node} optCompleteServerCache_
         */
        function WriteTreeCompleteChildSource(writes_, viewCache_, optCompleteServerCache_) {
            if (optCompleteServerCache_ === void 0) { optCompleteServerCache_ = null; }
            this.writes_ = writes_;
            this.viewCache_ = viewCache_;
            this.optCompleteServerCache_ = optCompleteServerCache_;
        }
        /**
         * @inheritDoc
         */
        WriteTreeCompleteChildSource.prototype.getCompleteChild = function (childKey) {
            var node = this.viewCache_.getEventCache();
            if (node.isCompleteForChild(childKey)) {
                return node.getNode().getImmediateChild(childKey);
            }
            else {
                var serverNode = this.optCompleteServerCache_ != null
                    ? new CacheNode(this.optCompleteServerCache_, true, false)
                    : this.viewCache_.getServerCache();
                return this.writes_.calcCompleteChild(childKey, serverNode);
            }
        };
        /**
         * @inheritDoc
         */
        WriteTreeCompleteChildSource.prototype.getChildAfterChild = function (index, child, reverse) {
            var completeServerData = this.optCompleteServerCache_ != null
                ? this.optCompleteServerCache_
                : this.viewCache_.getCompleteServerSnap();
            var nodes = this.writes_.calcIndexedSlice(completeServerData, child, 1, reverse, index);
            if (nodes.length === 0) {
                return null;
            }
            else {
                return nodes[0];
            }
        };
        return WriteTreeCompleteChildSource;
    }());

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @constructor
     * @struct
     */
    var ProcessorResult = /** @class */ (function () {
        /**
         * @param {!ViewCache} viewCache
         * @param {!Array.<!Change>} changes
         */
        function ProcessorResult(viewCache, changes) {
            this.viewCache = viewCache;
            this.changes = changes;
        }
        return ProcessorResult;
    }());
    /**
     * @constructor
     */
    var ViewProcessor = /** @class */ (function () {
        /**
         * @param {!NodeFilter} filter_
         */
        function ViewProcessor(filter_) {
            this.filter_ = filter_;
        }
        /**
         * @param {!ViewCache} viewCache
         */
        ViewProcessor.prototype.assertIndexed = function (viewCache) {
            index_cjs.assert(viewCache
                .getEventCache()
                .getNode()
                .isIndexed(this.filter_.getIndex()), 'Event snap not indexed');
            index_cjs.assert(viewCache
                .getServerCache()
                .getNode()
                .isIndexed(this.filter_.getIndex()), 'Server snap not indexed');
        };
        /**
         * @param {!ViewCache} oldViewCache
         * @param {!Operation} operation
         * @param {!WriteTreeRef} writesCache
         * @param {?Node} completeCache
         * @return {!ProcessorResult}
         */
        ViewProcessor.prototype.applyOperation = function (oldViewCache, operation, writesCache, completeCache) {
            var accumulator = new ChildChangeAccumulator();
            var newViewCache, filterServerNode;
            if (operation.type === OperationType.OVERWRITE) {
                var overwrite = operation;
                if (overwrite.source.fromUser) {
                    newViewCache = this.applyUserOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);
                }
                else {
                    index_cjs.assert(overwrite.source.fromServer, 'Unknown source.');
                    // We filter the node if it's a tagged update or the node has been previously filtered  and the
                    // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered
                    // again
                    filterServerNode =
                        overwrite.source.tagged ||
                            (oldViewCache.getServerCache().isFiltered() &&
                                !overwrite.path.isEmpty());
                    newViewCache = this.applyServerOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);
                }
            }
            else if (operation.type === OperationType.MERGE) {
                var merge = operation;
                if (merge.source.fromUser) {
                    newViewCache = this.applyUserMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);
                }
                else {
                    index_cjs.assert(merge.source.fromServer, 'Unknown source.');
                    // We filter the node if it's a tagged update or the node has been previously filtered
                    filterServerNode =
                        merge.source.tagged || oldViewCache.getServerCache().isFiltered();
                    newViewCache = this.applyServerMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);
                }
            }
            else if (operation.type === OperationType.ACK_USER_WRITE) {
                var ackUserWrite = operation;
                if (!ackUserWrite.revert) {
                    newViewCache = this.ackUserWrite_(oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);
                }
                else {
                    newViewCache = this.revertUserWrite_(oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);
                }
            }
            else if (operation.type === OperationType.LISTEN_COMPLETE) {
                newViewCache = this.listenComplete_(oldViewCache, operation.path, writesCache, accumulator);
            }
            else {
                throw index_cjs.assertionError('Unknown operation type: ' + operation.type);
            }
            var changes = accumulator.getChanges();
            ViewProcessor.maybeAddValueEvent_(oldViewCache, newViewCache, changes);
            return new ProcessorResult(newViewCache, changes);
        };
        /**
         * @param {!ViewCache} oldViewCache
         * @param {!ViewCache} newViewCache
         * @param {!Array.<!Change>} accumulator
         * @private
         */
        ViewProcessor.maybeAddValueEvent_ = function (oldViewCache, newViewCache, accumulator) {
            var eventSnap = newViewCache.getEventCache();
            if (eventSnap.isFullyInitialized()) {
                var isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();
                var oldCompleteSnap = oldViewCache.getCompleteEventSnap();
                if (accumulator.length > 0 ||
                    !oldViewCache.getEventCache().isFullyInitialized() ||
                    (isLeafOrEmpty &&
                        !eventSnap.getNode().equals(/** @type {!Node} */ oldCompleteSnap)) ||
                    !eventSnap
                        .getNode()
                        .getPriority()
                        .equals(oldCompleteSnap.getPriority())) {
                    accumulator.push(Change.valueChange(
                    /** @type {!Node} */ newViewCache.getCompleteEventSnap()));
                }
            }
        };
        /**
         * @param {!ViewCache} viewCache
         * @param {!Path} changePath
         * @param {!WriteTreeRef} writesCache
         * @param {!CompleteChildSource} source
         * @param {!ChildChangeAccumulator} accumulator
         * @return {!ViewCache}
         * @private
         */
        ViewProcessor.prototype.generateEventCacheAfterServerEvent_ = function (viewCache, changePath, writesCache, source, accumulator) {
            var oldEventSnap = viewCache.getEventCache();
            if (writesCache.shadowingWrite(changePath) != null) {
                // we have a shadowing write, ignore changes
                return viewCache;
            }
            else {
                var newEventCache = void 0, serverNode = void 0;
                if (changePath.isEmpty()) {
                    // TODO: figure out how this plays with "sliding ack windows"
                    index_cjs.assert(viewCache.getServerCache().isFullyInitialized(), 'If change path is empty, we must have complete server data');
                    if (viewCache.getServerCache().isFiltered()) {
                        // We need to special case this, because we need to only apply writes to complete children, or
                        // we might end up raising events for incomplete children. If the server data is filtered deep
                        // writes cannot be guaranteed to be complete
                        var serverCache = viewCache.getCompleteServerSnap();
                        var completeChildren = serverCache instanceof ChildrenNode
                            ? serverCache
                            : ChildrenNode.EMPTY_NODE;
                        var completeEventChildren = writesCache.calcCompleteEventChildren(completeChildren);
                        newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeEventChildren, accumulator);
                    }
                    else {
                        var completeNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());
                        newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeNode, accumulator);
                    }
                }
                else {
                    var childKey = changePath.getFront();
                    if (childKey === '.priority') {
                        index_cjs.assert(changePath.getLength() === 1, "Can't have a priority with additional path components");
                        var oldEventNode = oldEventSnap.getNode();
                        serverNode = viewCache.getServerCache().getNode();
                        // we might have overwrites for this priority
                        var updatedPriority = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventNode, serverNode);
                        if (updatedPriority != null) {
                            newEventCache = this.filter_.updatePriority(oldEventNode, updatedPriority);
                        }
                        else {
                            // priority didn't change, keep old node
                            newEventCache = oldEventSnap.getNode();
                        }
                    }
                    else {
                        var childChangePath = changePath.popFront();
                        // update child
                        var newEventChild = void 0;
                        if (oldEventSnap.isCompleteForChild(childKey)) {
                            serverNode = viewCache.getServerCache().getNode();
                            var eventChildUpdate = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventSnap.getNode(), serverNode);
                            if (eventChildUpdate != null) {
                                newEventChild = oldEventSnap
                                    .getNode()
                                    .getImmediateChild(childKey)
                                    .updateChild(childChangePath, eventChildUpdate);
                            }
                            else {
                                // Nothing changed, just keep the old child
                                newEventChild = oldEventSnap
                                    .getNode()
                                    .getImmediateChild(childKey);
                            }
                        }
                        else {
                            newEventChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());
                        }
                        if (newEventChild != null) {
                            newEventCache = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);
                        }
                        else {
                            // no complete child available or no change
                            newEventCache = oldEventSnap.getNode();
                        }
                    }
                }
                return viewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized() || changePath.isEmpty(), this.filter_.filtersNodes());
            }
        };
        /**
         * @param {!ViewCache} oldViewCache
         * @param {!Path} changePath
         * @param {!Node} changedSnap
         * @param {!WriteTreeRef} writesCache
         * @param {?Node} completeCache
         * @param {boolean} filterServerNode
         * @param {!ChildChangeAccumulator} accumulator
         * @return {!ViewCache}
         * @private
         */
        ViewProcessor.prototype.applyServerOverwrite_ = function (oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {
            var oldServerSnap = oldViewCache.getServerCache();
            var newServerCache;
            var serverFilter = filterServerNode
                ? this.filter_
                : this.filter_.getIndexedFilter();
            if (changePath.isEmpty()) {
                newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);
            }
            else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {
                // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update
                var newServerNode = oldServerSnap
                    .getNode()
                    .updateChild(changePath, changedSnap);
                newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);
            }
            else {
                var childKey = changePath.getFront();
                if (!oldServerSnap.isCompleteForPath(changePath) &&
                    changePath.getLength() > 1) {
                    // We don't update incomplete nodes with updates intended for other listeners
                    return oldViewCache;
                }
                var childChangePath = changePath.popFront();
                var childNode = oldServerSnap.getNode().getImmediateChild(childKey);
                var newChildNode = childNode.updateChild(childChangePath, changedSnap);
                if (childKey === '.priority') {
                    newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);
                }
                else {
                    newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);
                }
            }
            var newViewCache = oldViewCache.updateServerSnap(newServerCache, oldServerSnap.isFullyInitialized() || changePath.isEmpty(), serverFilter.filtersNodes());
            var source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);
            return this.generateEventCacheAfterServerEvent_(newViewCache, changePath, writesCache, source, accumulator);
        };
        /**
         * @param {!ViewCache} oldViewCache
         * @param {!Path} changePath
         * @param {!Node} changedSnap
         * @param {!WriteTreeRef} writesCache
         * @param {?Node} completeCache
         * @param {!ChildChangeAccumulator} accumulator
         * @return {!ViewCache}
         * @private
         */
        ViewProcessor.prototype.applyUserOverwrite_ = function (oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {
            var oldEventSnap = oldViewCache.getEventCache();
            var newViewCache, newEventCache;
            var source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);
            if (changePath.isEmpty()) {
                newEventCache = this.filter_.updateFullNode(oldViewCache.getEventCache().getNode(), changedSnap, accumulator);
                newViewCache = oldViewCache.updateEventSnap(newEventCache, true, this.filter_.filtersNodes());
            }
            else {
                var childKey = changePath.getFront();
                if (childKey === '.priority') {
                    newEventCache = this.filter_.updatePriority(oldViewCache.getEventCache().getNode(), changedSnap);
                    newViewCache = oldViewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());
                }
                else {
                    var childChangePath = changePath.popFront();
                    var oldChild = oldEventSnap.getNode().getImmediateChild(childKey);
                    var newChild = void 0;
                    if (childChangePath.isEmpty()) {
                        // Child overwrite, we can replace the child
                        newChild = changedSnap;
                    }
                    else {
                        var childNode = source.getCompleteChild(childKey);
                        if (childNode != null) {
                            if (childChangePath.getBack() === '.priority' &&
                                childNode.getChild(childChangePath.parent()).isEmpty()) {
                                // This is a priority update on an empty node. If this node exists on the server, the
                                // server will send down the priority in the update, so ignore for now
                                newChild = childNode;
                            }
                            else {
                                newChild = childNode.updateChild(childChangePath, changedSnap);
                            }
                        }
                        else {
                            // There is no complete child node available
                            newChild = ChildrenNode.EMPTY_NODE;
                        }
                    }
                    if (!oldChild.equals(newChild)) {
                        var newEventSnap = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);
                        newViewCache = oldViewCache.updateEventSnap(newEventSnap, oldEventSnap.isFullyInitialized(), this.filter_.filtersNodes());
                    }
                    else {
                        newViewCache = oldViewCache;
                    }
                }
            }
            return newViewCache;
        };
        /**
         * @param {!ViewCache} viewCache
         * @param {string} childKey
         * @return {boolean}
         * @private
         */
        ViewProcessor.cacheHasChild_ = function (viewCache, childKey) {
            return viewCache.getEventCache().isCompleteForChild(childKey);
        };
        /**
         * @param {!ViewCache} viewCache
         * @param {!Path} path
         * @param {ImmutableTree.<!Node>} changedChildren
         * @param {!WriteTreeRef} writesCache
         * @param {?Node} serverCache
         * @param {!ChildChangeAccumulator} accumulator
         * @return {!ViewCache}
         * @private
         */
        ViewProcessor.prototype.applyUserMerge_ = function (viewCache, path, changedChildren, writesCache, serverCache, accumulator) {
            var _this = this;
            // HACK: In the case of a limit query, there may be some changes that bump things out of the
            // window leaving room for new items.  It's important we process these changes first, so we
            // iterate the changes twice, first processing any that affect items currently in view.
            // TODO: I consider an item "in view" if cacheHasChild is true, which checks both the server
            // and event snap.  I'm not sure if this will result in edge cases when a child is in one but
            // not the other.
            var curViewCache = viewCache;
            changedChildren.foreach(function (relativePath, childNode) {
                var writePath = path.child(relativePath);
                if (ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {
                    curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);
                }
            });
            changedChildren.foreach(function (relativePath, childNode) {
                var writePath = path.child(relativePath);
                if (!ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {
                    curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);
                }
            });
            return curViewCache;
        };
        /**
         * @param {!Node} node
         * @param {ImmutableTree.<!Node>} merge
         * @return {!Node}
         * @private
         */
        ViewProcessor.prototype.applyMerge_ = function (node, merge) {
            merge.foreach(function (relativePath, childNode) {
                node = node.updateChild(relativePath, childNode);
            });
            return node;
        };
        /**
         * @param {!ViewCache} viewCache
         * @param {!Path} path
         * @param {!ImmutableTree.<!Node>} changedChildren
         * @param {!WriteTreeRef} writesCache
         * @param {?Node} serverCache
         * @param {boolean} filterServerNode
         * @param {!ChildChangeAccumulator} accumulator
         * @return {!ViewCache}
         * @private
         */
        ViewProcessor.prototype.applyServerMerge_ = function (viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {
            var _this = this;
            // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and
            // wait for the complete data update coming soon.
            if (viewCache
                .getServerCache()
                .getNode()
                .isEmpty() &&
                !viewCache.getServerCache().isFullyInitialized()) {
                return viewCache;
            }
            // HACK: In the case of a limit query, there may be some changes that bump things out of the
            // window leaving room for new items.  It's important we process these changes first, so we
            // iterate the changes twice, first processing any that affect items currently in view.
            // TODO: I consider an item "in view" if cacheHasChild is true, which checks both the server
            // and event snap.  I'm not sure if this will result in edge cases when a child is in one but
            // not the other.
            var curViewCache = viewCache;
            var viewMergeTree;
            if (path.isEmpty()) {
                viewMergeTree = changedChildren;
            }
            else {
                viewMergeTree = ImmutableTree.Empty.setTree(path, changedChildren);
            }
            var serverNode = viewCache.getServerCache().getNode();
            viewMergeTree.children.inorderTraversal(function (childKey, childTree) {
                if (serverNode.hasChild(childKey)) {
                    var serverChild = viewCache
                        .getServerCache()
                        .getNode()
                        .getImmediateChild(childKey);
                    var newChild = _this.applyMerge_(serverChild, childTree);
                    curViewCache = _this.applyServerOverwrite_(curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);
                }
            });
            viewMergeTree.children.inorderTraversal(function (childKey, childMergeTree) {
                var isUnknownDeepMerge = !viewCache.getServerCache().isCompleteForChild(childKey) &&
                    childMergeTree.value == null;
                if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {
                    var serverChild = viewCache
                        .getServerCache()
                        .getNode()
                        .getImmediateChild(childKey);
                    var newChild = _this.applyMerge_(serverChild, childMergeTree);
                    curViewCache = _this.applyServerOverwrite_(curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);
                }
            });
            return curViewCache;
        };
        /**
         * @param {!ViewCache} viewCache
         * @param {!Path} ackPath
         * @param {!ImmutableTree<!boolean>} affectedTree
         * @param {!WriteTreeRef} writesCache
         * @param {?Node} completeCache
         * @param {!ChildChangeAccumulator} accumulator
         * @return {!ViewCache}
         * @private
         */
        ViewProcessor.prototype.ackUserWrite_ = function (viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {
            if (writesCache.shadowingWrite(ackPath) != null) {
                return viewCache;
            }
            // Only filter server node if it is currently filtered
            var filterServerNode = viewCache.getServerCache().isFiltered();
            // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update
            // now that it won't be shadowed.
            var serverCache = viewCache.getServerCache();
            if (affectedTree.value != null) {
                // This is an overwrite.
                if ((ackPath.isEmpty() && serverCache.isFullyInitialized()) ||
                    serverCache.isCompleteForPath(ackPath)) {
                    return this.applyServerOverwrite_(viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);
                }
                else if (ackPath.isEmpty()) {
                    // This is a goofy edge case where we are acking data at this location but don't have full data.  We
                    // should just re-apply whatever we have in our cache as a merge.
                    var changedChildren_1 = ImmutableTree.Empty;
                    serverCache.getNode().forEachChild(KEY_INDEX, function (name, node) {
                        changedChildren_1 = changedChildren_1.set(new Path(name), node);
                    });
                    return this.applyServerMerge_(viewCache, ackPath, changedChildren_1, writesCache, completeCache, filterServerNode, accumulator);
                }
                else {
                    return viewCache;
                }
            }
            else {
                // This is a merge.
                var changedChildren_2 = ImmutableTree.Empty;
                affectedTree.foreach(function (mergePath, value) {
                    var serverCachePath = ackPath.child(mergePath);
                    if (serverCache.isCompleteForPath(serverCachePath)) {
                        changedChildren_2 = changedChildren_2.set(mergePath, serverCache.getNode().getChild(serverCachePath));
                    }
                });
                return this.applyServerMerge_(viewCache, ackPath, changedChildren_2, writesCache, completeCache, filterServerNode, accumulator);
            }
        };
        /**
         * @param {!ViewCache} viewCache
         * @param {!Path} path
         * @param {!WriteTreeRef} writesCache
         * @param {!ChildChangeAccumulator} accumulator
         * @return {!ViewCache}
         * @private
         */
        ViewProcessor.prototype.listenComplete_ = function (viewCache, path, writesCache, accumulator) {
            var oldServerNode = viewCache.getServerCache();
            var newViewCache = viewCache.updateServerSnap(oldServerNode.getNode(), oldServerNode.isFullyInitialized() || path.isEmpty(), oldServerNode.isFiltered());
            return this.generateEventCacheAfterServerEvent_(newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);
        };
        /**
         * @param {!ViewCache} viewCache
         * @param {!Path} path
         * @param {!WriteTreeRef} writesCache
         * @param {?Node} completeServerCache
         * @param {!ChildChangeAccumulator} accumulator
         * @return {!ViewCache}
         * @private
         */
        ViewProcessor.prototype.revertUserWrite_ = function (viewCache, path, writesCache, completeServerCache, accumulator) {
            var complete;
            if (writesCache.shadowingWrite(path) != null) {
                return viewCache;
            }
            else {
                var source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);
                var oldEventCache = viewCache.getEventCache().getNode();
                var newEventCache = void 0;
                if (path.isEmpty() || path.getFront() === '.priority') {
                    var newNode = void 0;
                    if (viewCache.getServerCache().isFullyInitialized()) {
                        newNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());
                    }
                    else {
                        var serverChildren = viewCache.getServerCache().getNode();
                        index_cjs.assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');
                        newNode = writesCache.calcCompleteEventChildren(serverChildren);
                    }
                    newNode = newNode;
                    newEventCache = this.filter_.updateFullNode(oldEventCache, newNode, accumulator);
                }
                else {
                    var childKey = path.getFront();
                    var newChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());
                    if (newChild == null &&
                        viewCache.getServerCache().isCompleteForChild(childKey)) {
                        newChild = oldEventCache.getImmediateChild(childKey);
                    }
                    if (newChild != null) {
                        newEventCache = this.filter_.updateChild(oldEventCache, childKey, newChild, path.popFront(), source, accumulator);
                    }
                    else if (viewCache
                        .getEventCache()
                        .getNode()
                        .hasChild(childKey)) {
                        // No complete child available, delete the existing one, if any
                        newEventCache = this.filter_.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, path.popFront(), source, accumulator);
                    }
                    else {
                        newEventCache = oldEventCache;
                    }
                    if (newEventCache.isEmpty() &&
                        viewCache.getServerCache().isFullyInitialized()) {
                        // We might have reverted all child writes. Maybe the old event was a leaf node
                        complete = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());
                        if (complete.isLeafNode()) {
                            newEventCache = this.filter_.updateFullNode(newEventCache, complete, accumulator);
                        }
                    }
                }
                complete =
                    viewCache.getServerCache().isFullyInitialized() ||
                        writesCache.shadowingWrite(Path.Empty) != null;
                return viewCache.updateEventSnap(newEventCache, complete, this.filter_.filtersNodes());
            }
        };
        return ViewProcessor;
    }());

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An EventGenerator is used to convert "raw" changes (Change) as computed by the
     * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()
     * for details.
     *
     * @constructor
     */
    var EventGenerator = /** @class */ (function () {
        /**
         *
         * @param {!Query} query_
         */
        function EventGenerator(query_) {
            this.query_ = query_;
            /**
             * @private
             * @type {!Index}
             */
            this.index_ = this.query_.getQueryParams().getIndex();
        }
        /**
         * Given a set of raw changes (no moved events and prevName not specified yet), and a set of
         * EventRegistrations that should be notified of these changes, generate the actual events to be raised.
         *
         * Notes:
         *  - child_moved events will be synthesized at this time for any child_changed events that affect
         *    our index.
         *  - prevName will be calculated based on the index ordering.
         *
         * @param {!Array.<!Change>} changes
         * @param {!Node} eventCache
         * @param {!Array.<!EventRegistration>} eventRegistrations
         * @return {!Array.<!Event>}
         */
        EventGenerator.prototype.generateEventsForChanges = function (changes, eventCache, eventRegistrations) {
            var _this = this;
            var events = [];
            var moves = [];
            changes.forEach(function (change) {
                if (change.type === Change.CHILD_CHANGED &&
                    _this.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {
                    moves.push(Change.childMovedChange(change.childName, change.snapshotNode));
                }
            });
            this.generateEventsForType_(events, Change.CHILD_REMOVED, changes, eventRegistrations, eventCache);
            this.generateEventsForType_(events, Change.CHILD_ADDED, changes, eventRegistrations, eventCache);
            this.generateEventsForType_(events, Change.CHILD_MOVED, moves, eventRegistrations, eventCache);
            this.generateEventsForType_(events, Change.CHILD_CHANGED, changes, eventRegistrations, eventCache);
            this.generateEventsForType_(events, Change.VALUE, changes, eventRegistrations, eventCache);
            return events;
        };
        /**
         * Given changes of a single change type, generate the corresponding events.
         *
         * @param {!Array.<!Event>} events
         * @param {!string} eventType
         * @param {!Array.<!Change>} changes
         * @param {!Array.<!EventRegistration>} registrations
         * @param {!Node} eventCache
         * @private
         */
        EventGenerator.prototype.generateEventsForType_ = function (events, eventType, changes, registrations, eventCache) {
            var _this = this;
            var filteredChanges = changes.filter(function (change) { return change.type === eventType; });
            filteredChanges.sort(this.compareChanges_.bind(this));
            filteredChanges.forEach(function (change) {
                var materializedChange = _this.materializeSingleChange_(change, eventCache);
                registrations.forEach(function (registration) {
                    if (registration.respondsTo(change.type)) {
                        events.push(registration.createEvent(materializedChange, _this.query_));
                    }
                });
            });
        };
        /**
         * @param {!Change} change
         * @param {!Node} eventCache
         * @return {!Change}
         * @private
         */
        EventGenerator.prototype.materializeSingleChange_ = function (change, eventCache) {
            if (change.type === 'value' || change.type === 'child_removed') {
                return change;
            }
            else {
                change.prevName = eventCache.getPredecessorChildName(
                /** @type {!string} */
                change.childName, change.snapshotNode, this.index_);
                return change;
            }
        };
        /**
         * @param {!Change} a
         * @param {!Change} b
         * @return {number}
         * @private
         */
        EventGenerator.prototype.compareChanges_ = function (a, b) {
            if (a.childName == null || b.childName == null) {
                throw index_cjs.assertionError('Should only compare child_ events.');
            }
            var aWrapped = new NamedNode(a.childName, a.snapshotNode);
            var bWrapped = new NamedNode(b.childName, b.snapshotNode);
            return this.index_.compare(aWrapped, bWrapped);
        };
        return EventGenerator;
    }());

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A view represents a specific location and query that has 1 or more event registrations.
     *
     * It does several things:
     *  - Maintains the list of event registrations for this location/query.
     *  - Maintains a cache of the data visible for this location/query.
     *  - Applies new operations (via applyOperation), updates the cache, and based on the event
     *    registrations returns the set of events to be raised.
     * @constructor
     */
    var View = /** @class */ (function () {
        /**
         *
         * @param {!Query} query_
         * @param {!ViewCache} initialViewCache
         */
        function View(query_, initialViewCache) {
            this.query_ = query_;
            this.eventRegistrations_ = [];
            var params = this.query_.getQueryParams();
            var indexFilter = new IndexedFilter(params.getIndex());
            var filter = params.getNodeFilter();
            /**
             * @type {ViewProcessor}
             * @private
             */
            this.processor_ = new ViewProcessor(filter);
            var initialServerCache = initialViewCache.getServerCache();
            var initialEventCache = initialViewCache.getEventCache();
            // Don't filter server node with other filter than index, wait for tagged listen
            var serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);
            var eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);
            var newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());
            var newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());
            /**
             * @type {!ViewCache}
             * @private
             */
            this.viewCache_ = new ViewCache(newEventCache, newServerCache);
            /**
             * @type {!EventGenerator}
             * @private
             */
            this.eventGenerator_ = new EventGenerator(this.query_);
        }
        /**
         * @return {!Query}
         */
        View.prototype.getQuery = function () {
            return this.query_;
        };
        /**
         * @return {?Node}
         */
        View.prototype.getServerCache = function () {
            return this.viewCache_.getServerCache().getNode();
        };
        /**
         * @param {!Path} path
         * @return {?Node}
         */
        View.prototype.getCompleteServerCache = function (path) {
            var cache = this.viewCache_.getCompleteServerSnap();
            if (cache) {
                // If this isn't a "loadsAllData" view, then cache isn't actually a complete cache and
                // we need to see if it contains the child we're interested in.
                if (this.query_.getQueryParams().loadsAllData() ||
                    (!path.isEmpty() && !cache.getImmediateChild(path.getFront()).isEmpty())) {
                    return cache.getChild(path);
                }
            }
            return null;
        };
        /**
         * @return {boolean}
         */
        View.prototype.isEmpty = function () {
            return this.eventRegistrations_.length === 0;
        };
        /**
         * @param {!EventRegistration} eventRegistration
         */
        View.prototype.addEventRegistration = function (eventRegistration) {
            this.eventRegistrations_.push(eventRegistration);
        };
        /**
         * @param {?EventRegistration} eventRegistration If null, remove all callbacks.
         * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.
         * @return {!Array.<!Event>} Cancel events, if cancelError was provided.
         */
        View.prototype.removeEventRegistration = function (eventRegistration, cancelError) {
            var cancelEvents = [];
            if (cancelError) {
                index_cjs.assert(eventRegistration == null, 'A cancel should cancel all event registrations.');
                var path_1 = this.query_.path;
                this.eventRegistrations_.forEach(function (registration) {
                    cancelError /** @type {!Error} */ = cancelError;
                    var maybeEvent = registration.createCancelEvent(cancelError, path_1);
                    if (maybeEvent) {
                        cancelEvents.push(maybeEvent);
                    }
                });
            }
            if (eventRegistration) {
                var remaining = [];
                for (var i = 0; i < this.eventRegistrations_.length; ++i) {
                    var existing = this.eventRegistrations_[i];
                    if (!existing.matches(eventRegistration)) {
                        remaining.push(existing);
                    }
                    else if (eventRegistration.hasAnyCallback()) {
                        // We're removing just this one
                        remaining = remaining.concat(this.eventRegistrations_.slice(i + 1));
                        break;
                    }
                }
                this.eventRegistrations_ = remaining;
            }
            else {
                this.eventRegistrations_ = [];
            }
            return cancelEvents;
        };
        /**
         * Applies the given Operation, updates our cache, and returns the appropriate events.
         *
         * @param {!Operation} operation
         * @param {!WriteTreeRef} writesCache
         * @param {?Node} completeServerCache
         * @return {!Array.<!Event>}
         */
        View.prototype.applyOperation = function (operation, writesCache, completeServerCache) {
            if (operation.type === OperationType.MERGE &&
                operation.source.queryId !== null) {
                index_cjs.assert(this.viewCache_.getCompleteServerSnap(), 'We should always have a full cache before handling merges');
                index_cjs.assert(this.viewCache_.getCompleteEventSnap(), 'Missing event cache, even though we have a server cache');
            }
            var oldViewCache = this.viewCache_;
            var result = this.processor_.applyOperation(oldViewCache, operation, writesCache, completeServerCache);
            this.processor_.assertIndexed(result.viewCache);
            index_cjs.assert(result.viewCache.getServerCache().isFullyInitialized() ||
                !oldViewCache.getServerCache().isFullyInitialized(), 'Once a server snap is complete, it should never go back');
            this.viewCache_ = result.viewCache;
            return this.generateEventsForChanges_(result.changes, result.viewCache.getEventCache().getNode(), null);
        };
        /**
         * @param {!EventRegistration} registration
         * @return {!Array.<!Event>}
         */
        View.prototype.getInitialEvents = function (registration) {
            var eventSnap = this.viewCache_.getEventCache();
            var initialChanges = [];
            if (!eventSnap.getNode().isLeafNode()) {
                var eventNode = eventSnap.getNode();
                eventNode.forEachChild(PRIORITY_INDEX, function (key, childNode) {
                    initialChanges.push(Change.childAddedChange(key, childNode));
                });
            }
            if (eventSnap.isFullyInitialized()) {
                initialChanges.push(Change.valueChange(eventSnap.getNode()));
            }
            return this.generateEventsForChanges_(initialChanges, eventSnap.getNode(), registration);
        };
        /**
         * @private
         * @param {!Array.<!Change>} changes
         * @param {!Node} eventCache
         * @param {EventRegistration=} eventRegistration
         * @return {!Array.<!Event>}
         */
        View.prototype.generateEventsForChanges_ = function (changes, eventCache, eventRegistration) {
            var registrations = eventRegistration
                ? [eventRegistration]
                : this.eventRegistrations_;
            return this.eventGenerator_.generateEventsForChanges(changes, eventCache, registrations);
        };
        return View;
    }());

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var __referenceConstructor$1;
    /**
     * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to
     * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes
     * and user writes (set, transaction, update).
     *
     * It's responsible for:
     *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).
     *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,
     *    applyUserOverwrite, etc.)
     */
    var SyncPoint = /** @class */ (function () {
        function SyncPoint() {
            /**
             * The Views being tracked at this location in the tree, stored as a map where the key is a
             * queryId and the value is the View for that query.
             *
             * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).
             */
            this.views = new Map();
        }
        Object.defineProperty(SyncPoint, "__referenceConstructor", {
            get: function () {
                index_cjs.assert(__referenceConstructor$1, 'Reference.ts has not been loaded');
                return __referenceConstructor$1;
            },
            set: function (val) {
                index_cjs.assert(!__referenceConstructor$1, '__referenceConstructor has already been defined');
                __referenceConstructor$1 = val;
            },
            enumerable: true,
            configurable: true
        });
        SyncPoint.prototype.isEmpty = function () {
            return this.views.size === 0;
        };
        SyncPoint.prototype.applyOperation = function (operation, writesCache, optCompleteServerCache) {
            var e_1, _a;
            var queryId = operation.source.queryId;
            if (queryId !== null) {
                var view = this.views.get(queryId);
                index_cjs.assert(view != null, 'SyncTree gave us an op for an invalid query.');
                return view.applyOperation(operation, writesCache, optCompleteServerCache);
            }
            else {
                var events = [];
                try {
                    for (var _b = tslib_es6.__values(this.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var view = _c.value;
                        events = events.concat(view.applyOperation(operation, writesCache, optCompleteServerCache));
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                return events;
            }
        };
        /**
         * Add an event callback for the specified query.
         *
         * @param {!Query} query
         * @param {!EventRegistration} eventRegistration
         * @param {!WriteTreeRef} writesCache
         * @param {?Node} serverCache Complete server cache, if we have it.
         * @param {boolean} serverCacheComplete
         * @return {!Array.<!Event>} Events to raise.
         */
        SyncPoint.prototype.addEventRegistration = function (query, eventRegistration, writesCache, serverCache, serverCacheComplete) {
            var queryId = query.queryIdentifier();
            var view = this.views.get(queryId);
            if (!view) {
                // TODO: make writesCache take flag for complete server node
                var eventCache = writesCache.calcCompleteEventCache(serverCacheComplete ? serverCache : null);
                var eventCacheComplete = false;
                if (eventCache) {
                    eventCacheComplete = true;
                }
                else if (serverCache instanceof ChildrenNode) {
                    eventCache = writesCache.calcCompleteEventChildren(serverCache);
                    eventCacheComplete = false;
                }
                else {
                    eventCache = ChildrenNode.EMPTY_NODE;
                    eventCacheComplete = false;
                }
                var viewCache = new ViewCache(new CacheNode(
                /** @type {!Node} */ eventCache, eventCacheComplete, false), new CacheNode(
                /** @type {!Node} */ serverCache, serverCacheComplete, false));
                view = new View(query, viewCache);
                this.views.set(queryId, view);
            }
            // This is guaranteed to exist now, we just created anything that was missing
            view.addEventRegistration(eventRegistration);
            return view.getInitialEvents(eventRegistration);
        };
        /**
         * Remove event callback(s).  Return cancelEvents if a cancelError is specified.
         *
         * If query is the default query, we'll check all views for the specified eventRegistration.
         * If eventRegistration is null, we'll remove all callbacks for the specified view(s).
         *
         * @param {!Query} query
         * @param {?EventRegistration} eventRegistration If null, remove all callbacks.
         * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.
         * @return {{removed:!Array.<!Query>, events:!Array.<!Event>}} removed queries and any cancel events
         */
        SyncPoint.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {
            var e_2, _a;
            var queryId = query.queryIdentifier();
            var removed = [];
            var cancelEvents = [];
            var hadCompleteView = this.hasCompleteView();
            if (queryId === 'default') {
                try {
                    // When you do ref.off(...), we search all views for the registration to remove.
                    for (var _b = tslib_es6.__values(this.views.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var _d = tslib_es6.__read(_c.value, 2), viewQueryId = _d[0], view = _d[1];
                        cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));
                        if (view.isEmpty()) {
                            this.views.delete(viewQueryId);
                            // We'll deal with complete views later.
                            if (!view
                                .getQuery()
                                .getQueryParams()
                                .loadsAllData()) {
                                removed.push(view.getQuery());
                            }
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
            else {
                // remove the callback from the specific view.
                var view = this.views.get(queryId);
                if (view) {
                    cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));
                    if (view.isEmpty()) {
                        this.views.delete(queryId);
                        // We'll deal with complete views later.
                        if (!view
                            .getQuery()
                            .getQueryParams()
                            .loadsAllData()) {
                            removed.push(view.getQuery());
                        }
                    }
                }
            }
            if (hadCompleteView && !this.hasCompleteView()) {
                // We removed our last complete view.
                removed.push(new SyncPoint.__referenceConstructor(query.repo, query.path));
            }
            return { removed: removed, events: cancelEvents };
        };
        SyncPoint.prototype.getQueryViews = function () {
            var e_3, _a;
            var result = [];
            try {
                for (var _b = tslib_es6.__values(this.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var view = _c.value;
                    if (!view
                        .getQuery()
                        .getQueryParams()
                        .loadsAllData()) {
                        result.push(view);
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_3) throw e_3.error; }
            }
            return result;
        };
        /**
         * @param path The path to the desired complete snapshot
         * @return A complete cache, if it exists
         */
        SyncPoint.prototype.getCompleteServerCache = function (path) {
            var e_4, _a;
            var serverCache = null;
            try {
                for (var _b = tslib_es6.__values(this.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var view = _c.value;
                    serverCache = serverCache || view.getCompleteServerCache(path);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_4) throw e_4.error; }
            }
            return serverCache;
        };
        SyncPoint.prototype.viewForQuery = function (query) {
            var params = query.getQueryParams();
            if (params.loadsAllData()) {
                return this.getCompleteView();
            }
            else {
                var queryId = query.queryIdentifier();
                return this.views.get(queryId);
            }
        };
        SyncPoint.prototype.viewExistsForQuery = function (query) {
            return this.viewForQuery(query) != null;
        };
        SyncPoint.prototype.hasCompleteView = function () {
            return this.getCompleteView() != null;
        };
        SyncPoint.prototype.getCompleteView = function () {
            var e_5, _a;
            try {
                for (var _b = tslib_es6.__values(this.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var view = _c.value;
                    if (view
                        .getQuery()
                        .getQueryParams()
                        .loadsAllData()) {
                        return view;
                    }
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_5) throw e_5.error; }
            }
            return null;
        };
        return SyncPoint;
    }());

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with
     * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write
     * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write
     * to reflect the write added.
     */
    var CompoundWrite = /** @class */ (function () {
        function CompoundWrite(writeTree_) {
            this.writeTree_ = writeTree_;
        }
        CompoundWrite.prototype.addWrite = function (path, node) {
            if (path.isEmpty()) {
                return new CompoundWrite(new ImmutableTree(node));
            }
            else {
                var rootmost = this.writeTree_.findRootMostValueAndPath(path);
                if (rootmost != null) {
                    var rootMostPath = rootmost.path;
                    var value = rootmost.value;
                    var relativePath = Path.relativePath(rootMostPath, path);
                    value = value.updateChild(relativePath, node);
                    return new CompoundWrite(this.writeTree_.set(rootMostPath, value));
                }
                else {
                    var subtree = new ImmutableTree(node);
                    var newWriteTree = this.writeTree_.setTree(path, subtree);
                    return new CompoundWrite(newWriteTree);
                }
            }
        };
        CompoundWrite.prototype.addWrites = function (path, updates) {
            var newWrite = this;
            each(updates, function (childKey, node) {
                newWrite = newWrite.addWrite(path.child(childKey), node);
            });
            return newWrite;
        };
        /**
         * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher
         * location, which must be removed by calling this method with that path.
         *
         * @param path The path at which a write and all deeper writes should be removed
         * @return {!CompoundWrite} The new CompoundWrite with the removed path
         */
        CompoundWrite.prototype.removeWrite = function (path) {
            if (path.isEmpty()) {
                return CompoundWrite.Empty;
            }
            else {
                var newWriteTree = this.writeTree_.setTree(path, ImmutableTree.Empty);
                return new CompoundWrite(newWriteTree);
            }
        };
        /**
         * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be
         * considered "complete".
         *
         * @param path The path to check for
         * @return Whether there is a complete write at that path
         */
        CompoundWrite.prototype.hasCompleteWrite = function (path) {
            return this.getCompleteNode(path) != null;
        };
        /**
         * Returns a node for a path if and only if the node is a "complete" overwrite at that path. This will not aggregate
         * writes from deeper paths, but will return child nodes from a more shallow path.
         *
         * @param path The path to get a complete write
         * @return The node if complete at that path, or null otherwise.
         */
        CompoundWrite.prototype.getCompleteNode = function (path) {
            var rootmost = this.writeTree_.findRootMostValueAndPath(path);
            if (rootmost != null) {
                return this.writeTree_
                    .get(rootmost.path)
                    .getChild(Path.relativePath(rootmost.path, path));
            }
            else {
                return null;
            }
        };
        /**
         * Returns all children that are guaranteed to be a complete overwrite.
         *
         * @return A list of all complete children.
         */
        CompoundWrite.prototype.getCompleteChildren = function () {
            var children = [];
            var node = this.writeTree_.value;
            if (node != null) {
                // If it's a leaf node, it has no children; so nothing to do.
                if (!node.isLeafNode()) {
                    node.forEachChild(PRIORITY_INDEX, function (childName, childNode) {
                        children.push(new NamedNode(childName, childNode));
                    });
                }
            }
            else {
                this.writeTree_.children.inorderTraversal(function (childName, childTree) {
                    if (childTree.value != null) {
                        children.push(new NamedNode(childName, childTree.value));
                    }
                });
            }
            return children;
        };
        CompoundWrite.prototype.childCompoundWrite = function (path) {
            if (path.isEmpty()) {
                return this;
            }
            else {
                var shadowingNode = this.getCompleteNode(path);
                if (shadowingNode != null) {
                    return new CompoundWrite(new ImmutableTree(shadowingNode));
                }
                else {
                    return new CompoundWrite(this.writeTree_.subtree(path));
                }
            }
        };
        /**
         * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.
         * @return Whether this CompoundWrite is empty
         */
        CompoundWrite.prototype.isEmpty = function () {
            return this.writeTree_.isEmpty();
        };
        /**
         * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the
         * node
         * @param node The node to apply this CompoundWrite to
         * @return The node with all writes applied
         */
        CompoundWrite.prototype.apply = function (node) {
            return applySubtreeWrite(Path.Empty, this.writeTree_, node);
        };
        CompoundWrite.Empty = new CompoundWrite(new ImmutableTree(null));
        return CompoundWrite;
    }());
    function applySubtreeWrite(relativePath, writeTree, node) {
        if (writeTree.value != null) {
            // Since there a write is always a leaf, we're done here
            return node.updateChild(relativePath, writeTree.value);
        }
        else {
            var priorityWrite_1 = null;
            writeTree.children.inorderTraversal(function (childKey, childTree) {
                if (childKey === '.priority') {
                    // Apply priorities at the end so we don't update priorities for either empty nodes or forget
                    // to apply priorities to empty nodes that are later filled
                    index_cjs.assert(childTree.value !== null, 'Priority writes must always be leaf nodes');
                    priorityWrite_1 = childTree.value;
                }
                else {
                    node = applySubtreeWrite(relativePath.child(childKey), childTree, node);
                }
            });
            // If there was a priority write, we only apply it if the node is not empty
            if (!node.getChild(relativePath).isEmpty() && priorityWrite_1 !== null) {
                node = node.updateChild(relativePath.child('.priority'), priorityWrite_1);
            }
            return node;
        }
    }

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them
     * with underlying server data (to create "event cache" data).  Pending writes are added with addOverwrite()
     * and addMerge(), and removed with removeWrite().
     *
     * @constructor
     */
    var WriteTree = /** @class */ (function () {
        function WriteTree() {
            /**
             * A tree tracking the result of applying all visible writes.  This does not include transactions with
             * applyLocally=false or writes that are completely shadowed by other writes.
             *
             * @type {!CompoundWrite}
             * @private
             */
            this.visibleWrites_ = CompoundWrite.Empty;
            /**
             * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary
             * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also
             * used by transactions).
             *
             * @type {!Array.<!WriteRecord>}
             * @private
             */
            this.allWrites_ = [];
            this.lastWriteId_ = -1;
        }
        /**
         * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.
         *
         * @param {!Path} path
         * @return {!WriteTreeRef}
         */
        WriteTree.prototype.childWrites = function (path) {
            return new WriteTreeRef(path, this);
        };
        /**
         * Record a new overwrite from user code.
         *
         * @param {!Path} path
         * @param {!Node} snap
         * @param {!number} writeId
         * @param {boolean=} visible This is set to false by some transactions. It should be excluded from event caches
         */
        WriteTree.prototype.addOverwrite = function (path, snap, writeId, visible) {
            index_cjs.assert(writeId > this.lastWriteId_, 'Stacking an older write on top of newer ones');
            if (visible === undefined) {
                visible = true;
            }
            this.allWrites_.push({
                path: path,
                snap: snap,
                writeId: writeId,
                visible: visible
            });
            if (visible) {
                this.visibleWrites_ = this.visibleWrites_.addWrite(path, snap);
            }
            this.lastWriteId_ = writeId;
        };
        /**
         * Record a new merge from user code.
         *
         * @param {!Path} path
         * @param {!Object.<string, !Node>} changedChildren
         * @param {!number} writeId
         */
        WriteTree.prototype.addMerge = function (path, changedChildren, writeId) {
            index_cjs.assert(writeId > this.lastWriteId_, 'Stacking an older merge on top of newer ones');
            this.allWrites_.push({
                path: path,
                children: changedChildren,
                writeId: writeId,
                visible: true
            });
            this.visibleWrites_ = this.visibleWrites_.addWrites(path, changedChildren);
            this.lastWriteId_ = writeId;
        };
        /**
         * @param {!number} writeId
         * @return {?WriteRecord}
         */
        WriteTree.prototype.getWrite = function (writeId) {
            for (var i = 0; i < this.allWrites_.length; i++) {
                var record = this.allWrites_[i];
                if (record.writeId === writeId) {
                    return record;
                }
            }
            return null;
        };
        /**
         * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates
         * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.
         *
         * @param {!number} writeId
         * @return {boolean} true if the write may have been visible (meaning we'll need to reevaluate / raise
         * events as a result).
         */
        WriteTree.prototype.removeWrite = function (writeId) {
            // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied
            // out of order.
            //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;
            //assert(validClear, "Either we don't have this write, or it's the first one in the queue");
            var _this = this;
            var idx = this.allWrites_.findIndex(function (s) {
                return s.writeId === writeId;
            });
            index_cjs.assert(idx >= 0, 'removeWrite called with nonexistent writeId.');
            var writeToRemove = this.allWrites_[idx];
            this.allWrites_.splice(idx, 1);
            var removedWriteWasVisible = writeToRemove.visible;
            var removedWriteOverlapsWithOtherWrites = false;
            var i = this.allWrites_.length - 1;
            while (removedWriteWasVisible && i >= 0) {
                var currentWrite = this.allWrites_[i];
                if (currentWrite.visible) {
                    if (i >= idx &&
                        this.recordContainsPath_(currentWrite, writeToRemove.path)) {
                        // The removed write was completely shadowed by a subsequent write.
                        removedWriteWasVisible = false;
                    }
                    else if (writeToRemove.path.contains(currentWrite.path)) {
                        // Either we're covering some writes or they're covering part of us (depending on which came first).
                        removedWriteOverlapsWithOtherWrites = true;
                    }
                }
                i--;
            }
            if (!removedWriteWasVisible) {
                return false;
            }
            else if (removedWriteOverlapsWithOtherWrites) {
                // There's some shadowing going on. Just rebuild the visible writes from scratch.
                this.resetTree_();
                return true;
            }
            else {
                // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.
                if (writeToRemove.snap) {
                    this.visibleWrites_ = this.visibleWrites_.removeWrite(writeToRemove.path);
                }
                else {
                    var children = writeToRemove.children;
                    each(children, function (childName) {
                        _this.visibleWrites_ = _this.visibleWrites_.removeWrite(writeToRemove.path.child(childName));
                    });
                }
                return true;
            }
        };
        /**
         * Return a complete snapshot for the given path if there's visible write data at that path, else null.
         * No server data is considered.
         *
         * @param {!Path} path
         * @return {?Node}
         */
        WriteTree.prototype.getCompleteWriteData = function (path) {
            return this.visibleWrites_.getCompleteNode(path);
        };
        /**
         * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden
         * writes), attempt to calculate a complete snapshot for the given path
         *
         * @param {!Path} treePath
         * @param {?Node} completeServerCache
         * @param {Array.<number>=} writeIdsToExclude An optional set to be excluded
         * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false
         * @return {?Node}
         */
        WriteTree.prototype.calcCompleteEventCache = function (treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {
            if (!writeIdsToExclude && !includeHiddenWrites) {
                var shadowingNode = this.visibleWrites_.getCompleteNode(treePath);
                if (shadowingNode != null) {
                    return shadowingNode;
                }
                else {
                    var subMerge = this.visibleWrites_.childCompoundWrite(treePath);
                    if (subMerge.isEmpty()) {
                        return completeServerCache;
                    }
                    else if (completeServerCache == null &&
                        !subMerge.hasCompleteWrite(Path.Empty)) {
                        // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow
                        return null;
                    }
                    else {
                        var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;
                        return subMerge.apply(layeredCache);
                    }
                }
            }
            else {
                var merge = this.visibleWrites_.childCompoundWrite(treePath);
                if (!includeHiddenWrites && merge.isEmpty()) {
                    return completeServerCache;
                }
                else {
                    // If the server cache is null, and we don't have a complete cache, we need to return null
                    if (!includeHiddenWrites &&
                        completeServerCache == null &&
                        !merge.hasCompleteWrite(Path.Empty)) {
                        return null;
                    }
                    else {
                        var filter = function (write) {
                            return ((write.visible || includeHiddenWrites) &&
                                (!writeIdsToExclude ||
                                    !~writeIdsToExclude.indexOf(write.writeId)) &&
                                (write.path.contains(treePath) || treePath.contains(write.path)));
                        };
                        var mergeAtPath = WriteTree.layerTree_(this.allWrites_, filter, treePath);
                        var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;
                        return mergeAtPath.apply(layeredCache);
                    }
                }
            }
        };
        /**
         * With optional, underlying server data, attempt to return a children node of children that we have complete data for.
         * Used when creating new views, to pre-fill their complete event children snapshot.
         *
         * @param {!Path} treePath
         * @param {?ChildrenNode} completeServerChildren
         * @return {!ChildrenNode}
         */
        WriteTree.prototype.calcCompleteEventChildren = function (treePath, completeServerChildren) {
            var completeChildren = ChildrenNode.EMPTY_NODE;
            var topLevelSet = this.visibleWrites_.getCompleteNode(treePath);
            if (topLevelSet) {
                if (!topLevelSet.isLeafNode()) {
                    // we're shadowing everything. Return the children.
                    topLevelSet.forEachChild(PRIORITY_INDEX, function (childName, childSnap) {
                        completeChildren = completeChildren.updateImmediateChild(childName, childSnap);
                    });
                }
                return completeChildren;
            }
            else if (completeServerChildren) {
                // Layer any children we have on top of this
                // We know we don't have a top-level set, so just enumerate existing children
                var merge_1 = this.visibleWrites_.childCompoundWrite(treePath);
                completeServerChildren.forEachChild(PRIORITY_INDEX, function (childName, childNode) {
                    var node = merge_1
                        .childCompoundWrite(new Path(childName))
                        .apply(childNode);
                    completeChildren = completeChildren.updateImmediateChild(childName, node);
                });
                // Add any complete children we have from the set
                merge_1.getCompleteChildren().forEach(function (namedNode) {
                    completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);
                });
                return completeChildren;
            }
            else {
                // We don't have anything to layer on top of. Layer on any children we have
                // Note that we can return an empty snap if we have a defined delete
                var merge = this.visibleWrites_.childCompoundWrite(treePath);
                merge.getCompleteChildren().forEach(function (namedNode) {
                    completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);
                });
                return completeChildren;
            }
        };
        /**
         * Given that the underlying server data has updated, determine what, if anything, needs to be
         * applied to the event cache.
         *
         * Possibilities:
         *
         * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data
         *
         * 2. Some write is completely shadowing. No events to be raised
         *
         * 3. Is partially shadowed. Events
         *
         * Either existingEventSnap or existingServerSnap must exist
         *
         * @param {!Path} treePath
         * @param {!Path} childPath
         * @param {?Node} existingEventSnap
         * @param {?Node} existingServerSnap
         * @return {?Node}
         */
        WriteTree.prototype.calcEventCacheAfterServerOverwrite = function (treePath, childPath, existingEventSnap, existingServerSnap) {
            index_cjs.assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');
            var path = treePath.child(childPath);
            if (this.visibleWrites_.hasCompleteWrite(path)) {
                // At this point we can probably guarantee that we're in case 2, meaning no events
                // May need to check visibility while doing the findRootMostValueAndPath call
                return null;
            }
            else {
                // No complete shadowing. We're either partially shadowing or not shadowing at all.
                var childMerge = this.visibleWrites_.childCompoundWrite(path);
                if (childMerge.isEmpty()) {
                    // We're not shadowing at all. Case 1
                    return existingServerSnap.getChild(childPath);
                }
                else {
                    // This could be more efficient if the serverNode + updates doesn't change the eventSnap
                    // However this is tricky to find out, since user updates don't necessary change the server
                    // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server
                    // adds nodes, but doesn't change any existing writes. It is therefore not enough to
                    // only check if the updates change the serverNode.
                    // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?
                    return childMerge.apply(existingServerSnap.getChild(childPath));
                }
            }
        };
        /**
         * Returns a complete child for a given server snap after applying all user writes or null if there is no
         * complete child for this ChildKey.
         *
         * @param {!Path} treePath
         * @param {!string} childKey
         * @param {!CacheNode} existingServerSnap
         * @return {?Node}
         */
        WriteTree.prototype.calcCompleteChild = function (treePath, childKey, existingServerSnap) {
            var path = treePath.child(childKey);
            var shadowingNode = this.visibleWrites_.getCompleteNode(path);
            if (shadowingNode != null) {
                return shadowingNode;
            }
            else {
                if (existingServerSnap.isCompleteForChild(childKey)) {
                    var childMerge = this.visibleWrites_.childCompoundWrite(path);
                    return childMerge.apply(existingServerSnap.getNode().getImmediateChild(childKey));
                }
                else {
                    return null;
                }
            }
        };
        /**
         * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at
         * a higher path, this will return the child of that write relative to the write and this path.
         * Returns null if there is no write at this path.
         */
        WriteTree.prototype.shadowingWrite = function (path) {
            return this.visibleWrites_.getCompleteNode(path);
        };
        /**
         * This method is used when processing child remove events on a query. If we can, we pull in children that were outside
         * the window, but may now be in the window.
         */
        WriteTree.prototype.calcIndexedSlice = function (treePath, completeServerData, startPost, count, reverse, index) {
            var toIterate;
            var merge = this.visibleWrites_.childCompoundWrite(treePath);
            var shadowingNode = merge.getCompleteNode(Path.Empty);
            if (shadowingNode != null) {
                toIterate = shadowingNode;
            }
            else if (completeServerData != null) {
                toIterate = merge.apply(completeServerData);
            }
            else {
                // no children to iterate on
                return [];
            }
            toIterate = toIterate.withIndex(index);
            if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {
                var nodes = [];
                var cmp = index.getCompare();
                var iter = reverse
                    ? toIterate.getReverseIteratorFrom(startPost, index)
                    : toIterate.getIteratorFrom(startPost, index);
                var next = iter.getNext();
                while (next && nodes.length < count) {
                    if (cmp(next, startPost) !== 0) {
                        nodes.push(next);
                    }
                    next = iter.getNext();
                }
                return nodes;
            }
            else {
                return [];
            }
        };
        WriteTree.prototype.recordContainsPath_ = function (writeRecord, path) {
            if (writeRecord.snap) {
                return writeRecord.path.contains(path);
            }
            else {
                for (var childName in writeRecord.children) {
                    if (writeRecord.children.hasOwnProperty(childName) &&
                        writeRecord.path.child(childName).contains(path)) {
                        return true;
                    }
                }
                return false;
            }
        };
        /**
         * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots
         */
        WriteTree.prototype.resetTree_ = function () {
            this.visibleWrites_ = WriteTree.layerTree_(this.allWrites_, WriteTree.DefaultFilter_, Path.Empty);
            if (this.allWrites_.length > 0) {
                this.lastWriteId_ = this.allWrites_[this.allWrites_.length - 1].writeId;
            }
            else {
                this.lastWriteId_ = -1;
            }
        };
        /**
         * The default filter used when constructing the tree. Keep everything that's visible.
         */
        WriteTree.DefaultFilter_ = function (write) {
            return write.visible;
        };
        /**
         * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of
         * event data at that path.
         */
        WriteTree.layerTree_ = function (writes, filter, treeRoot) {
            var compoundWrite = CompoundWrite.Empty;
            for (var i = 0; i < writes.length; ++i) {
                var write = writes[i];
                // Theory, a later set will either:
                // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction
                // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction
                if (filter(write)) {
                    var writePath = write.path;
                    var relativePath = void 0;
                    if (write.snap) {
                        if (treeRoot.contains(writePath)) {
                            relativePath = Path.relativePath(treeRoot, writePath);
                            compoundWrite = compoundWrite.addWrite(relativePath, write.snap);
                        }
                        else if (writePath.contains(treeRoot)) {
                            relativePath = Path.relativePath(writePath, treeRoot);
                            compoundWrite = compoundWrite.addWrite(Path.Empty, write.snap.getChild(relativePath));
                        }
                    }
                    else if (write.children) {
                        if (treeRoot.contains(writePath)) {
                            relativePath = Path.relativePath(treeRoot, writePath);
                            compoundWrite = compoundWrite.addWrites(relativePath, write.children);
                        }
                        else if (writePath.contains(treeRoot)) {
                            relativePath = Path.relativePath(writePath, treeRoot);
                            if (relativePath.isEmpty()) {
                                compoundWrite = compoundWrite.addWrites(Path.Empty, write.children);
                            }
                            else {
                                var child = index_cjs.safeGet(write.children, relativePath.getFront());
                                if (child) {
                                    // There exists a child in this node that matches the root path
                                    var deepNode = child.getChild(relativePath.popFront());
                                    compoundWrite = compoundWrite.addWrite(Path.Empty, deepNode);
                                }
                            }
                        }
                    }
                    else {
                        throw index_cjs.assertionError('WriteRecord should have .snap or .children');
                    }
                }
            }
            return compoundWrite;
        };
        return WriteTree;
    }());
    /**
     * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods
     * just proxy to the underlying WriteTree.
     *
     * @constructor
     */
    var WriteTreeRef = /** @class */ (function () {
        /**
         * @param {!Path} path
         * @param {!WriteTree} writeTree
         */
        function WriteTreeRef(path, writeTree) {
            this.treePath_ = path;
            this.writeTree_ = writeTree;
        }
        /**
         * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used
         * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node
         * can lead to a more expensive calculation.
         *
         * @param {?Node} completeServerCache
         * @param {Array.<number>=} writeIdsToExclude Optional writes to exclude.
         * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false
         * @return {?Node}
         */
        WriteTreeRef.prototype.calcCompleteEventCache = function (completeServerCache, writeIdsToExclude, includeHiddenWrites) {
            return this.writeTree_.calcCompleteEventCache(this.treePath_, completeServerCache, writeIdsToExclude, includeHiddenWrites);
        };
        /**
         * If possible, returns a children node containing all of the complete children we have data for. The returned data is a
         * mix of the given server data and write data.
         *
         * @param {?ChildrenNode} completeServerChildren
         * @return {!ChildrenNode}
         */
        WriteTreeRef.prototype.calcCompleteEventChildren = function (completeServerChildren) {
            return this.writeTree_.calcCompleteEventChildren(this.treePath_, completeServerChildren);
        };
        /**
         * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,
         * if anything, needs to be applied to the event cache.
         *
         * Possibilities:
         *
         * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data
         *
         * 2. Some write is completely shadowing. No events to be raised
         *
         * 3. Is partially shadowed. Events should be raised
         *
         * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert
         *
         * @param {!Path} path
         * @param {?Node} existingEventSnap
         * @param {?Node} existingServerSnap
         * @return {?Node}
         */
        WriteTreeRef.prototype.calcEventCacheAfterServerOverwrite = function (path, existingEventSnap, existingServerSnap) {
            return this.writeTree_.calcEventCacheAfterServerOverwrite(this.treePath_, path, existingEventSnap, existingServerSnap);
        };
        /**
         * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at
         * a higher path, this will return the child of that write relative to the write and this path.
         * Returns null if there is no write at this path.
         *
         * @param {!Path} path
         * @return {?Node}
         */
        WriteTreeRef.prototype.shadowingWrite = function (path) {
            return this.writeTree_.shadowingWrite(this.treePath_.child(path));
        };
        /**
         * This method is used when processing child remove events on a query. If we can, we pull in children that were outside
         * the window, but may now be in the window
         *
         * @param {?Node} completeServerData
         * @param {!NamedNode} startPost
         * @param {!number} count
         * @param {boolean} reverse
         * @param {!Index} index
         * @return {!Array.<!NamedNode>}
         */
        WriteTreeRef.prototype.calcIndexedSlice = function (completeServerData, startPost, count, reverse, index) {
            return this.writeTree_.calcIndexedSlice(this.treePath_, completeServerData, startPost, count, reverse, index);
        };
        /**
         * Returns a complete child for a given server snap after applying all user writes or null if there is no
         * complete child for this ChildKey.
         *
         * @param {!string} childKey
         * @param {!CacheNode} existingServerCache
         * @return {?Node}
         */
        WriteTreeRef.prototype.calcCompleteChild = function (childKey, existingServerCache) {
            return this.writeTree_.calcCompleteChild(this.treePath_, childKey, existingServerCache);
        };
        /**
         * Return a WriteTreeRef for a child.
         *
         * @param {string} childName
         * @return {!WriteTreeRef}
         */
        WriteTreeRef.prototype.child = function (childName) {
            return new WriteTreeRef(this.treePath_.child(childName), this.writeTree_);
        };
        return WriteTreeRef;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * SyncTree is the central class for managing event callback registration, data caching, views
     * (query processing), and event generation.  There are typically two SyncTree instances for
     * each Repo, one for the normal Firebase data, and one for the .info data.
     *
     * It has a number of responsibilities, including:
     *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).
     *  - Applying and caching data changes for user set(), transaction(), and update() calls
     *    (applyUserOverwrite(), applyUserMerge()).
     *  - Applying and caching data changes for server data changes (applyServerOverwrite(),
     *    applyServerMerge()).
     *  - Generating user-facing events for server and user changes (all of the apply* methods
     *    return the set of events that need to be raised as a result).
     *  - Maintaining the appropriate set of server listens to ensure we are always subscribed
     *    to the correct set of paths and queries to satisfy the current set of user event
     *    callbacks (listens are started/stopped using the provided listenProvider).
     *
     * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual
     * events are returned to the caller rather than raised synchronously.
     *
     * @constructor
     */
    var SyncTree = /** @class */ (function () {
        /**
         * @param {!ListenProvider} listenProvider_ Used by SyncTree to start / stop listening
         *   to server data.
         */
        function SyncTree(listenProvider_) {
            this.listenProvider_ = listenProvider_;
            /**
             * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.
             */
            this.syncPointTree_ = ImmutableTree.Empty;
            /**
             * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).
             */
            this.pendingWriteTree_ = new WriteTree();
            this.tagToQueryMap = new Map();
            this.queryToTagMap = new Map();
        }
        /**
         * Apply the data changes for a user-generated set() or transaction() call.
         *
         * @return Events to raise.
         */
        SyncTree.prototype.applyUserOverwrite = function (path, newData, writeId, visible) {
            // Record pending write.
            this.pendingWriteTree_.addOverwrite(path, newData, writeId, visible);
            if (!visible) {
                return [];
            }
            else {
                return this.applyOperationToSyncPoints_(new Overwrite(OperationSource.User, path, newData));
            }
        };
        /**
         * Apply the data from a user-generated update() call
         *
         * @return Events to raise.
         */
        SyncTree.prototype.applyUserMerge = function (path, changedChildren, writeId) {
            // Record pending merge.
            this.pendingWriteTree_.addMerge(path, changedChildren, writeId);
            var changeTree = ImmutableTree.fromObject(changedChildren);
            return this.applyOperationToSyncPoints_(new Merge(OperationSource.User, path, changeTree));
        };
        /**
         * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().
         *
         * @param revert True if the given write failed and needs to be reverted
         * @return Events to raise.
         */
        SyncTree.prototype.ackUserWrite = function (writeId, revert) {
            if (revert === void 0) { revert = false; }
            var write = this.pendingWriteTree_.getWrite(writeId);
            var needToReevaluate = this.pendingWriteTree_.removeWrite(writeId);
            if (!needToReevaluate) {
                return [];
            }
            else {
                var affectedTree_1 = ImmutableTree.Empty;
                if (write.snap != null) {
                    // overwrite
                    affectedTree_1 = affectedTree_1.set(Path.Empty, true);
                }
                else {
                    each(write.children, function (pathString, node) {
                        affectedTree_1 = affectedTree_1.set(new Path(pathString), node);
                    });
                }
                return this.applyOperationToSyncPoints_(new AckUserWrite(write.path, affectedTree_1, revert));
            }
        };
        /**
         * Apply new server data for the specified path..
         *
         * @return Events to raise.
         */
        SyncTree.prototype.applyServerOverwrite = function (path, newData) {
            return this.applyOperationToSyncPoints_(new Overwrite(OperationSource.Server, path, newData));
        };
        /**
         * Apply new server data to be merged in at the specified path.
         *
         * @return Events to raise.
         */
        SyncTree.prototype.applyServerMerge = function (path, changedChildren) {
            var changeTree = ImmutableTree.fromObject(changedChildren);
            return this.applyOperationToSyncPoints_(new Merge(OperationSource.Server, path, changeTree));
        };
        /**
         * Apply a listen complete for a query
         *
         * @return Events to raise.
         */
        SyncTree.prototype.applyListenComplete = function (path) {
            return this.applyOperationToSyncPoints_(new ListenComplete(OperationSource.Server, path));
        };
        /**
         * Apply new server data for the specified tagged query.
         *
         * @return Events to raise.
         */
        SyncTree.prototype.applyTaggedQueryOverwrite = function (path, snap, tag) {
            var queryKey = this.queryKeyForTag_(tag);
            if (queryKey != null) {
                var r = SyncTree.parseQueryKey_(queryKey);
                var queryPath = r.path, queryId = r.queryId;
                var relativePath = Path.relativePath(queryPath, path);
                var op = new Overwrite(OperationSource.forServerTaggedQuery(queryId), relativePath, snap);
                return this.applyTaggedOperation_(queryPath, op);
            }
            else {
                // Query must have been removed already
                return [];
            }
        };
        /**
         * Apply server data to be merged in for the specified tagged query.
         *
         * @return Events to raise.
         */
        SyncTree.prototype.applyTaggedQueryMerge = function (path, changedChildren, tag) {
            var queryKey = this.queryKeyForTag_(tag);
            if (queryKey) {
                var r = SyncTree.parseQueryKey_(queryKey);
                var queryPath = r.path, queryId = r.queryId;
                var relativePath = Path.relativePath(queryPath, path);
                var changeTree = ImmutableTree.fromObject(changedChildren);
                var op = new Merge(OperationSource.forServerTaggedQuery(queryId), relativePath, changeTree);
                return this.applyTaggedOperation_(queryPath, op);
            }
            else {
                // We've already removed the query. No big deal, ignore the update
                return [];
            }
        };
        /**
         * Apply a listen complete for a tagged query
         *
         * @return Events to raise.
         */
        SyncTree.prototype.applyTaggedListenComplete = function (path, tag) {
            var queryKey = this.queryKeyForTag_(tag);
            if (queryKey) {
                var r = SyncTree.parseQueryKey_(queryKey);
                var queryPath = r.path, queryId = r.queryId;
                var relativePath = Path.relativePath(queryPath, path);
                var op = new ListenComplete(OperationSource.forServerTaggedQuery(queryId), relativePath);
                return this.applyTaggedOperation_(queryPath, op);
            }
            else {
                // We've already removed the query. No big deal, ignore the update
                return [];
            }
        };
        /**
         * Add an event callback for the specified query.
         *
         * @return Events to raise.
         */
        SyncTree.prototype.addEventRegistration = function (query, eventRegistration) {
            var path = query.path;
            var serverCache = null;
            var foundAncestorDefaultView = false;
            // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.
            // Consider optimizing this once there's a better understanding of what actual behavior will be.
            this.syncPointTree_.foreachOnPath(path, function (pathToSyncPoint, sp) {
                var relativePath = Path.relativePath(pathToSyncPoint, path);
                serverCache = serverCache || sp.getCompleteServerCache(relativePath);
                foundAncestorDefaultView =
                    foundAncestorDefaultView || sp.hasCompleteView();
            });
            var syncPoint = this.syncPointTree_.get(path);
            if (!syncPoint) {
                syncPoint = new SyncPoint();
                this.syncPointTree_ = this.syncPointTree_.set(path, syncPoint);
            }
            else {
                foundAncestorDefaultView =
                    foundAncestorDefaultView || syncPoint.hasCompleteView();
                serverCache = serverCache || syncPoint.getCompleteServerCache(Path.Empty);
            }
            var serverCacheComplete;
            if (serverCache != null) {
                serverCacheComplete = true;
            }
            else {
                serverCacheComplete = false;
                serverCache = ChildrenNode.EMPTY_NODE;
                var subtree = this.syncPointTree_.subtree(path);
                subtree.foreachChild(function (childName, childSyncPoint) {
                    var completeCache = childSyncPoint.getCompleteServerCache(Path.Empty);
                    if (completeCache) {
                        serverCache = serverCache.updateImmediateChild(childName, completeCache);
                    }
                });
            }
            var viewAlreadyExists = syncPoint.viewExistsForQuery(query);
            if (!viewAlreadyExists && !query.getQueryParams().loadsAllData()) {
                // We need to track a tag for this query
                var queryKey = SyncTree.makeQueryKey_(query);
                index_cjs.assert(!this.queryToTagMap.has(queryKey), 'View does not exist, but we have a tag');
                var tag = SyncTree.getNextQueryTag_();
                this.queryToTagMap.set(queryKey, tag);
                this.tagToQueryMap.set(tag, queryKey);
            }
            var writesCache = this.pendingWriteTree_.childWrites(path);
            var events = syncPoint.addEventRegistration(query, eventRegistration, writesCache, serverCache, serverCacheComplete);
            if (!viewAlreadyExists && !foundAncestorDefaultView) {
                var view /** @type !View */ = syncPoint.viewForQuery(query);
                events = events.concat(this.setupListener_(query, view));
            }
            return events;
        };
        /**
         * Remove event callback(s).
         *
         * If query is the default query, we'll check all queries for the specified eventRegistration.
         * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.
         *
         * @param eventRegistration If null, all callbacks are removed.
         * @param cancelError If a cancelError is provided, appropriate cancel events will be returned.
         * @return Cancel events, if cancelError was provided.
         */
        SyncTree.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {
            var _this = this;
            // Find the syncPoint first. Then deal with whether or not it has matching listeners
            var path = query.path;
            var maybeSyncPoint = this.syncPointTree_.get(path);
            var cancelEvents = [];
            // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without
            // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and
            // not loadsAllData().
            if (maybeSyncPoint &&
                (query.queryIdentifier() === 'default' ||
                    maybeSyncPoint.viewExistsForQuery(query))) {
                /**
                 * @type {{removed: !Array.<!Query>, events: !Array.<!Event>}}
                 */
                var removedAndEvents = maybeSyncPoint.removeEventRegistration(query, eventRegistration, cancelError);
                if (maybeSyncPoint.isEmpty()) {
                    this.syncPointTree_ = this.syncPointTree_.remove(path);
                }
                var removed = removedAndEvents.removed;
                cancelEvents = removedAndEvents.events;
                // We may have just removed one of many listeners and can short-circuit this whole process
                // We may also not have removed a default listener, in which case all of the descendant listeners should already be
                // properly set up.
                //
                // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of
                // queryId === 'default'
                var removingDefault = -1 !==
                    removed.findIndex(function (query) {
                        return query.getQueryParams().loadsAllData();
                    });
                var covered = this.syncPointTree_.findOnPath(path, function (relativePath, parentSyncPoint) {
                    return parentSyncPoint.hasCompleteView();
                });
                if (removingDefault && !covered) {
                    var subtree = this.syncPointTree_.subtree(path);
                    // There are potentially child listeners. Determine what if any listens we need to send before executing the
                    // removal
                    if (!subtree.isEmpty()) {
                        // We need to fold over our subtree and collect the listeners to send
                        var newViews = this.collectDistinctViewsForSubTree_(subtree);
                        // Ok, we've collected all the listens we need. Set them up.
                        for (var i = 0; i < newViews.length; ++i) {
                            var view = newViews[i], newQuery = view.getQuery();
                            var listener = this.createListenerForView_(view);
                            this.listenProvider_.startListening(SyncTree.queryForListening_(newQuery), this.tagForQuery_(newQuery), listener.hashFn, listener.onComplete);
                        }
                    }
                }
                // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query
                // The above block has us covered in terms of making sure we're set up on listens lower in the tree.
                // Also, note that if we have a cancelError, it's already been removed at the provider level.
                if (!covered && removed.length > 0 && !cancelError) {
                    // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one
                    // default. Otherwise, we need to iterate through and cancel each individual query
                    if (removingDefault) {
                        // We don't tag default listeners
                        var defaultTag = null;
                        this.listenProvider_.stopListening(SyncTree.queryForListening_(query), defaultTag);
                    }
                    else {
                        removed.forEach(function (queryToRemove) {
                            var tagToRemove = _this.queryToTagMap.get(SyncTree.makeQueryKey_(queryToRemove));
                            _this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToRemove), tagToRemove);
                        });
                    }
                }
                // Now, clear all of the tags we're tracking for the removed listens
                this.removeTags_(removed);
            }
            return cancelEvents;
        };
        /**
         * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a
         * listener above it, we will get a false "null". This shouldn't be a problem because transactions will always
         * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->
         *     <incremented total> as the write is applied locally and then acknowledged at the server.
         *
         * Note: this method will *include* hidden writes from transaction with applyLocally set to false.
         *
         * @param path The path to the data we want
         * @param writeIdsToExclude A specific set to be excluded
         */
        SyncTree.prototype.calcCompleteEventCache = function (path, writeIdsToExclude) {
            var includeHiddenSets = true;
            var writeTree = this.pendingWriteTree_;
            var serverCache = this.syncPointTree_.findOnPath(path, function (pathSoFar, syncPoint) {
                var relativePath = Path.relativePath(pathSoFar, path);
                var serverCache = syncPoint.getCompleteServerCache(relativePath);
                if (serverCache) {
                    return serverCache;
                }
            });
            return writeTree.calcCompleteEventCache(path, serverCache, writeIdsToExclude, includeHiddenSets);
        };
        /**
         * This collapses multiple unfiltered views into a single view, since we only need a single
         * listener for them.
         */
        SyncTree.prototype.collectDistinctViewsForSubTree_ = function (subtree) {
            return subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {
                if (maybeChildSyncPoint && maybeChildSyncPoint.hasCompleteView()) {
                    var completeView = maybeChildSyncPoint.getCompleteView();
                    return [completeView];
                }
                else {
                    // No complete view here, flatten any deeper listens into an array
                    var views_1 = [];
                    if (maybeChildSyncPoint) {
                        views_1 = maybeChildSyncPoint.getQueryViews();
                    }
                    each(childMap, function (_key, childViews) {
                        views_1 = views_1.concat(childViews);
                    });
                    return views_1;
                }
            });
        };
        SyncTree.prototype.removeTags_ = function (queries) {
            for (var j = 0; j < queries.length; ++j) {
                var removedQuery = queries[j];
                if (!removedQuery.getQueryParams().loadsAllData()) {
                    // We should have a tag for this
                    var removedQueryKey = SyncTree.makeQueryKey_(removedQuery);
                    var removedQueryTag = this.queryToTagMap.get(removedQueryKey);
                    this.queryToTagMap.delete(removedQueryKey);
                    this.tagToQueryMap.delete(removedQueryTag);
                }
            }
        };
        /**
         * Normalizes a query to a query we send the server for listening
         *
         * @return The normalized query
         */
        SyncTree.queryForListening_ = function (query) {
            if (query.getQueryParams().loadsAllData() &&
                !query.getQueryParams().isDefault()) {
                // We treat queries that load all data as default queries
                // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits
                // from Query
                return query.getRef();
            }
            else {
                return query;
            }
        };
        /**
         * For a given new listen, manage the de-duplication of outstanding subscriptions.
         *
         * @return This method can return events to support synchronous data sources
         */
        SyncTree.prototype.setupListener_ = function (query, view) {
            var path = query.path;
            var tag = this.tagForQuery_(query);
            var listener = this.createListenerForView_(view);
            var events = this.listenProvider_.startListening(SyncTree.queryForListening_(query), tag, listener.hashFn, listener.onComplete);
            var subtree = this.syncPointTree_.subtree(path);
            // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we
            // may need to shadow other listens as well.
            if (tag) {
                index_cjs.assert(!subtree.value.hasCompleteView(), "If we're adding a query, it shouldn't be shadowed");
            }
            else {
                // Shadow everything at or below this location, this is a default listener.
                var queriesToStop = subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {
                    if (!relativePath.isEmpty() &&
                        maybeChildSyncPoint &&
                        maybeChildSyncPoint.hasCompleteView()) {
                        return [maybeChildSyncPoint.getCompleteView().getQuery()];
                    }
                    else {
                        // No default listener here, flatten any deeper queries into an array
                        var queries_1 = [];
                        if (maybeChildSyncPoint) {
                            queries_1 = queries_1.concat(maybeChildSyncPoint.getQueryViews().map(function (view) { return view.getQuery(); }));
                        }
                        each(childMap, function (_key, childQueries) {
                            queries_1 = queries_1.concat(childQueries);
                        });
                        return queries_1;
                    }
                });
                for (var i = 0; i < queriesToStop.length; ++i) {
                    var queryToStop = queriesToStop[i];
                    this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToStop), this.tagForQuery_(queryToStop));
                }
            }
            return events;
        };
        SyncTree.prototype.createListenerForView_ = function (view) {
            var _this = this;
            var query = view.getQuery();
            var tag = this.tagForQuery_(query);
            return {
                hashFn: function () {
                    var cache = view.getServerCache() || ChildrenNode.EMPTY_NODE;
                    return cache.hash();
                },
                onComplete: function (status) {
                    if (status === 'ok') {
                        if (tag) {
                            return _this.applyTaggedListenComplete(query.path, tag);
                        }
                        else {
                            return _this.applyListenComplete(query.path);
                        }
                    }
                    else {
                        // If a listen failed, kill all of the listeners here, not just the one that triggered the error.
                        // Note that this may need to be scoped to just this listener if we change permissions on filtered children
                        var error = errorForServerCode(status, query);
                        return _this.removeEventRegistration(query, 
                        /*eventRegistration*/ null, error);
                    }
                }
            };
        };
        /**
         * Given a query, computes a "queryKey" suitable for use in our queryToTagMap_.
         */
        SyncTree.makeQueryKey_ = function (query) {
            return query.path.toString() + '$' + query.queryIdentifier();
        };
        /**
         * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.
         */
        SyncTree.parseQueryKey_ = function (queryKey) {
            var splitIndex = queryKey.indexOf('$');
            index_cjs.assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');
            return {
                queryId: queryKey.substr(splitIndex + 1),
                path: new Path(queryKey.substr(0, splitIndex))
            };
        };
        /**
         * Return the query associated with the given tag, if we have one
         */
        SyncTree.prototype.queryKeyForTag_ = function (tag) {
            return this.tagToQueryMap.get(tag);
        };
        /**
         * Return the tag associated with the given query.
         */
        SyncTree.prototype.tagForQuery_ = function (query) {
            var queryKey = SyncTree.makeQueryKey_(query);
            return this.queryToTagMap.get(queryKey);
        };
        /**
         * Static accessor for query tags.
         */
        SyncTree.getNextQueryTag_ = function () {
            return SyncTree.nextQueryTag_++;
        };
        /**
         * A helper method to apply tagged operations
         */
        SyncTree.prototype.applyTaggedOperation_ = function (queryPath, operation) {
            var syncPoint = this.syncPointTree_.get(queryPath);
            index_cjs.assert(syncPoint, "Missing sync point for query tag that we're tracking");
            var writesCache = this.pendingWriteTree_.childWrites(queryPath);
            return syncPoint.applyOperation(operation, writesCache, 
            /*serverCache=*/ null);
        };
        /**
         * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.
         *
         * NOTES:
         * - Descendant SyncPoints will be visited first (since we raise events depth-first).
         *
         * - We call applyOperation() on each SyncPoint passing three things:
         *   1. A version of the Operation that has been made relative to the SyncPoint location.
         *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.
         *   3. A snapshot Node with cached server data, if we have it.
         *
         * - We concatenate all of the events returned by each SyncPoint and return the result.
         */
        SyncTree.prototype.applyOperationToSyncPoints_ = function (operation) {
            return this.applyOperationHelper_(operation, this.syncPointTree_, 
            /*serverCache=*/ null, this.pendingWriteTree_.childWrites(Path.Empty));
        };
        /**
         * Recursive helper for applyOperationToSyncPoints_
         */
        SyncTree.prototype.applyOperationHelper_ = function (operation, syncPointTree, serverCache, writesCache) {
            if (operation.path.isEmpty()) {
                return this.applyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);
            }
            else {
                var syncPoint = syncPointTree.get(Path.Empty);
                // If we don't have cached server data, see if we can get it from this SyncPoint.
                if (serverCache == null && syncPoint != null) {
                    serverCache = syncPoint.getCompleteServerCache(Path.Empty);
                }
                var events = [];
                var childName = operation.path.getFront();
                var childOperation = operation.operationForChild(childName);
                var childTree = syncPointTree.children.get(childName);
                if (childTree && childOperation) {
                    var childServerCache = serverCache
                        ? serverCache.getImmediateChild(childName)
                        : null;
                    var childWritesCache = writesCache.child(childName);
                    events = events.concat(this.applyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));
                }
                if (syncPoint) {
                    events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));
                }
                return events;
            }
        };
        /**
         * Recursive helper for applyOperationToSyncPoints_
         */
        SyncTree.prototype.applyOperationDescendantsHelper_ = function (operation, syncPointTree, serverCache, writesCache) {
            var _this = this;
            var syncPoint = syncPointTree.get(Path.Empty);
            // If we don't have cached server data, see if we can get it from this SyncPoint.
            if (serverCache == null && syncPoint != null) {
                serverCache = syncPoint.getCompleteServerCache(Path.Empty);
            }
            var events = [];
            syncPointTree.children.inorderTraversal(function (childName, childTree) {
                var childServerCache = serverCache
                    ? serverCache.getImmediateChild(childName)
                    : null;
                var childWritesCache = writesCache.child(childName);
                var childOperation = operation.operationForChild(childName);
                if (childOperation) {
                    events = events.concat(_this.applyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));
                }
            });
            if (syncPoint) {
                events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));
            }
            return events;
        };
        /**
         * Static tracker for next query tag.
         */
        SyncTree.nextQueryTag_ = 1;
        return SyncTree;
    }());

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Mutable object which basically just stores a reference to the "latest" immutable snapshot.
     *
     * @constructor
     */
    var SnapshotHolder = /** @class */ (function () {
        function SnapshotHolder() {
            this.rootNode_ = ChildrenNode.EMPTY_NODE;
        }
        SnapshotHolder.prototype.getNode = function (path) {
            return this.rootNode_.getChild(path);
        };
        SnapshotHolder.prototype.updateSnapshot = function (path, newSnapshotNode) {
            this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);
        };
        return SnapshotHolder;
    }());

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Abstraction around FirebaseApp's token fetching capabilities.
     */
    var AuthTokenProvider = /** @class */ (function () {
        function AuthTokenProvider(app_, authProvider_) {
            var _this = this;
            this.app_ = app_;
            this.authProvider_ = authProvider_;
            this.auth_ = null;
            this.auth_ = authProvider_.getImmediate({ optional: true });
            if (!this.auth_) {
                authProvider_.get().then(function (auth) { return (_this.auth_ = auth); });
            }
        }
        /**
         * @param {boolean} forceRefresh
         * @return {!Promise<FirebaseAuthTokenData>}
         */
        AuthTokenProvider.prototype.getToken = function (forceRefresh) {
            if (!this.auth_) {
                return Promise.resolve(null);
            }
            return this.auth_.getToken(forceRefresh).catch(function (error) {
                // TODO: Need to figure out all the cases this is raised and whether
                // this makes sense.
                if (error && error.code === 'auth/token-not-initialized') {
                    log('Got auth/token-not-initialized error.  Treating as null token.');
                    return null;
                }
                else {
                    return Promise.reject(error);
                }
            });
        };
        AuthTokenProvider.prototype.addTokenChangeListener = function (listener) {
            // TODO: We might want to wrap the listener and call it with no args to
            // avoid a leaky abstraction, but that makes removing the listener harder.
            if (this.auth_) {
                this.auth_.addAuthTokenListener(listener);
            }
            else {
                setTimeout(function () { return listener(null); }, 0);
                this.authProvider_
                    .get()
                    .then(function (auth) { return auth.addAuthTokenListener(listener); });
            }
        };
        AuthTokenProvider.prototype.removeTokenChangeListener = function (listener) {
            this.authProvider_
                .get()
                .then(function (auth) { return auth.removeAuthTokenListener(listener); });
        };
        AuthTokenProvider.prototype.notifyForInvalidToken = function () {
            var errorMessage = 'Provided authentication credentials for the app named "' +
                this.app_.name +
                '" are invalid. This usually indicates your app was not ' +
                'initialized correctly. ';
            if ('credential' in this.app_.options) {
                errorMessage +=
                    'Make sure the "credential" property provided to initializeApp() ' +
                        'is authorized to access the specified "databaseURL" and is from the correct ' +
                        'project.';
            }
            else if ('serviceAccount' in this.app_.options) {
                errorMessage +=
                    'Make sure the "serviceAccount" property provided to initializeApp() ' +
                        'is authorized to access the specified "databaseURL" and is from the correct ' +
                        'project.';
            }
            else {
                errorMessage +=
                    'Make sure the "apiKey" and "databaseURL" properties provided to ' +
                        'initializeApp() match the values provided for your app at ' +
                        'https://console.firebase.google.com/.';
            }
            warn(errorMessage);
        };
        return AuthTokenProvider;
    }());

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Tracks a collection of stats.
     *
     * @constructor
     */
    var StatsCollection = /** @class */ (function () {
        function StatsCollection() {
            this.counters_ = {};
        }
        StatsCollection.prototype.incrementCounter = function (name, amount) {
            if (amount === void 0) { amount = 1; }
            if (!index_cjs.contains(this.counters_, name)) {
                this.counters_[name] = 0;
            }
            this.counters_[name] += amount;
        };
        StatsCollection.prototype.get = function () {
            return index_cjs.deepCopy(this.counters_);
        };
        return StatsCollection;
    }());

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var StatsManager = /** @class */ (function () {
        function StatsManager() {
        }
        StatsManager.getCollection = function (repoInfo) {
            var hashString = repoInfo.toString();
            if (!this.collections_[hashString]) {
                this.collections_[hashString] = new StatsCollection();
            }
            return this.collections_[hashString];
        };
        StatsManager.getOrCreateReporter = function (repoInfo, creatorFunction) {
            var hashString = repoInfo.toString();
            if (!this.reporters_[hashString]) {
                this.reporters_[hashString] = creatorFunction();
            }
            return this.reporters_[hashString];
        };
        StatsManager.collections_ = {};
        StatsManager.reporters_ = {};
        return StatsManager;
    }());

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns the delta from the previous call to get stats.
     *
     * @param collection_ The collection to "listen" to.
     * @constructor
     */
    var StatsListener = /** @class */ (function () {
        function StatsListener(collection_) {
            this.collection_ = collection_;
            this.last_ = null;
        }
        StatsListener.prototype.get = function () {
            var newStats = this.collection_.get();
            var delta = tslib_es6.__assign({}, newStats);
            if (this.last_) {
                each(this.last_, function (stat, value) {
                    delta[stat] = delta[stat] - value;
                });
            }
            this.last_ = newStats;
            return delta;
        };
        return StatsListener;
    }());

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably
    // happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10
    // seconds to try to ensure the Firebase connection is established / settled.
    var FIRST_STATS_MIN_TIME = 10 * 1000;
    var FIRST_STATS_MAX_TIME = 30 * 1000;
    // We'll continue to report stats on average every 5 minutes.
    var REPORT_STATS_INTERVAL = 5 * 60 * 1000;
    /**
     * @constructor
     */
    var StatsReporter = /** @class */ (function () {
        /**
         * @param collection
         * @param server_
         */
        function StatsReporter(collection, server_) {
            this.server_ = server_;
            this.statsToReport_ = {};
            this.statsListener_ = new StatsListener(collection);
            var timeout = FIRST_STATS_MIN_TIME +
                (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();
            setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));
        }
        StatsReporter.prototype.includeStat = function (stat) {
            this.statsToReport_[stat] = true;
        };
        StatsReporter.prototype.reportStats_ = function () {
            var _this = this;
            var stats = this.statsListener_.get();
            var reportedStats = {};
            var haveStatsToReport = false;
            each(stats, function (stat, value) {
                if (value > 0 && index_cjs.contains(_this.statsToReport_, stat)) {
                    reportedStats[stat] = value;
                    haveStatsToReport = true;
                }
            });
            if (haveStatsToReport) {
                this.server_.reportStats(reportedStats);
            }
            // queue our next run.
            setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));
        };
        return StatsReporter;
    }());

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * The event queue serves a few purposes:
     * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more
     *    events being queued.
     * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,
     *    raiseQueuedEvents() is called again, the "inner" call will pick up raising events where the "outer" call
     *    left off, ensuring that the events are still raised synchronously and in order.
     * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued
     *    events are raised synchronously.
     *
     * NOTE: This can all go away if/when we move to async events.
     *
     * @constructor
     */
    var EventQueue = /** @class */ (function () {
        function EventQueue() {
            /**
             * @private
             * @type {!Array.<EventList>}
             */
            this.eventLists_ = [];
            /**
             * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.
             * @private
             * @type {!number}
             */
            this.recursionDepth_ = 0;
        }
        /**
         * @param {!Array.<Event>} eventDataList The new events to queue.
         */
        EventQueue.prototype.queueEvents = function (eventDataList) {
            // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.
            var currList = null;
            for (var i = 0; i < eventDataList.length; i++) {
                var eventData = eventDataList[i];
                var eventPath = eventData.getPath();
                if (currList !== null && !eventPath.equals(currList.getPath())) {
                    this.eventLists_.push(currList);
                    currList = null;
                }
                if (currList === null) {
                    currList = new EventList(eventPath);
                }
                currList.add(eventData);
            }
            if (currList) {
                this.eventLists_.push(currList);
            }
        };
        /**
         * Queues the specified events and synchronously raises all events (including previously queued ones)
         * for the specified path.
         *
         * It is assumed that the new events are all for the specified path.
         *
         * @param {!Path} path The path to raise events for.
         * @param {!Array.<Event>} eventDataList The new events to raise.
         */
        EventQueue.prototype.raiseEventsAtPath = function (path, eventDataList) {
            this.queueEvents(eventDataList);
            this.raiseQueuedEventsMatchingPredicate_(function (eventPath) {
                return eventPath.equals(path);
            });
        };
        /**
         * Queues the specified events and synchronously raises all events (including previously queued ones) for
         * locations related to the specified change path (i.e. all ancestors and descendants).
         *
         * It is assumed that the new events are all related (ancestor or descendant) to the specified path.
         *
         * @param {!Path} changedPath The path to raise events for.
         * @param {!Array.<!Event>} eventDataList The events to raise
         */
        EventQueue.prototype.raiseEventsForChangedPath = function (changedPath, eventDataList) {
            this.queueEvents(eventDataList);
            this.raiseQueuedEventsMatchingPredicate_(function (eventPath) {
                return eventPath.contains(changedPath) || changedPath.contains(eventPath);
            });
        };
        /**
         * @param {!function(!Path):boolean} predicate
         * @private
         */
        EventQueue.prototype.raiseQueuedEventsMatchingPredicate_ = function (predicate) {
            this.recursionDepth_++;
            var sentAll = true;
            for (var i = 0; i < this.eventLists_.length; i++) {
                var eventList = this.eventLists_[i];
                if (eventList) {
                    var eventPath = eventList.getPath();
                    if (predicate(eventPath)) {
                        this.eventLists_[i].raise();
                        this.eventLists_[i] = null;
                    }
                    else {
                        sentAll = false;
                    }
                }
            }
            if (sentAll) {
                this.eventLists_ = [];
            }
            this.recursionDepth_--;
        };
        return EventQueue;
    }());
    /**
     * @param {!Path} path
     * @constructor
     */
    var EventList = /** @class */ (function () {
        function EventList(path_) {
            this.path_ = path_;
            /**
             * @type {!Array.<Event>}
             * @private
             */
            this.events_ = [];
        }
        /**
         * @param {!Event} eventData
         */
        EventList.prototype.add = function (eventData) {
            this.events_.push(eventData);
        };
        /**
         * Iterates through the list and raises each event
         */
        EventList.prototype.raise = function () {
            for (var i = 0; i < this.events_.length; i++) {
                var eventData = this.events_[i];
                if (eventData !== null) {
                    this.events_[i] = null;
                    var eventFn = eventData.getEventRunner();
                    if (logger) {
                        log('event: ' + eventData.toString());
                    }
                    exceptionGuard(eventFn);
                }
            }
        };
        /**
         * @return {!Path}
         */
        EventList.prototype.getPath = function () {
            return this.path_;
        };
        return EventList;
    }());

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Base class to be used if you want to emit events. Call the constructor with
     * the set of allowed event names.
     */
    var EventEmitter = /** @class */ (function () {
        /**
         * @param {!Array.<string>} allowedEvents_
         */
        function EventEmitter(allowedEvents_) {
            this.allowedEvents_ = allowedEvents_;
            this.listeners_ = {};
            index_cjs.assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');
        }
        /**
         * To be called by derived classes to trigger events.
         * @param {!string} eventType
         * @param {...*} varArgs
         */
        EventEmitter.prototype.trigger = function (eventType) {
            var varArgs = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                varArgs[_i - 1] = arguments[_i];
            }
            if (Array.isArray(this.listeners_[eventType])) {
                // Clone the list, since callbacks could add/remove listeners.
                var listeners = tslib_es6.__spread(this.listeners_[eventType]);
                for (var i = 0; i < listeners.length; i++) {
                    listeners[i].callback.apply(listeners[i].context, varArgs);
                }
            }
        };
        EventEmitter.prototype.on = function (eventType, callback, context) {
            this.validateEventType_(eventType);
            this.listeners_[eventType] = this.listeners_[eventType] || [];
            this.listeners_[eventType].push({ callback: callback, context: context });
            var eventData = this.getInitialEvent(eventType);
            if (eventData) {
                callback.apply(context, eventData);
            }
        };
        EventEmitter.prototype.off = function (eventType, callback, context) {
            this.validateEventType_(eventType);
            var listeners = this.listeners_[eventType] || [];
            for (var i = 0; i < listeners.length; i++) {
                if (listeners[i].callback === callback &&
                    (!context || context === listeners[i].context)) {
                    listeners.splice(i, 1);
                    return;
                }
            }
        };
        EventEmitter.prototype.validateEventType_ = function (eventType) {
            index_cjs.assert(this.allowedEvents_.find(function (et) {
                return et === eventType;
            }), 'Unknown event: ' + eventType);
        };
        return EventEmitter;
    }());

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @extends {EventEmitter}
     */
    var VisibilityMonitor = /** @class */ (function (_super) {
        tslib_es6.__extends(VisibilityMonitor, _super);
        function VisibilityMonitor() {
            var _this = _super.call(this, ['visible']) || this;
            var hidden;
            var visibilityChange;
            if (typeof document !== 'undefined' &&
                typeof document.addEventListener !== 'undefined') {
                if (typeof document['hidden'] !== 'undefined') {
                    // Opera 12.10 and Firefox 18 and later support
                    visibilityChange = 'visibilitychange';
                    hidden = 'hidden';
                }
                else if (typeof document['mozHidden'] !== 'undefined') {
                    visibilityChange = 'mozvisibilitychange';
                    hidden = 'mozHidden';
                }
                else if (typeof document['msHidden'] !== 'undefined') {
                    visibilityChange = 'msvisibilitychange';
                    hidden = 'msHidden';
                }
                else if (typeof document['webkitHidden'] !== 'undefined') {
                    visibilityChange = 'webkitvisibilitychange';
                    hidden = 'webkitHidden';
                }
            }
            // Initially, we always assume we are visible. This ensures that in browsers
            // without page visibility support or in cases where we are never visible
            // (e.g. chrome extension), we act as if we are visible, i.e. don't delay
            // reconnects
            _this.visible_ = true;
            if (visibilityChange) {
                document.addEventListener(visibilityChange, function () {
                    var visible = !document[hidden];
                    if (visible !== _this.visible_) {
                        _this.visible_ = visible;
                        _this.trigger('visible', visible);
                    }
                }, false);
            }
            return _this;
        }
        VisibilityMonitor.getInstance = function () {
            return new VisibilityMonitor();
        };
        /**
         * @param {!string} eventType
         * @return {Array.<boolean>}
         */
        VisibilityMonitor.prototype.getInitialEvent = function (eventType) {
            index_cjs.assert(eventType === 'visible', 'Unknown event type: ' + eventType);
            return [this.visible_];
        };
        return VisibilityMonitor;
    }(EventEmitter));

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Monitors online state (as reported by window.online/offline events).
     *
     * The expectation is that this could have many false positives (thinks we are online
     * when we're not), but no false negatives.  So we can safely use it to determine when
     * we definitely cannot reach the internet.
     *
     * @extends {EventEmitter}
     */
    var OnlineMonitor = /** @class */ (function (_super) {
        tslib_es6.__extends(OnlineMonitor, _super);
        function OnlineMonitor() {
            var _this = _super.call(this, ['online']) || this;
            _this.online_ = true;
            // We've had repeated complaints that Cordova apps can get stuck "offline", e.g.
            // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810
            // It would seem that the 'online' event does not always fire consistently. So we disable it
            // for Cordova.
            if (typeof window !== 'undefined' &&
                typeof window.addEventListener !== 'undefined' &&
                !index_cjs.isMobileCordova()) {
                window.addEventListener('online', function () {
                    if (!_this.online_) {
                        _this.online_ = true;
                        _this.trigger('online', true);
                    }
                }, false);
                window.addEventListener('offline', function () {
                    if (_this.online_) {
                        _this.online_ = false;
                        _this.trigger('online', false);
                    }
                }, false);
            }
            return _this;
        }
        OnlineMonitor.getInstance = function () {
            return new OnlineMonitor();
        };
        /**
         * @param {!string} eventType
         * @return {Array.<boolean>}
         */
        OnlineMonitor.prototype.getInitialEvent = function (eventType) {
            index_cjs.assert(eventType === 'online', 'Unknown event type: ' + eventType);
            return [this.online_];
        };
        /**
         * @return {boolean}
         */
        OnlineMonitor.prototype.currentlyOnline = function () {
            return this.online_;
        };
        return OnlineMonitor;
    }(EventEmitter));

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * This class ensures the packets from the server arrive in order
     * This class takes data from the server and ensures it gets passed into the callbacks in order.
     * @constructor
     */
    var PacketReceiver = /** @class */ (function () {
        /**
         * @param onMessage_
         */
        function PacketReceiver(onMessage_) {
            this.onMessage_ = onMessage_;
            this.pendingResponses = [];
            this.currentResponseNum = 0;
            this.closeAfterResponse = -1;
            this.onClose = null;
        }
        PacketReceiver.prototype.closeAfter = function (responseNum, callback) {
            this.closeAfterResponse = responseNum;
            this.onClose = callback;
            if (this.closeAfterResponse < this.currentResponseNum) {
                this.onClose();
                this.onClose = null;
            }
        };
        /**
         * Each message from the server comes with a response number, and an array of data. The responseNumber
         * allows us to ensure that we process them in the right order, since we can't be guaranteed that all
         * browsers will respond in the same order as the requests we sent
         * @param {number} requestNum
         * @param {Array} data
         */
        PacketReceiver.prototype.handleResponse = function (requestNum, data) {
            var _this = this;
            this.pendingResponses[requestNum] = data;
            var _loop_1 = function () {
                var toProcess = this_1.pendingResponses[this_1.currentResponseNum];
                delete this_1.pendingResponses[this_1.currentResponseNum];
                var _loop_2 = function (i) {
                    if (toProcess[i]) {
                        exceptionGuard(function () {
                            _this.onMessage_(toProcess[i]);
                        });
                    }
                };
                for (var i = 0; i < toProcess.length; ++i) {
                    _loop_2(i);
                }
                if (this_1.currentResponseNum === this_1.closeAfterResponse) {
                    if (this_1.onClose) {
                        this_1.onClose();
                        this_1.onClose = null;
                    }
                    return "break";
                }
                this_1.currentResponseNum++;
            };
            var this_1 = this;
            while (this.pendingResponses[this.currentResponseNum]) {
                var state_1 = _loop_1();
                if (state_1 === "break")
                    break;
            }
        };
        return PacketReceiver;
    }());

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // URL query parameters associated with longpolling
    var FIREBASE_LONGPOLL_START_PARAM = 'start';
    var FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';
    var FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';
    var FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';
    var FIREBASE_LONGPOLL_ID_PARAM = 'id';
    var FIREBASE_LONGPOLL_PW_PARAM = 'pw';
    var FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';
    var FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';
    var FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';
    var FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';
    var FIREBASE_LONGPOLL_DATA_PARAM = 'd';
    var FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';
    //Data size constants.
    //TODO: Perf: the maximum length actually differs from browser to browser.
    // We should check what browser we're on and set accordingly.
    var MAX_URL_DATA_SIZE = 1870;
    var SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=
    var MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;
    /**
     * Keepalive period
     * send a fresh request at minimum every 25 seconds. Opera has a maximum request
     * length of 30 seconds that we can't exceed.
     * @const
     * @type {number}
     */
    var KEEPALIVE_REQUEST_INTERVAL = 25000;
    /**
     * How long to wait before aborting a long-polling connection attempt.
     * @const
     * @type {number}
     */
    var LP_CONNECT_TIMEOUT = 30000;
    /**
     * This class manages a single long-polling connection.
     *
     * @constructor
     * @implements {Transport}
     */
    var BrowserPollConnection = /** @class */ (function () {
        /**
         * @param {string} connId An identifier for this connection, used for logging
         * @param {RepoInfo} repoInfo The info for the endpoint to send data to.
         * @param {string=} transportSessionId Optional transportSessionid if we are reconnecting for an existing
         *                                         transport session
         * @param {string=}  lastSessionId Optional lastSessionId if the PersistentConnection has already created a
         *                                     connection previously
         */
        function BrowserPollConnection(connId, repoInfo, transportSessionId, lastSessionId) {
            this.connId = connId;
            this.repoInfo = repoInfo;
            this.transportSessionId = transportSessionId;
            this.lastSessionId = lastSessionId;
            this.bytesSent = 0;
            this.bytesReceived = 0;
            this.everConnected_ = false;
            this.log_ = logWrapper(connId);
            this.stats_ = StatsManager.getCollection(repoInfo);
            this.urlFn = function (params) {
                return repoInfo.connectionURL(LONG_POLLING, params);
            };
        }
        /**
         *
         * @param {function(Object)} onMessage Callback when messages arrive
         * @param {function()} onDisconnect Callback with connection lost.
         */
        BrowserPollConnection.prototype.open = function (onMessage, onDisconnect) {
            var _this = this;
            this.curSegmentNum = 0;
            this.onDisconnect_ = onDisconnect;
            this.myPacketOrderer = new PacketReceiver(onMessage);
            this.isClosed_ = false;
            this.connectTimeoutTimer_ = setTimeout(function () {
                _this.log_('Timed out trying to connect.');
                // Make sure we clear the host cache
                _this.onClosed_();
                _this.connectTimeoutTimer_ = null;
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
            }, Math.floor(LP_CONNECT_TIMEOUT));
            // Ensure we delay the creation of the iframe until the DOM is loaded.
            executeWhenDOMReady(function () {
                if (_this.isClosed_) {
                    return;
                }
                //Set up a callback that gets triggered once a connection is set up.
                _this.scriptTagHolder = new FirebaseIFrameScriptHolder(function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    var _a = tslib_es6.__read(args, 5), command = _a[0], arg1 = _a[1], arg2 = _a[2], arg3 = _a[3], arg4 = _a[4];
                    _this.incrementIncomingBytes_(args);
                    if (!_this.scriptTagHolder) {
                        return; // we closed the connection.
                    }
                    if (_this.connectTimeoutTimer_) {
                        clearTimeout(_this.connectTimeoutTimer_);
                        _this.connectTimeoutTimer_ = null;
                    }
                    _this.everConnected_ = true;
                    if (command === FIREBASE_LONGPOLL_START_PARAM) {
                        _this.id = arg1;
                        _this.password = arg2;
                    }
                    else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {
                        // Don't clear the host cache. We got a response from the server, so we know it's reachable
                        if (arg1) {
                            // We aren't expecting any more data (other than what the server's already in the process of sending us
                            // through our already open polls), so don't send any more.
                            _this.scriptTagHolder.sendNewPolls = false;
                            // arg1 in this case is the last response number sent by the server. We should try to receive
                            // all of the responses up to this one before closing
                            _this.myPacketOrderer.closeAfter(arg1, function () {
                                _this.onClosed_();
                            });
                        }
                        else {
                            _this.onClosed_();
                        }
                    }
                    else {
                        throw new Error('Unrecognized command received: ' + command);
                    }
                }, function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    var _a = tslib_es6.__read(args, 2), pN = _a[0], data = _a[1];
                    _this.incrementIncomingBytes_(args);
                    _this.myPacketOrderer.handleResponse(pN, data);
                }, function () {
                    _this.onClosed_();
                }, _this.urlFn);
                //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results
                //from cache.
                var urlParams = {};
                urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';
                urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);
                if (_this.scriptTagHolder.uniqueCallbackIdentifier) {
                    urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] = _this.scriptTagHolder.uniqueCallbackIdentifier;
                }
                urlParams[VERSION_PARAM] = PROTOCOL_VERSION;
                if (_this.transportSessionId) {
                    urlParams[TRANSPORT_SESSION_PARAM] = _this.transportSessionId;
                }
                if (_this.lastSessionId) {
                    urlParams[LAST_SESSION_PARAM] = _this.lastSessionId;
                }
                if (typeof location !== 'undefined' &&
                    location.href &&
                    location.href.indexOf(FORGE_DOMAIN) !== -1) {
                    urlParams[REFERER_PARAM] = FORGE_REF;
                }
                var connectURL = _this.urlFn(urlParams);
                _this.log_('Connecting via long-poll to ' + connectURL);
                _this.scriptTagHolder.addTag(connectURL, function () {
                    /* do nothing */
                });
            });
        };
        /**
         * Call this when a handshake has completed successfully and we want to consider the connection established
         */
        BrowserPollConnection.prototype.start = function () {
            this.scriptTagHolder.startLongPoll(this.id, this.password);
            this.addDisconnectPingFrame(this.id, this.password);
        };
        /**
         * Forces long polling to be considered as a potential transport
         */
        BrowserPollConnection.forceAllow = function () {
            BrowserPollConnection.forceAllow_ = true;
        };
        /**
         * Forces longpolling to not be considered as a potential transport
         */
        BrowserPollConnection.forceDisallow = function () {
            BrowserPollConnection.forceDisallow_ = true;
        };
        // Static method, use string literal so it can be accessed in a generic way
        BrowserPollConnection.isAvailable = function () {
            if (index_cjs.isNodeSdk()) {
                return false;
            }
            else if (BrowserPollConnection.forceAllow_) {
                return true;
            }
            else {
                // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in
                // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).
                return (!BrowserPollConnection.forceDisallow_ &&
                    typeof document !== 'undefined' &&
                    document.createElement != null &&
                    !isChromeExtensionContentScript() &&
                    !isWindowsStoreApp());
            }
        };
        /**
         * No-op for polling
         */
        BrowserPollConnection.prototype.markConnectionHealthy = function () { };
        /**
         * Stops polling and cleans up the iframe
         * @private
         */
        BrowserPollConnection.prototype.shutdown_ = function () {
            this.isClosed_ = true;
            if (this.scriptTagHolder) {
                this.scriptTagHolder.close();
                this.scriptTagHolder = null;
            }
            //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.
            if (this.myDisconnFrame) {
                document.body.removeChild(this.myDisconnFrame);
                this.myDisconnFrame = null;
            }
            if (this.connectTimeoutTimer_) {
                clearTimeout(this.connectTimeoutTimer_);
                this.connectTimeoutTimer_ = null;
            }
        };
        /**
         * Triggered when this transport is closed
         * @private
         */
        BrowserPollConnection.prototype.onClosed_ = function () {
            if (!this.isClosed_) {
                this.log_('Longpoll is closing itself');
                this.shutdown_();
                if (this.onDisconnect_) {
                    this.onDisconnect_(this.everConnected_);
                    this.onDisconnect_ = null;
                }
            }
        };
        /**
         * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server
         * that we've left.
         */
        BrowserPollConnection.prototype.close = function () {
            if (!this.isClosed_) {
                this.log_('Longpoll is being closed.');
                this.shutdown_();
            }
        };
        /**
         * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then
         * broken into chunks (since URLs have a small maximum length).
         * @param {!Object} data The JSON data to transmit.
         */
        BrowserPollConnection.prototype.send = function (data) {
            var dataStr = index_cjs.stringify(data);
            this.bytesSent += dataStr.length;
            this.stats_.incrementCounter('bytes_sent', dataStr.length);
            //first, lets get the base64-encoded data
            var base64data = index_cjs.base64Encode(dataStr);
            //We can only fit a certain amount in each URL, so we need to split this request
            //up into multiple pieces if it doesn't fit in one request.
            var dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);
            //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number
            //of segments so that we can reassemble the packet on the server.
            for (var i = 0; i < dataSegs.length; i++) {
                this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);
                this.curSegmentNum++;
            }
        };
        /**
         * This is how we notify the server that we're leaving.
         * We aren't able to send requests with DHTML on a window close event, but we can
         * trigger XHR requests in some browsers (everything but Opera basically).
         * @param {!string} id
         * @param {!string} pw
         */
        BrowserPollConnection.prototype.addDisconnectPingFrame = function (id, pw) {
            if (index_cjs.isNodeSdk()) {
                return;
            }
            this.myDisconnFrame = document.createElement('iframe');
            var urlParams = {};
            urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';
            urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;
            urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;
            this.myDisconnFrame.src = this.urlFn(urlParams);
            this.myDisconnFrame.style.display = 'none';
            document.body.appendChild(this.myDisconnFrame);
        };
        /**
         * Used to track the bytes received by this client
         * @param {*} args
         * @private
         */
        BrowserPollConnection.prototype.incrementIncomingBytes_ = function (args) {
            // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.
            var bytesReceived = index_cjs.stringify(args).length;
            this.bytesReceived += bytesReceived;
            this.stats_.incrementCounter('bytes_received', bytesReceived);
        };
        return BrowserPollConnection;
    }());
    /*********************************************************************************************
     * A wrapper around an iframe that is used as a long-polling script holder.
     * @constructor
     *********************************************************************************************/
    var FirebaseIFrameScriptHolder = /** @class */ (function () {
        /**
         * @param commandCB - The callback to be called when control commands are recevied from the server.
         * @param onMessageCB - The callback to be triggered when responses arrive from the server.
         * @param onDisconnect - The callback to be triggered when this tag holder is closed
         * @param urlFn - A function that provides the URL of the endpoint to send data to.
         */
        function FirebaseIFrameScriptHolder(commandCB, onMessageCB, onDisconnect, urlFn) {
            this.onDisconnect = onDisconnect;
            this.urlFn = urlFn;
            //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause
            //problems in some browsers.
            this.outstandingRequests = new Set();
            //A queue of the pending segments waiting for transmission to the server.
            this.pendingSegs = [];
            //A serial number. We use this for two things:
            // 1) A way to ensure the browser doesn't cache responses to polls
            // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The
            //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute
            //    JSONP code in the order it was added to the iframe.
            this.currentSerial = Math.floor(Math.random() * 100000000);
            // This gets set to false when we're "closing down" the connection (e.g. we're switching transports but there's still
            // incoming data from the server that we're waiting for).
            this.sendNewPolls = true;
            if (!index_cjs.isNodeSdk()) {
                //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the
                //iframes where we put the long-polling script tags. We have two callbacks:
                //   1) Command Callback - Triggered for control issues, like starting a connection.
                //   2) Message Callback - Triggered when new data arrives.
                this.uniqueCallbackIdentifier = LUIDGenerator();
                window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;
                window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] = onMessageCB;
                //Create an iframe for us to add script tags to.
                this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();
                // Set the iframe's contents.
                var script = '';
                // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient
                // for ie9, but ie8 needs to do it again in the document itself.
                if (this.myIFrame.src &&
                    this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {
                    var currentDomain = document.domain;
                    script = '<script>document.domain="' + currentDomain + '";</script>';
                }
                var iframeContents = '<html><body>' + script + '</body></html>';
                try {
                    this.myIFrame.doc.open();
                    this.myIFrame.doc.write(iframeContents);
                    this.myIFrame.doc.close();
                }
                catch (e) {
                    log('frame writing exception');
                    if (e.stack) {
                        log(e.stack);
                    }
                    log(e);
                }
            }
            else {
                this.commandCB = commandCB;
                this.onMessageCB = onMessageCB;
            }
        }
        /**
         * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can
         * actually use.
         * @private
         * @return {Element}
         */
        FirebaseIFrameScriptHolder.createIFrame_ = function () {
            var iframe = document.createElement('iframe');
            iframe.style.display = 'none';
            // This is necessary in order to initialize the document inside the iframe
            if (document.body) {
                document.body.appendChild(iframe);
                try {
                    // If document.domain has been modified in IE, this will throw an error, and we need to set the
                    // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute
                    // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.
                    var a = iframe.contentWindow.document;
                    if (!a) {
                        // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.
                        log('No IE domain setting required');
                    }
                }
                catch (e) {
                    var domain = document.domain;
                    iframe.src =
                        "javascript:void((function(){document.open();document.domain='" +
                            domain +
                            "';document.close();})())";
                }
            }
            else {
                // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this
                // never gets hit.
                throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';
            }
            // Get the document of the iframe in a browser-specific way.
            if (iframe.contentDocument) {
                iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari
            }
            else if (iframe.contentWindow) {
                iframe.doc = iframe.contentWindow.document; // Internet Explorer
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
            }
            else if (iframe.document) {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                iframe.doc = iframe.document; //others?
            }
            return iframe;
        };
        /**
         * Cancel all outstanding queries and remove the frame.
         */
        FirebaseIFrameScriptHolder.prototype.close = function () {
            var _this = this;
            //Mark this iframe as dead, so no new requests are sent.
            this.alive = false;
            if (this.myIFrame) {
                //We have to actually remove all of the html inside this iframe before removing it from the
                //window, or IE will continue loading and executing the script tags we've already added, which
                //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.
                this.myIFrame.doc.body.innerHTML = '';
                setTimeout(function () {
                    if (_this.myIFrame !== null) {
                        document.body.removeChild(_this.myIFrame);
                        _this.myIFrame = null;
                    }
                }, Math.floor(0));
            }
            // Protect from being called recursively.
            var onDisconnect = this.onDisconnect;
            if (onDisconnect) {
                this.onDisconnect = null;
                onDisconnect();
            }
        };
        /**
         * Actually start the long-polling session by adding the first script tag(s) to the iframe.
         * @param {!string} id - The ID of this connection
         * @param {!string} pw - The password for this connection
         */
        FirebaseIFrameScriptHolder.prototype.startLongPoll = function (id, pw) {
            this.myID = id;
            this.myPW = pw;
            this.alive = true;
            //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.
            while (this.newRequest_()) { }
        };
        /**
         * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't
         * too many outstanding requests and we are still alive.
         *
         * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if
         * needed.
         */
        FirebaseIFrameScriptHolder.prototype.newRequest_ = function () {
            // We keep one outstanding request open all the time to receive data, but if we need to send data
            // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically
            // close the old request.
            if (this.alive &&
                this.sendNewPolls &&
                this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {
                //construct our url
                this.currentSerial++;
                var urlParams = {};
                urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;
                urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;
                urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;
                var theURL = this.urlFn(urlParams);
                //Now add as much data as we can.
                var curDataString = '';
                var i = 0;
                while (this.pendingSegs.length > 0) {
                    //first, lets see if the next segment will fit.
                    var nextSeg = this.pendingSegs[0];
                    if (nextSeg.d.length +
                        SEG_HEADER_SIZE +
                        curDataString.length <=
                        MAX_URL_DATA_SIZE) {
                        //great, the segment will fit. Lets append it.
                        var theSeg = this.pendingSegs.shift();
                        curDataString =
                            curDataString +
                                '&' +
                                FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +
                                i +
                                '=' +
                                theSeg.seg +
                                '&' +
                                FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +
                                i +
                                '=' +
                                theSeg.ts +
                                '&' +
                                FIREBASE_LONGPOLL_DATA_PARAM +
                                i +
                                '=' +
                                theSeg.d;
                        i++;
                    }
                    else {
                        break;
                    }
                }
                theURL = theURL + curDataString;
                this.addLongPollTag_(theURL, this.currentSerial);
                return true;
            }
            else {
                return false;
            }
        };
        /**
         * Queue a packet for transmission to the server.
         * @param segnum - A sequential id for this packet segment used for reassembly
         * @param totalsegs - The total number of segments in this packet
         * @param data - The data for this segment.
         */
        FirebaseIFrameScriptHolder.prototype.enqueueSegment = function (segnum, totalsegs, data) {
            //add this to the queue of segments to send.
            this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });
            //send the data immediately if there isn't already data being transmitted, unless
            //startLongPoll hasn't been called yet.
            if (this.alive) {
                this.newRequest_();
            }
        };
        /**
         * Add a script tag for a regular long-poll request.
         * @param {!string} url - The URL of the script tag.
         * @param {!number} serial - The serial number of the request.
         * @private
         */
        FirebaseIFrameScriptHolder.prototype.addLongPollTag_ = function (url, serial) {
            var _this = this;
            //remember that we sent this request.
            this.outstandingRequests.add(serial);
            var doNewRequest = function () {
                _this.outstandingRequests.delete(serial);
                _this.newRequest_();
            };
            // If this request doesn't return on its own accord (by the server sending us some data), we'll
            // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.
            var keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));
            var readyStateCB = function () {
                // Request completed.  Cancel the keepalive.
                clearTimeout(keepaliveTimeout);
                // Trigger a new request so we can continue receiving data.
                doNewRequest();
            };
            this.addTag(url, readyStateCB);
        };
        /**
         * Add an arbitrary script tag to the iframe.
         * @param {!string} url - The URL for the script tag source.
         * @param {!function()} loadCB - A callback to be triggered once the script has loaded.
         */
        FirebaseIFrameScriptHolder.prototype.addTag = function (url, loadCB) {
            var _this = this;
            if (index_cjs.isNodeSdk()) {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                this.doNodeLongPoll(url, loadCB);
            }
            else {
                setTimeout(function () {
                    try {
                        // if we're already closed, don't add this poll
                        if (!_this.sendNewPolls) {
                            return;
                        }
                        var newScript_1 = _this.myIFrame.doc.createElement('script');
                        newScript_1.type = 'text/javascript';
                        newScript_1.async = true;
                        newScript_1.src = url;
                        // eslint-disable-next-line @typescript-eslint/no-explicit-any
                        newScript_1.onload = newScript_1.onreadystatechange = function () {
                            // eslint-disable-next-line @typescript-eslint/no-explicit-any
                            var rstate = newScript_1.readyState;
                            if (!rstate || rstate === 'loaded' || rstate === 'complete') {
                                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                                newScript_1.onload = newScript_1.onreadystatechange = null;
                                if (newScript_1.parentNode) {
                                    newScript_1.parentNode.removeChild(newScript_1);
                                }
                                loadCB();
                            }
                        };
                        newScript_1.onerror = function () {
                            log('Long-poll script failed to load: ' + url);
                            _this.sendNewPolls = false;
                            _this.close();
                        };
                        _this.myIFrame.doc.body.appendChild(newScript_1);
                    }
                    catch (e) {
                        // TODO: we should make this error visible somehow
                    }
                }, Math.floor(1));
            }
        };
        return FirebaseIFrameScriptHolder;
    }());

    /**
     * @license
     * Copyright 2019 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** The semver (www.semver.org) version of the SDK. */
    var SDK_VERSION = '';
    // SDK_VERSION should be set before any database instance is created
    function setSDKVersion(version) {
        SDK_VERSION = version;
    }

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var WEBSOCKET_MAX_FRAME_SIZE = 16384;
    var WEBSOCKET_KEEPALIVE_INTERVAL = 45000;
    var WebSocketImpl = null;
    if (typeof MozWebSocket !== 'undefined') {
        WebSocketImpl = MozWebSocket;
    }
    else if (typeof WebSocket !== 'undefined') {
        WebSocketImpl = WebSocket;
    }
    /**
     * Create a new websocket connection with the given callbacks.
     * @constructor
     * @implements {Transport}
     */
    var WebSocketConnection = /** @class */ (function () {
        /**
         * @param {string} connId identifier for this transport
         * @param {RepoInfo} repoInfo The info for the websocket endpoint.
         * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport
         *                                         session
         * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection
         */
        function WebSocketConnection(connId, repoInfo, transportSessionId, lastSessionId) {
            this.connId = connId;
            this.keepaliveTimer = null;
            this.frames = null;
            this.totalFrames = 0;
            this.bytesSent = 0;
            this.bytesReceived = 0;
            this.log_ = logWrapper(this.connId);
            this.stats_ = StatsManager.getCollection(repoInfo);
            this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId);
        }
        /**
         * @param {RepoInfo} repoInfo The info for the websocket endpoint.
         * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport
         *                                         session
         * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection
         * @return {string} connection url
         * @private
         */
        WebSocketConnection.connectionURL_ = function (repoInfo, transportSessionId, lastSessionId) {
            var urlParams = {};
            urlParams[VERSION_PARAM] = PROTOCOL_VERSION;
            if (!index_cjs.isNodeSdk() &&
                typeof location !== 'undefined' &&
                location.href &&
                location.href.indexOf(FORGE_DOMAIN) !== -1) {
                urlParams[REFERER_PARAM] = FORGE_REF;
            }
            if (transportSessionId) {
                urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;
            }
            if (lastSessionId) {
                urlParams[LAST_SESSION_PARAM] = lastSessionId;
            }
            return repoInfo.connectionURL(WEBSOCKET, urlParams);
        };
        /**
         *
         * @param onMessage Callback when messages arrive
         * @param onDisconnect Callback with connection lost.
         */
        WebSocketConnection.prototype.open = function (onMessage, onDisconnect) {
            var _this = this;
            this.onDisconnect = onDisconnect;
            this.onMessage = onMessage;
            this.log_('Websocket connecting to ' + this.connURL);
            this.everConnected_ = false;
            // Assume failure until proven otherwise.
            PersistentStorage.set('previous_websocket_failure', true);
            try {
                if (index_cjs.isNodeSdk()) {
                    var device = index_cjs.CONSTANTS.NODE_ADMIN ? 'AdminNode' : 'Node';
                    // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>
                    var options = {
                        headers: {
                            'User-Agent': "Firebase/" + PROTOCOL_VERSION + "/" + SDK_VERSION + "/" + process.platform + "/" + device
                        }
                    };
                    // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.
                    var env = process['env'];
                    var proxy = this.connURL.indexOf('wss://') === 0
                        ? env['HTTPS_PROXY'] || env['https_proxy']
                        : env['HTTP_PROXY'] || env['http_proxy'];
                    if (proxy) {
                        options['proxy'] = { origin: proxy };
                    }
                    this.mySock = new WebSocketImpl(this.connURL, [], options);
                }
                else {
                    this.mySock = new WebSocketImpl(this.connURL);
                }
            }
            catch (e) {
                this.log_('Error instantiating WebSocket.');
                var error = e.message || e.data;
                if (error) {
                    this.log_(error);
                }
                this.onClosed_();
                return;
            }
            this.mySock.onopen = function () {
                _this.log_('Websocket connected.');
                _this.everConnected_ = true;
            };
            this.mySock.onclose = function () {
                _this.log_('Websocket connection was disconnected.');
                _this.mySock = null;
                _this.onClosed_();
            };
            this.mySock.onmessage = function (m) {
                _this.handleIncomingFrame(m);
            };
            this.mySock.onerror = function (e) {
                _this.log_('WebSocket error.  Closing connection.');
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                var error = e.message || e.data;
                if (error) {
                    _this.log_(error);
                }
                _this.onClosed_();
            };
        };
        /**
         * No-op for websockets, we don't need to do anything once the connection is confirmed as open
         */
        WebSocketConnection.prototype.start = function () { };
        WebSocketConnection.forceDisallow = function () {
            WebSocketConnection.forceDisallow_ = true;
        };
        WebSocketConnection.isAvailable = function () {
            var isOldAndroid = false;
            if (typeof navigator !== 'undefined' && navigator.userAgent) {
                var oldAndroidRegex = /Android ([0-9]{0,}\.[0-9]{0,})/;
                var oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);
                if (oldAndroidMatch && oldAndroidMatch.length > 1) {
                    if (parseFloat(oldAndroidMatch[1]) < 4.4) {
                        isOldAndroid = true;
                    }
                }
            }
            return (!isOldAndroid &&
                WebSocketImpl !== null &&
                !WebSocketConnection.forceDisallow_);
        };
        /**
         * Returns true if we previously failed to connect with this transport.
         * @return {boolean}
         */
        WebSocketConnection.previouslyFailed = function () {
            // If our persistent storage is actually only in-memory storage,
            // we default to assuming that it previously failed to be safe.
            return (PersistentStorage.isInMemoryStorage ||
                PersistentStorage.get('previous_websocket_failure') === true);
        };
        WebSocketConnection.prototype.markConnectionHealthy = function () {
            PersistentStorage.remove('previous_websocket_failure');
        };
        WebSocketConnection.prototype.appendFrame_ = function (data) {
            this.frames.push(data);
            if (this.frames.length === this.totalFrames) {
                var fullMess = this.frames.join('');
                this.frames = null;
                var jsonMess = index_cjs.jsonEval(fullMess);
                //handle the message
                this.onMessage(jsonMess);
            }
        };
        /**
         * @param {number} frameCount The number of frames we are expecting from the server
         * @private
         */
        WebSocketConnection.prototype.handleNewFrameCount_ = function (frameCount) {
            this.totalFrames = frameCount;
            this.frames = [];
        };
        /**
         * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1
         * @param {!String} data
         * @return {?String} Any remaining data to be process, or null if there is none
         * @private
         */
        WebSocketConnection.prototype.extractFrameCount_ = function (data) {
            index_cjs.assert(this.frames === null, 'We already have a frame buffer');
            // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced
            // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508
            if (data.length <= 6) {
                var frameCount = Number(data);
                if (!isNaN(frameCount)) {
                    this.handleNewFrameCount_(frameCount);
                    return null;
                }
            }
            this.handleNewFrameCount_(1);
            return data;
        };
        /**
         * Process a websocket frame that has arrived from the server.
         * @param mess The frame data
         */
        WebSocketConnection.prototype.handleIncomingFrame = function (mess) {
            if (this.mySock === null) {
                return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.
            }
            var data = mess['data'];
            this.bytesReceived += data.length;
            this.stats_.incrementCounter('bytes_received', data.length);
            this.resetKeepAlive();
            if (this.frames !== null) {
                // we're buffering
                this.appendFrame_(data);
            }
            else {
                // try to parse out a frame count, otherwise, assume 1 and process it
                var remainingData = this.extractFrameCount_(data);
                if (remainingData !== null) {
                    this.appendFrame_(remainingData);
                }
            }
        };
        /**
         * Send a message to the server
         * @param {Object} data The JSON object to transmit
         */
        WebSocketConnection.prototype.send = function (data) {
            this.resetKeepAlive();
            var dataStr = index_cjs.stringify(data);
            this.bytesSent += dataStr.length;
            this.stats_.incrementCounter('bytes_sent', dataStr.length);
            //We can only fit a certain amount in each websocket frame, so we need to split this request
            //up into multiple pieces if it doesn't fit in one request.
            var dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);
            //Send the length header
            if (dataSegs.length > 1) {
                this.sendString_(String(dataSegs.length));
            }
            //Send the actual data in segments.
            for (var i = 0; i < dataSegs.length; i++) {
                this.sendString_(dataSegs[i]);
            }
        };
        WebSocketConnection.prototype.shutdown_ = function () {
            this.isClosed_ = true;
            if (this.keepaliveTimer) {
                clearInterval(this.keepaliveTimer);
                this.keepaliveTimer = null;
            }
            if (this.mySock) {
                this.mySock.close();
                this.mySock = null;
            }
        };
        WebSocketConnection.prototype.onClosed_ = function () {
            if (!this.isClosed_) {
                this.log_('WebSocket is closing itself');
                this.shutdown_();
                // since this is an internal close, trigger the close listener
                if (this.onDisconnect) {
                    this.onDisconnect(this.everConnected_);
                    this.onDisconnect = null;
                }
            }
        };
        /**
         * External-facing close handler.
         * Close the websocket and kill the connection.
         */
        WebSocketConnection.prototype.close = function () {
            if (!this.isClosed_) {
                this.log_('WebSocket is being closed');
                this.shutdown_();
            }
        };
        /**
         * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after
         * the last activity.
         */
        WebSocketConnection.prototype.resetKeepAlive = function () {
            var _this = this;
            clearInterval(this.keepaliveTimer);
            this.keepaliveTimer = setInterval(function () {
                //If there has been no websocket activity for a while, send a no-op
                if (_this.mySock) {
                    _this.sendString_('0');
                }
                _this.resetKeepAlive();
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
            }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));
        };
        /**
         * Send a string over the websocket.
         *
         * @param {string} str String to send.
         * @private
         */
        WebSocketConnection.prototype.sendString_ = function (str) {
            // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()
            // calls for some unknown reason.  We treat these as an error and disconnect.
            // See https://app.asana.com/0/58926111402292/68021340250410
            try {
                this.mySock.send(str);
            }
            catch (e) {
                this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');
                setTimeout(this.onClosed_.bind(this), 0);
            }
        };
        /**
         * Number of response before we consider the connection "healthy."
         * @type {number}
         */
        WebSocketConnection.responsesRequiredToBeHealthy = 2;
        /**
         * Time to wait for the connection te become healthy before giving up.
         * @type {number}
         */
        WebSocketConnection.healthyTimeout = 30000;
        return WebSocketConnection;
    }());

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Currently simplistic, this class manages what transport a Connection should use at various stages of its
     * lifecycle.
     *
     * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if
     * they are available.
     * @constructor
     */
    var TransportManager = /** @class */ (function () {
        /**
         * @param {!RepoInfo} repoInfo Metadata around the namespace we're connecting to
         */
        function TransportManager(repoInfo) {
            this.initTransports_(repoInfo);
        }
        Object.defineProperty(TransportManager, "ALL_TRANSPORTS", {
            /**
             * @const
             * @type {!Array.<function(new:Transport, string, RepoInfo, string=)>}
             */
            get: function () {
                return [BrowserPollConnection, WebSocketConnection];
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {!RepoInfo} repoInfo
         * @private
         */
        TransportManager.prototype.initTransports_ = function (repoInfo) {
            var e_1, _a;
            var isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();
            var isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();
            if (repoInfo.webSocketOnly) {
                if (!isWebSocketsAvailable) {
                    warn("wss:// URL used, but browser isn't known to support websockets.  Trying anyway.");
                }
                isSkipPollConnection = true;
            }
            if (isSkipPollConnection) {
                this.transports_ = [WebSocketConnection];
            }
            else {
                var transports = (this.transports_ = []);
                try {
                    for (var _b = tslib_es6.__values(TransportManager.ALL_TRANSPORTS), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var transport = _c.value;
                        if (transport && transport['isAvailable']()) {
                            transports.push(transport);
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
        };
        /**
         * @return {function(new:Transport, !string, !RepoInfo, string=, string=)} The constructor for the
         * initial transport to use
         */
        TransportManager.prototype.initialTransport = function () {
            if (this.transports_.length > 0) {
                return this.transports_[0];
            }
            else {
                throw new Error('No transports available');
            }
        };
        /**
         * @return {?function(new:Transport, function(),function(), string=)} The constructor for the next
         * transport, or null
         */
        TransportManager.prototype.upgradeTransport = function () {
            if (this.transports_.length > 1) {
                return this.transports_[1];
            }
            else {
                return null;
            }
        };
        return TransportManager;
    }());

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // Abort upgrade attempt if it takes longer than 60s.
    var UPGRADE_TIMEOUT = 60000;
    // For some transports (WebSockets), we need to "validate" the transport by exchanging a few requests and responses.
    // If we haven't sent enough requests within 5s, we'll start sending noop ping requests.
    var DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;
    // If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)
    // then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout
    // but we've sent/received enough bytes, we don't cancel the connection.
    var BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;
    var BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;
    var MESSAGE_TYPE = 't';
    var MESSAGE_DATA = 'd';
    var CONTROL_SHUTDOWN = 's';
    var CONTROL_RESET = 'r';
    var CONTROL_ERROR = 'e';
    var CONTROL_PONG = 'o';
    var SWITCH_ACK = 'a';
    var END_TRANSMISSION = 'n';
    var PING = 'p';
    var SERVER_HELLO = 'h';
    /**
     * Creates a new real-time connection to the server using whichever method works
     * best in the current browser.
     *
     * @constructor
     */
    var Connection = /** @class */ (function () {
        /**
         * @param {!string} id - an id for this connection
         * @param {!RepoInfo} repoInfo_ - the info for the endpoint to connect to
         * @param {function(Object)} onMessage_ - the callback to be triggered when a server-push message arrives
         * @param {function(number, string)} onReady_ - the callback to be triggered when this connection is ready to send messages.
         * @param {function()} onDisconnect_ - the callback to be triggered when a connection was lost
         * @param {function(string)} onKill_ - the callback to be triggered when this connection has permanently shut down.
         * @param {string=} lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server
         */
        function Connection(id, repoInfo_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {
            this.id = id;
            this.repoInfo_ = repoInfo_;
            this.onMessage_ = onMessage_;
            this.onReady_ = onReady_;
            this.onDisconnect_ = onDisconnect_;
            this.onKill_ = onKill_;
            this.lastSessionId = lastSessionId;
            this.connectionCount = 0;
            this.pendingDataMessages = [];
            this.state_ = 0 /* CONNECTING */;
            this.log_ = logWrapper('c:' + this.id + ':');
            this.transportManager_ = new TransportManager(repoInfo_);
            this.log_('Connection created');
            this.start_();
        }
        /**
         * Starts a connection attempt
         * @private
         */
        Connection.prototype.start_ = function () {
            var _this = this;
            var conn = this.transportManager_.initialTransport();
            this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, undefined, this.lastSessionId);
            // For certain transports (WebSockets), we need to send and receive several messages back and forth before we
            // can consider the transport healthy.
            this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;
            var onMessageReceived = this.connReceiver_(this.conn_);
            var onConnectionLost = this.disconnReceiver_(this.conn_);
            this.tx_ = this.conn_;
            this.rx_ = this.conn_;
            this.secondaryConn_ = null;
            this.isHealthy_ = false;
            /*
             * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.
             * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.
             * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should
             * still have the context of your originating frame.
             */
            setTimeout(function () {
                // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it
                _this.conn_ && _this.conn_.open(onMessageReceived, onConnectionLost);
            }, Math.floor(0));
            var healthyTimeoutMS = conn['healthyTimeout'] || 0;
            if (healthyTimeoutMS > 0) {
                this.healthyTimeout_ = setTimeoutNonBlocking(function () {
                    _this.healthyTimeout_ = null;
                    if (!_this.isHealthy_) {
                        if (_this.conn_ &&
                            _this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {
                            _this.log_('Connection exceeded healthy timeout but has received ' +
                                _this.conn_.bytesReceived +
                                ' bytes.  Marking connection healthy.');
                            _this.isHealthy_ = true;
                            _this.conn_.markConnectionHealthy();
                        }
                        else if (_this.conn_ &&
                            _this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {
                            _this.log_('Connection exceeded healthy timeout but has sent ' +
                                _this.conn_.bytesSent +
                                ' bytes.  Leaving connection alive.');
                            // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to
                            // the server.
                        }
                        else {
                            _this.log_('Closing unhealthy connection after timeout.');
                            _this.close();
                        }
                    }
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                }, Math.floor(healthyTimeoutMS));
            }
        };
        /**
         * @return {!string}
         * @private
         */
        Connection.prototype.nextTransportId_ = function () {
            return 'c:' + this.id + ':' + this.connectionCount++;
        };
        Connection.prototype.disconnReceiver_ = function (conn) {
            var _this = this;
            return function (everConnected) {
                if (conn === _this.conn_) {
                    _this.onConnectionLost_(everConnected);
                }
                else if (conn === _this.secondaryConn_) {
                    _this.log_('Secondary connection lost.');
                    _this.onSecondaryConnectionLost_();
                }
                else {
                    _this.log_('closing an old connection');
                }
            };
        };
        Connection.prototype.connReceiver_ = function (conn) {
            var _this = this;
            return function (message) {
                if (_this.state_ !== 2 /* DISCONNECTED */) {
                    if (conn === _this.rx_) {
                        _this.onPrimaryMessageReceived_(message);
                    }
                    else if (conn === _this.secondaryConn_) {
                        _this.onSecondaryMessageReceived_(message);
                    }
                    else {
                        _this.log_('message on old connection');
                    }
                }
            };
        };
        /**
         *
         * @param {Object} dataMsg An arbitrary data message to be sent to the server
         */
        Connection.prototype.sendRequest = function (dataMsg) {
            // wrap in a data message envelope and send it on
            var msg = { t: 'd', d: dataMsg };
            this.sendData_(msg);
        };
        Connection.prototype.tryCleanupConnection = function () {
            if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {
                this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);
                this.conn_ = this.secondaryConn_;
                this.secondaryConn_ = null;
                // the server will shutdown the old connection
            }
        };
        Connection.prototype.onSecondaryControl_ = function (controlData) {
            if (MESSAGE_TYPE in controlData) {
                var cmd = controlData[MESSAGE_TYPE];
                if (cmd === SWITCH_ACK) {
                    this.upgradeIfSecondaryHealthy_();
                }
                else if (cmd === CONTROL_RESET) {
                    // Most likely the session wasn't valid. Abandon the switch attempt
                    this.log_('Got a reset on secondary, closing it');
                    this.secondaryConn_.close();
                    // If we were already using this connection for something, than we need to fully close
                    if (this.tx_ === this.secondaryConn_ ||
                        this.rx_ === this.secondaryConn_) {
                        this.close();
                    }
                }
                else if (cmd === CONTROL_PONG) {
                    this.log_('got pong on secondary.');
                    this.secondaryResponsesRequired_--;
                    this.upgradeIfSecondaryHealthy_();
                }
            }
        };
        Connection.prototype.onSecondaryMessageReceived_ = function (parsedData) {
            var layer = requireKey('t', parsedData);
            var data = requireKey('d', parsedData);
            if (layer === 'c') {
                this.onSecondaryControl_(data);
            }
            else if (layer === 'd') {
                // got a data message, but we're still second connection. Need to buffer it up
                this.pendingDataMessages.push(data);
            }
            else {
                throw new Error('Unknown protocol layer: ' + layer);
            }
        };
        Connection.prototype.upgradeIfSecondaryHealthy_ = function () {
            if (this.secondaryResponsesRequired_ <= 0) {
                this.log_('Secondary connection is healthy.');
                this.isHealthy_ = true;
                this.secondaryConn_.markConnectionHealthy();
                this.proceedWithUpgrade_();
            }
            else {
                // Send a ping to make sure the connection is healthy.
                this.log_('sending ping on secondary.');
                this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });
            }
        };
        Connection.prototype.proceedWithUpgrade_ = function () {
            // tell this connection to consider itself open
            this.secondaryConn_.start();
            // send ack
            this.log_('sending client ack on secondary');
            this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });
            // send end packet on primary transport, switch to sending on this one
            // can receive on this one, buffer responses until end received on primary transport
            this.log_('Ending transmission on primary');
            this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });
            this.tx_ = this.secondaryConn_;
            this.tryCleanupConnection();
        };
        Connection.prototype.onPrimaryMessageReceived_ = function (parsedData) {
            // Must refer to parsedData properties in quotes, so closure doesn't touch them.
            var layer = requireKey('t', parsedData);
            var data = requireKey('d', parsedData);
            if (layer === 'c') {
                this.onControl_(data);
            }
            else if (layer === 'd') {
                this.onDataMessage_(data);
            }
        };
        Connection.prototype.onDataMessage_ = function (message) {
            this.onPrimaryResponse_();
            // We don't do anything with data messages, just kick them up a level
            this.onMessage_(message);
        };
        Connection.prototype.onPrimaryResponse_ = function () {
            if (!this.isHealthy_) {
                this.primaryResponsesRequired_--;
                if (this.primaryResponsesRequired_ <= 0) {
                    this.log_('Primary connection is healthy.');
                    this.isHealthy_ = true;
                    this.conn_.markConnectionHealthy();
                }
            }
        };
        Connection.prototype.onControl_ = function (controlData) {
            var cmd = requireKey(MESSAGE_TYPE, controlData);
            if (MESSAGE_DATA in controlData) {
                var payload = controlData[MESSAGE_DATA];
                if (cmd === SERVER_HELLO) {
                    this.onHandshake_(payload);
                }
                else if (cmd === END_TRANSMISSION) {
                    this.log_('recvd end transmission on primary');
                    this.rx_ = this.secondaryConn_;
                    for (var i = 0; i < this.pendingDataMessages.length; ++i) {
                        this.onDataMessage_(this.pendingDataMessages[i]);
                    }
                    this.pendingDataMessages = [];
                    this.tryCleanupConnection();
                }
                else if (cmd === CONTROL_SHUTDOWN) {
                    // This was previously the 'onKill' callback passed to the lower-level connection
                    // payload in this case is the reason for the shutdown. Generally a human-readable error
                    this.onConnectionShutdown_(payload);
                }
                else if (cmd === CONTROL_RESET) {
                    // payload in this case is the host we should contact
                    this.onReset_(payload);
                }
                else if (cmd === CONTROL_ERROR) {
                    error('Server Error: ' + payload);
                }
                else if (cmd === CONTROL_PONG) {
                    this.log_('got pong on primary.');
                    this.onPrimaryResponse_();
                    this.sendPingOnPrimaryIfNecessary_();
                }
                else {
                    error('Unknown control packet command: ' + cmd);
                }
            }
        };
        /**
         *
         * @param {Object} handshake The handshake data returned from the server
         * @private
         */
        Connection.prototype.onHandshake_ = function (handshake) {
            var timestamp = handshake.ts;
            var version = handshake.v;
            var host = handshake.h;
            this.sessionId = handshake.s;
            this.repoInfo_.updateHost(host);
            // if we've already closed the connection, then don't bother trying to progress further
            if (this.state_ === 0 /* CONNECTING */) {
                this.conn_.start();
                this.onConnectionEstablished_(this.conn_, timestamp);
                if (PROTOCOL_VERSION !== version) {
                    warn('Protocol version mismatch detected');
                }
                // TODO: do we want to upgrade? when? maybe a delay?
                this.tryStartUpgrade_();
            }
        };
        Connection.prototype.tryStartUpgrade_ = function () {
            var conn = this.transportManager_.upgradeTransport();
            if (conn) {
                this.startUpgrade_(conn);
            }
        };
        Connection.prototype.startUpgrade_ = function (conn) {
            var _this = this;
            this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.sessionId);
            // For certain transports (WebSockets), we need to send and receive several messages back and forth before we
            // can consider the transport healthy.
            this.secondaryResponsesRequired_ =
                conn['responsesRequiredToBeHealthy'] || 0;
            var onMessage = this.connReceiver_(this.secondaryConn_);
            var onDisconnect = this.disconnReceiver_(this.secondaryConn_);
            this.secondaryConn_.open(onMessage, onDisconnect);
            // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.
            setTimeoutNonBlocking(function () {
                if (_this.secondaryConn_) {
                    _this.log_('Timed out trying to upgrade.');
                    _this.secondaryConn_.close();
                }
            }, Math.floor(UPGRADE_TIMEOUT));
        };
        Connection.prototype.onReset_ = function (host) {
            this.log_('Reset packet received.  New host: ' + host);
            this.repoInfo_.updateHost(host);
            // TODO: if we're already "connected", we need to trigger a disconnect at the next layer up.
            // We don't currently support resets after the connection has already been established
            if (this.state_ === 1 /* CONNECTED */) {
                this.close();
            }
            else {
                // Close whatever connections we have open and start again.
                this.closeConnections_();
                this.start_();
            }
        };
        Connection.prototype.onConnectionEstablished_ = function (conn, timestamp) {
            var _this = this;
            this.log_('Realtime connection established.');
            this.conn_ = conn;
            this.state_ = 1 /* CONNECTED */;
            if (this.onReady_) {
                this.onReady_(timestamp, this.sessionId);
                this.onReady_ = null;
            }
            // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,
            // send some pings.
            if (this.primaryResponsesRequired_ === 0) {
                this.log_('Primary connection is healthy.');
                this.isHealthy_ = true;
            }
            else {
                setTimeoutNonBlocking(function () {
                    _this.sendPingOnPrimaryIfNecessary_();
                }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));
            }
        };
        Connection.prototype.sendPingOnPrimaryIfNecessary_ = function () {
            // If the connection isn't considered healthy yet, we'll send a noop ping packet request.
            if (!this.isHealthy_ && this.state_ === 1 /* CONNECTED */) {
                this.log_('sending ping on primary.');
                this.sendData_({ t: 'c', d: { t: PING, d: {} } });
            }
        };
        Connection.prototype.onSecondaryConnectionLost_ = function () {
            var conn = this.secondaryConn_;
            this.secondaryConn_ = null;
            if (this.tx_ === conn || this.rx_ === conn) {
                // we are relying on this connection already in some capacity. Therefore, a failure is real
                this.close();
            }
        };
        /**
         *
         * @param {boolean} everConnected Whether or not the connection ever reached a server. Used to determine if
         * we should flush the host cache
         * @private
         */
        Connection.prototype.onConnectionLost_ = function (everConnected) {
            this.conn_ = null;
            // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting
            // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.
            if (!everConnected && this.state_ === 0 /* CONNECTING */) {
                this.log_('Realtime connection failed.');
                // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away
                if (this.repoInfo_.isCacheableHost()) {
                    PersistentStorage.remove('host:' + this.repoInfo_.host);
                    // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com
                    this.repoInfo_.internalHost = this.repoInfo_.host;
                }
            }
            else if (this.state_ === 1 /* CONNECTED */) {
                this.log_('Realtime connection lost.');
            }
            this.close();
        };
        /**
         *
         * @param {string} reason
         * @private
         */
        Connection.prototype.onConnectionShutdown_ = function (reason) {
            this.log_('Connection shutdown command received. Shutting down...');
            if (this.onKill_) {
                this.onKill_(reason);
                this.onKill_ = null;
            }
            // We intentionally don't want to fire onDisconnect (kill is a different case),
            // so clear the callback.
            this.onDisconnect_ = null;
            this.close();
        };
        Connection.prototype.sendData_ = function (data) {
            if (this.state_ !== 1 /* CONNECTED */) {
                throw 'Connection is not connected';
            }
            else {
                this.tx_.send(data);
            }
        };
        /**
         * Cleans up this connection, calling the appropriate callbacks
         */
        Connection.prototype.close = function () {
            if (this.state_ !== 2 /* DISCONNECTED */) {
                this.log_('Closing realtime connection.');
                this.state_ = 2 /* DISCONNECTED */;
                this.closeConnections_();
                if (this.onDisconnect_) {
                    this.onDisconnect_();
                    this.onDisconnect_ = null;
                }
            }
        };
        /**
         *
         * @private
         */
        Connection.prototype.closeConnections_ = function () {
            this.log_('Shutting down all connections');
            if (this.conn_) {
                this.conn_.close();
                this.conn_ = null;
            }
            if (this.secondaryConn_) {
                this.secondaryConn_.close();
                this.secondaryConn_ = null;
            }
            if (this.healthyTimeout_) {
                clearTimeout(this.healthyTimeout_);
                this.healthyTimeout_ = null;
            }
        };
        return Connection;
    }());

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Interface defining the set of actions that can be performed against the Firebase server
     * (basically corresponds to our wire protocol).
     *
     * @interface
     */
    var ServerActions = /** @class */ (function () {
        function ServerActions() {
        }
        /**
         * @param {string} pathString
         * @param {*} data
         * @param {function(string, string)=} onComplete
         * @param {string=} hash
         */
        ServerActions.prototype.put = function (pathString, data, onComplete, hash) { };
        /**
         * @param {string} pathString
         * @param {*} data
         * @param {function(string, ?string)} onComplete
         * @param {string=} hash
         */
        ServerActions.prototype.merge = function (pathString, data, onComplete, hash) { };
        /**
         * Refreshes the auth token for the current connection.
         * @param {string} token The authentication token
         */
        ServerActions.prototype.refreshAuthToken = function (token) { };
        /**
         * @param {string} pathString
         * @param {*} data
         * @param {function(string, string)=} onComplete
         */
        ServerActions.prototype.onDisconnectPut = function (pathString, data, onComplete) { };
        /**
         * @param {string} pathString
         * @param {*} data
         * @param {function(string, string)=} onComplete
         */
        ServerActions.prototype.onDisconnectMerge = function (pathString, data, onComplete) { };
        /**
         * @param {string} pathString
         * @param {function(string, string)=} onComplete
         */
        ServerActions.prototype.onDisconnectCancel = function (pathString, onComplete) { };
        /**
         * @param {Object.<string, *>} stats
         */
        ServerActions.prototype.reportStats = function (stats) { };
        return ServerActions;
    }());

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var RECONNECT_MIN_DELAY = 1000;
    var RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)
    var RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)
    var RECONNECT_DELAY_MULTIPLIER = 1.3;
    var RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.
    var SERVER_KILL_INTERRUPT_REASON = 'server_kill';
    // If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.
    var INVALID_AUTH_TOKEN_THRESHOLD = 3;
    /**
     * Firebase connection.  Abstracts wire protocol and handles reconnecting.
     *
     * NOTE: All JSON objects sent to the realtime connection must have property names enclosed
     * in quotes to make sure the closure compiler does not minify them.
     */
    var PersistentConnection = /** @class */ (function (_super) {
        tslib_es6.__extends(PersistentConnection, _super);
        /**
         * @implements {ServerActions}
         * @param repoInfo_ Data about the namespace we are connecting to
         * @param onDataUpdate_ A callback for new data from the server
         */
        function PersistentConnection(repoInfo_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, authOverride_) {
            var _this = _super.call(this) || this;
            _this.repoInfo_ = repoInfo_;
            _this.onDataUpdate_ = onDataUpdate_;
            _this.onConnectStatus_ = onConnectStatus_;
            _this.onServerInfoUpdate_ = onServerInfoUpdate_;
            _this.authTokenProvider_ = authTokenProvider_;
            _this.authOverride_ = authOverride_;
            // Used for diagnostic logging.
            _this.id = PersistentConnection.nextPersistentConnectionId_++;
            _this.log_ = logWrapper('p:' + _this.id + ':');
            _this.interruptReasons_ = {};
            /** Map<path, Map<queryId, ListenSpec>> */
            _this.listens = new Map();
            _this.outstandingPuts_ = [];
            _this.outstandingPutCount_ = 0;
            _this.onDisconnectRequestQueue_ = [];
            _this.connected_ = false;
            _this.reconnectDelay_ = RECONNECT_MIN_DELAY;
            _this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;
            _this.securityDebugCallback_ = null;
            _this.lastSessionId = null;
            _this.establishConnectionTimer_ = null;
            _this.visible_ = false;
            // Before we get connected, we keep a queue of pending messages to send.
            _this.requestCBHash_ = {};
            _this.requestNumber_ = 0;
            _this.realtime_ = null;
            _this.authToken_ = null;
            _this.forceTokenRefresh_ = false;
            _this.invalidAuthTokenCount_ = 0;
            _this.firstConnection_ = true;
            _this.lastConnectionAttemptTime_ = null;
            _this.lastConnectionEstablishedTime_ = null;
            if (authOverride_ && !index_cjs.isNodeSdk()) {
                throw new Error('Auth override specified in options, but not supported on non Node.js platforms');
            }
            _this.scheduleConnect_(0);
            VisibilityMonitor.getInstance().on('visible', _this.onVisible_, _this);
            if (repoInfo_.host.indexOf('fblocal') === -1) {
                OnlineMonitor.getInstance().on('online', _this.onOnline_, _this);
            }
            return _this;
        }
        PersistentConnection.prototype.sendRequest = function (action, body, onResponse) {
            var curReqNum = ++this.requestNumber_;
            var msg = { r: curReqNum, a: action, b: body };
            this.log_(index_cjs.stringify(msg));
            index_cjs.assert(this.connected_, "sendRequest call when we're not connected not allowed.");
            this.realtime_.sendRequest(msg);
            if (onResponse) {
                this.requestCBHash_[curReqNum] = onResponse;
            }
        };
        /**
         * @inheritDoc
         */
        PersistentConnection.prototype.listen = function (query, currentHashFn, tag, onComplete) {
            var queryId = query.queryIdentifier();
            var pathString = query.path.toString();
            this.log_('Listen called for ' + pathString + ' ' + queryId);
            if (!this.listens.has(pathString)) {
                this.listens.set(pathString, new Map());
            }
            index_cjs.assert(query.getQueryParams().isDefault() ||
                !query.getQueryParams().loadsAllData(), 'listen() called for non-default but complete query');
            index_cjs.assert(!this.listens.get(pathString).has(queryId), 'listen() called twice for same path/queryId.');
            var listenSpec = {
                onComplete: onComplete,
                hashFn: currentHashFn,
                query: query,
                tag: tag
            };
            this.listens.get(pathString).set(queryId, listenSpec);
            if (this.connected_) {
                this.sendListen_(listenSpec);
            }
        };
        PersistentConnection.prototype.sendListen_ = function (listenSpec) {
            var _this = this;
            var query = listenSpec.query;
            var pathString = query.path.toString();
            var queryId = query.queryIdentifier();
            this.log_('Listen on ' + pathString + ' for ' + queryId);
            var req = { /*path*/ p: pathString };
            var action = 'q';
            // Only bother to send query if it's non-default.
            if (listenSpec.tag) {
                req['q'] = query.queryObject();
                req['t'] = listenSpec.tag;
            }
            req[ /*hash*/'h'] = listenSpec.hashFn();
            this.sendRequest(action, req, function (message) {
                var payload = message[ /*data*/'d'];
                var status = message[ /*status*/'s'];
                // print warnings in any case...
                PersistentConnection.warnOnListenWarnings_(payload, query);
                var currentListenSpec = _this.listens.get(pathString) &&
                    _this.listens.get(pathString).get(queryId);
                // only trigger actions if the listen hasn't been removed and readded
                if (currentListenSpec === listenSpec) {
                    _this.log_('listen response', message);
                    if (status !== 'ok') {
                        _this.removeListen_(pathString, queryId);
                    }
                    if (listenSpec.onComplete) {
                        listenSpec.onComplete(status, payload);
                    }
                }
            });
        };
        PersistentConnection.warnOnListenWarnings_ = function (payload, query) {
            if (payload && typeof payload === 'object' && index_cjs.contains(payload, 'w')) {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                var warnings = index_cjs.safeGet(payload, 'w');
                if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {
                    var indexSpec = '".indexOn": "' +
                        query
                            .getQueryParams()
                            .getIndex()
                            .toString() +
                        '"';
                    var indexPath = query.path.toString();
                    warn("Using an unspecified index. Your data will be downloaded and " +
                        ("filtered on the client. Consider adding " + indexSpec + " at ") +
                        (indexPath + " to your security rules for better performance."));
                }
            }
        };
        /**
         * @inheritDoc
         */
        PersistentConnection.prototype.refreshAuthToken = function (token) {
            this.authToken_ = token;
            this.log_('Auth token refreshed');
            if (this.authToken_) {
                this.tryAuth();
            }
            else {
                //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete
                //the credential so we dont become authenticated next time we connect.
                if (this.connected_) {
                    this.sendRequest('unauth', {}, function () { });
                }
            }
            this.reduceReconnectDelayIfAdminCredential_(token);
        };
        PersistentConnection.prototype.reduceReconnectDelayIfAdminCredential_ = function (credential) {
            // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).
            // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.
            var isFirebaseSecret = credential && credential.length === 40;
            if (isFirebaseSecret || index_cjs.isAdmin(credential)) {
                this.log_('Admin auth credential detected.  Reducing max reconnect time.');
                this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;
            }
        };
        /**
         * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like
         * a auth revoked (the connection is closed).
         */
        PersistentConnection.prototype.tryAuth = function () {
            var _this = this;
            if (this.connected_ && this.authToken_) {
                var token_1 = this.authToken_;
                var authMethod = index_cjs.isValidFormat(token_1) ? 'auth' : 'gauth';
                var requestData = { cred: token_1 };
                if (this.authOverride_ === null) {
                    requestData['noauth'] = true;
                }
                else if (typeof this.authOverride_ === 'object') {
                    requestData['authvar'] = this.authOverride_;
                }
                this.sendRequest(authMethod, requestData, function (res) {
                    var status = res[ /*status*/'s'];
                    var data = res[ /*data*/'d'] || 'error';
                    if (_this.authToken_ === token_1) {
                        if (status === 'ok') {
                            _this.invalidAuthTokenCount_ = 0;
                        }
                        else {
                            // Triggers reconnect and force refresh for auth token
                            _this.onAuthRevoked_(status, data);
                        }
                    }
                });
            }
        };
        /**
         * @inheritDoc
         */
        PersistentConnection.prototype.unlisten = function (query, tag) {
            var pathString = query.path.toString();
            var queryId = query.queryIdentifier();
            this.log_('Unlisten called for ' + pathString + ' ' + queryId);
            index_cjs.assert(query.getQueryParams().isDefault() ||
                !query.getQueryParams().loadsAllData(), 'unlisten() called for non-default but complete query');
            var listen = this.removeListen_(pathString, queryId);
            if (listen && this.connected_) {
                this.sendUnlisten_(pathString, queryId, query.queryObject(), tag);
            }
        };
        PersistentConnection.prototype.sendUnlisten_ = function (pathString, queryId, queryObj, tag) {
            this.log_('Unlisten on ' + pathString + ' for ' + queryId);
            var req = { /*path*/ p: pathString };
            var action = 'n';
            // Only bother sending queryId if it's non-default.
            if (tag) {
                req['q'] = queryObj;
                req['t'] = tag;
            }
            this.sendRequest(action, req);
        };
        /**
         * @inheritDoc
         */
        PersistentConnection.prototype.onDisconnectPut = function (pathString, data, onComplete) {
            if (this.connected_) {
                this.sendOnDisconnect_('o', pathString, data, onComplete);
            }
            else {
                this.onDisconnectRequestQueue_.push({
                    pathString: pathString,
                    action: 'o',
                    data: data,
                    onComplete: onComplete
                });
            }
        };
        /**
         * @inheritDoc
         */
        PersistentConnection.prototype.onDisconnectMerge = function (pathString, data, onComplete) {
            if (this.connected_) {
                this.sendOnDisconnect_('om', pathString, data, onComplete);
            }
            else {
                this.onDisconnectRequestQueue_.push({
                    pathString: pathString,
                    action: 'om',
                    data: data,
                    onComplete: onComplete
                });
            }
        };
        /**
         * @inheritDoc
         */
        PersistentConnection.prototype.onDisconnectCancel = function (pathString, onComplete) {
            if (this.connected_) {
                this.sendOnDisconnect_('oc', pathString, null, onComplete);
            }
            else {
                this.onDisconnectRequestQueue_.push({
                    pathString: pathString,
                    action: 'oc',
                    data: null,
                    onComplete: onComplete
                });
            }
        };
        PersistentConnection.prototype.sendOnDisconnect_ = function (action, pathString, data, onComplete) {
            var request = { /*path*/ p: pathString, /*data*/ d: data };
            this.log_('onDisconnect ' + action, request);
            this.sendRequest(action, request, function (response) {
                if (onComplete) {
                    setTimeout(function () {
                        onComplete(response[ /*status*/'s'], response[ /* data */'d']);
                    }, Math.floor(0));
                }
            });
        };
        /**
         * @inheritDoc
         */
        PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {
            this.putInternal('p', pathString, data, onComplete, hash);
        };
        /**
         * @inheritDoc
         */
        PersistentConnection.prototype.merge = function (pathString, data, onComplete, hash) {
            this.putInternal('m', pathString, data, onComplete, hash);
        };
        PersistentConnection.prototype.putInternal = function (action, pathString, data, onComplete, hash) {
            var request = {
                /*path*/ p: pathString,
                /*data*/ d: data
            };
            if (hash !== undefined) {
                request[ /*hash*/'h'] = hash;
            }
            // TODO: Only keep track of the most recent put for a given path?
            this.outstandingPuts_.push({
                action: action,
                request: request,
                onComplete: onComplete
            });
            this.outstandingPutCount_++;
            var index = this.outstandingPuts_.length - 1;
            if (this.connected_) {
                this.sendPut_(index);
            }
            else {
                this.log_('Buffering put: ' + pathString);
            }
        };
        PersistentConnection.prototype.sendPut_ = function (index) {
            var _this = this;
            var action = this.outstandingPuts_[index].action;
            var request = this.outstandingPuts_[index].request;
            var onComplete = this.outstandingPuts_[index].onComplete;
            this.outstandingPuts_[index].queued = this.connected_;
            this.sendRequest(action, request, function (message) {
                _this.log_(action + ' response', message);
                delete _this.outstandingPuts_[index];
                _this.outstandingPutCount_--;
                // Clean up array occasionally.
                if (_this.outstandingPutCount_ === 0) {
                    _this.outstandingPuts_ = [];
                }
                if (onComplete) {
                    onComplete(message[ /*status*/'s'], message[ /* data */'d']);
                }
            });
        };
        /**
         * @inheritDoc
         */
        PersistentConnection.prototype.reportStats = function (stats) {
            var _this = this;
            // If we're not connected, we just drop the stats.
            if (this.connected_) {
                var request = { /*counters*/ c: stats };
                this.log_('reportStats', request);
                this.sendRequest(/*stats*/ 's', request, function (result) {
                    var status = result[ /*status*/'s'];
                    if (status !== 'ok') {
                        var errorReason = result[ /* data */'d'];
                        _this.log_('reportStats', 'Error sending stats: ' + errorReason);
                    }
                });
            }
        };
        PersistentConnection.prototype.onDataMessage_ = function (message) {
            if ('r' in message) {
                // this is a response
                this.log_('from server: ' + index_cjs.stringify(message));
                var reqNum = message['r'];
                var onResponse = this.requestCBHash_[reqNum];
                if (onResponse) {
                    delete this.requestCBHash_[reqNum];
                    onResponse(message[ /*body*/'b']);
                }
            }
            else if ('error' in message) {
                throw 'A server-side error has occurred: ' + message['error'];
            }
            else if ('a' in message) {
                // a and b are action and body, respectively
                this.onDataPush_(message['a'], message['b']);
            }
        };
        PersistentConnection.prototype.onDataPush_ = function (action, body) {
            this.log_('handleServerMessage', action, body);
            if (action === 'd') {
                this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], 
                /*isMerge*/ false, body['t']);
            }
            else if (action === 'm') {
                this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], 
                /*isMerge=*/ true, body['t']);
            }
            else if (action === 'c') {
                this.onListenRevoked_(body[ /*path*/'p'], body[ /*query*/'q']);
            }
            else if (action === 'ac') {
                this.onAuthRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);
            }
            else if (action === 'sd') {
                this.onSecurityDebugPacket_(body);
            }
            else {
                error('Unrecognized action received from server: ' +
                    index_cjs.stringify(action) +
                    '\nAre you using the latest client?');
            }
        };
        PersistentConnection.prototype.onReady_ = function (timestamp, sessionId) {
            this.log_('connection ready');
            this.connected_ = true;
            this.lastConnectionEstablishedTime_ = new Date().getTime();
            this.handleTimestamp_(timestamp);
            this.lastSessionId = sessionId;
            if (this.firstConnection_) {
                this.sendConnectStats_();
            }
            this.restoreState_();
            this.firstConnection_ = false;
            this.onConnectStatus_(true);
        };
        PersistentConnection.prototype.scheduleConnect_ = function (timeout) {
            var _this = this;
            index_cjs.assert(!this.realtime_, "Scheduling a connect when we're already connected/ing?");
            if (this.establishConnectionTimer_) {
                clearTimeout(this.establishConnectionTimer_);
            }
            // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating "Security Error" in
            // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).
            this.establishConnectionTimer_ = setTimeout(function () {
                _this.establishConnectionTimer_ = null;
                _this.establishConnection_();
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
            }, Math.floor(timeout));
        };
        PersistentConnection.prototype.onVisible_ = function (visible) {
            // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.
            if (visible &&
                !this.visible_ &&
                this.reconnectDelay_ === this.maxReconnectDelay_) {
                this.log_('Window became visible.  Reducing delay.');
                this.reconnectDelay_ = RECONNECT_MIN_DELAY;
                if (!this.realtime_) {
                    this.scheduleConnect_(0);
                }
            }
            this.visible_ = visible;
        };
        PersistentConnection.prototype.onOnline_ = function (online) {
            if (online) {
                this.log_('Browser went online.');
                this.reconnectDelay_ = RECONNECT_MIN_DELAY;
                if (!this.realtime_) {
                    this.scheduleConnect_(0);
                }
            }
            else {
                this.log_('Browser went offline.  Killing connection.');
                if (this.realtime_) {
                    this.realtime_.close();
                }
            }
        };
        PersistentConnection.prototype.onRealtimeDisconnect_ = function () {
            this.log_('data client disconnected');
            this.connected_ = false;
            this.realtime_ = null;
            // Since we don't know if our sent transactions succeeded or not, we need to cancel them.
            this.cancelSentTransactions_();
            // Clear out the pending requests.
            this.requestCBHash_ = {};
            if (this.shouldReconnect_()) {
                if (!this.visible_) {
                    this.log_("Window isn't visible.  Delaying reconnect.");
                    this.reconnectDelay_ = this.maxReconnectDelay_;
                    this.lastConnectionAttemptTime_ = new Date().getTime();
                }
                else if (this.lastConnectionEstablishedTime_) {
                    // If we've been connected long enough, reset reconnect delay to minimum.
                    var timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;
                    if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {
                        this.reconnectDelay_ = RECONNECT_MIN_DELAY;
                    }
                    this.lastConnectionEstablishedTime_ = null;
                }
                var timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;
                var reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);
                reconnectDelay = Math.random() * reconnectDelay;
                this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');
                this.scheduleConnect_(reconnectDelay);
                // Adjust reconnect delay for next time.
                this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);
            }
            this.onConnectStatus_(false);
        };
        PersistentConnection.prototype.establishConnection_ = function () {
            if (this.shouldReconnect_()) {
                this.log_('Making a connection attempt');
                this.lastConnectionAttemptTime_ = new Date().getTime();
                this.lastConnectionEstablishedTime_ = null;
                var onDataMessage_1 = this.onDataMessage_.bind(this);
                var onReady_1 = this.onReady_.bind(this);
                var onDisconnect_1 = this.onRealtimeDisconnect_.bind(this);
                var connId_1 = this.id + ':' + PersistentConnection.nextConnectionId_++;
                var self_1 = this;
                var lastSessionId_1 = this.lastSessionId;
                var canceled_1 = false;
                var connection_1 = null;
                var closeFn_1 = function () {
                    if (connection_1) {
                        connection_1.close();
                    }
                    else {
                        canceled_1 = true;
                        onDisconnect_1();
                    }
                };
                var sendRequestFn = function (msg) {
                    index_cjs.assert(connection_1, "sendRequest call when we're not connected not allowed.");
                    connection_1.sendRequest(msg);
                };
                this.realtime_ = {
                    close: closeFn_1,
                    sendRequest: sendRequestFn
                };
                var forceRefresh = this.forceTokenRefresh_;
                this.forceTokenRefresh_ = false;
                // First fetch auth token, and establish connection after fetching the token was successful
                this.authTokenProvider_
                    .getToken(forceRefresh)
                    .then(function (result) {
                    if (!canceled_1) {
                        log('getToken() completed. Creating connection.');
                        self_1.authToken_ = result && result.accessToken;
                        connection_1 = new Connection(connId_1, self_1.repoInfo_, onDataMessage_1, onReady_1, onDisconnect_1, 
                        /* onKill= */ function (reason) {
                            warn(reason + ' (' + self_1.repoInfo_.toString() + ')');
                            self_1.interrupt(SERVER_KILL_INTERRUPT_REASON);
                        }, lastSessionId_1);
                    }
                    else {
                        log('getToken() completed but was canceled');
                    }
                })
                    .then(null, function (error) {
                    self_1.log_('Failed to get token: ' + error);
                    if (!canceled_1) {
                        if (index_cjs.CONSTANTS.NODE_ADMIN) {
                            // This may be a critical error for the Admin Node.js SDK, so log a warning.
                            // But getToken() may also just have temporarily failed, so we still want to
                            // continue retrying.
                            warn(error);
                        }
                        closeFn_1();
                    }
                });
            }
        };
        PersistentConnection.prototype.interrupt = function (reason) {
            log('Interrupting connection for reason: ' + reason);
            this.interruptReasons_[reason] = true;
            if (this.realtime_) {
                this.realtime_.close();
            }
            else {
                if (this.establishConnectionTimer_) {
                    clearTimeout(this.establishConnectionTimer_);
                    this.establishConnectionTimer_ = null;
                }
                if (this.connected_) {
                    this.onRealtimeDisconnect_();
                }
            }
        };
        PersistentConnection.prototype.resume = function (reason) {
            log('Resuming connection for reason: ' + reason);
            delete this.interruptReasons_[reason];
            if (index_cjs.isEmpty(this.interruptReasons_)) {
                this.reconnectDelay_ = RECONNECT_MIN_DELAY;
                if (!this.realtime_) {
                    this.scheduleConnect_(0);
                }
            }
        };
        PersistentConnection.prototype.handleTimestamp_ = function (timestamp) {
            var delta = timestamp - new Date().getTime();
            this.onServerInfoUpdate_({ serverTimeOffset: delta });
        };
        PersistentConnection.prototype.cancelSentTransactions_ = function () {
            for (var i = 0; i < this.outstandingPuts_.length; i++) {
                var put = this.outstandingPuts_[i];
                if (put && /*hash*/ 'h' in put.request && put.queued) {
                    if (put.onComplete) {
                        put.onComplete('disconnect');
                    }
                    delete this.outstandingPuts_[i];
                    this.outstandingPutCount_--;
                }
            }
            // Clean up array occasionally.
            if (this.outstandingPutCount_ === 0) {
                this.outstandingPuts_ = [];
            }
        };
        PersistentConnection.prototype.onListenRevoked_ = function (pathString, query) {
            // Remove the listen and manufacture a "permission_denied" error for the failed listen.
            var queryId;
            if (!query) {
                queryId = 'default';
            }
            else {
                queryId = query.map(function (q) { return ObjectToUniqueKey(q); }).join('$');
            }
            var listen = this.removeListen_(pathString, queryId);
            if (listen && listen.onComplete) {
                listen.onComplete('permission_denied');
            }
        };
        PersistentConnection.prototype.removeListen_ = function (pathString, queryId) {
            var normalizedPathString = new Path(pathString).toString(); // normalize path.
            var listen;
            if (this.listens.has(normalizedPathString)) {
                var map = this.listens.get(normalizedPathString);
                listen = map.get(queryId);
                map.delete(queryId);
                if (map.size === 0) {
                    this.listens.delete(normalizedPathString);
                }
            }
            else {
                // all listens for this path has already been removed
                listen = undefined;
            }
            return listen;
        };
        PersistentConnection.prototype.onAuthRevoked_ = function (statusCode, explanation) {
            log('Auth token revoked: ' + statusCode + '/' + explanation);
            this.authToken_ = null;
            this.forceTokenRefresh_ = true;
            this.realtime_.close();
            if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {
                // We'll wait a couple times before logging the warning / increasing the
                // retry period since oauth tokens will report as "invalid" if they're
                // just expired. Plus there may be transient issues that resolve themselves.
                this.invalidAuthTokenCount_++;
                if (this.invalidAuthTokenCount_ >= INVALID_AUTH_TOKEN_THRESHOLD) {
                    // Set a long reconnect delay because recovery is unlikely
                    this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;
                    // Notify the auth token provider that the token is invalid, which will log
                    // a warning
                    this.authTokenProvider_.notifyForInvalidToken();
                }
            }
        };
        PersistentConnection.prototype.onSecurityDebugPacket_ = function (body) {
            if (this.securityDebugCallback_) {
                this.securityDebugCallback_(body);
            }
            else {
                if ('msg' in body) {
                    console.log('FIREBASE: ' + body['msg'].replace('\n', '\nFIREBASE: '));
                }
            }
        };
        PersistentConnection.prototype.restoreState_ = function () {
            var e_1, _a, e_2, _b;
            //Re-authenticate ourselves if we have a credential stored.
            this.tryAuth();
            try {
                // Puts depend on having received the corresponding data update from the server before they complete, so we must
                // make sure to send listens before puts.
                for (var _c = tslib_es6.__values(this.listens.values()), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var queries = _d.value;
                    try {
                        for (var _e = (e_2 = void 0, tslib_es6.__values(queries.values())), _f = _e.next(); !_f.done; _f = _e.next()) {
                            var listenSpec = _f.value;
                            this.sendListen_(listenSpec);
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_1) throw e_1.error; }
            }
            for (var i = 0; i < this.outstandingPuts_.length; i++) {
                if (this.outstandingPuts_[i]) {
                    this.sendPut_(i);
                }
            }
            while (this.onDisconnectRequestQueue_.length) {
                var request = this.onDisconnectRequestQueue_.shift();
                this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);
            }
        };
        /**
         * Sends client stats for first connection
         */
        PersistentConnection.prototype.sendConnectStats_ = function () {
            var stats = {};
            var clientName = 'js';
            if (index_cjs.CONSTANTS.NODE_ADMIN) {
                clientName = 'admin_node';
            }
            else if (index_cjs.CONSTANTS.NODE_CLIENT) {
                clientName = 'node';
            }
            stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\./g, '-')] = 1;
            if (index_cjs.isMobileCordova()) {
                stats['framework.cordova'] = 1;
            }
            else if (index_cjs.isReactNative()) {
                stats['framework.reactnative'] = 1;
            }
            this.reportStats(stats);
        };
        PersistentConnection.prototype.shouldReconnect_ = function () {
            var online = OnlineMonitor.getInstance().currentlyOnline();
            return index_cjs.isEmpty(this.interruptReasons_) && online;
        };
        PersistentConnection.nextPersistentConnectionId_ = 0;
        /**
         * Counter for number of connections created. Mainly used for tagging in the logs
         */
        PersistentConnection.nextConnectionId_ = 0;
        return PersistentConnection;
    }(ServerActions));

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An implementation of ServerActions that communicates with the server via REST requests.
     * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full
     * persistent connection (using WebSockets or long-polling)
     */
    var ReadonlyRestClient = /** @class */ (function (_super) {
        tslib_es6.__extends(ReadonlyRestClient, _super);
        /**
         * @param {!RepoInfo} repoInfo_ Data about the namespace we are connecting to
         * @param {function(string, *, boolean, ?number)} onDataUpdate_ A callback for new data from the server
         * @param {AuthTokenProvider} authTokenProvider_
         * @implements {ServerActions}
         */
        function ReadonlyRestClient(repoInfo_, onDataUpdate_, authTokenProvider_) {
            var _this = _super.call(this) || this;
            _this.repoInfo_ = repoInfo_;
            _this.onDataUpdate_ = onDataUpdate_;
            _this.authTokenProvider_ = authTokenProvider_;
            /** @private {function(...[*])} */
            _this.log_ = logWrapper('p:rest:');
            /**
             * We don't actually need to track listens, except to prevent us calling an onComplete for a listen
             * that's been removed. :-/
             *
             * @private {!Object.<string, !Object>}
             */
            _this.listens_ = {};
            return _this;
        }
        ReadonlyRestClient.prototype.reportStats = function (stats) {
            throw new Error('Method not implemented.');
        };
        /**
         * @param {!Query} query
         * @param {?number=} tag
         * @return {string}
         * @private
         */
        ReadonlyRestClient.getListenId_ = function (query, tag) {
            if (tag !== undefined) {
                return 'tag$' + tag;
            }
            else {
                index_cjs.assert(query.getQueryParams().isDefault(), "should have a tag if it's not a default query.");
                return query.path.toString();
            }
        };
        /** @inheritDoc */
        ReadonlyRestClient.prototype.listen = function (query, currentHashFn, tag, onComplete) {
            var _this = this;
            var pathString = query.path.toString();
            this.log_('Listen called for ' + pathString + ' ' + query.queryIdentifier());
            // Mark this listener so we can tell if it's removed.
            var listenId = ReadonlyRestClient.getListenId_(query, tag);
            var thisListen = {};
            this.listens_[listenId] = thisListen;
            var queryStringParameters = query
                .getQueryParams()
                .toRestQueryStringParameters();
            this.restRequest_(pathString + '.json', queryStringParameters, function (error, result) {
                var data = result;
                if (error === 404) {
                    data = null;
                    error = null;
                }
                if (error === null) {
                    _this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);
                }
                if (index_cjs.safeGet(_this.listens_, listenId) === thisListen) {
                    var status_1;
                    if (!error) {
                        status_1 = 'ok';
                    }
                    else if (error === 401) {
                        status_1 = 'permission_denied';
                    }
                    else {
                        status_1 = 'rest_error:' + error;
                    }
                    onComplete(status_1, null);
                }
            });
        };
        /** @inheritDoc */
        ReadonlyRestClient.prototype.unlisten = function (query, tag) {
            var listenId = ReadonlyRestClient.getListenId_(query, tag);
            delete this.listens_[listenId];
        };
        /** @inheritDoc */
        ReadonlyRestClient.prototype.refreshAuthToken = function (token) {
            // no-op since we just always call getToken.
        };
        /**
         * Performs a REST request to the given path, with the provided query string parameters,
         * and any auth credentials we have.
         *
         * @param {!string} pathString
         * @param {!Object.<string, *>} queryStringParameters
         * @param {?function(?number, *=)} callback
         * @private
         */
        ReadonlyRestClient.prototype.restRequest_ = function (pathString, queryStringParameters, callback) {
            var _this = this;
            if (queryStringParameters === void 0) { queryStringParameters = {}; }
            queryStringParameters['format'] = 'export';
            this.authTokenProvider_
                .getToken(/*forceRefresh=*/ false)
                .then(function (authTokenData) {
                var authToken = authTokenData && authTokenData.accessToken;
                if (authToken) {
                    queryStringParameters['auth'] = authToken;
                }
                var url = (_this.repoInfo_.secure ? 'https://' : 'http://') +
                    _this.repoInfo_.host +
                    pathString +
                    '?' +
                    'ns=' +
                    _this.repoInfo_.namespace +
                    index_cjs.querystring(queryStringParameters);
                _this.log_('Sending REST request for ' + url);
                var xhr = new XMLHttpRequest();
                xhr.onreadystatechange = function () {
                    if (callback && xhr.readyState === 4) {
                        _this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);
                        var res = null;
                        if (xhr.status >= 200 && xhr.status < 300) {
                            try {
                                res = index_cjs.jsonEval(xhr.responseText);
                            }
                            catch (e) {
                                warn('Failed to parse JSON response for ' +
                                    url +
                                    ': ' +
                                    xhr.responseText);
                            }
                            callback(null, res);
                        }
                        else {
                            // 401 and 404 are expected.
                            if (xhr.status !== 401 && xhr.status !== 404) {
                                warn('Got unsuccessful REST response for ' +
                                    url +
                                    ' Status: ' +
                                    xhr.status);
                            }
                            callback(xhr.status);
                        }
                        callback = null;
                    }
                };
                xhr.open('GET', url, /*asynchronous=*/ true);
                xhr.send();
            });
        };
        return ReadonlyRestClient;
    }(ServerActions));

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var INTERRUPT_REASON = 'repo_interrupt';
    /**
     * A connection to a single data repository.
     */
    var Repo = /** @class */ (function () {
        function Repo(repoInfo_, forceRestClient, app, authProvider) {
            var _this = this;
            this.repoInfo_ = repoInfo_;
            this.app = app;
            this.dataUpdateCount = 0;
            this.statsListener_ = null;
            this.eventQueue_ = new EventQueue();
            this.nextWriteId_ = 1;
            this.interceptServerDataCallback_ = null;
            /** A list of data pieces and paths to be set when this client disconnects. */
            this.onDisconnect_ = new SparseSnapshotTree();
            // TODO: This should be @private but it's used by test_access.js and internal.js
            this.persistentConnection_ = null;
            var authTokenProvider = new AuthTokenProvider(app, authProvider);
            this.stats_ = StatsManager.getCollection(repoInfo_);
            if (forceRestClient || beingCrawled()) {
                this.server_ = new ReadonlyRestClient(this.repoInfo_, this.onDataUpdate_.bind(this), authTokenProvider);
                // Minor hack: Fire onConnect immediately, since there's no actual connection.
                setTimeout(this.onConnectStatus_.bind(this, true), 0);
            }
            else {
                var authOverride = app.options['databaseAuthVariableOverride'];
                // Validate authOverride
                if (typeof authOverride !== 'undefined' && authOverride !== null) {
                    if (typeof authOverride !== 'object') {
                        throw new Error('Only objects are supported for option databaseAuthVariableOverride');
                    }
                    try {
                        index_cjs.stringify(authOverride);
                    }
                    catch (e) {
                        throw new Error('Invalid authOverride provided: ' + e);
                    }
                }
                this.persistentConnection_ = new PersistentConnection(this.repoInfo_, this.onDataUpdate_.bind(this), this.onConnectStatus_.bind(this), this.onServerInfoUpdate_.bind(this), authTokenProvider, authOverride);
                this.server_ = this.persistentConnection_;
            }
            authTokenProvider.addTokenChangeListener(function (token) {
                _this.server_.refreshAuthToken(token);
            });
            // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),
            // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.
            this.statsReporter_ = StatsManager.getOrCreateReporter(repoInfo_, function () { return new StatsReporter(_this.stats_, _this.server_); });
            this.transactionsInit_();
            // Used for .info.
            this.infoData_ = new SnapshotHolder();
            this.infoSyncTree_ = new SyncTree({
                startListening: function (query, tag, currentHashFn, onComplete) {
                    var infoEvents = [];
                    var node = _this.infoData_.getNode(query.path);
                    // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events
                    // on initial data...
                    if (!node.isEmpty()) {
                        infoEvents = _this.infoSyncTree_.applyServerOverwrite(query.path, node);
                        setTimeout(function () {
                            onComplete('ok');
                        }, 0);
                    }
                    return infoEvents;
                },
                stopListening: function () { }
            });
            this.updateInfo_('connected', false);
            this.serverSyncTree_ = new SyncTree({
                startListening: function (query, tag, currentHashFn, onComplete) {
                    _this.server_.listen(query, currentHashFn, tag, function (status, data) {
                        var events = onComplete(status, data);
                        _this.eventQueue_.raiseEventsForChangedPath(query.path, events);
                    });
                    // No synchronous events for network-backed sync trees
                    return [];
                },
                stopListening: function (query, tag) {
                    _this.server_.unlisten(query, tag);
                }
            });
        }
        /**
         * @return The URL corresponding to the root of this Firebase.
         */
        Repo.prototype.toString = function () {
            return ((this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host);
        };
        /**
         * @return The namespace represented by the repo.
         */
        Repo.prototype.name = function () {
            return this.repoInfo_.namespace;
        };
        /**
         * @return The time in milliseconds, taking the server offset into account if we have one.
         */
        Repo.prototype.serverTime = function () {
            var offsetNode = this.infoData_.getNode(new Path('.info/serverTimeOffset'));
            var offset = offsetNode.val() || 0;
            return new Date().getTime() + offset;
        };
        /**
         * Generate ServerValues using some variables from the repo object.
         */
        Repo.prototype.generateServerValues = function () {
            return generateWithValues({
                timestamp: this.serverTime()
            });
        };
        /**
         * Called by realtime when we get new messages from the server.
         */
        Repo.prototype.onDataUpdate_ = function (pathString, data, isMerge, tag) {
            // For testing.
            this.dataUpdateCount++;
            var path = new Path(pathString);
            data = this.interceptServerDataCallback_
                ? this.interceptServerDataCallback_(pathString, data)
                : data;
            var events = [];
            if (tag) {
                if (isMerge) {
                    var taggedChildren = index_cjs.map(data, function (raw) { return nodeFromJSON$1(raw); });
                    events = this.serverSyncTree_.applyTaggedQueryMerge(path, taggedChildren, tag);
                }
                else {
                    var taggedSnap = nodeFromJSON$1(data);
                    events = this.serverSyncTree_.applyTaggedQueryOverwrite(path, taggedSnap, tag);
                }
            }
            else if (isMerge) {
                var changedChildren = index_cjs.map(data, function (raw) { return nodeFromJSON$1(raw); });
                events = this.serverSyncTree_.applyServerMerge(path, changedChildren);
            }
            else {
                var snap = nodeFromJSON$1(data);
                events = this.serverSyncTree_.applyServerOverwrite(path, snap);
            }
            var affectedPath = path;
            if (events.length > 0) {
                // Since we have a listener outstanding for each transaction, receiving any events
                // is a proxy for some change having occurred.
                affectedPath = this.rerunTransactions_(path);
            }
            this.eventQueue_.raiseEventsForChangedPath(affectedPath, events);
        };
        // TODO: This should be @private but it's used by test_access.js and internal.js
        Repo.prototype.interceptServerData_ = function (callback) {
            this.interceptServerDataCallback_ = callback;
        };
        Repo.prototype.onConnectStatus_ = function (connectStatus) {
            this.updateInfo_('connected', connectStatus);
            if (connectStatus === false) {
                this.runOnDisconnectEvents_();
            }
        };
        Repo.prototype.onServerInfoUpdate_ = function (updates) {
            var _this = this;
            each(updates, function (key, value) {
                _this.updateInfo_(key, value);
            });
        };
        Repo.prototype.updateInfo_ = function (pathString, value) {
            var path = new Path('/.info/' + pathString);
            var newNode = nodeFromJSON$1(value);
            this.infoData_.updateSnapshot(path, newNode);
            var events = this.infoSyncTree_.applyServerOverwrite(path, newNode);
            this.eventQueue_.raiseEventsForChangedPath(path, events);
        };
        Repo.prototype.getNextWriteId_ = function () {
            return this.nextWriteId_++;
        };
        Repo.prototype.setWithPriority = function (path, newVal, newPriority, onComplete) {
            var _this = this;
            this.log_('set', {
                path: path.toString(),
                value: newVal,
                priority: newPriority
            });
            // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or
            // (b) store unresolved paths on JSON parse
            var serverValues = this.generateServerValues();
            var newNodeUnresolved = nodeFromJSON$1(newVal, newPriority);
            var existing = this.serverSyncTree_.calcCompleteEventCache(path);
            var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);
            var writeId = this.getNextWriteId_();
            var events = this.serverSyncTree_.applyUserOverwrite(path, newNode, writeId, true);
            this.eventQueue_.queueEvents(events);
            this.server_.put(path.toString(), newNodeUnresolved.val(/*export=*/ true), function (status, errorReason) {
                var success = status === 'ok';
                if (!success) {
                    warn('set at ' + path + ' failed: ' + status);
                }
                var clearEvents = _this.serverSyncTree_.ackUserWrite(writeId, !success);
                _this.eventQueue_.raiseEventsForChangedPath(path, clearEvents);
                _this.callOnCompleteCallback(onComplete, status, errorReason);
            });
            var affectedPath = this.abortTransactions_(path);
            this.rerunTransactions_(affectedPath);
            // We queued the events above, so just flush the queue here
            this.eventQueue_.raiseEventsForChangedPath(affectedPath, []);
        };
        Repo.prototype.update = function (path, childrenToMerge, onComplete) {
            var _this = this;
            this.log_('update', { path: path.toString(), value: childrenToMerge });
            // Start with our existing data and merge each child into it.
            var empty = true;
            var serverValues = this.generateServerValues();
            var changedChildren = {};
            each(childrenToMerge, function (changedKey, changedValue) {
                empty = false;
                changedChildren[changedKey] = resolveDeferredValueTree(path.child(changedKey), nodeFromJSON$1(changedValue), _this.serverSyncTree_, serverValues);
            });
            if (!empty) {
                var writeId_1 = this.getNextWriteId_();
                var events = this.serverSyncTree_.applyUserMerge(path, changedChildren, writeId_1);
                this.eventQueue_.queueEvents(events);
                this.server_.merge(path.toString(), childrenToMerge, function (status, errorReason) {
                    var success = status === 'ok';
                    if (!success) {
                        warn('update at ' + path + ' failed: ' + status);
                    }
                    var clearEvents = _this.serverSyncTree_.ackUserWrite(writeId_1, !success);
                    var affectedPath = clearEvents.length > 0 ? _this.rerunTransactions_(path) : path;
                    _this.eventQueue_.raiseEventsForChangedPath(affectedPath, clearEvents);
                    _this.callOnCompleteCallback(onComplete, status, errorReason);
                });
                each(childrenToMerge, function (changedPath) {
                    var affectedPath = _this.abortTransactions_(path.child(changedPath));
                    _this.rerunTransactions_(affectedPath);
                });
                // We queued the events above, so just flush the queue here
                this.eventQueue_.raiseEventsForChangedPath(path, []);
            }
            else {
                log("update() called with empty data.  Don't do anything.");
                this.callOnCompleteCallback(onComplete, 'ok');
            }
        };
        /**
         * Applies all of the changes stored up in the onDisconnect_ tree.
         */
        Repo.prototype.runOnDisconnectEvents_ = function () {
            var _this = this;
            this.log_('onDisconnectEvents');
            var serverValues = this.generateServerValues();
            var resolvedOnDisconnectTree = new SparseSnapshotTree();
            this.onDisconnect_.forEachTree(Path.Empty, function (path, node) {
                var resolved = resolveDeferredValueTree(path, node, _this.serverSyncTree_, serverValues);
                resolvedOnDisconnectTree.remember(path, resolved);
            });
            var events = [];
            resolvedOnDisconnectTree.forEachTree(Path.Empty, function (path, snap) {
                events = events.concat(_this.serverSyncTree_.applyServerOverwrite(path, snap));
                var affectedPath = _this.abortTransactions_(path);
                _this.rerunTransactions_(affectedPath);
            });
            this.onDisconnect_ = new SparseSnapshotTree();
            this.eventQueue_.raiseEventsForChangedPath(Path.Empty, events);
        };
        Repo.prototype.onDisconnectCancel = function (path, onComplete) {
            var _this = this;
            this.server_.onDisconnectCancel(path.toString(), function (status, errorReason) {
                if (status === 'ok') {
                    _this.onDisconnect_.forget(path);
                }
                _this.callOnCompleteCallback(onComplete, status, errorReason);
            });
        };
        Repo.prototype.onDisconnectSet = function (path, value, onComplete) {
            var _this = this;
            var newNode = nodeFromJSON$1(value);
            this.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), function (status, errorReason) {
                if (status === 'ok') {
                    _this.onDisconnect_.remember(path, newNode);
                }
                _this.callOnCompleteCallback(onComplete, status, errorReason);
            });
        };
        Repo.prototype.onDisconnectSetWithPriority = function (path, value, priority, onComplete) {
            var _this = this;
            var newNode = nodeFromJSON$1(value, priority);
            this.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), function (status, errorReason) {
                if (status === 'ok') {
                    _this.onDisconnect_.remember(path, newNode);
                }
                _this.callOnCompleteCallback(onComplete, status, errorReason);
            });
        };
        Repo.prototype.onDisconnectUpdate = function (path, childrenToMerge, onComplete) {
            var _this = this;
            if (index_cjs.isEmpty(childrenToMerge)) {
                log("onDisconnect().update() called with empty data.  Don't do anything.");
                this.callOnCompleteCallback(onComplete, 'ok');
                return;
            }
            this.server_.onDisconnectMerge(path.toString(), childrenToMerge, function (status, errorReason) {
                if (status === 'ok') {
                    each(childrenToMerge, function (childName, childNode) {
                        var newChildNode = nodeFromJSON$1(childNode);
                        _this.onDisconnect_.remember(path.child(childName), newChildNode);
                    });
                }
                _this.callOnCompleteCallback(onComplete, status, errorReason);
            });
        };
        Repo.prototype.addEventCallbackForQuery = function (query, eventRegistration) {
            var events;
            if (query.path.getFront() === '.info') {
                events = this.infoSyncTree_.addEventRegistration(query, eventRegistration);
            }
            else {
                events = this.serverSyncTree_.addEventRegistration(query, eventRegistration);
            }
            this.eventQueue_.raiseEventsAtPath(query.path, events);
        };
        Repo.prototype.removeEventCallbackForQuery = function (query, eventRegistration) {
            // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof
            // a little bit by handling the return values anyways.
            var events;
            if (query.path.getFront() === '.info') {
                events = this.infoSyncTree_.removeEventRegistration(query, eventRegistration);
            }
            else {
                events = this.serverSyncTree_.removeEventRegistration(query, eventRegistration);
            }
            this.eventQueue_.raiseEventsAtPath(query.path, events);
        };
        Repo.prototype.interrupt = function () {
            if (this.persistentConnection_) {
                this.persistentConnection_.interrupt(INTERRUPT_REASON);
            }
        };
        Repo.prototype.resume = function () {
            if (this.persistentConnection_) {
                this.persistentConnection_.resume(INTERRUPT_REASON);
            }
        };
        Repo.prototype.stats = function (showDelta) {
            if (showDelta === void 0) { showDelta = false; }
            if (typeof console === 'undefined') {
                return;
            }
            var stats;
            if (showDelta) {
                if (!this.statsListener_) {
                    this.statsListener_ = new StatsListener(this.stats_);
                }
                stats = this.statsListener_.get();
            }
            else {
                stats = this.stats_.get();
            }
            var longestName = Object.keys(stats).reduce(function (previousValue, currentValue) {
                return Math.max(currentValue.length, previousValue);
            }, 0);
            each(stats, function (stat, value) {
                var paddedStat = stat;
                // pad stat names to be the same length (plus 2 extra spaces).
                for (var i = stat.length; i < longestName + 2; i++) {
                    paddedStat += ' ';
                }
                console.log(paddedStat + value);
            });
        };
        Repo.prototype.statsIncrementCounter = function (metric) {
            this.stats_.incrementCounter(metric);
            this.statsReporter_.includeStat(metric);
        };
        Repo.prototype.log_ = function () {
            var varArgs = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                varArgs[_i] = arguments[_i];
            }
            var prefix = '';
            if (this.persistentConnection_) {
                prefix = this.persistentConnection_.id + ':';
            }
            log.apply(void 0, tslib_es6.__spread([prefix], varArgs));
        };
        Repo.prototype.callOnCompleteCallback = function (callback, status, errorReason) {
            if (callback) {
                exceptionGuard(function () {
                    if (status === 'ok') {
                        callback(null);
                    }
                    else {
                        var code = (status || 'error').toUpperCase();
                        var message = code;
                        if (errorReason) {
                            message += ': ' + errorReason;
                        }
                        var error = new Error(message);
                        // eslint-disable-next-line @typescript-eslint/no-explicit-any
                        error.code = code;
                        callback(error);
                    }
                });
            }
        };
        Object.defineProperty(Repo.prototype, "database", {
            get: function () {
                return this.__database || (this.__database = new Database(this));
            },
            enumerable: true,
            configurable: true
        });
        return Repo;
    }());

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node
     *
     * @constructor
     * @implements {NodeFilter}
     */
    var RangedFilter = /** @class */ (function () {
        /**
         * @param {!QueryParams} params
         */
        function RangedFilter(params) {
            this.indexedFilter_ = new IndexedFilter(params.getIndex());
            this.index_ = params.getIndex();
            this.startPost_ = RangedFilter.getStartPost_(params);
            this.endPost_ = RangedFilter.getEndPost_(params);
        }
        /**
         * @return {!NamedNode}
         */
        RangedFilter.prototype.getStartPost = function () {
            return this.startPost_;
        };
        /**
         * @return {!NamedNode}
         */
        RangedFilter.prototype.getEndPost = function () {
            return this.endPost_;
        };
        /**
         * @param {!NamedNode} node
         * @return {boolean}
         */
        RangedFilter.prototype.matches = function (node) {
            return (this.index_.compare(this.getStartPost(), node) <= 0 &&
                this.index_.compare(node, this.getEndPost()) <= 0);
        };
        /**
         * @inheritDoc
         */
        RangedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {
            if (!this.matches(new NamedNode(key, newChild))) {
                newChild = ChildrenNode.EMPTY_NODE;
            }
            return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);
        };
        /**
         * @inheritDoc
         */
        RangedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {
            if (newSnap.isLeafNode()) {
                // Make sure we have a children node with the correct index, not a leaf node;
                newSnap = ChildrenNode.EMPTY_NODE;
            }
            var filtered = newSnap.withIndex(this.index_);
            // Don't support priorities on queries
            filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);
            var self = this;
            newSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {
                if (!self.matches(new NamedNode(key, childNode))) {
                    filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);
                }
            });
            return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);
        };
        /**
         * @inheritDoc
         */
        RangedFilter.prototype.updatePriority = function (oldSnap, newPriority) {
            // Don't support priorities on queries
            return oldSnap;
        };
        /**
         * @inheritDoc
         */
        RangedFilter.prototype.filtersNodes = function () {
            return true;
        };
        /**
         * @inheritDoc
         */
        RangedFilter.prototype.getIndexedFilter = function () {
            return this.indexedFilter_;
        };
        /**
         * @inheritDoc
         */
        RangedFilter.prototype.getIndex = function () {
            return this.index_;
        };
        /**
         * @param {!QueryParams} params
         * @return {!NamedNode}
         * @private
         */
        RangedFilter.getStartPost_ = function (params) {
            if (params.hasStart()) {
                var startName = params.getIndexStartName();
                return params.getIndex().makePost(params.getIndexStartValue(), startName);
            }
            else {
                return params.getIndex().minPost();
            }
        };
        /**
         * @param {!QueryParams} params
         * @return {!NamedNode}
         * @private
         */
        RangedFilter.getEndPost_ = function (params) {
            if (params.hasEnd()) {
                var endName = params.getIndexEndName();
                return params.getIndex().makePost(params.getIndexEndValue(), endName);
            }
            else {
                return params.getIndex().maxPost();
            }
        };
        return RangedFilter;
    }());

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible
     *
     * @constructor
     * @implements {NodeFilter}
     */
    var LimitedFilter = /** @class */ (function () {
        /**
         * @param {!QueryParams} params
         */
        function LimitedFilter(params) {
            this.rangedFilter_ = new RangedFilter(params);
            this.index_ = params.getIndex();
            this.limit_ = params.getLimit();
            this.reverse_ = !params.isViewFromLeft();
        }
        /**
         * @inheritDoc
         */
        LimitedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {
            if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {
                newChild = ChildrenNode.EMPTY_NODE;
            }
            if (snap.getImmediateChild(key).equals(newChild)) {
                // No change
                return snap;
            }
            else if (snap.numChildren() < this.limit_) {
                return this.rangedFilter_
                    .getIndexedFilter()
                    .updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);
            }
            else {
                return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);
            }
        };
        /**
         * @inheritDoc
         */
        LimitedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {
            var filtered;
            if (newSnap.isLeafNode() || newSnap.isEmpty()) {
                // Make sure we have a children node with the correct index, not a leaf node;
                filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);
            }
            else {
                if (this.limit_ * 2 < newSnap.numChildren() &&
                    newSnap.isIndexed(this.index_)) {
                    // Easier to build up a snapshot, since what we're given has more than twice the elements we want
                    filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);
                    // anchor to the startPost, endPost, or last element as appropriate
                    var iterator = void 0;
                    if (this.reverse_) {
                        iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);
                    }
                    else {
                        iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);
                    }
                    var count = 0;
                    while (iterator.hasNext() && count < this.limit_) {
                        var next = iterator.getNext();
                        var inRange = void 0;
                        if (this.reverse_) {
                            inRange =
                                this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;
                        }
                        else {
                            inRange =
                                this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;
                        }
                        if (inRange) {
                            filtered = filtered.updateImmediateChild(next.name, next.node);
                            count++;
                        }
                        else {
                            // if we have reached the end post, we cannot keep adding elemments
                            break;
                        }
                    }
                }
                else {
                    // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one
                    filtered = newSnap.withIndex(this.index_);
                    // Don't support priorities on queries
                    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);
                    var startPost = void 0;
                    var endPost = void 0;
                    var cmp = void 0;
                    var iterator = void 0;
                    if (this.reverse_) {
                        iterator = filtered.getReverseIterator(this.index_);
                        startPost = this.rangedFilter_.getEndPost();
                        endPost = this.rangedFilter_.getStartPost();
                        var indexCompare_1 = this.index_.getCompare();
                        cmp = function (a, b) { return indexCompare_1(b, a); };
                    }
                    else {
                        iterator = filtered.getIterator(this.index_);
                        startPost = this.rangedFilter_.getStartPost();
                        endPost = this.rangedFilter_.getEndPost();
                        cmp = this.index_.getCompare();
                    }
                    var count = 0;
                    var foundStartPost = false;
                    while (iterator.hasNext()) {
                        var next = iterator.getNext();
                        if (!foundStartPost && cmp(startPost, next) <= 0) {
                            // start adding
                            foundStartPost = true;
                        }
                        var inRange = foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;
                        if (inRange) {
                            count++;
                        }
                        else {
                            filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);
                        }
                    }
                }
            }
            return this.rangedFilter_
                .getIndexedFilter()
                .updateFullNode(oldSnap, filtered, optChangeAccumulator);
        };
        /**
         * @inheritDoc
         */
        LimitedFilter.prototype.updatePriority = function (oldSnap, newPriority) {
            // Don't support priorities on queries
            return oldSnap;
        };
        /**
         * @inheritDoc
         */
        LimitedFilter.prototype.filtersNodes = function () {
            return true;
        };
        /**
         * @inheritDoc
         */
        LimitedFilter.prototype.getIndexedFilter = function () {
            return this.rangedFilter_.getIndexedFilter();
        };
        /**
         * @inheritDoc
         */
        LimitedFilter.prototype.getIndex = function () {
            return this.index_;
        };
        /**
         * @param {!Node} snap
         * @param {string} childKey
         * @param {!Node} childSnap
         * @param {!CompleteChildSource} source
         * @param {?ChildChangeAccumulator} changeAccumulator
         * @return {!Node}
         * @private
         */
        LimitedFilter.prototype.fullLimitUpdateChild_ = function (snap, childKey, childSnap, source, changeAccumulator) {
            // TODO: rename all cache stuff etc to general snap terminology
            var cmp;
            if (this.reverse_) {
                var indexCmp_1 = this.index_.getCompare();
                cmp = function (a, b) { return indexCmp_1(b, a); };
            }
            else {
                cmp = this.index_.getCompare();
            }
            var oldEventCache = snap;
            index_cjs.assert(oldEventCache.numChildren() === this.limit_, '');
            var newChildNamedNode = new NamedNode(childKey, childSnap);
            var windowBoundary = this.reverse_
                ? oldEventCache.getFirstChild(this.index_)
                : oldEventCache.getLastChild(this.index_);
            var inRange = this.rangedFilter_.matches(newChildNamedNode);
            if (oldEventCache.hasChild(childKey)) {
                var oldChildSnap = oldEventCache.getImmediateChild(childKey);
                var nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);
                while (nextChild != null &&
                    (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))) {
                    // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't
                    // been applied to the limited filter yet. Ignore this next child which will be updated later in
                    // the limited filter...
                    nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);
                }
                var compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);
                var remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;
                if (remainsInWindow) {
                    if (changeAccumulator != null) {
                        changeAccumulator.trackChildChange(Change.childChangedChange(childKey, childSnap, oldChildSnap));
                    }
                    return oldEventCache.updateImmediateChild(childKey, childSnap);
                }
                else {
                    if (changeAccumulator != null) {
                        changeAccumulator.trackChildChange(Change.childRemovedChange(childKey, oldChildSnap));
                    }
                    var newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);
                    var nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);
                    if (nextChildInRange) {
                        if (changeAccumulator != null) {
                            changeAccumulator.trackChildChange(Change.childAddedChange(nextChild.name, nextChild.node));
                        }
                        return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);
                    }
                    else {
                        return newEventCache;
                    }
                }
            }
            else if (childSnap.isEmpty()) {
                // we're deleting a node, but it was not in the window, so ignore it
                return snap;
            }
            else if (inRange) {
                if (cmp(windowBoundary, newChildNamedNode) >= 0) {
                    if (changeAccumulator != null) {
                        changeAccumulator.trackChildChange(Change.childRemovedChange(windowBoundary.name, windowBoundary.node));
                        changeAccumulator.trackChildChange(Change.childAddedChange(childKey, childSnap));
                    }
                    return oldEventCache
                        .updateImmediateChild(childKey, childSnap)
                        .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);
                }
                else {
                    return snap;
                }
            }
            else {
                return snap;
            }
        };
        return LimitedFilter;
    }());

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a
     * range to be returned for a particular location. It is assumed that validation of parameters is done at the
     * user-facing API level, so it is not done here.
     * @constructor
     */
    var QueryParams = /** @class */ (function () {
        function QueryParams() {
            this.limitSet_ = false;
            this.startSet_ = false;
            this.startNameSet_ = false;
            this.endSet_ = false;
            this.endNameSet_ = false;
            this.limit_ = 0;
            this.viewFrom_ = '';
            this.indexStartValue_ = null;
            this.indexStartName_ = '';
            this.indexEndValue_ = null;
            this.indexEndName_ = '';
            this.index_ = PRIORITY_INDEX;
        }
        /**
         * @return {boolean}
         */
        QueryParams.prototype.hasStart = function () {
            return this.startSet_;
        };
        /**
         * @return {boolean} True if it would return from left.
         */
        QueryParams.prototype.isViewFromLeft = function () {
            if (this.viewFrom_ === '') {
                // limit(), rather than limitToFirst or limitToLast was called.
                // This means that only one of startSet_ and endSet_ is true. Use them
                // to calculate which side of the view to anchor to. If neither is set,
                // anchor to the end.
                return this.startSet_;
            }
            else {
                return (this.viewFrom_ === QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT);
            }
        };
        /**
         * Only valid to call if hasStart() returns true
         * @return {*}
         */
        QueryParams.prototype.getIndexStartValue = function () {
            index_cjs.assert(this.startSet_, 'Only valid if start has been set');
            return this.indexStartValue_;
        };
        /**
         * Only valid to call if hasStart() returns true.
         * Returns the starting key name for the range defined by these query parameters
         * @return {!string}
         */
        QueryParams.prototype.getIndexStartName = function () {
            index_cjs.assert(this.startSet_, 'Only valid if start has been set');
            if (this.startNameSet_) {
                return this.indexStartName_;
            }
            else {
                return MIN_NAME;
            }
        };
        /**
         * @return {boolean}
         */
        QueryParams.prototype.hasEnd = function () {
            return this.endSet_;
        };
        /**
         * Only valid to call if hasEnd() returns true.
         * @return {*}
         */
        QueryParams.prototype.getIndexEndValue = function () {
            index_cjs.assert(this.endSet_, 'Only valid if end has been set');
            return this.indexEndValue_;
        };
        /**
         * Only valid to call if hasEnd() returns true.
         * Returns the end key name for the range defined by these query parameters
         * @return {!string}
         */
        QueryParams.prototype.getIndexEndName = function () {
            index_cjs.assert(this.endSet_, 'Only valid if end has been set');
            if (this.endNameSet_) {
                return this.indexEndName_;
            }
            else {
                return MAX_NAME;
            }
        };
        /**
         * @return {boolean}
         */
        QueryParams.prototype.hasLimit = function () {
            return this.limitSet_;
        };
        /**
         * @return {boolean} True if a limit has been set and it has been explicitly anchored
         */
        QueryParams.prototype.hasAnchoredLimit = function () {
            return this.limitSet_ && this.viewFrom_ !== '';
        };
        /**
         * Only valid to call if hasLimit() returns true
         * @return {!number}
         */
        QueryParams.prototype.getLimit = function () {
            index_cjs.assert(this.limitSet_, 'Only valid if limit has been set');
            return this.limit_;
        };
        /**
         * @return {!Index}
         */
        QueryParams.prototype.getIndex = function () {
            return this.index_;
        };
        /**
         * @return {!QueryParams}
         * @private
         */
        QueryParams.prototype.copy_ = function () {
            var copy = new QueryParams();
            copy.limitSet_ = this.limitSet_;
            copy.limit_ = this.limit_;
            copy.startSet_ = this.startSet_;
            copy.indexStartValue_ = this.indexStartValue_;
            copy.startNameSet_ = this.startNameSet_;
            copy.indexStartName_ = this.indexStartName_;
            copy.endSet_ = this.endSet_;
            copy.indexEndValue_ = this.indexEndValue_;
            copy.endNameSet_ = this.endNameSet_;
            copy.indexEndName_ = this.indexEndName_;
            copy.index_ = this.index_;
            copy.viewFrom_ = this.viewFrom_;
            return copy;
        };
        /**
         * @param {!number} newLimit
         * @return {!QueryParams}
         */
        QueryParams.prototype.limit = function (newLimit) {
            var newParams = this.copy_();
            newParams.limitSet_ = true;
            newParams.limit_ = newLimit;
            newParams.viewFrom_ = '';
            return newParams;
        };
        /**
         * @param {!number} newLimit
         * @return {!QueryParams}
         */
        QueryParams.prototype.limitToFirst = function (newLimit) {
            var newParams = this.copy_();
            newParams.limitSet_ = true;
            newParams.limit_ = newLimit;
            newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;
            return newParams;
        };
        /**
         * @param {!number} newLimit
         * @return {!QueryParams}
         */
        QueryParams.prototype.limitToLast = function (newLimit) {
            var newParams = this.copy_();
            newParams.limitSet_ = true;
            newParams.limit_ = newLimit;
            newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_RIGHT;
            return newParams;
        };
        /**
         * @param {*} indexValue
         * @param {?string=} key
         * @return {!QueryParams}
         */
        QueryParams.prototype.startAt = function (indexValue, key) {
            var newParams = this.copy_();
            newParams.startSet_ = true;
            if (indexValue === undefined) {
                indexValue = null;
            }
            newParams.indexStartValue_ = indexValue;
            if (key != null) {
                newParams.startNameSet_ = true;
                newParams.indexStartName_ = key;
            }
            else {
                newParams.startNameSet_ = false;
                newParams.indexStartName_ = '';
            }
            return newParams;
        };
        /**
         * @param {*} indexValue
         * @param {?string=} key
         * @return {!QueryParams}
         */
        QueryParams.prototype.endAt = function (indexValue, key) {
            var newParams = this.copy_();
            newParams.endSet_ = true;
            if (indexValue === undefined) {
                indexValue = null;
            }
            newParams.indexEndValue_ = indexValue;
            if (key !== undefined) {
                newParams.endNameSet_ = true;
                newParams.indexEndName_ = key;
            }
            else {
                newParams.endNameSet_ = false;
                newParams.indexEndName_ = '';
            }
            return newParams;
        };
        /**
         * @param {!Index} index
         * @return {!QueryParams}
         */
        QueryParams.prototype.orderBy = function (index) {
            var newParams = this.copy_();
            newParams.index_ = index;
            return newParams;
        };
        /**
         * @return {!Object}
         */
        QueryParams.prototype.getQueryObject = function () {
            var WIRE_PROTOCOL_CONSTANTS = QueryParams.WIRE_PROTOCOL_CONSTANTS_;
            var obj = {};
            if (this.startSet_) {
                obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] = this.indexStartValue_;
                if (this.startNameSet_) {
                    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] = this.indexStartName_;
                }
            }
            if (this.endSet_) {
                obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = this.indexEndValue_;
                if (this.endNameSet_) {
                    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = this.indexEndName_;
                }
            }
            if (this.limitSet_) {
                obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = this.limit_;
                var viewFrom = this.viewFrom_;
                if (viewFrom === '') {
                    if (this.isViewFromLeft()) {
                        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;
                    }
                    else {
                        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;
                    }
                }
                obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;
            }
            // For now, priority index is the default, so we only specify if it's some other index
            if (this.index_ !== PRIORITY_INDEX) {
                obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = this.index_.toString();
            }
            return obj;
        };
        /**
         * @return {boolean}
         */
        QueryParams.prototype.loadsAllData = function () {
            return !(this.startSet_ || this.endSet_ || this.limitSet_);
        };
        /**
         * @return {boolean}
         */
        QueryParams.prototype.isDefault = function () {
            return this.loadsAllData() && this.index_ === PRIORITY_INDEX;
        };
        /**
         * @return {!NodeFilter}
         */
        QueryParams.prototype.getNodeFilter = function () {
            if (this.loadsAllData()) {
                return new IndexedFilter(this.getIndex());
            }
            else if (this.hasLimit()) {
                return new LimitedFilter(this);
            }
            else {
                return new RangedFilter(this);
            }
        };
        /**
         * Returns a set of REST query string parameters representing this query.
         *
         * @return {!Object.<string,*>} query string parameters
         */
        QueryParams.prototype.toRestQueryStringParameters = function () {
            var REST_CONSTANTS = QueryParams.REST_QUERY_CONSTANTS_;
            var qs = {};
            if (this.isDefault()) {
                return qs;
            }
            var orderBy;
            if (this.index_ === PRIORITY_INDEX) {
                orderBy = REST_CONSTANTS.PRIORITY_INDEX;
            }
            else if (this.index_ === VALUE_INDEX) {
                orderBy = REST_CONSTANTS.VALUE_INDEX;
            }
            else if (this.index_ === KEY_INDEX) {
                orderBy = REST_CONSTANTS.KEY_INDEX;
            }
            else {
                index_cjs.assert(this.index_ instanceof PathIndex, 'Unrecognized index type!');
                orderBy = this.index_.toString();
            }
            qs[REST_CONSTANTS.ORDER_BY] = index_cjs.stringify(orderBy);
            if (this.startSet_) {
                qs[REST_CONSTANTS.START_AT] = index_cjs.stringify(this.indexStartValue_);
                if (this.startNameSet_) {
                    qs[REST_CONSTANTS.START_AT] += ',' + index_cjs.stringify(this.indexStartName_);
                }
            }
            if (this.endSet_) {
                qs[REST_CONSTANTS.END_AT] = index_cjs.stringify(this.indexEndValue_);
                if (this.endNameSet_) {
                    qs[REST_CONSTANTS.END_AT] += ',' + index_cjs.stringify(this.indexEndName_);
                }
            }
            if (this.limitSet_) {
                if (this.isViewFromLeft()) {
                    qs[REST_CONSTANTS.LIMIT_TO_FIRST] = this.limit_;
                }
                else {
                    qs[REST_CONSTANTS.LIMIT_TO_LAST] = this.limit_;
                }
            }
            return qs;
        };
        /**
         * Wire Protocol Constants
         * @const
         * @enum {string}
         * @private
         */
        QueryParams.WIRE_PROTOCOL_CONSTANTS_ = {
            INDEX_START_VALUE: 'sp',
            INDEX_START_NAME: 'sn',
            INDEX_END_VALUE: 'ep',
            INDEX_END_NAME: 'en',
            LIMIT: 'l',
            VIEW_FROM: 'vf',
            VIEW_FROM_LEFT: 'l',
            VIEW_FROM_RIGHT: 'r',
            INDEX: 'i'
        };
        /**
         * REST Query Constants
         * @const
         * @enum {string}
         * @private
         */
        QueryParams.REST_QUERY_CONSTANTS_ = {
            ORDER_BY: 'orderBy',
            PRIORITY_INDEX: '$priority',
            VALUE_INDEX: '$value',
            KEY_INDEX: '$key',
            START_AT: 'startAt',
            END_AT: 'endAt',
            LIMIT_TO_FIRST: 'limitToFirst',
            LIMIT_TO_LAST: 'limitToLast'
        };
        /**
         * Default, empty query parameters
         * @type {!QueryParams}
         * @const
         */
        QueryParams.DEFAULT = new QueryParams();
        return QueryParams;
    }());

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var Reference = /** @class */ (function (_super) {
        tslib_es6.__extends(Reference, _super);
        /**
         * Call options:
         *   new Reference(Repo, Path) or
         *   new Reference(url: string, string|RepoManager)
         *
         * Externally - this is the firebase.database.Reference type.
         *
         * @param {!Repo} repo
         * @param {(!Path)} path
         * @extends {Query}
         */
        function Reference(repo, path) {
            var _this = this;
            if (!(repo instanceof Repo)) {
                throw new Error('new Reference() no longer supported - use app.database().');
            }
            // call Query's constructor, passing in the repo and path.
            _this = _super.call(this, repo, path, QueryParams.DEFAULT, false) || this;
            return _this;
        }
        /** @return {?string} */
        Reference.prototype.getKey = function () {
            index_cjs.validateArgCount('Reference.key', 0, 0, arguments.length);
            if (this.path.isEmpty()) {
                return null;
            }
            else {
                return this.path.getBack();
            }
        };
        /**
         * @param {!(string|Path)} pathString
         * @return {!Reference}
         */
        Reference.prototype.child = function (pathString) {
            index_cjs.validateArgCount('Reference.child', 1, 1, arguments.length);
            if (typeof pathString === 'number') {
                pathString = String(pathString);
            }
            else if (!(pathString instanceof Path)) {
                if (this.path.getFront() === null) {
                    validateRootPathString('Reference.child', 1, pathString, false);
                }
                else {
                    validatePathString('Reference.child', 1, pathString, false);
                }
            }
            return new Reference(this.repo, this.path.child(pathString));
        };
        /** @return {?Reference} */
        Reference.prototype.getParent = function () {
            index_cjs.validateArgCount('Reference.parent', 0, 0, arguments.length);
            var parentPath = this.path.parent();
            return parentPath === null ? null : new Reference(this.repo, parentPath);
        };
        /** @return {!Reference} */
        Reference.prototype.getRoot = function () {
            index_cjs.validateArgCount('Reference.root', 0, 0, arguments.length);
            var ref = this;
            while (ref.getParent() !== null) {
                ref = ref.getParent();
            }
            return ref;
        };
        /** @return {!Database} */
        Reference.prototype.databaseProp = function () {
            return this.repo.database;
        };
        /**
         * @param {*} newVal
         * @param {function(?Error)=} onComplete
         * @return {!Promise}
         */
        Reference.prototype.set = function (newVal, onComplete) {
            index_cjs.validateArgCount('Reference.set', 1, 2, arguments.length);
            validateWritablePath('Reference.set', this.path);
            validateFirebaseDataArg('Reference.set', 1, newVal, this.path, false);
            index_cjs.validateCallback('Reference.set', 2, onComplete, true);
            var deferred = new index_cjs.Deferred();
            this.repo.setWithPriority(this.path, newVal, 
            /*priority=*/ null, deferred.wrapCallback(onComplete));
            return deferred.promise;
        };
        /**
         * @param {!Object} objectToMerge
         * @param {function(?Error)=} onComplete
         * @return {!Promise}
         */
        Reference.prototype.update = function (objectToMerge, onComplete) {
            index_cjs.validateArgCount('Reference.update', 1, 2, arguments.length);
            validateWritablePath('Reference.update', this.path);
            if (Array.isArray(objectToMerge)) {
                var newObjectToMerge = {};
                for (var i = 0; i < objectToMerge.length; ++i) {
                    newObjectToMerge['' + i] = objectToMerge[i];
                }
                objectToMerge = newObjectToMerge;
                warn('Passing an Array to Firebase.update() is deprecated. ' +
                    'Use set() if you want to overwrite the existing data, or ' +
                    'an Object with integer keys if you really do want to ' +
                    'only update some of the children.');
            }
            validateFirebaseMergeDataArg('Reference.update', 1, objectToMerge, this.path, false);
            index_cjs.validateCallback('Reference.update', 2, onComplete, true);
            var deferred = new index_cjs.Deferred();
            this.repo.update(this.path, objectToMerge, deferred.wrapCallback(onComplete));
            return deferred.promise;
        };
        /**
         * @param {*} newVal
         * @param {string|number|null} newPriority
         * @param {function(?Error)=} onComplete
         * @return {!Promise}
         */
        Reference.prototype.setWithPriority = function (newVal, newPriority, onComplete) {
            index_cjs.validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);
            validateWritablePath('Reference.setWithPriority', this.path);
            validateFirebaseDataArg('Reference.setWithPriority', 1, newVal, this.path, false);
            validatePriority('Reference.setWithPriority', 2, newPriority, false);
            index_cjs.validateCallback('Reference.setWithPriority', 3, onComplete, true);
            if (this.getKey() === '.length' || this.getKey() === '.keys') {
                throw 'Reference.setWithPriority failed: ' +
                    this.getKey() +
                    ' is a read-only object.';
            }
            var deferred = new index_cjs.Deferred();
            this.repo.setWithPriority(this.path, newVal, newPriority, deferred.wrapCallback(onComplete));
            return deferred.promise;
        };
        /**
         * @param {function(?Error)=} onComplete
         * @return {!Promise}
         */
        Reference.prototype.remove = function (onComplete) {
            index_cjs.validateArgCount('Reference.remove', 0, 1, arguments.length);
            validateWritablePath('Reference.remove', this.path);
            index_cjs.validateCallback('Reference.remove', 1, onComplete, true);
            return this.set(null, onComplete);
        };
        /**
         * @param {function(*):*} transactionUpdate
         * @param {(function(?Error, boolean, ?DataSnapshot))=} onComplete
         * @param {boolean=} applyLocally
         * @return {!Promise}
         */
        Reference.prototype.transaction = function (transactionUpdate, onComplete, applyLocally) {
            index_cjs.validateArgCount('Reference.transaction', 1, 3, arguments.length);
            validateWritablePath('Reference.transaction', this.path);
            index_cjs.validateCallback('Reference.transaction', 1, transactionUpdate, false);
            index_cjs.validateCallback('Reference.transaction', 2, onComplete, true);
            // NOTE: applyLocally is an internal-only option for now.  We need to decide if we want to keep it and how
            // to expose it.
            validateBoolean('Reference.transaction', 3, applyLocally, true);
            if (this.getKey() === '.length' || this.getKey() === '.keys') {
                throw 'Reference.transaction failed: ' +
                    this.getKey() +
                    ' is a read-only object.';
            }
            if (applyLocally === undefined) {
                applyLocally = true;
            }
            var deferred = new index_cjs.Deferred();
            if (typeof onComplete === 'function') {
                deferred.promise.catch(function () { });
            }
            var promiseComplete = function (error, committed, snapshot) {
                if (error) {
                    deferred.reject(error);
                }
                else {
                    deferred.resolve(new TransactionResult(committed, snapshot));
                }
                if (typeof onComplete === 'function') {
                    onComplete(error, committed, snapshot);
                }
            };
            this.repo.startTransaction(this.path, transactionUpdate, promiseComplete, applyLocally);
            return deferred.promise;
        };
        /**
         * @param {string|number|null} priority
         * @param {function(?Error)=} onComplete
         * @return {!Promise}
         */
        Reference.prototype.setPriority = function (priority, onComplete) {
            index_cjs.validateArgCount('Reference.setPriority', 1, 2, arguments.length);
            validateWritablePath('Reference.setPriority', this.path);
            validatePriority('Reference.setPriority', 1, priority, false);
            index_cjs.validateCallback('Reference.setPriority', 2, onComplete, true);
            var deferred = new index_cjs.Deferred();
            this.repo.setWithPriority(this.path.child('.priority'), priority, null, deferred.wrapCallback(onComplete));
            return deferred.promise;
        };
        /**
         * @param {*=} value
         * @param {function(?Error)=} onComplete
         * @return {!Reference}
         */
        Reference.prototype.push = function (value, onComplete) {
            index_cjs.validateArgCount('Reference.push', 0, 2, arguments.length);
            validateWritablePath('Reference.push', this.path);
            validateFirebaseDataArg('Reference.push', 1, value, this.path, true);
            index_cjs.validateCallback('Reference.push', 2, onComplete, true);
            var now = this.repo.serverTime();
            var name = nextPushId(now);
            // push() returns a ThennableReference whose promise is fulfilled with a regular Reference.
            // We use child() to create handles to two different references. The first is turned into a
            // ThennableReference below by adding then() and catch() methods and is used as the
            // return value of push(). The second remains a regular Reference and is used as the fulfilled
            // value of the first ThennableReference.
            var thennablePushRef = this.child(name);
            var pushRef = this.child(name);
            var promise;
            if (value != null) {
                promise = thennablePushRef.set(value, onComplete).then(function () { return pushRef; });
            }
            else {
                promise = Promise.resolve(pushRef);
            }
            thennablePushRef.then = promise.then.bind(promise);
            thennablePushRef.catch = promise.then.bind(promise, undefined);
            if (typeof onComplete === 'function') {
                promise.catch(function () { });
            }
            return thennablePushRef;
        };
        /**
         * @return {!OnDisconnect}
         */
        Reference.prototype.onDisconnect = function () {
            validateWritablePath('Reference.onDisconnect', this.path);
            return new OnDisconnect(this.repo, this.path);
        };
        Object.defineProperty(Reference.prototype, "database", {
            get: function () {
                return this.databaseProp();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Reference.prototype, "key", {
            get: function () {
                return this.getKey();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Reference.prototype, "parent", {
            get: function () {
                return this.getParent();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Reference.prototype, "root", {
            get: function () {
                return this.getRoot();
            },
            enumerable: true,
            configurable: true
        });
        return Reference;
    }(Query));
    /**
     * Define reference constructor in various modules
     *
     * We are doing this here to avoid several circular
     * dependency issues
     */
    Query.__referenceConstructor = Reference;
    SyncPoint.__referenceConstructor = Reference;

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Node in a Tree.
     */
    var TreeNode = /** @class */ (function () {
        function TreeNode() {
            // TODO: Consider making accessors that create children and value lazily or
            // separate Internal / Leaf 'types'.
            this.children = {};
            this.childCount = 0;
            this.value = null;
        }
        return TreeNode;
    }());
    /**
     * A light-weight tree, traversable by path.  Nodes can have both values and children.
     * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty
     * children.
     */
    var Tree = /** @class */ (function () {
        /**
         * @template T
         * @param {string=} name_ Optional name of the node.
         * @param {Tree=} parent_ Optional parent node.
         * @param {TreeNode=} node_ Optional node to wrap.
         */
        function Tree(name_, parent_, node_) {
            if (name_ === void 0) { name_ = ''; }
            if (parent_ === void 0) { parent_ = null; }
            if (node_ === void 0) { node_ = new TreeNode(); }
            this.name_ = name_;
            this.parent_ = parent_;
            this.node_ = node_;
        }
        /**
         * Returns a sub-Tree for the given path.
         *
         * @param {!(string|Path)} pathObj Path to look up.
         * @return {!Tree.<T>} Tree for path.
         */
        Tree.prototype.subTree = function (pathObj) {
            // TODO: Require pathObj to be Path?
            var path = pathObj instanceof Path ? pathObj : new Path(pathObj);
            var child = this, next = path.getFront();
            while (next !== null) {
                var childNode = index_cjs.safeGet(child.node_.children, next) || new TreeNode();
                child = new Tree(next, child, childNode);
                path = path.popFront();
                next = path.getFront();
            }
            return child;
        };
        /**
         * Returns the data associated with this tree node.
         *
         * @return {?T} The data or null if no data exists.
         */
        Tree.prototype.getValue = function () {
            return this.node_.value;
        };
        /**
         * Sets data to this tree node.
         *
         * @param {!T} value Value to set.
         */
        Tree.prototype.setValue = function (value) {
            index_cjs.assert(typeof value !== 'undefined', 'Cannot set value to undefined');
            this.node_.value = value;
            this.updateParents_();
        };
        /**
         * Clears the contents of the tree node (its value and all children).
         */
        Tree.prototype.clear = function () {
            this.node_.value = null;
            this.node_.children = {};
            this.node_.childCount = 0;
            this.updateParents_();
        };
        /**
         * @return {boolean} Whether the tree has any children.
         */
        Tree.prototype.hasChildren = function () {
            return this.node_.childCount > 0;
        };
        /**
         * @return {boolean} Whether the tree is empty (no value or children).
         */
        Tree.prototype.isEmpty = function () {
            return this.getValue() === null && !this.hasChildren();
        };
        /**
         * Calls action for each child of this tree node.
         *
         * @param {function(!Tree.<T>)} action Action to be called for each child.
         */
        Tree.prototype.forEachChild = function (action) {
            var _this = this;
            each(this.node_.children, function (child, childTree) {
                action(new Tree(child, _this, childTree));
            });
        };
        /**
         * Does a depth-first traversal of this node's descendants, calling action for each one.
         *
         * @param {function(!Tree.<T>)} action Action to be called for each child.
         * @param {boolean=} includeSelf Whether to call action on this node as well. Defaults to
         *   false.
         * @param {boolean=} childrenFirst Whether to call action on children before calling it on
         *   parent.
         */
        Tree.prototype.forEachDescendant = function (action, includeSelf, childrenFirst) {
            if (includeSelf && !childrenFirst) {
                action(this);
            }
            this.forEachChild(function (child) {
                child.forEachDescendant(action, /*includeSelf=*/ true, childrenFirst);
            });
            if (includeSelf && childrenFirst) {
                action(this);
            }
        };
        /**
         * Calls action on each ancestor node.
         *
         * @param {function(!Tree.<T>)} action Action to be called on each parent; return
         *   true to abort.
         * @param {boolean=} includeSelf Whether to call action on this node as well.
         * @return {boolean} true if the action callback returned true.
         */
        Tree.prototype.forEachAncestor = function (action, includeSelf) {
            var node = includeSelf ? this : this.parent();
            while (node !== null) {
                if (action(node)) {
                    return true;
                }
                node = node.parent();
            }
            return false;
        };
        /**
         * Does a depth-first traversal of this node's descendants.  When a descendant with a value
         * is found, action is called on it and traversal does not continue inside the node.
         * Action is *not* called on this node.
         *
         * @param {function(!Tree.<T>)} action Action to be called for each child.
         */
        Tree.prototype.forEachImmediateDescendantWithValue = function (action) {
            this.forEachChild(function (child) {
                if (child.getValue() !== null) {
                    action(child);
                }
                else {
                    child.forEachImmediateDescendantWithValue(action);
                }
            });
        };
        /**
         * @return {!Path} The path of this tree node, as a Path.
         */
        Tree.prototype.path = function () {
            return new Path(this.parent_ === null
                ? this.name_
                : this.parent_.path() + '/' + this.name_);
        };
        /**
         * @return {string} The name of the tree node.
         */
        Tree.prototype.name = function () {
            return this.name_;
        };
        /**
         * @return {?Tree} The parent tree node, or null if this is the root of the tree.
         */
        Tree.prototype.parent = function () {
            return this.parent_;
        };
        /**
         * Adds or removes this child from its parent based on whether it's empty or not.
         *
         * @private
         */
        Tree.prototype.updateParents_ = function () {
            if (this.parent_ !== null) {
                this.parent_.updateChild_(this.name_, this);
            }
        };
        /**
         * Adds or removes the passed child to this tree node, depending on whether it's empty.
         *
         * @param {string} childName The name of the child to update.
         * @param {!Tree.<T>} child The child to update.
         * @private
         */
        Tree.prototype.updateChild_ = function (childName, child) {
            var childEmpty = child.isEmpty();
            var childExists = index_cjs.contains(this.node_.children, childName);
            if (childEmpty && childExists) {
                delete this.node_.children[childName];
                this.node_.childCount--;
                this.updateParents_();
            }
            else if (!childEmpty && !childExists) {
                this.node_.children[childName] = child.node_;
                this.node_.childCount++;
                this.updateParents_();
            }
        };
        return Tree;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // TODO: This is pretty messy.  Ideally, a lot of this would move into FirebaseData, or a transaction-specific
    // component used by FirebaseData, but it has ties to user callbacks (transaction update and onComplete) as well
    // as the realtime connection (to send transactions to the server).  So that all needs to be decoupled first.
    // For now it's part of Repo, but in its own file.
    /**
     * @enum {number}
     */
    var TransactionStatus;
    (function (TransactionStatus) {
        // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the
        // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to
        // mismatched hash.
        TransactionStatus[TransactionStatus["RUN"] = 0] = "RUN";
        // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted
        // or rejected yet).
        TransactionStatus[TransactionStatus["SENT"] = 1] = "SENT";
        // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be
        // removed when we get a chance to prune completed ones.
        TransactionStatus[TransactionStatus["COMPLETED"] = 2] = "COMPLETED";
        // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).
        // If it comes back as unsuccessful, we'll abort it.
        TransactionStatus[TransactionStatus["SENT_NEEDS_ABORT"] = 3] = "SENT_NEEDS_ABORT";
        // Temporary state used to mark transactions that need to be aborted.
        TransactionStatus[TransactionStatus["NEEDS_ABORT"] = 4] = "NEEDS_ABORT";
    })(TransactionStatus || (TransactionStatus = {}));
    /**
     * If a transaction does not succeed after 25 retries, we abort it.  Among other things this ensure that if there's
     * ever a bug causing a mismatch between client / server hashes for some data, we won't retry indefinitely.
     * @type {number}
     * @const
     * @private
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    Repo.MAX_TRANSACTION_RETRIES_ = 25;
    /**
     * Setup the transaction data structures
     * @private
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    Repo.prototype.transactionsInit_ = function () {
        /**
         * Stores queues of outstanding transactions for Firebase locations.
         *
         * @type {!Tree.<Array.<!Transaction>>}
         * @private
         */
        this.transactionQueueTree_ = new Tree();
    };
    /**
     * Creates a new transaction, adds it to the transactions we're tracking, and sends it to the server if possible.
     *
     * @param {!Path} path Path at which to do transaction.
     * @param {function(*):*} transactionUpdate Update callback.
     * @param {?function(?Error, boolean, ?DataSnapshot)} onComplete Completion callback.
     * @param {boolean} applyLocally Whether or not to make intermediate results visible
     */
    Repo.prototype.startTransaction = function (path, transactionUpdate, onComplete, applyLocally) {
        this.log_('transaction on ' + path);
        // Add a watch to make sure we get server updates.
        var valueCallback = function () { };
        var watchRef = new Reference(this, path);
        watchRef.on('value', valueCallback);
        var unwatcher = function () {
            watchRef.off('value', valueCallback);
        };
        // Initialize transaction.
        var transaction = {
            path: path,
            update: transactionUpdate,
            onComplete: onComplete,
            // One of TransactionStatus enums.
            status: null,
            // Used when combining transactions at different locations to figure out which one goes first.
            order: LUIDGenerator(),
            // Whether to raise local events for this transaction.
            applyLocally: applyLocally,
            // Count of how many times we've retried the transaction.
            retryCount: 0,
            // Function to call to clean up our .on() listener.
            unwatcher: unwatcher,
            // Stores why a transaction was aborted.
            abortReason: null,
            currentWriteId: null,
            currentInputSnapshot: null,
            currentOutputSnapshotRaw: null,
            currentOutputSnapshotResolved: null
        };
        // Run transaction initially.
        var currentState = this.getLatestState_(path);
        transaction.currentInputSnapshot = currentState;
        var newVal = transaction.update(currentState.val());
        if (newVal === undefined) {
            // Abort transaction.
            transaction.unwatcher();
            transaction.currentOutputSnapshotRaw = null;
            transaction.currentOutputSnapshotResolved = null;
            if (transaction.onComplete) {
                // We just set the input snapshot, so this cast should be safe
                var snapshot = new DataSnapshot(transaction.currentInputSnapshot, new Reference(this, transaction.path), PRIORITY_INDEX);
                transaction.onComplete(null, false, snapshot);
            }
        }
        else {
            validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);
            // Mark as run and add to our queue.
            transaction.status = TransactionStatus.RUN;
            var queueNode = this.transactionQueueTree_.subTree(path);
            var nodeQueue = queueNode.getValue() || [];
            nodeQueue.push(transaction);
            queueNode.setValue(nodeQueue);
            // Update visibleData and raise events
            // Note: We intentionally raise events after updating all of our transaction state, since the user could
            // start new transactions from the event callbacks.
            var priorityForNode = void 0;
            if (typeof newVal === 'object' &&
                newVal !== null &&
                index_cjs.contains(newVal, '.priority')) {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                priorityForNode = index_cjs.safeGet(newVal, '.priority');
                index_cjs.assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' +
                    'Priority must be a valid string, finite number, server value, or null.');
            }
            else {
                var currentNode = this.serverSyncTree_.calcCompleteEventCache(path) ||
                    ChildrenNode.EMPTY_NODE;
                priorityForNode = currentNode.getPriority().val();
            }
            priorityForNode /** @type {null|number|string} */ = priorityForNode;
            var serverValues = this.generateServerValues();
            var newNodeUnresolved = nodeFromJSON$1(newVal, priorityForNode);
            var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, currentState, serverValues);
            transaction.currentOutputSnapshotRaw = newNodeUnresolved;
            transaction.currentOutputSnapshotResolved = newNode;
            transaction.currentWriteId = this.getNextWriteId_();
            var events = this.serverSyncTree_.applyUserOverwrite(path, newNode, transaction.currentWriteId, transaction.applyLocally);
            this.eventQueue_.raiseEventsForChangedPath(path, events);
            this.sendReadyTransactions_();
        }
    };
    /**
     * @param {!Path} path
     * @param {Array.<number>=} excludeSets A specific set to exclude
     * @return {Node}
     * @private
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    Repo.prototype.getLatestState_ = function (path, excludeSets) {
        return (this.serverSyncTree_.calcCompleteEventCache(path, excludeSets) ||
            ChildrenNode.EMPTY_NODE);
    };
    /**
     * Sends any already-run transactions that aren't waiting for outstanding transactions to
     * complete.
     *
     * Externally it's called with no arguments, but it calls itself recursively with a particular
     * transactionQueueTree node to recurse through the tree.
     *
     * @param {Tree.<Array.<Transaction>>=} node  transactionQueueTree node to start at.
     * @private
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    Repo.prototype.sendReadyTransactions_ = function (node) {
        var _this = this;
        if (node === void 0) { node = this.transactionQueueTree_; }
        // Before recursing, make sure any completed transactions are removed.
        if (!node) {
            this.pruneCompletedTransactionsBelowNode_(node);
        }
        if (node.getValue() !== null) {
            var queue = this.buildTransactionQueue_(node);
            index_cjs.assert(queue.length > 0, 'Sending zero length transaction queue');
            var allRun = queue.every(function (transaction) { return transaction.status === TransactionStatus.RUN; });
            // If they're all run (and not sent), we can send them.  Else, we must wait.
            if (allRun) {
                this.sendTransactionQueue_(node.path(), queue);
            }
        }
        else if (node.hasChildren()) {
            node.forEachChild(function (childNode) {
                _this.sendReadyTransactions_(childNode);
            });
        }
    };
    /**
     * Given a list of run transactions, send them to the server and then handle the result (success or failure).
     *
     * @param {!Path} path The location of the queue.
     * @param {!Array.<Transaction>} queue Queue of transactions under the specified location.
     * @private
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    Repo.prototype.sendTransactionQueue_ = function (path, queue) {
        var _this = this;
        // Mark transactions as sent and increment retry count!
        var setsToIgnore = queue.map(function (txn) {
            return txn.currentWriteId;
        });
        var latestState = this.getLatestState_(path, setsToIgnore);
        var snapToSend = latestState;
        var latestHash = latestState.hash();
        for (var i = 0; i < queue.length; i++) {
            var txn = queue[i];
            index_cjs.assert(txn.status === TransactionStatus.RUN, 'tryToSendTransactionQueue_: items in queue should all be run.');
            txn.status = TransactionStatus.SENT;
            txn.retryCount++;
            var relativePath = Path.relativePath(path, txn.path);
            // If we've gotten to this point, the output snapshot must be defined.
            snapToSend = snapToSend.updateChild(relativePath /** @type {!Node} */, txn.currentOutputSnapshotRaw);
        }
        var dataToSend = snapToSend.val(true);
        var pathToSend = path;
        // Send the put.
        this.server_.put(pathToSend.toString(), dataToSend, function (status) {
            _this.log_('transaction put response', {
                path: pathToSend.toString(),
                status: status
            });
            var events = [];
            if (status === 'ok') {
                // Queue up the callbacks and fire them after cleaning up all of our transaction state, since
                // the callback could trigger more transactions or sets.
                var callbacks = [];
                for (var i = 0; i < queue.length; i++) {
                    queue[i].status = TransactionStatus.COMPLETED;
                    events = events.concat(_this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId));
                    if (queue[i].onComplete) {
                        // We never unset the output snapshot, and given that this transaction is complete, it should be set
                        var node = queue[i].currentOutputSnapshotResolved;
                        var ref = new Reference(_this, queue[i].path);
                        var snapshot = new DataSnapshot(node, ref, PRIORITY_INDEX);
                        callbacks.push(queue[i].onComplete.bind(null, null, true, snapshot));
                    }
                    queue[i].unwatcher();
                }
                // Now remove the completed transactions.
                _this.pruneCompletedTransactionsBelowNode_(_this.transactionQueueTree_.subTree(path));
                // There may be pending transactions that we can now send.
                _this.sendReadyTransactions_();
                _this.eventQueue_.raiseEventsForChangedPath(path, events);
                // Finally, trigger onComplete callbacks.
                for (var i = 0; i < callbacks.length; i++) {
                    exceptionGuard(callbacks[i]);
                }
            }
            else {
                // transactions are no longer sent.  Update their status appropriately.
                if (status === 'datastale') {
                    for (var i = 0; i < queue.length; i++) {
                        if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {
                            queue[i].status = TransactionStatus.NEEDS_ABORT;
                        }
                        else {
                            queue[i].status = TransactionStatus.RUN;
                        }
                    }
                }
                else {
                    warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);
                    for (var i = 0; i < queue.length; i++) {
                        queue[i].status = TransactionStatus.NEEDS_ABORT;
                        queue[i].abortReason = status;
                    }
                }
                _this.rerunTransactions_(path);
            }
        }, latestHash);
    };
    /**
     * Finds all transactions dependent on the data at changedPath and reruns them.
     *
     * Should be called any time cached data changes.
     *
     * Return the highest path that was affected by rerunning transactions.  This is the path at which events need to
     * be raised for.
     *
     * @param {!Path} changedPath The path in mergedData that changed.
     * @return {!Path} The rootmost path that was affected by rerunning transactions.
     * @private
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    Repo.prototype.rerunTransactions_ = function (changedPath) {
        var rootMostTransactionNode = this.getAncestorTransactionNode_(changedPath);
        var path = rootMostTransactionNode.path();
        var queue = this.buildTransactionQueue_(rootMostTransactionNode);
        this.rerunTransactionQueue_(queue, path);
        return path;
    };
    /**
     * Does all the work of rerunning transactions (as well as cleans up aborted transactions and whatnot).
     *
     * @param {Array.<Transaction>} queue The queue of transactions to run.
     * @param {!Path} path The path the queue is for.
     * @private
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    Repo.prototype.rerunTransactionQueue_ = function (queue, path) {
        if (queue.length === 0) {
            return; // Nothing to do!
        }
        // Queue up the callbacks and fire them after cleaning up all of our transaction state, since
        // the callback could trigger more transactions or sets.
        var callbacks = [];
        var events = [];
        // Ignore all of the sets we're going to re-run.
        var txnsToRerun = queue.filter(function (q) {
            return q.status === TransactionStatus.RUN;
        });
        var setsToIgnore = txnsToRerun.map(function (q) {
            return q.currentWriteId;
        });
        for (var i = 0; i < queue.length; i++) {
            var transaction = queue[i];
            var relativePath = Path.relativePath(path, transaction.path);
            var abortTransaction = false, abortReason = void 0;
            index_cjs.assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');
            if (transaction.status === TransactionStatus.NEEDS_ABORT) {
                abortTransaction = true;
                abortReason = transaction.abortReason;
                events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));
            }
            else if (transaction.status === TransactionStatus.RUN) {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                if (transaction.retryCount >= Repo.MAX_TRANSACTION_RETRIES_) {
                    abortTransaction = true;
                    abortReason = 'maxretry';
                    events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));
                }
                else {
                    // This code reruns a transaction
                    var currentNode = this.getLatestState_(transaction.path, setsToIgnore);
                    transaction.currentInputSnapshot = currentNode;
                    var newData = queue[i].update(currentNode.val());
                    if (newData !== undefined) {
                        validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);
                        var newDataNode = nodeFromJSON$1(newData);
                        var hasExplicitPriority = typeof newData === 'object' &&
                            newData != null &&
                            index_cjs.contains(newData, '.priority');
                        if (!hasExplicitPriority) {
                            // Keep the old priority if there wasn't a priority explicitly specified.
                            newDataNode = newDataNode.updatePriority(currentNode.getPriority());
                        }
                        var oldWriteId = transaction.currentWriteId;
                        var serverValues = this.generateServerValues();
                        var newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);
                        transaction.currentOutputSnapshotRaw = newDataNode;
                        transaction.currentOutputSnapshotResolved = newNodeResolved;
                        transaction.currentWriteId = this.getNextWriteId_();
                        // Mutates setsToIgnore in place
                        setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);
                        events = events.concat(this.serverSyncTree_.applyUserOverwrite(transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));
                        events = events.concat(this.serverSyncTree_.ackUserWrite(oldWriteId, true));
                    }
                    else {
                        abortTransaction = true;
                        abortReason = 'nodata';
                        events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));
                    }
                }
            }
            this.eventQueue_.raiseEventsForChangedPath(path, events);
            events = [];
            if (abortTransaction) {
                // Abort.
                queue[i].status = TransactionStatus.COMPLETED;
                // Removing a listener can trigger pruning which can muck with mergedData/visibleData (as it prunes data).
                // So defer the unwatcher until we're done.
                (function (unwatcher) {
                    setTimeout(unwatcher, Math.floor(0));
                })(queue[i].unwatcher);
                if (queue[i].onComplete) {
                    if (abortReason === 'nodata') {
                        var ref = new Reference(this, queue[i].path);
                        // We set this field immediately, so it's safe to cast to an actual snapshot
                        var lastInput /** @type {!Node} */ = queue[i].currentInputSnapshot;
                        var snapshot = new DataSnapshot(lastInput, ref, PRIORITY_INDEX);
                        callbacks.push(queue[i].onComplete.bind(null, null, false, snapshot));
                    }
                    else {
                        callbacks.push(queue[i].onComplete.bind(null, new Error(abortReason), false, null));
                    }
                }
            }
        }
        // Clean up completed transactions.
        this.pruneCompletedTransactionsBelowNode_(this.transactionQueueTree_);
        // Now fire callbacks, now that we're in a good, known state.
        for (var i = 0; i < callbacks.length; i++) {
            exceptionGuard(callbacks[i]);
        }
        // Try to send the transaction result to the server.
        this.sendReadyTransactions_();
    };
    /**
     * Returns the rootmost ancestor node of the specified path that has a pending transaction on it, or just returns
     * the node for the given path if there are no pending transactions on any ancestor.
     *
     * @param {!Path} path The location to start at.
     * @return {!Tree.<Array.<!Transaction>>} The rootmost node with a transaction.
     * @private
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    Repo.prototype.getAncestorTransactionNode_ = function (path) {
        var front;
        // Start at the root and walk deeper into the tree towards path until we find a node with pending transactions.
        var transactionNode = this.transactionQueueTree_;
        front = path.getFront();
        while (front !== null && transactionNode.getValue() === null) {
            transactionNode = transactionNode.subTree(front);
            path = path.popFront();
            front = path.getFront();
        }
        return transactionNode;
    };
    /**
     * Builds the queue of all transactions at or below the specified transactionNode.
     *
     * @param {!Tree.<Array.<Transaction>>} transactionNode
     * @return {Array.<Transaction>} The generated queue.
     * @private
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    Repo.prototype.buildTransactionQueue_ = function (transactionNode) {
        // Walk any child transaction queues and aggregate them into a single queue.
        var transactionQueue = [];
        this.aggregateTransactionQueuesForNode_(transactionNode, transactionQueue);
        // Sort them by the order the transactions were created.
        transactionQueue.sort(function (a, b) {
            return a.order - b.order;
        });
        return transactionQueue;
    };
    /**
     * @param {!Tree.<Array.<Transaction>>} node
     * @param {Array.<Transaction>} queue
     * @private
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    Repo.prototype.aggregateTransactionQueuesForNode_ = function (node, queue) {
        var _this = this;
        var nodeQueue = node.getValue();
        if (nodeQueue !== null) {
            for (var i = 0; i < nodeQueue.length; i++) {
                queue.push(nodeQueue[i]);
            }
        }
        node.forEachChild(function (child) {
            _this.aggregateTransactionQueuesForNode_(child, queue);
        });
    };
    /**
     * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.
     *
     * @param {!Tree.<Array.<!Transaction>>} node
     * @private
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    Repo.prototype.pruneCompletedTransactionsBelowNode_ = function (node) {
        var _this = this;
        var queue = node.getValue();
        if (queue) {
            var to = 0;
            for (var from = 0; from < queue.length; from++) {
                if (queue[from].status !== TransactionStatus.COMPLETED) {
                    queue[to] = queue[from];
                    to++;
                }
            }
            queue.length = to;
            node.setValue(queue.length > 0 ? queue : null);
        }
        node.forEachChild(function (childNode) {
            _this.pruneCompletedTransactionsBelowNode_(childNode);
        });
    };
    /**
     * Aborts all transactions on ancestors or descendants of the specified path.  Called when doing a set() or update()
     * since we consider them incompatible with transactions.
     *
     * @param {!Path} path Path for which we want to abort related transactions.
     * @return {!Path}
     * @private
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    Repo.prototype.abortTransactions_ = function (path) {
        var _this = this;
        var affectedPath = this.getAncestorTransactionNode_(path).path();
        var transactionNode = this.transactionQueueTree_.subTree(path);
        transactionNode.forEachAncestor(function (node) {
            _this.abortTransactionsOnNode_(node);
        });
        this.abortTransactionsOnNode_(transactionNode);
        transactionNode.forEachDescendant(function (node) {
            _this.abortTransactionsOnNode_(node);
        });
        return affectedPath;
    };
    /**
     * Abort transactions stored in this transaction queue node.
     *
     * @param {!Tree.<Array.<Transaction>>} node Node to abort transactions for.
     * @private
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    Repo.prototype.abortTransactionsOnNode_ = function (node) {
        var queue = node.getValue();
        if (queue !== null) {
            // Queue up the callbacks and fire them after cleaning up all of our transaction state, since
            // the callback could trigger more transactions or sets.
            var callbacks = [];
            // Go through queue.  Any already-sent transactions must be marked for abort, while the unsent ones
            // can be immediately aborted and removed.
            var events = [];
            var lastSent = -1;
            for (var i = 0; i < queue.length; i++) {
                if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) ;
                else if (queue[i].status === TransactionStatus.SENT) {
                    index_cjs.assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');
                    lastSent = i;
                    // Mark transaction for abort when it comes back.
                    queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;
                    queue[i].abortReason = 'set';
                }
                else {
                    index_cjs.assert(queue[i].status === TransactionStatus.RUN, 'Unexpected transaction status in abort');
                    // We can abort it immediately.
                    queue[i].unwatcher();
                    events = events.concat(this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId, true));
                    if (queue[i].onComplete) {
                        var snapshot = null;
                        callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, snapshot));
                    }
                }
            }
            if (lastSent === -1) {
                // We're not waiting for any sent transactions.  We can clear the queue.
                node.setValue(null);
            }
            else {
                // Remove the transactions we aborted.
                queue.length = lastSent + 1;
            }
            // Now fire the callbacks.
            this.eventQueue_.raiseEventsForChangedPath(node.path(), events);
            for (var i = 0; i < callbacks.length; i++) {
                exceptionGuard(callbacks[i]);
            }
        }
    };

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** @const {string} */
    var DATABASE_URL_OPTION = 'databaseURL';
    /**
     * This variable is also defined in the firebase node.js admin SDK. Before
     * modifying this definition, consult the definition in:
     *
     * https://github.com/firebase/firebase-admin-node
     *
     * and make sure the two are consistent.
     */
    var FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';
    var _staticInstance;
    /**
     * Creates and caches Repo instances.
     */
    var RepoManager = /** @class */ (function () {
        function RepoManager() {
            /**
             * @private {!Object.<string, Object<string, !fb.core.Repo>>}
             */
            this.repos_ = {};
            /**
             * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).
             * @private {boolean}
             */
            this.useRestClient_ = false;
        }
        RepoManager.getInstance = function () {
            if (!_staticInstance) {
                _staticInstance = new RepoManager();
            }
            return _staticInstance;
        };
        // TODO(koss): Remove these functions unless used in tests?
        RepoManager.prototype.interrupt = function () {
            var e_1, _a, e_2, _b;
            try {
                for (var _c = tslib_es6.__values(Object.keys(this.repos_)), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var appName = _d.value;
                    try {
                        for (var _e = (e_2 = void 0, tslib_es6.__values(Object.keys(this.repos_[appName]))), _f = _e.next(); !_f.done; _f = _e.next()) {
                            var dbUrl = _f.value;
                            this.repos_[appName][dbUrl].interrupt();
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_1) throw e_1.error; }
            }
        };
        RepoManager.prototype.resume = function () {
            var e_3, _a, e_4, _b;
            try {
                for (var _c = tslib_es6.__values(Object.keys(this.repos_)), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var appName = _d.value;
                    try {
                        for (var _e = (e_4 = void 0, tslib_es6.__values(Object.keys(this.repos_[appName]))), _f = _e.next(); !_f.done; _f = _e.next()) {
                            var dbUrl = _f.value;
                            this.repos_[appName][dbUrl].resume();
                        }
                    }
                    catch (e_4_1) { e_4 = { error: e_4_1 }; }
                    finally {
                        try {
                            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                        }
                        finally { if (e_4) throw e_4.error; }
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_3) throw e_3.error; }
            }
        };
        /**
         * This function should only ever be called to CREATE a new database instance.
         *
         * @param {!FirebaseApp} app
         * @return {!Database}
         */
        RepoManager.prototype.databaseFromApp = function (app, authProvider, url) {
            var dbUrl = url || app.options[DATABASE_URL_OPTION];
            if (dbUrl === undefined) {
                fatal("Can't determine Firebase Database URL.  Be sure to include " +
                    DATABASE_URL_OPTION +
                    ' option when calling firebase.initializeApp().');
            }
            var parsedUrl = parseRepoInfo(dbUrl);
            var repoInfo = parsedUrl.repoInfo;
            var dbEmulatorHost = undefined;
            if (typeof process !== 'undefined') {
                dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];
            }
            if (dbEmulatorHost) {
                dbUrl = "http://" + dbEmulatorHost + "?ns=" + repoInfo.namespace;
                parsedUrl = parseRepoInfo(dbUrl);
                repoInfo = parsedUrl.repoInfo;
            }
            validateUrl('Invalid Firebase Database URL', 1, parsedUrl);
            if (!parsedUrl.path.isEmpty()) {
                fatal('Database URL must point to the root of a Firebase Database ' +
                    '(not including a child path).');
            }
            var repo = this.createRepo(repoInfo, app, authProvider);
            return repo.database;
        };
        /**
         * Remove the repo and make sure it is disconnected.
         *
         * @param {!Repo} repo
         */
        RepoManager.prototype.deleteRepo = function (repo) {
            var appRepos = index_cjs.safeGet(this.repos_, repo.app.name);
            // This should never happen...
            if (!appRepos || index_cjs.safeGet(appRepos, repo.repoInfo_.toURLString()) !== repo) {
                fatal("Database " + repo.app.name + "(" + repo.repoInfo_ + ") has already been deleted.");
            }
            repo.interrupt();
            delete appRepos[repo.repoInfo_.toURLString()];
        };
        /**
         * Ensures a repo doesn't already exist and then creates one using the
         * provided app.
         *
         * @param {!RepoInfo} repoInfo The metadata about the Repo
         * @param {!FirebaseApp} app
         * @return {!Repo} The Repo object for the specified server / repoName.
         */
        RepoManager.prototype.createRepo = function (repoInfo, app, authProvider) {
            var appRepos = index_cjs.safeGet(this.repos_, app.name);
            if (!appRepos) {
                appRepos = {};
                this.repos_[app.name] = appRepos;
            }
            var repo = index_cjs.safeGet(appRepos, repoInfo.toURLString());
            if (repo) {
                fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');
            }
            repo = new Repo(repoInfo, this.useRestClient_, app, authProvider);
            appRepos[repoInfo.toURLString()] = repo;
            return repo;
        };
        /**
         * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.
         * @param {boolean} forceRestClient
         */
        RepoManager.prototype.forceRestClient = function (forceRestClient) {
            this.useRestClient_ = forceRestClient;
        };
        return RepoManager;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Class representing a firebase database.
     * @implements {FirebaseService}
     */
    var Database = /** @class */ (function () {
        /**
         * The constructor should not be called by users of our public API.
         * @param {!Repo} repo_
         */
        function Database(repo_) {
            this.repo_ = repo_;
            if (!(repo_ instanceof Repo)) {
                fatal("Don't call new Database() directly - please use firebase.database().");
            }
            /** @type {Reference} */
            this.root_ = new Reference(repo_, Path.Empty);
            this.INTERNAL = new DatabaseInternals(this);
        }
        Object.defineProperty(Database.prototype, "app", {
            get: function () {
                return this.repo_.app;
            },
            enumerable: true,
            configurable: true
        });
        Database.prototype.ref = function (path) {
            this.checkDeleted_('ref');
            index_cjs.validateArgCount('database.ref', 0, 1, arguments.length);
            if (path instanceof Reference) {
                return this.refFromURL(path.toString());
            }
            return path !== undefined ? this.root_.child(path) : this.root_;
        };
        /**
         * Returns a reference to the root or the path specified in url.
         * We throw a exception if the url is not in the same domain as the
         * current repo.
         * @param {string} url
         * @return {!Reference} Firebase reference.
         */
        Database.prototype.refFromURL = function (url) {
            /** @const {string} */
            var apiName = 'database.refFromURL';
            this.checkDeleted_(apiName);
            index_cjs.validateArgCount(apiName, 1, 1, arguments.length);
            var parsedURL = parseRepoInfo(url);
            validateUrl(apiName, 1, parsedURL);
            var repoInfo = parsedURL.repoInfo;
            if (repoInfo.host !== this.repo_.repoInfo_.host) {
                fatal(apiName +
                    ': Host name does not match the current database: ' +
                    '(found ' +
                    repoInfo.host +
                    ' but expected ' +
                    this.repo_.repoInfo_.host +
                    ')');
            }
            return this.ref(parsedURL.path.toString());
        };
        /**
         * @param {string} apiName
         */
        Database.prototype.checkDeleted_ = function (apiName) {
            if (this.repo_ === null) {
                fatal('Cannot call ' + apiName + ' on a deleted database.');
            }
        };
        // Make individual repo go offline.
        Database.prototype.goOffline = function () {
            index_cjs.validateArgCount('database.goOffline', 0, 0, arguments.length);
            this.checkDeleted_('goOffline');
            this.repo_.interrupt();
        };
        Database.prototype.goOnline = function () {
            index_cjs.validateArgCount('database.goOnline', 0, 0, arguments.length);
            this.checkDeleted_('goOnline');
            this.repo_.resume();
        };
        Database.ServerValue = {
            TIMESTAMP: {
                '.sv': 'timestamp'
            },
            increment: function (delta) {
                return {
                    '.sv': {
                        'increment': delta
                    }
                };
            }
        };
        return Database;
    }());
    var DatabaseInternals = /** @class */ (function () {
        /** @param {!Database} database */
        function DatabaseInternals(database) {
            this.database = database;
        }
        /** @return {Promise<void>} */
        DatabaseInternals.prototype.delete = function () {
            return tslib_es6.__awaiter(this, void 0, void 0, function () {
                return tslib_es6.__generator(this, function (_a) {
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    this.database.checkDeleted_('delete');
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    RepoManager.getInstance().deleteRepo(this.database.repo_);
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    this.database.repo_ = null;
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    this.database.root_ = null;
                    this.database.INTERNAL = null;
                    this.database = null;
                    return [2 /*return*/];
                });
            });
        };
        return DatabaseInternals;
    }());

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * INTERNAL methods for internal-use only (tests, etc.).
     *
     * Customers shouldn't use these or else should be aware that they could break at any time.
     *
     * @const
     */
    var forceLongPolling = function () {
        WebSocketConnection.forceDisallow();
        BrowserPollConnection.forceAllow();
    };
    var forceWebSockets = function () {
        BrowserPollConnection.forceDisallow();
    };
    /* Used by App Manager */
    var isWebSocketsAvailable = function () {
        return WebSocketConnection['isAvailable']();
    };
    var setSecurityDebugCallback = function (ref, callback) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        ref.repo.persistentConnection_.securityDebugCallback_ = callback;
    };
    var stats = function (ref, showDelta) {
        ref.repo.stats(showDelta);
    };
    var statsIncrementCounter = function (ref, metric) {
        ref.repo.statsIncrementCounter(metric);
    };
    var dataUpdateCount = function (ref) {
        return ref.repo.dataUpdateCount;
    };
    var interceptServerData = function (ref, callback) {
        return ref.repo.interceptServerData_(callback);
    };

    var INTERNAL = /*#__PURE__*/Object.freeze({
      __proto__: null,
      forceLongPolling: forceLongPolling,
      forceWebSockets: forceWebSockets,
      isWebSocketsAvailable: isWebSocketsAvailable,
      setSecurityDebugCallback: setSecurityDebugCallback,
      stats: stats,
      statsIncrementCounter: statsIncrementCounter,
      dataUpdateCount: dataUpdateCount,
      interceptServerData: interceptServerData
    });

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var DataConnection = PersistentConnection;
    /**
     * @param {!string} pathString
     * @param {function(*)} onComplete
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    PersistentConnection.prototype.simpleListen = function (pathString, onComplete) {
        this.sendRequest('q', { p: pathString }, onComplete);
    };
    /**
     * @param {*} data
     * @param {function(*)} onEcho
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    PersistentConnection.prototype.echo = function (data, onEcho) {
        this.sendRequest('echo', { d: data }, onEcho);
    };
    // RealTimeConnection properties that we use in tests.
    var RealTimeConnection = Connection;
    /**
     * @param {function(): string} newHash
     * @return {function()}
     */
    var hijackHash = function (newHash) {
        var oldPut = PersistentConnection.prototype.put;
        PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {
            if (hash !== undefined) {
                hash = newHash();
            }
            oldPut.call(this, pathString, data, onComplete, hash);
        };
        return function () {
            PersistentConnection.prototype.put = oldPut;
        };
    };
    /**
     * @type {function(new:RepoInfo, !string, boolean, !string, boolean): undefined}
     */
    var ConnectionTarget = RepoInfo;
    /**
     * @param {!Query} query
     * @return {!string}
     */
    var queryIdentifier = function (query) {
        return query.queryIdentifier();
    };
    /**
     * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.
     *
     * @param {boolean} forceRestClient
     */
    var forceRestClient = function (forceRestClient) {
        RepoManager.getInstance().forceRestClient(forceRestClient);
    };

    var TEST_ACCESS = /*#__PURE__*/Object.freeze({
      __proto__: null,
      DataConnection: DataConnection,
      RealTimeConnection: RealTimeConnection,
      hijackHash: hijackHash,
      ConnectionTarget: ConnectionTarget,
      queryIdentifier: queryIdentifier,
      forceRestClient: forceRestClient
    });

    var name = "@firebase/database";
    var version = "0.6.1";

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ServerValue = Database.ServerValue;
    function registerDatabase(instance) {
        // set SDK_VERSION
        setSDKVersion(instance.SDK_VERSION);
        // Register the Database Service with the 'firebase' namespace.
        var namespace = instance.INTERNAL.registerComponent(new index_cjs$1.Component('database', function (container, url) {
            /* Dependencies */
            // getImmediate for FirebaseApp will always succeed
            var app = container.getProvider('app').getImmediate();
            var authProvider = container.getProvider('auth-internal');
            return RepoManager.getInstance().databaseFromApp(app, authProvider, url);
        }, "PUBLIC" /* PUBLIC */)
            .setServiceProps(
        // firebase.database namespace properties
        {
            Reference: Reference,
            Query: Query,
            Database: Database,
            DataSnapshot: DataSnapshot,
            enableLogging: enableLogging,
            INTERNAL: INTERNAL,
            ServerValue: ServerValue,
            TEST_ACCESS: TEST_ACCESS
        })
            .setMultipleInstances(true));
        instance.registerVersion(name, version);
        if (index_cjs.isNodeSdk()) {
            module.exports = namespace;
        }
    }
    registerDatabase(firebase);

    exports.DataSnapshot = DataSnapshot;
    exports.Database = Database;
    exports.OnDisconnect = OnDisconnect;
    exports.Query = Query;
    exports.Reference = Reference;
    exports.ServerValue = ServerValue;
    exports.enableLogging = enableLogging;
    exports.registerDatabase = registerDatabase;
    //# sourceMappingURL=index.cjs.js.map
    });

    unwrapExports(index_cjs$4);
    var index_cjs_1$3 = index_cjs$4.DataSnapshot;
    var index_cjs_2$2 = index_cjs$4.Database;
    var index_cjs_3$2 = index_cjs$4.OnDisconnect;
    var index_cjs_4$1 = index_cjs$4.Query;
    var index_cjs_5$1 = index_cjs$4.Reference;
    var index_cjs_6$1 = index_cjs$4.ServerValue;
    var index_cjs_7$1 = index_cjs$4.enableLogging;
    var index_cjs_8$1 = index_cjs$4.registerDatabase;

    // import 'firebase/firestore'

    const firebaseConfig = {
        apiKey: "AIzaSyC2P-ZDsyBysZKLfWahI-UmCWDOcDd1T0I",
        authDomain: "wiki-city-dee92.firebaseapp.com",
        databaseURL: "https://wiki-city-dee92.firebaseio.com",
        projectId: "wiki-city-dee92",
        storageBucket: "wiki-city-dee92.appspot.com",
        messagingSenderId: "41984408323",
        appId: "1:41984408323:web:8da287276e9bc876c98736"
      };

    const app = index_cjs$3.initializeApp(firebaseConfig);
    const db = app.database();

    /* node_modules/svelte-spinner/src/index.svelte generated by Svelte v3.21.0 */

    const file$9 = "node_modules/svelte-spinner/src/index.svelte";

    function create_fragment$i(ctx) {
    	let svg;
    	let circle;
    	let circle_stroke_dasharray_value;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			circle = svg_element("circle");
    			attr_dev(circle, "role", "presentation");
    			attr_dev(circle, "cx", "16");
    			attr_dev(circle, "cy", "16");
    			attr_dev(circle, "r", /*radius*/ ctx[4]);
    			attr_dev(circle, "stroke", /*color*/ ctx[2]);
    			attr_dev(circle, "fill", "none");
    			attr_dev(circle, "stroke-width", /*thickness*/ ctx[3]);
    			attr_dev(circle, "stroke-dasharray", circle_stroke_dasharray_value = "" + (/*dash*/ ctx[5] + ",100"));
    			attr_dev(circle, "stroke-linecap", "round");
    			add_location(circle, file$9, 19, 2, 384);
    			attr_dev(svg, "height", /*size*/ ctx[0]);
    			attr_dev(svg, "width", /*size*/ ctx[0]);
    			set_style(svg, "animation-duration", /*speed*/ ctx[1] + "ms");
    			attr_dev(svg, "class", "svelte-spinner svelte-1bbsd2f");
    			attr_dev(svg, "viewBox", "0 0 32 32");
    			add_location(svg, file$9, 12, 0, 253);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, circle);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*radius*/ 16) {
    				attr_dev(circle, "r", /*radius*/ ctx[4]);
    			}

    			if (dirty & /*color*/ 4) {
    				attr_dev(circle, "stroke", /*color*/ ctx[2]);
    			}

    			if (dirty & /*thickness*/ 8) {
    				attr_dev(circle, "stroke-width", /*thickness*/ ctx[3]);
    			}

    			if (dirty & /*dash*/ 32 && circle_stroke_dasharray_value !== (circle_stroke_dasharray_value = "" + (/*dash*/ ctx[5] + ",100"))) {
    				attr_dev(circle, "stroke-dasharray", circle_stroke_dasharray_value);
    			}

    			if (dirty & /*size*/ 1) {
    				attr_dev(svg, "height", /*size*/ ctx[0]);
    			}

    			if (dirty & /*size*/ 1) {
    				attr_dev(svg, "width", /*size*/ ctx[0]);
    			}

    			if (dirty & /*speed*/ 2) {
    				set_style(svg, "animation-duration", /*speed*/ ctx[1] + "ms");
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$i.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$i($$self, $$props, $$invalidate) {
    	let { size = 25 } = $$props;
    	let { speed = 750 } = $$props;
    	let { color = "rgba(0,0,0,0.4)" } = $$props;
    	let { thickness = 2 } = $$props;
    	let { gap = 40 } = $$props;
    	let { radius = 10 } = $$props;
    	let dash;
    	const writable_props = ["size", "speed", "color", "thickness", "gap", "radius"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Src> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Src", $$slots, []);

    	$$self.$set = $$props => {
    		if ("size" in $$props) $$invalidate(0, size = $$props.size);
    		if ("speed" in $$props) $$invalidate(1, speed = $$props.speed);
    		if ("color" in $$props) $$invalidate(2, color = $$props.color);
    		if ("thickness" in $$props) $$invalidate(3, thickness = $$props.thickness);
    		if ("gap" in $$props) $$invalidate(6, gap = $$props.gap);
    		if ("radius" in $$props) $$invalidate(4, radius = $$props.radius);
    	};

    	$$self.$capture_state = () => ({
    		size,
    		speed,
    		color,
    		thickness,
    		gap,
    		radius,
    		dash
    	});

    	$$self.$inject_state = $$props => {
    		if ("size" in $$props) $$invalidate(0, size = $$props.size);
    		if ("speed" in $$props) $$invalidate(1, speed = $$props.speed);
    		if ("color" in $$props) $$invalidate(2, color = $$props.color);
    		if ("thickness" in $$props) $$invalidate(3, thickness = $$props.thickness);
    		if ("gap" in $$props) $$invalidate(6, gap = $$props.gap);
    		if ("radius" in $$props) $$invalidate(4, radius = $$props.radius);
    		if ("dash" in $$props) $$invalidate(5, dash = $$props.dash);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*radius, gap*/ 80) {
    			 $$invalidate(5, dash = 2 * Math.PI * radius * (100 - gap) / 100);
    		}
    	};

    	return [size, speed, color, thickness, radius, dash, gap];
    }

    class Src extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$i, create_fragment$i, safe_not_equal, {
    			size: 0,
    			speed: 1,
    			color: 2,
    			thickness: 3,
    			gap: 6,
    			radius: 4
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Src",
    			options,
    			id: create_fragment$i.name
    		});
    	}

    	get size() {
    		throw new Error("<Src>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set size(value) {
    		throw new Error("<Src>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get speed() {
    		throw new Error("<Src>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set speed(value) {
    		throw new Error("<Src>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error("<Src>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<Src>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get thickness() {
    		throw new Error("<Src>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set thickness(value) {
    		throw new Error("<Src>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get gap() {
    		throw new Error("<Src>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set gap(value) {
    		throw new Error("<Src>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get radius() {
    		throw new Error("<Src>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set radius(value) {
    		throw new Error("<Src>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/page/component/TextView.svelte generated by Svelte v3.21.0 */

    const { Object: Object_1$1 } = globals;
    const file$a = "src/page/component/TextView.svelte";

    function get_each_context$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[8] = list[i];
    	return child_ctx;
    }

    // (1:0) <script>   "use strict";   import DataContainer from "@snlab/florence-datacontainer";   import { clickHexIdWrite, clickWordWrite }
    function create_catch_block(ctx) {
    	const block = { c: noop, m: noop, p: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_catch_block.name,
    		type: "catch",
    		source: "(1:0) <script>   \\\"use strict\\\";   import DataContainer from \\\"@snlab/florence-datacontainer\\\";   import { clickHexIdWrite, clickWordWrite }",
    		ctx
    	});

    	return block;
    }

    // (39:2) {:then value}
    function create_then_block(ctx) {
    	let each_1_anchor;
    	let each_value = Object.entries(/*value*/ ctx[7]);
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*articleText, Object, res*/ 6) {
    				each_value = Object.entries(/*value*/ ctx[7]);
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$2(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$2(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_then_block.name,
    		type: "then",
    		source: "(39:2) {:then value}",
    		ctx
    	});

    	return block;
    }

    // (40:4) {#each Object.entries(value) as item}
    function create_each_block$2(ctx) {
    	let button;
    	let t0_value = /*item*/ ctx[8][1].title + "";
    	let t0;
    	let t1;
    	let dispose;

    	function click_handler(...args) {
    		return /*click_handler*/ ctx[6](/*item*/ ctx[8], ...args);
    	}

    	const block = {
    		c: function create() {
    			button = element("button");
    			t0 = text(t0_value);
    			t1 = space();
    			attr_dev(button, "class", "badge svelte-vrxo");
    			add_location(button, file$a, 40, 6, 1011);
    		},
    		m: function mount(target, anchor, remount) {
    			insert_dev(target, button, anchor);
    			append_dev(button, t0);
    			append_dev(button, t1);
    			if (remount) dispose();
    			dispose = listen_dev(button, "click", click_handler, false, false, false);
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*res*/ 2 && t0_value !== (t0_value = /*item*/ ctx[8][1].title + "")) set_data_dev(t0, t0_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$2.name,
    		type: "each",
    		source: "(40:4) {#each Object.entries(value) as item}",
    		ctx
    	});

    	return block;
    }

    // (37:14)      <p>loading ...</p>   {:then value}
    function create_pending_block(ctx) {
    	let p;

    	const block = {
    		c: function create() {
    			p = element("p");
    			p.textContent = "loading ...";
    			add_location(p, file$a, 37, 4, 928);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_pending_block.name,
    		type: "pending",
    		source: "(37:14)      <p>loading ...</p>   {:then value}",
    		ctx
    	});

    	return block;
    }

    // (47:2) {#if articleText !== ''}
    function create_if_block$7(ctx) {
    	let current;

    	const textdemo = new Textdemo({
    			props: {
    				text: /*articleText*/ ctx[2],
    				token: /*clickWord*/ ctx[0]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(textdemo.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(textdemo, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const textdemo_changes = {};
    			if (dirty & /*articleText*/ 4) textdemo_changes.text = /*articleText*/ ctx[2];
    			if (dirty & /*clickWord*/ 1) textdemo_changes.token = /*clickWord*/ ctx[0];
    			textdemo.$set(textdemo_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(textdemo.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(textdemo.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(textdemo, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$7.name,
    		type: "if",
    		source: "(47:2) {#if articleText !== ''}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$j(ctx) {
    	let div;
    	let promise;
    	let t;
    	let current;

    	let info = {
    		ctx,
    		current: null,
    		token: null,
    		pending: create_pending_block,
    		then: create_then_block,
    		catch: create_catch_block,
    		value: 7
    	};

    	handle_promise(promise = /*res*/ ctx[1], info);
    	let if_block = /*articleText*/ ctx[2] !== "" && create_if_block$7(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			info.block.c();
    			t = space();
    			if (if_block) if_block.c();
    			attr_dev(div, "class", "card svelte-vrxo");
    			add_location(div, file$a, 35, 0, 890);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			info.block.m(div, info.anchor = null);
    			info.mount = () => div;
    			info.anchor = t;
    			append_dev(div, t);
    			if (if_block) if_block.m(div, null);
    			current = true;
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;
    			info.ctx = ctx;

    			if (dirty & /*res*/ 2 && promise !== (promise = /*res*/ ctx[1]) && handle_promise(promise, info)) ; else {
    				const child_ctx = ctx.slice();
    				child_ctx[7] = info.resolved;
    				info.block.p(child_ctx, dirty);
    			}

    			if (/*articleText*/ ctx[2] !== "") {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*articleText*/ 4) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$7(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			info.block.d();
    			info.token = null;
    			info = null;
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$j.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$j($$self, $$props, $$invalidate) {
    	let selectedHexId = null;
    	clickHexIdWrite.subscribe(value => $$invalidate(3, selectedHexId = value));
    	let clickWord = null;
    	clickWordWrite.subscribe(value => $$invalidate(0, clickWord = value));

    	// filter data by selectedHex Id
    	let articles = [];

    	const requestFirebase = async hexToCheck => {
    		const data = await db.ref().orderByChild("hex_id").equalTo(Number(hexToCheck)).once("value");
    		return data.val();
    	};

    	let res = {};
    	let articleText = "";
    	const writable_props = [];

    	Object_1$1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<TextView> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("TextView", $$slots, []);
    	const click_handler = item => $$invalidate(2, articleText = item[1].text);

    	$$self.$capture_state = () => ({
    		DataContainer: florenceDatacontainer_umd,
    		clickHexIdWrite,
    		clickWordWrite,
    		SvelteTooltip,
    		Textdemo,
    		db,
    		Spinner: Src,
    		selectedHexId,
    		clickWord,
    		articles,
    		requestFirebase,
    		res,
    		articleText
    	});

    	$$self.$inject_state = $$props => {
    		if ("selectedHexId" in $$props) $$invalidate(3, selectedHexId = $$props.selectedHexId);
    		if ("clickWord" in $$props) $$invalidate(0, clickWord = $$props.clickWord);
    		if ("articles" in $$props) articles = $$props.articles;
    		if ("res" in $$props) $$invalidate(1, res = $$props.res);
    		if ("articleText" in $$props) $$invalidate(2, articleText = $$props.articleText);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*selectedHexId*/ 8) {
    			 {
    				if (selectedHexId) {
    					$$invalidate(1, res = requestFirebase(selectedHexId));
    				}
    			}
    		}
    	};

    	return [
    		clickWord,
    		res,
    		articleText,
    		selectedHexId,
    		articles,
    		requestFirebase,
    		click_handler
    	];
    }

    class TextView extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$j, create_fragment$j, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TextView",
    			options,
    			id: create_fragment$j.name
    		});
    	}
    }

    /* src/page/Home.svelte generated by Svelte v3.21.0 */
    const file$b = "src/page/Home.svelte";

    function create_fragment$k(ctx) {
    	let div4;
    	let div2;
    	let div0;
    	let t0;
    	let div1;
    	let t1;
    	let div3;
    	let current;
    	const sgmap = new SGMap({ $$inline: true });
    	const beeswarm = new Beeswarm({ $$inline: true });
    	const textview = new TextView({ $$inline: true });

    	const block = {
    		c: function create() {
    			div4 = element("div");
    			div2 = element("div");
    			div0 = element("div");
    			create_component(sgmap.$$.fragment);
    			t0 = space();
    			div1 = element("div");
    			create_component(beeswarm.$$.fragment);
    			t1 = space();
    			div3 = element("div");
    			create_component(textview.$$.fragment);
    			attr_dev(div0, "class", " svelte-o9zylf");
    			add_location(div0, file$b, 8, 4, 227);
    			attr_dev(div1, "class", " svelte-o9zylf");
    			add_location(div1, file$b, 12, 4, 274);
    			attr_dev(div2, "class", "grid-2 svelte-o9zylf");
    			add_location(div2, file$b, 7, 2, 202);
    			attr_dev(div3, "class", "svelte-o9zylf");
    			add_location(div3, file$b, 17, 2, 331);
    			attr_dev(div4, "class", "container svelte-o9zylf");
    			add_location(div4, file$b, 6, 0, 176);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div4, anchor);
    			append_dev(div4, div2);
    			append_dev(div2, div0);
    			mount_component(sgmap, div0, null);
    			append_dev(div2, t0);
    			append_dev(div2, div1);
    			mount_component(beeswarm, div1, null);
    			append_dev(div4, t1);
    			append_dev(div4, div3);
    			mount_component(textview, div3, null);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(sgmap.$$.fragment, local);
    			transition_in(beeswarm.$$.fragment, local);
    			transition_in(textview.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(sgmap.$$.fragment, local);
    			transition_out(beeswarm.$$.fragment, local);
    			transition_out(textview.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div4);
    			destroy_component(sgmap);
    			destroy_component(beeswarm);
    			destroy_component(textview);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$k.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$k($$self, $$props, $$invalidate) {
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Home> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Home", $$slots, []);
    	$$self.$capture_state = () => ({ SGMap, Beeswarm, TextView });
    	return [];
    }

    class Home extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$k, create_fragment$k, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Home",
    			options,
    			id: create_fragment$k.name
    		});
    	}
    }

    /* src/page/About.svelte generated by Svelte v3.21.0 */

    const file$c = "src/page/About.svelte";

    function create_fragment$l(ctx) {
    	let h1;

    	const block = {
    		c: function create() {
    			h1 = element("h1");
    			h1.textContent = "About";
    			attr_dev(h1, "class", "svelte-afoak4");
    			add_location(h1, file$c, 4, 0, 21);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h1, anchor);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$l.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$l($$self, $$props) {
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<About> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("About", $$slots, []);
    	return [];
    }

    class About extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$l, create_fragment$l, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "About",
    			options,
    			id: create_fragment$l.name
    		});
    	}
    }

    const TOPIC_HEX = {
    "type": "FeatureCollection",
    "name": "topic_hex",
    "crs": { "type": "name", "properties": { "name": "urn:ogc:def:crs:OGC:1.3:CRS84" } },
    "features": [
    { "type": "Feature", "properties": { "hex_id": "5", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.610196064218115, 1.208293897242272 ], [ 103.6057033129823, 1.210904179537685 ], [ 103.605702876505561, 1.216125494147579 ], [ 103.610195208492982, 1.218736529704437 ], [ 103.614687971106434, 1.216126241657341 ], [ 103.6146883903548, 1.210904923837168 ], [ 103.610196064218115, 1.208293897242272 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "35", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.6281601463144, 1.286615138580641 ], [ 103.623667261077657, 1.289225429983651 ], [ 103.623666833090411, 1.294446747749924 ], [ 103.628159308681205, 1.297057777097201 ], [ 103.632652205629896, 1.294447479338296 ], [ 103.632652615275816, 1.28922615862011 ], [ 103.6281601463144, 1.286615138580641 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "55", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.637141838574735, 1.333607742267251 ], [ 103.632648868805518, 1.336218037236587 ], [ 103.632648444245092, 1.341439355979916 ], [ 103.637141008463018, 1.344050382608753 ], [ 103.641633990167037, 1.341440080933909 ], [ 103.641634395718313, 1.336218759367838 ], [ 103.637141838574735, 1.333607742267251 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "65", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.641635202071782, 1.32577611556787 ], [ 103.637142251200416, 1.328386421762361 ], [ 103.637141838574735, 1.333607742267251 ], [ 103.641634395718313, 1.336218759367838 ], [ 103.646127358413182, 1.333608446482995 ], [ 103.646127752140956, 1.32838712322002 ], [ 103.641635202071782, 1.32577611556787 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "75", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.64612853495882, 1.317944476030176 ], [ 103.641635602874018, 1.320554793335714 ], [ 103.641635202071782, 1.32577611556787 ], [ 103.646127752140956, 1.32838712322002 ], [ 103.650620695937903, 1.325776799239287 ], [ 103.650621077953545, 1.320555474313701 ], [ 103.64612853495882, 1.317944476030176 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "80", "topic": "topic3" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.650627341387235, 1.231792917586564 ], [ 103.646134574905787, 1.234403267438327 ], [ 103.646134209001985, 1.239624594556716 ], [ 103.650626627142046, 1.242235574484065 ], [ 103.655119404667531, 1.239625218447172 ], [ 103.65511975300889, 1.23440388870016 ], [ 103.650627341387235, 1.231792917586564 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "112", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.664101564858683, 1.28661779246425 ], [ 103.659608706807447, 1.289228153072924 ], [ 103.659608352185771, 1.294449481871208 ], [ 103.664100873956841, 1.297060452527736 ], [ 103.66859374327494, 1.294450085304503 ], [ 103.668594079555106, 1.289228754071403 ], [ 103.664101564858683, 1.28661779246425 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "114", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.664099475383949, 1.317945770051599 ], [ 103.659606557559428, 1.320556122606495 ], [ 103.659606194330436, 1.325777450096232 ], [ 103.664098767712673, 1.328388427498051 ], [ 103.668591697026784, 1.325778068138627 ], [ 103.668592041469068, 1.320556738214015 ], [ 103.664099475383949, 1.317945770051599 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "127", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.668591697026784, 1.325778068138627 ], [ 103.664098767712673, 1.328388427498051 ], [ 103.66409841178077, 1.333609755889361 ], [ 103.668591004060985, 1.336220727323599 ], [ 103.673083944864743, 1.333610361079821 ], [ 103.673084281898625, 1.328389030318261 ], [ 103.668591697026784, 1.325778068138627 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "153", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.677577203804333, 1.325778653366394 ], [ 103.673084281898625, 1.328389030318261 ], [ 103.673083944864743, 1.333610361079821 ], [ 103.677576548634605, 1.336221317162585 ], [ 103.682069481918674, 1.333610933261699 ], [ 103.682069800054506, 1.32838960025917 ], [ 103.677577203804333, 1.325778653366394 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "154", "topic": "topic4" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.677576219120397, 1.341442648726828 ], [ 103.673083266826964, 1.344053021934786 ], [ 103.673082925823067, 1.349274352026451 ], [ 103.677575556233236, 1.351885311183258 ], [ 103.682068520016372, 1.349274930931293 ], [ 103.682068841899621, 1.344053598598631 ], [ 103.677576219120397, 1.341442648726828 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "167", "topic": "topic4" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.682069481918674, 1.333610933261699 ], [ 103.677576548634605, 1.336221317162585 ], [ 103.677576219120397, 1.341442648726828 ], [ 103.682068841899621, 1.344053598598631 ], [ 103.686561786562081, 1.3414432076689 ], [ 103.686562097066926, 1.336221873928314 ], [ 103.682069481918674, 1.333610933261699 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "173", "topic": "topic1" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.682063541860572, 1.427594888430433 ], [ 103.677570420572181, 1.430205250378441 ], [ 103.67757006790346, 1.435426577782438 ], [ 103.682062856868242, 1.438037545447041 ], [ 103.68655599020326, 1.435427175900233 ], [ 103.686556322526855, 1.430205846319728 ], [ 103.682063541860572, 1.427594888430433 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "183", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.68655989807975, 1.372771205383847 ], [ 103.682066891862434, 1.37538158920176 ], [ 103.68206656248401, 1.380602920171194 ], [ 103.686559258888806, 1.383213869466587 ], [ 103.691052276707296, 1.38060347835002 ], [ 103.691052586519788, 1.375382145268818 ], [ 103.68655989807975, 1.372771205383847 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "193", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.691055022719979, 1.333611472434924 ], [ 103.686562097066926, 1.336221873928314 ], [ 103.686561786562081, 1.3414432076689 ], [ 103.691054420719723, 1.344054141995262 ], [ 103.695547357639896, 1.341443733408364 ], [ 103.695547649135321, 1.336222397620715 ], [ 103.691055022719979, 1.333611472434924 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "194", "topic": "topic4" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.691054117957179, 1.349275476439641 ], [ 103.686561161916273, 1.351885874478043 ], [ 103.686560847775283, 1.35710720754486 ], [ 103.691053508907189, 1.359718144652465 ], [ 103.695546476326555, 1.357107739425563 ], [ 103.695546771235527, 1.351886404311659 ], [ 103.691054117957179, 1.349275476439641 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "196", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.691052276707296, 1.38060347835002 ], [ 103.686559258888806, 1.383213869466587 ], [ 103.686558937475141, 1.388435201162371 ], [ 103.691051653557196, 1.39104614382083 ], [ 103.695544682976887, 1.388435745325779 ], [ 103.695544984713294, 1.383214411582857 ], [ 103.691052276707296, 1.38060347835002 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "201", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.69555161060461, 1.263123673591192 ], [ 103.691058821171083, 1.265734098918793 ], [ 103.691058536031477, 1.270955436634065 ], [ 103.695551058333137, 1.273566351036153 ], [ 103.700043858477073, 1.270955919010161 ], [ 103.700044125608898, 1.265734579312572 ], [ 103.69555161060461, 1.263123673591192 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "203", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.695549940137866, 1.294451703370321 ], [ 103.691057092711489, 1.297062122013495 ], [ 103.691056800523015, 1.302283458443904 ], [ 103.695549374213854, 1.304894378245604 ], [ 103.70004223257331, 1.302283952714065 ], [ 103.700042506308847, 1.297062614301292 ], [ 103.695549940137866, 1.294451703370321 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "205", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.695548228712681, 1.325779725377762 ], [ 103.691055321957734, 1.328390137320704 ], [ 103.691055022719979, 1.333611472434924 ], [ 103.695547649135321, 1.336222397620715 ], [ 103.700040567046059, 1.33361197859943 ], [ 103.700040847385679, 1.328390641502799 ], [ 103.695548228712681, 1.325779725377762 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "206", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.695547357639896, 1.341443733408364 ], [ 103.691054420719723, 1.344054141995262 ], [ 103.691054117957179, 1.349275476439641 ], [ 103.695546771235527, 1.351886404311659 ], [ 103.700039719422861, 1.349275988551426 ], [ 103.700040003064657, 1.344054652124613 ], [ 103.695547357639896, 1.341443733408364 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "208", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.695545584772319, 1.372771743405865 ], [ 103.691052586519788, 1.375382145268818 ], [ 103.691052276707296, 1.38060347835002 ], [ 103.695544984713294, 1.383214411582857 ], [ 103.700037994455698, 1.380604002356585 ], [ 103.700038284702217, 1.375382667292899 ], [ 103.695545584772319, 1.372771743405865 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "218", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.700040567046059, 1.33361197859943 ], [ 103.695547649135321, 1.336222397620715 ], [ 103.695547357639896, 1.341443733408364 ], [ 103.700040003064657, 1.344054652124613 ], [ 103.704532932131229, 1.341444225945158 ], [ 103.704533204617206, 1.336222888239726 ], [ 103.700040567046059, 1.33361197859943 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "219", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.700039719422861, 1.349275988551426 ], [ 103.695546771235527, 1.351886404311659 ], [ 103.695546476326555, 1.357107739425563 ], [ 103.70003914883695, 1.359718660729144 ], [ 103.70453210829146, 1.35710823771575 ], [ 103.70453238396837, 1.351886900684039 ], [ 103.700039719422861, 1.349275988551426 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "223", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.700036229858767, 1.411932007873355 ], [ 103.695543157225316, 1.414542410549859 ], [ 103.695542848661006, 1.419763742890478 ], [ 103.700035632852718, 1.4223746745046 ], [ 103.704528717198841, 1.419764264194955 ], [ 103.704529005640566, 1.414542929936434 ], [ 103.700036229858767, 1.411932007873355 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "231", "topic": "topic3" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.704534551092877, 1.310116196387465 ], [ 103.7000416818003, 1.312726628887195 ], [ 103.700041404762786, 1.317947966645811 ], [ 103.704534015693412, 1.320558873789909 ], [ 103.709026895919138, 1.317948434242166 ], [ 103.709027154281088, 1.312727094630441 ], [ 103.704534551092877, 1.310116196387465 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "234", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.70453210829146, 1.35710823771575 ], [ 103.70003914883695, 1.359718660729144 ], [ 103.700038861892835, 1.364939996478309 ], [ 103.704531553746591, 1.367550911099358 ], [ 103.709024524468319, 1.364940480752974 ], [ 103.709024792069044, 1.359719143150634 ], [ 103.70453210829146, 1.35710823771575 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "245", "topic": "topic3" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.709026895919138, 1.317948434242166 ], [ 103.704534015693412, 1.320558873789909 ], [ 103.704533746398269, 1.325780212161232 ], [ 103.709026376115759, 1.328391112805393 ], [ 103.713519267274677, 1.32578066612981 ], [ 103.713519517782927, 1.320559325970008 ], [ 103.709026895919138, 1.317948434242166 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "246", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.709026114674302, 1.333612451755154 ], [ 103.704533204617206, 1.336222888239726 ], [ 103.704532932131229, 1.341444225945158 ], [ 103.709025588711839, 1.344055128986621 ], [ 103.713518509813483, 1.341444685279218 ], [ 103.713518763289969, 1.336223345785285 ], [ 103.709026114674302, 1.333612451755154 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "249", "topic": "topic1" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.709023715506575, 1.380604492190824 ], [ 103.704530713951584, 1.383214919462191 ], [ 103.704530431892465, 1.388436255122967 ], [ 103.709023171065681, 1.391047165333048 ], [ 103.713516183999289, 1.388436730553869 ], [ 103.713516446381064, 1.383215393104525 ], [ 103.709023715506575, 1.380604492190824 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "253", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.709020387260907, 1.44326051698705 ], [ 103.704527259032801, 1.445870931918851 ], [ 103.704526964208029, 1.451092264743799 ], [ 103.709019818179272, 1.453703184457711 ], [ 103.713512958231476, 1.451092761638106 ], [ 103.713513232488339, 1.445871427024499 ], [ 103.709020387260907, 1.44326051698705 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "259", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.71352001583125, 1.310116644990625 ], [ 103.709027154281088, 1.312727094630441 ], [ 103.709026895919138, 1.317948434242166 ], [ 103.713519517782927, 1.320559325970008 ], [ 103.718012390154954, 1.31794886921752 ], [ 103.718012629841311, 1.312727527881965 ], [ 103.71352001583125, 1.310116644990625 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "261", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.713518509813483, 1.341444685279218 ], [ 103.709025588711839, 1.344055128986621 ], [ 103.70902532419079, 1.349276467266587 ], [ 103.71351799989219, 1.351887363595125 ], [ 103.718010932038396, 1.349276912585065 ], [ 103.71801117743864, 1.344055572581227 ], [ 103.713518509813483, 1.341444685279218 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "277", "topic": "topic8" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.718010932038396, 1.349276912585065 ], [ 103.71351799989219, 1.351887363595125 ], [ 103.713517743447369, 1.357108702415358 ], [ 103.718010438380873, 1.359719591916875 ], [ 103.722503381571684, 1.357109133524331 ], [ 103.722503618784373, 1.351887793044857 ], [ 103.718010932038396, 1.349276912585065 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "284", "topic": "topic1" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.722510726389444, 1.184804783421857 ], [ 103.71801809665233, 1.1874152721576 ], [ 103.718017879818035, 1.192636618506784 ], [ 103.722510309615899, 1.195247477746729 ], [ 103.727002949173013, 1.19263698259356 ], [ 103.727003149112235, 1.187415634649971 ], [ 103.722510726389444, 1.184804783421857 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "285", "topic": "topic1" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.722510099856677, 1.200468824610611 ], [ 103.718017443293235, 1.203079310607599 ], [ 103.718017223602729, 1.208300656357489 ], [ 103.722509677593251, 1.210911517736916 ], [ 103.727002344087992, 1.208301025227518 ], [ 103.727002546660884, 1.203079677883204 ], [ 103.722510099856677, 1.200468824610611 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "290", "topic": "topic1" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.722504791119292, 1.325781087283441 ], [ 103.718011907925359, 1.328391551228427 ], [ 103.718011665382107, 1.333612891902038 ], [ 103.722504324930995, 1.336223770257337 ], [ 103.726997218946877, 1.333613299040029 ], [ 103.726997442591895, 1.328391956771847 ], [ 103.722504791119292, 1.325781087283441 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "291", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.722504090464028, 1.34144511141049 ], [ 103.71801117743864, 1.344055572581227 ], [ 103.718010932038396, 1.349276912585065 ], [ 103.722503618784373, 1.351887793044857 ], [ 103.726996542743052, 1.349277324506803 ], [ 103.726996769022449, 1.344055982908377 ], [ 103.722504090464028, 1.34144511141049 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "293", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.72250266444199, 1.372773153601473 ], [ 103.718009690751799, 1.37538360921188 ], [ 103.718009439637314, 1.380604947852678 ], [ 103.722502181779092, 1.383215832509803 ], [ 103.726995166625272, 1.38060536934209 ], [ 103.726995398173685, 1.375384029106663 ], [ 103.72250266444199, 1.372773153601473 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "307", "topic": "topic8" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.726997218946877, 1.333613299040029 ], [ 103.722504324930995, 1.336223770257337 ], [ 103.722504090464028, 1.34144511141049 ], [ 103.726996769022449, 1.344055982908377 ], [ 103.731489673860267, 1.34144550433892 ], [ 103.731489889317714, 1.336224161655828 ], [ 103.726997218946877, 1.333613299040029 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "312", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.726993758892277, 1.411933405889764 ], [ 103.722500711822633, 1.414543863671361 ], [ 103.722500463626147, 1.419765201377819 ], [ 103.726993282621962, 1.42237608286482 ], [ 103.731486341070337, 1.41976561725609 ], [ 103.731486569144153, 1.414544278019597 ], [ 103.726993758892277, 1.411933405889764 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "314", "topic": "topic4" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.726992319541949, 1.443261433961921 ], [ 103.722499208912822, 1.445871886341622 ], [ 103.722498955223898, 1.451093222614596 ], [ 103.726991832732068, 1.453704108070049 ], [ 103.731484954962667, 1.451093647673213 ], [ 103.73148518808361, 1.445872309870164 ], [ 103.726992319541949, 1.443261433961921 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "320", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.731491582701153, 1.294453412242886 ], [ 103.72699876602212, 1.297063898541468 ], [ 103.726998547645593, 1.302285242125668 ], [ 103.731491164401163, 1.304896100908642 ], [ 103.735983991568176, 1.302285607463066 ], [ 103.735984191491639, 1.297064262413612 ], [ 103.731491582701153, 1.294453412242886 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "323", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.731489673860267, 1.34144550433892 ], [ 103.726996769022449, 1.344055982908377 ], [ 103.726996542743052, 1.349277324506803 ], [ 103.73148924042232, 1.351888189033184 ], [ 103.73598215608213, 1.349277703031753 ], [ 103.73598236324068, 1.344056359968019 ], [ 103.731489673860267, 1.34144550433892 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "330", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.735989107371267, 1.161309217756638 ], [ 103.731496527651757, 1.163919733321877 ], [ 103.731496339943519, 1.16914108289841 ], [ 103.735988748516093, 1.171751918342286 ], [ 103.740481337721732, 1.169141396405124 ], [ 103.740481508868683, 1.163920045428109 ], [ 103.735989107371267, 1.161309217756638 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "334", "topic": "topic4" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.73598277514597, 1.333613673169075 ], [ 103.731489889317714, 1.336224161655828 ], [ 103.731489673860267, 1.34144550433892 ], [ 103.73598236324068, 1.344056359968019 ], [ 103.7404752597796, 1.341445864064461 ], [ 103.740475456227472, 1.336224519980712 ], [ 103.73598277514597, 1.333613673169075 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "342", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.740481848862856, 1.153477342892665 ], [ 103.735989285593362, 1.156087867172886 ], [ 103.735989107371267, 1.161309217756638 ], [ 103.740481508868683, 1.163920045428109 ], [ 103.744974081513035, 1.161309514791133 ], [ 103.7449742432851, 1.156088162871539 ], [ 103.740481848862856, 1.153477342892665 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "348", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.740476426964662, 1.310117796237246 ], [ 103.735983589309669, 1.312728296909639 ], [ 103.735983386974581, 1.317949641305016 ], [ 103.740476040970165, 1.320560486396096 ], [ 103.744968889113196, 1.317949978417063 ], [ 103.744969072772591, 1.312728632685693 ], [ 103.740476426964662, 1.310117796237246 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "349", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.740475846822733, 1.325781831145659 ], [ 103.735982979892739, 1.328392329435604 ], [ 103.73598277514597, 1.333613673169075 ], [ 103.740475456227472, 1.336224519980712 ], [ 103.744968333756816, 1.333614014289131 ], [ 103.744968519605322, 1.328392669219652 ], [ 103.740475846822733, 1.325781831145659 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "350", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.7404752597796, 1.341445864064461 ], [ 103.73598236324068, 1.344056359968019 ], [ 103.73598215608213, 1.349277703031753 ], [ 103.740474864583405, 1.351888551560056 ], [ 103.744967771833032, 1.349278048159867 ], [ 103.744967959870692, 1.344056703760108 ], [ 103.7404752597796, 1.341445864064461 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "352", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.740474064988817, 1.372773923839273 ], [ 103.735981108230149, 1.375384414958237 ], [ 103.735980896247852, 1.380605756659008 ], [ 103.740473660590325, 1.383216608608975 ], [ 103.744966628282384, 1.380606109803385 ], [ 103.744966820698565, 1.375384766766556 ], [ 103.740474064988817, 1.372773923839273 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "353", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.740473457240739, 1.388437950648305 ], [ 103.735980469871237, 1.391048439369063 ], [ 103.735980255476932, 1.396269780376608 ], [ 103.740473048240858, 1.398880634031573 ], [ 103.744966046655094, 1.396270137529191 ], [ 103.744966241260641, 1.391048795185571 ], [ 103.740473457240739, 1.388437950648305 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "355", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.740472221038019, 1.419765997992184 ], [ 103.73597917144491, 1.422376481904705 ], [ 103.735978952226347, 1.427597821502311 ], [ 103.740471802834946, 1.430208678555609 ], [ 103.744964863695515, 1.42759818667146 ], [ 103.744965062680038, 1.422376845737745 ], [ 103.740472221038019, 1.419765997992184 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "356", "topic": "topic3" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.740471592582949, 1.435430018480056 ], [ 103.735978511377027, 1.438040499982549 ], [ 103.735978289746228, 1.443261838863442 ], [ 103.740471169778033, 1.445872697610073 ], [ 103.744964262362785, 1.443262208040951 ], [ 103.744964463536903, 1.438040867823932 ], [ 103.740471592582949, 1.435430018480056 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "357", "topic": "topic1" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.744974081513035, 1.161309514791133 ], [ 103.740481508868683, 1.163920045428109 ], [ 103.740481337721732, 1.169141396405124 ], [ 103.74497375578045, 1.17175221804848 ], [ 103.749466337799674, 1.169141680974937 ], [ 103.749466492385309, 1.163920328726704 ], [ 103.744974081513035, 1.161309514791133 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "360", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.744968889113196, 1.317949978417063 ], [ 103.740476040970165, 1.320560486396096 ], [ 103.740475846822733, 1.325781831145659 ], [ 103.744968519605322, 1.328392669219652 ], [ 103.74946137823639, 1.325782153854154 ], [ 103.749461553596831, 1.320560807833231 ], [ 103.744968889113196, 1.317949978417063 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "361", "topic": "topic8" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.744968333756816, 1.333614014289131 ], [ 103.740475456227472, 1.336224519980712 ], [ 103.7404752597796, 1.341445864064461 ], [ 103.744967959870692, 1.344056703760108 ], [ 103.74946084799943, 1.341446190587067 ], [ 103.749461025437682, 1.336224845231943 ], [ 103.744968333756816, 1.333614014289131 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "364", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.744966628282384, 1.380606109803385 ], [ 103.740473660590325, 1.383216608608975 ], [ 103.740473457240739, 1.388437950648305 ], [ 103.744966241260641, 1.391048795185571 ], [ 103.749459219886134, 1.388438288613526 ], [ 103.749459403558262, 1.383216945302774 ], [ 103.744966628282384, 1.380606109803385 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "374", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.74946137823639, 1.325782153854154 ], [ 103.744968519605322, 1.328392669219652 ], [ 103.744968333756816, 1.333614014289131 ], [ 103.749461025437682, 1.336224845231943 ], [ 103.753953894556815, 1.333614322400155 ], [ 103.753954061507017, 1.328392976123948 ], [ 103.74946137823639, 1.325782153854154 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "375", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.74946084799943, 1.341446190587067 ], [ 103.744967959870692, 1.344056703760108 ], [ 103.744967771833032, 1.349278048159867 ], [ 103.749460491045028, 1.351888880625429 ], [ 103.753953389773145, 1.349278359891102 ], [ 103.753953558689886, 1.344057014284602 ], [ 103.74946084799943, 1.341446190587067 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "376", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.74946031152885, 1.357110225306926 ], [ 103.744967393568515, 1.359720736283573 ], [ 103.744967203341616, 1.364942080005781 ], [ 103.749459950418611, 1.367552913990203 ], [ 103.753952879089695, 1.364942395357272 ], [ 103.753953049973063, 1.359721050428307 ], [ 103.74946031152885, 1.357110225306926 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "378", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.749459219886134, 1.388438288613526 ], [ 103.744966241260641, 1.391048795185571 ], [ 103.744966046655094, 1.396270137529191 ], [ 103.749458850463768, 1.398880974539656 ], [ 103.75395184002268, 1.396270460121328 ], [ 103.753952014839456, 1.391049116570922 ], [ 103.749459219886134, 1.388438288613526 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "380", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.749458103306566, 1.419766343586054 ], [ 103.744965062680038, 1.422376845737745 ], [ 103.744964863695515, 1.42759818667146 ], [ 103.749457725571574, 1.430209026692406 ], [ 103.753950777354248, 1.427598516504427 ], [ 103.753950956104703, 1.422377174363895 ], [ 103.749458103306566, 1.419766343586054 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "383", "topic": "topic1" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.753957262863949, 1.22396600524288 ], [ 103.749464591658082, 1.226576542646685 ], [ 103.749464428763247, 1.231797892497966 ], [ 103.75395695452579, 1.234408706119541 ], [ 103.758449635440499, 1.231798161834574 ], [ 103.758449780883808, 1.226576810841293 ], [ 103.753957262863949, 1.22396600524288 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "385", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.753954886425547, 1.302286241437884 ], [ 103.749462075522615, 1.304896768452784 ], [ 103.749461902239929, 1.310118115131675 ], [ 103.753954558424581, 1.312728935969836 ], [ 103.758447379592937, 1.310118401598814 ], [ 103.758447534311202, 1.304897053777856 ], [ 103.753954886425547, 1.302286241437884 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "387", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.753953894556815, 1.333614322400155 ], [ 103.749461025437682, 1.336224845231943 ], [ 103.74946084799943, 1.341446190587067 ], [ 103.753953558689886, 1.344057014284602 ], [ 103.758446438297099, 1.3414464839067 ], [ 103.758446596725761, 1.336225137409481 ], [ 103.753953894556815, 1.333614322400155 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "388", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.753953389773145, 1.349278359891102 ], [ 103.749460491045028, 1.351888880625429 ], [ 103.74946031152885, 1.357110225306926 ], [ 103.753953049973063, 1.359721050428307 ], [ 103.758445959300616, 1.357110522052868 ], [ 103.758446119584534, 1.351889176229263 ], [ 103.753953389773145, 1.349278359891102 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "390", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.753952362506283, 1.380606428775176 ], [ 103.749459403558262, 1.383216945302774 ], [ 103.749459219886134, 1.388438288613526 ], [ 103.753952014839456, 1.391049116570922 ], [ 103.758444984609582, 1.388438592212213 ], [ 103.758445148604252, 1.383217247759325 ], [ 103.753952362506283, 1.380606428775176 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "392", "topic": "topic3" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.753951311638744, 1.41193448937224 ], [ 103.749458291134957, 1.414545001677362 ], [ 103.749458103306566, 1.419766343586054 ], [ 103.753950956104703, 1.422377174363895 ], [ 103.758443987653308, 1.419766654037659 ], [ 103.758444155358958, 1.414545310986801 ], [ 103.753951311638744, 1.41193448937224 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "393", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.753950777354248, 1.427598516504427 ], [ 103.749457725571574, 1.430209026692406 ], [ 103.749457535664959, 1.435430367888325 ], [ 103.753950417886401, 1.438041200070551 ], [ 103.758443480825235, 1.435430681766454 ], [ 103.758443650386454, 1.430209339428355 ], [ 103.753950777354248, 1.427598516504427 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "394", "topic": "topic1" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.753950237169008, 1.443262541494403 ], [ 103.749457153773449, 1.445873049561301 ], [ 103.749456961788525, 1.451094390036619 ], [ 103.753949873767212, 1.453705223619338 ], [ 103.758442968430302, 1.451094707341317 ], [ 103.758443139847174, 1.445873365723805 ], [ 103.753950237169008, 1.443262541494403 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "396", "topic": "topic3" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.758450498826207, 1.200470052824379 ], [ 103.753957871675794, 1.203080601047385 ], [ 103.753957720455873, 1.208301952399355 ], [ 103.758450213504048, 1.210912756637767 ], [ 103.762942850140689, 1.208302201643759 ], [ 103.762942984242912, 1.203080849214441 ], [ 103.758450498826207, 1.200470052824379 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "401", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.758447379592937, 1.310118401598814 ], [ 103.753954558424581, 1.312728935969836 ], [ 103.753954393440878, 1.317950282907919 ], [ 103.758447068301251, 1.320561096584516 ], [ 103.762939899735045, 1.317950554777547 ], [ 103.762940046043028, 1.312729206762031 ], [ 103.758447379592937, 1.310118401598814 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "403", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.758446438297099, 1.3414464839067 ], [ 103.753953558689886, 1.344057014284602 ], [ 103.753953389773145, 1.349278359891102 ], [ 103.758446119584534, 1.351889176229263 ], [ 103.762939009679855, 1.349278638225421 ], [ 103.762939159475664, 1.344057291541461 ], [ 103.758446438297099, 1.3414464839067 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "405", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.758445474738153, 1.372774558162535 ], [ 103.753952535356305, 1.375385084531576 ], [ 103.753952362506283, 1.380606428775176 ], [ 103.758445148604252, 1.383217247759325 ], [ 103.762938098696878, 1.380606713574344 ], [ 103.762938251980756, 1.375385368253258 ], [ 103.758445474738153, 1.372774558162535 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "407", "topic": "topic3" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.758444488914691, 1.404102624178417 ], [ 103.753951488422331, 1.406713146522857 ], [ 103.753951311638744, 1.41193448937224 ], [ 103.758444155358958, 1.414545310986801 ], [ 103.762937166784795, 1.411934780636418 ], [ 103.76293732355694, 1.406713436709522 ], [ 103.758444488914691, 1.404102624178417 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "408", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.758443987653308, 1.419766654037659 ], [ 103.753950956104703, 1.422377174363895 ], [ 103.753950777354248, 1.427598516504427 ], [ 103.758443650386454, 1.430209339428355 ], [ 103.762936692979892, 1.427598811001172 ], [ 103.762936851496264, 1.422377467783113 ], [ 103.758443987653308, 1.419766654037659 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "412", "topic": "topic3" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.762942444346962, 1.223966257719349 ], [ 103.758449780883808, 1.226576810841293 ], [ 103.758449635440499, 1.231798161834574 ], [ 103.762942170911884, 1.234408960750739 ], [ 103.767434843972609, 1.231798400682987 ], [ 103.767434971964377, 1.226577048676977 ], [ 103.762942444346962, 1.223966257719349 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "416", "topic": "topic1" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.762940336915136, 1.302286510075225 ], [ 103.758447534311202, 1.304897053777856 ], [ 103.758447379592937, 1.310118401598814 ], [ 103.762940046043028, 1.312729206762031 ], [ 103.767432858801087, 1.310118655638627 ], [ 103.76743299495493, 1.304897306804881 ], [ 103.762940336915136, 1.302286510075225 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "419", "topic": "topic3" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.762939009679855, 1.349278638225421 ], [ 103.758446119584534, 1.351889176229263 ], [ 103.758445959300616, 1.357110522052868 ], [ 103.762938708344237, 1.359721330917558 ], [ 103.76743160892768, 1.35711078520795 ], [ 103.767431749979352, 1.351889438371521 ], [ 103.762939009679855, 1.349278638225421 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "420", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.762938556804428, 1.364942676923995 ], [ 103.758445636877425, 1.367553213020373 ], [ 103.758445474738153, 1.372774558162535 ], [ 103.762938251980756, 1.375385368253258 ], [ 103.767431182507195, 1.372774824356114 ], [ 103.767431325191609, 1.367553478201116 ], [ 103.762938556804428, 1.364942676923995 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "421", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.762938098696878, 1.380606713574344 ], [ 103.758445148604252, 1.383217247759325 ], [ 103.758444984609582, 1.388438592212213 ], [ 103.762937790385038, 1.391049403525075 ], [ 103.767430751188485, 1.388438861444327 ], [ 103.767430895505655, 1.38321751597859 ], [ 103.762938098696878, 1.380606713574344 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "428", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.767435226315612, 1.216134344052256 ], [ 103.762942580192714, 1.218744905897083 ], [ 103.762942444346962, 1.223966257719349 ], [ 103.767434971964377, 1.226577048676977 ], [ 103.771927627573547, 1.223966479901514 ], [ 103.771927746079029, 1.21874512713116 ], [ 103.767435226315612, 1.216134344052256 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "431", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.767433667561562, 1.278790559389937 ], [ 103.76294091168414, 1.281401114102877 ], [ 103.762940768863771, 1.286622463418631 ], [ 103.76743340015139, 1.289233259001678 ], [ 103.771926165960338, 1.286622696978132 ], [ 103.771926290550155, 1.281401346714247 ], [ 103.767433667561562, 1.278790559389937 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "432", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.767433265630075, 1.294454608485537 ], [ 103.762940481479276, 1.297065161405675 ], [ 103.762940336915136, 1.302286510075225 ], [ 103.76743299495493, 1.304897306804881 ], [ 103.77192578914854, 1.302286746479142 ], [ 103.771925915259544, 1.297065396861449 ], [ 103.767433265630075, 1.294454608485537 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "433", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.767432858801087, 1.310118655638627 ], [ 103.762940046043028, 1.312729206762031 ], [ 103.762939899735045, 1.317950554777547 ], [ 103.767432584860856, 1.320561352649915 ], [ 103.771925407773068, 1.317950794025914 ], [ 103.771925535405316, 1.312729445062244 ], [ 103.767432858801087, 1.310118655638627 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "435", "topic": "topic3" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.767432030450038, 1.341446744023322 ], [ 103.762939159475664, 1.344057291541461 ], [ 103.762939009679855, 1.349278638225421 ], [ 103.767431749979352, 1.351889438371521 ], [ 103.771924631330535, 1.349278883162789 ], [ 103.771924762005398, 1.344057535530653 ], [ 103.767432030450038, 1.341446744023322 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "436", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.76743160892768, 1.35711078520795 ], [ 103.762938708344237, 1.359721330917558 ], [ 103.762938556804428, 1.364942676923995 ], [ 103.767431325191609, 1.367553478201116 ], [ 103.771924236263189, 1.364942924705915 ], [ 103.771924368459437, 1.35972157775129 ], [ 103.76743160892768, 1.35711078520795 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "437", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.767431182507195, 1.372774824356114 ], [ 103.762938251980756, 1.375385368253258 ], [ 103.762938098696878, 1.380606713574344 ], [ 103.767430895505655, 1.38321751597859 ], [ 103.771923836631586, 1.380606964200852 ], [ 103.771923970349263, 1.375385617931566 ], [ 103.767431182507195, 1.372774824356114 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "440", "topic": "topic1" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.767429873855619, 1.419766929346958 ], [ 103.762936851496264, 1.422377467783113 ], [ 103.762936692979892, 1.427598811001172 ], [ 103.767429577056944, 1.430209616763418 ], [ 103.771922610349804, 1.427599070161659 ], [ 103.771922748632093, 1.422377725995364 ], [ 103.767429873855619, 1.419766929346958 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "441", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.767429427841151, 1.435430960114405 ], [ 103.762936374202866, 1.438041496722364 ], [ 103.762936213942197, 1.443262839223757 ], [ 103.767429127776566, 1.445873646097545 ], [ 103.771922192459712, 1.443263101228977 ], [ 103.771922332263628, 1.438041757779336 ], [ 103.767429427841151, 1.435430960114405 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "442", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.767428976927775, 1.451094988727959 ], [ 103.762935891676548, 1.453705523503789 ], [ 103.762935729671526, 1.458926865280688 ], [ 103.767428673597166, 1.461537673262124 ], [ 103.771921770004624, 1.458927130130678 ], [ 103.771921911330224, 1.453705787405518 ], [ 103.767428976927775, 1.451094988727959 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "447", "topic": "topic4" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.771926165960338, 1.286622696978132 ], [ 103.76743340015139, 1.289233259001678 ], [ 103.767433265630075, 1.294454608485537 ], [ 103.771925915259544, 1.297065396861449 ], [ 103.776418691000018, 1.294454827447477 ], [ 103.776418807179482, 1.28923347708012 ], [ 103.771926165960338, 1.286622696978132 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "448", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.77192578914854, 1.302286746479142 ], [ 103.76743299495493, 1.304897306804881 ], [ 103.767432858801087, 1.310118655638627 ], [ 103.771925535405316, 1.312729445062244 ], [ 103.776418339641779, 1.310118877251082 ], [ 103.776418457231159, 1.304897527533828 ], [ 103.77192578914854, 1.302286746479142 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "449", "topic": "topic8" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.771925407773068, 1.317950794025914 ], [ 103.767432584860856, 1.320561352649915 ], [ 103.767432447074455, 1.325782700825718 ], [ 103.771925150987315, 1.328393491293141 ], [ 103.776417984053694, 1.325782925088719 ], [ 103.776418103053047, 1.320561576029398 ], [ 103.771925407773068, 1.317950794025914 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "450", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.771925021833781, 1.333614839594959 ], [ 103.767432169869053, 1.336225396513292 ], [ 103.767432030450038, 1.341446744023322 ], [ 103.771924762005398, 1.344057535530653 ], [ 103.77641762423562, 1.341446970936901 ], [ 103.776417744644988, 1.336225622543341 ], [ 103.771925021833781, 1.333614839594959 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "451", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.771924631330535, 1.349278883162789 ], [ 103.767431749979352, 1.351889438371521 ], [ 103.76743160892768, 1.35711078520795 ], [ 103.771924368459437, 1.35972157775129 ], [ 103.776417260187444, 1.35711101477214 ], [ 103.776417382006855, 1.35188966705217 ], [ 103.771924631330535, 1.349278883162789 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "453", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.771923836631586, 1.380606964200852 ], [ 103.767430895505655, 1.38321751597859 ], [ 103.767430751188485, 1.388438861444327 ], [ 103.771923567674747, 1.391049656047995 ], [ 103.776416519400186, 1.388439096309837 ], [ 103.776416644039841, 1.383217749960536 ], [ 103.771923836631586, 1.380606964200852 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "456", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.771922610349804, 1.427599070161659 ], [ 103.767429577056944, 1.430209616763418 ], [ 103.767429427841151, 1.435430960114405 ], [ 103.771922332263628, 1.438041757779336 ], [ 103.776415376490021, 1.435431202932143 ], [ 103.77641550536039, 1.43020985869756 ], [ 103.771922610349804, 1.427599070161659 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "463", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.776418691000018, 1.294454827447477 ], [ 103.771925915259544, 1.297065396861449 ], [ 103.77192578914854, 1.302286746479142 ], [ 103.776418457231159, 1.304897527533828 ], [ 103.780911242903187, 1.302286950649606 ], [ 103.780911350561027, 1.297065600213049 ], [ 103.776418691000018, 1.294454827447477 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "464", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.776418339641779, 1.310118877251082 ], [ 103.771925535405316, 1.312729445062244 ], [ 103.771925407773068, 1.317950794025914 ], [ 103.776418103053047, 1.320561576029398 ], [ 103.780910917332378, 1.317951000652989 ], [ 103.780911026288862, 1.312729650870446 ], [ 103.776418339641779, 1.310118877251082 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "465", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.776417984053694, 1.325782925088719 ], [ 103.771925150987315, 1.328393491293141 ], [ 103.771925021833781, 1.333614839594959 ], [ 103.776417744644988, 1.336225622543341 ], [ 103.780910587865549, 1.333615048678675 ], [ 103.780910698120721, 1.328393699557974 ], [ 103.776417984053694, 1.325782925088719 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "467", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.776417260187444, 1.35711101477214 ], [ 103.771924368459437, 1.35972157775129 ], [ 103.771924236263189, 1.364942924705915 ], [ 103.77641701513852, 1.367553709532398 ], [ 103.780909917243363, 1.364943138703003 ], [ 103.780910030096024, 1.359721790929474 ], [ 103.776417260187444, 1.35711101477214 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "468", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.776416891909008, 1.372775056570947 ], [ 103.771923970349263, 1.375385617931566 ], [ 103.771923836631586, 1.380606964200852 ], [ 103.776416644039841, 1.383217749960536 ], [ 103.780909576087751, 1.38060718065467 ], [ 103.780909690239227, 1.375385833566471 ], [ 103.776416891909008, 1.372775056570947 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "472", "topic": "topic8" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.776415376490021, 1.435431202932143 ], [ 103.771922332263628, 1.438041757779336 ], [ 103.771922192459712, 1.443263101228977 ], [ 103.776415117338956, 1.445873890682488 ], [ 103.780908172498911, 1.44326332751003 ], [ 103.78090829184606, 1.438041983241433 ], [ 103.776415376490021, 1.435431202932143 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "473", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.77641498705826, 1.451095234196509 ], [ 103.771921911330224, 1.453705787405518 ], [ 103.771921770004624, 1.458927130130678 ], [ 103.776414725086497, 1.461537920497902 ], [ 103.78090781185945, 1.458927358868619 ], [ 103.780907932505613, 1.453706015324493 ], [ 103.77641498705826, 1.451095234196509 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "479", "topic": "topic4" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.780911564578091, 1.286622898692014 ], [ 103.776418807179482, 1.28923347708012 ], [ 103.776418691000018, 1.294454827447477 ], [ 103.780911350561027, 1.297065600213049 ], [ 103.785404117779876, 1.294455014369869 ], [ 103.785404215617461, 1.289233663248292 ], [ 103.780911564578091, 1.286622898692014 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "480", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.780911242903187, 1.302286950649606 ], [ 103.776418457231159, 1.304897527533828 ], [ 103.776418339641779, 1.310118877251082 ], [ 103.780911026288862, 1.312729650870446 ], [ 103.78540382189243, 1.310119066436152 ], [ 103.785403920917361, 1.304897715964669 ], [ 103.780911242903187, 1.302286950649606 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "482", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.780910587865549, 1.333615048678675 ], [ 103.776417744644988, 1.336225622543341 ], [ 103.77641762423562, 1.341446970936901 ], [ 103.780910366056489, 1.344057746252146 ], [ 103.785403219431245, 1.341447164647411 ], [ 103.785403320830952, 1.336225815499603 ], [ 103.780910587865549, 1.333615048678675 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "483", "topic": "topic3" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.780910254502587, 1.349279094703176 ], [ 103.776417382006855, 1.35188966705217 ], [ 103.776417260187444, 1.35711101477214 ], [ 103.780910030096024, 1.359721790929474 ], [ 103.785402912857293, 1.35711121074541 ], [ 103.78540301544443, 1.351889862271184 ], [ 103.780910254502587, 1.349279094703176 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "488", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.780908529241344, 1.427599293985856 ], [ 103.77641550536039, 1.43020985869756 ], [ 103.776415376490021, 1.435431202932143 ], [ 103.78090829184606, 1.438041983241433 ], [ 103.78540132654922, 1.43543141021964 ], [ 103.785401435074135, 1.430210065230752 ], [ 103.780908529241344, 1.427599293985856 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "489", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.780908172498911, 1.44326332751003 ], [ 103.776415117338956, 1.445873890682488 ], [ 103.77641498705826, 1.451095234196509 ], [ 103.780907932505613, 1.453706015324493 ], [ 103.785400998599115, 1.451095443746938 ], [ 103.785401108311717, 1.445874099478603 ], [ 103.780908172498911, 1.44326332751003 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "493", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.785404410105357, 1.278790960361133 ], [ 103.780911670937314, 1.281401547609274 ], [ 103.780911564578091, 1.286622898692014 ], [ 103.785404215617461, 1.289233663248292 ], [ 103.789896964494432, 1.286623068560251 ], [ 103.78989705262309, 1.281401716787933 ], [ 103.785404410105357, 1.278790960361133 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "494", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.785404117779876, 1.294455014369869 ], [ 103.780911350561027, 1.297065600213049 ], [ 103.780911242903187, 1.302286950649606 ], [ 103.785403920917361, 1.304897715964669 ], [ 103.789896697956436, 1.302287122586592 ], [ 103.789896787161112, 1.29706577146045 ], [ 103.785404117779876, 1.294455014369869 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "495", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.78540382189243, 1.310119066436152 ], [ 103.780911026288862, 1.312729650870446 ], [ 103.780910917332378, 1.317951000652989 ], [ 103.78540362265521, 1.320561766722936 ], [ 103.789896428190346, 1.317951174658748 ], [ 103.789896518471068, 1.312729824186611 ], [ 103.78540382189243, 1.310119066436152 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "496", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.78540352244292, 1.325783116536496 ], [ 103.780910698120721, 1.328393699557974 ], [ 103.780910587865549, 1.333615048678675 ], [ 103.785403320830952, 1.336225815499603 ], [ 103.789896155196033, 1.333615224753232 ], [ 103.789896246552843, 1.328393874942928 ], [ 103.78540352244292, 1.325783116536496 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "501", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.785401971760564, 1.404103336727043 ], [ 103.780908998836097, 1.406713912625528 ], [ 103.780908882086862, 1.411935258319582 ], [ 103.785401758273608, 1.414546028836902 ], [ 103.789894741797625, 1.411935444738509 ], [ 103.789894838535346, 1.40671409835481 ], [ 103.785401971760564, 1.404103336727043 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "502", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.785401650936322, 1.419767374538513 ], [ 103.780908647289507, 1.422377949000616 ], [ 103.780908529241344, 1.427599293985856 ], [ 103.785401435074135, 1.430210065230752 ], [ 103.789894449431841, 1.427599482473736 ], [ 103.789894547245865, 1.422378136798842 ], [ 103.785401650936322, 1.419767374538513 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "503", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.78540132654922, 1.43543141021964 ], [ 103.78090829184606, 1.438041983241433 ], [ 103.780908172498911, 1.44326332751003 ], [ 103.785401108311717, 1.445874099478603 ], [ 103.789894153837096, 1.443263518066888 ], [ 103.78989425272745, 1.438042173108629 ], [ 103.78540132654922, 1.43543141021964 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "505", "topic": "topic1" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.789898248765979, 1.208302769937912 ], [ 103.785405635691404, 1.210913371116874 ], [ 103.785405543789921, 1.21613472537147 ], [ 103.789898082192039, 1.218745479104112 ], [ 103.794390704419058, 1.216134870880401 ], [ 103.794390779091529, 1.210913516000898 ], [ 103.789898248765979, 1.208302769937912 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "507", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.789897227804403, 1.270959012603214 ], [ 103.785404506755654, 1.273569608597292 ], [ 103.785404410105357, 1.278790960361133 ], [ 103.78989705262309, 1.281401716787933 ], [ 103.794389783269452, 1.278791113369132 ], [ 103.794389861800454, 1.273569760980355 ], [ 103.789897227804403, 1.270959012603214 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "508", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.789896964494432, 1.286623068560251 ], [ 103.785404215617461, 1.289233663248292 ], [ 103.785404117779876, 1.294455014369869 ], [ 103.789896787161112, 1.29706577146045 ], [ 103.794389545747038, 1.294455169252688 ], [ 103.794389625242744, 1.289233817506169 ], [ 103.789896964494432, 1.286623068560251 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "509", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.789896697956436, 1.302287122586592 ], [ 103.785403920917361, 1.304897715964669 ], [ 103.78540382189243, 1.310119066436152 ], [ 103.789896518471068, 1.312729824186611 ], [ 103.794389305330427, 1.310119223193815 ], [ 103.794389385790865, 1.304897872097382 ], [ 103.789896697956436, 1.302287122586592 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "511", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.789896155196033, 1.333615224753232 ], [ 103.785403320830952, 1.336225815499603 ], [ 103.785403219431245, 1.341447164647411 ], [ 103.789895971406324, 1.344057923705915 ], [ 103.794388815814301, 1.341447325154826 ], [ 103.794388898204318, 1.336225975382054 ], [ 103.789896155196033, 1.333615224753232 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "512", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.789895878973397, 1.349279272846555 ], [ 103.78540301544443, 1.351889862271184 ], [ 103.785402912857293, 1.35711121074541 ], [ 103.789895693031411, 1.359721970452083 ], [ 103.794388566714602, 1.357111373127735 ], [ 103.79438865006945, 1.351890024028537 ], [ 103.789895878973397, 1.349279272846555 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "515", "topic": "topic3" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.789895030934559, 1.396271404884693 ], [ 103.785402077910248, 1.398881990320535 ], [ 103.785401971760564, 1.404103336727043 ], [ 103.789894838535346, 1.40671409835481 ], [ 103.794387802047865, 1.404103504734239 ], [ 103.794387888297379, 1.398882157702734 ], [ 103.789895030934559, 1.396271404884693 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "517", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.789894449431841, 1.427599482473736 ], [ 103.785401435074135, 1.430210065230752 ], [ 103.78540132654922, 1.43543141021964 ], [ 103.78989425272745, 1.438042173108629 ], [ 103.794387277796062, 1.435431581976868 ], [ 103.79438736597551, 1.430210236362969 ], [ 103.789894449431841, 1.427599482473736 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "522", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.794389783269452, 1.278791113369132 ], [ 103.78989705262309, 1.281401716787933 ], [ 103.789896964494432, 1.286623068560251 ], [ 103.794389625242744, 1.289233817506169 ], [ 103.798882365486776, 1.286623206582822 ], [ 103.798882435384826, 1.281401854250205 ], [ 103.794389783269452, 1.278791113369132 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "523", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.794389545747038, 1.294455169252688 ], [ 103.789896787161112, 1.29706577146045 ], [ 103.789896697956436, 1.302287122586592 ], [ 103.794389385790865, 1.304897872097382 ], [ 103.798882154085746, 1.302287262290078 ], [ 103.798882224837243, 1.297065910603629 ], [ 103.794389545747038, 1.294455169252688 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "524", "topic": "topic4" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.794389305330427, 1.310119223193815 ], [ 103.789896518471068, 1.312729824186611 ], [ 103.789896428190346, 1.317951174658748 ], [ 103.794389143444761, 1.320561924730506 ], [ 103.798881940124389, 1.317951316043169 ], [ 103.798882011729333, 1.312729965010718 ], [ 103.794389305330427, 1.310119223193815 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "525", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.794389062019533, 1.325783275169023 ], [ 103.789896246552843, 1.328393874942928 ], [ 103.789896155196033, 1.333615224753232 ], [ 103.794388898204318, 1.336225975382054 ], [ 103.798881723602605, 1.333615367818608 ], [ 103.798881796061039, 1.328394017447984 ], [ 103.794389062019533, 1.325783275169023 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "526", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.794388815814301, 1.341447325154826 ], [ 103.789895971406324, 1.344057923705915 ], [ 103.789895878973397, 1.349279272846555 ], [ 103.79438865006945, 1.351890024028537 ], [ 103.798881504520338, 1.349279417592905 ], [ 103.798881577832262, 1.344058067891938 ], [ 103.794388815814301, 1.341447325154826 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "531", "topic": "topic8" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.794387541369431, 1.419767544420714 ], [ 103.789894547245865, 1.422378136798842 ], [ 103.789894449431841, 1.427599482473736 ], [ 103.79438736597551, 1.430210236362969 ], [ 103.798880370698654, 1.427599635625274 ], [ 103.798880448278524, 1.422378289390018 ], [ 103.794387541369431, 1.419767544420714 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "532", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.794387277796062, 1.435431581976868 ], [ 103.78989425272745, 1.438042173108629 ], [ 103.789894153837096, 1.443263518066888 ], [ 103.79438710047215, 1.445874272485864 ], [ 103.798880136251654, 1.443263672899529 ], [ 103.798880214685227, 1.4380423273809 ], [ 103.794387277796062, 1.435431581976868 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "535", "topic": "topic8" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.798882574327536, 1.270959148944891 ], [ 103.794389861800454, 1.273569760980355 ], [ 103.794389783269452, 1.278791113369132 ], [ 103.798882435384826, 1.281401854250205 ], [ 103.803375157398264, 1.278791234725372 ], [ 103.803375217809958, 1.273569881840936 ], [ 103.798882574327536, 1.270959148944891 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "536", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.798882365486776, 1.286623206582822 ], [ 103.794389625242744, 1.289233817506169 ], [ 103.794389545747038, 1.294455169252688 ], [ 103.798882224837243, 1.297065910603629 ], [ 103.803374974678917, 1.294455292095917 ], [ 103.803375035832744, 1.289233939853733 ], [ 103.798882365486776, 1.286623206582822 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "538", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.798881940124389, 1.317951316043169 ], [ 103.794389143444761, 1.320561924730506 ], [ 103.794389062019533, 1.325783275169023 ], [ 103.798881796061039, 1.328394017447984 ], [ 103.803374602560964, 1.325783400986283 ], [ 103.803374665199087, 1.320562050052089 ], [ 103.798881940124389, 1.317951316043169 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "541", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.798881282877488, 1.364943465342576 ], [ 103.794388399040059, 1.367554070646469 ], [ 103.794388314720365, 1.372775419064264 ], [ 103.798881133693015, 1.375386162705966 ], [ 103.803374027684669, 1.372775549342703 ], [ 103.803374092549447, 1.367554200429213 ], [ 103.798881282877488, 1.364943465342576 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "544", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.798880602584632, 1.411935596208967 ], [ 103.794387628583905, 1.414546198094098 ], [ 103.794387541369431, 1.419767544420714 ], [ 103.798880448278524, 1.422378289390018 ], [ 103.803373432767515, 1.4197676791605 ], [ 103.803373499859148, 1.414546332338171 ], [ 103.798880602584632, 1.411935596208967 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "546", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.798880136251654, 1.443263672899529 ], [ 103.79438710047215, 1.445874272485864 ], [ 103.794387011327672, 1.45109561737922 ], [ 103.798879978530834, 1.453706363214073 ], [ 103.803373025021273, 1.451095755093333 ], [ 103.803373093597614, 1.44587440970425 ], [ 103.798880136251654, 1.443263672899529 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "547", "topic": "topic1" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.798879899243587, 1.458927708008248 ], [ 103.794386832073698, 1.461538306439299 ], [ 103.794386741964175, 1.466759650604283 ], [ 103.798879739815334, 1.469370396866057 ], [ 103.803372817807499, 1.466759789805589 ], [ 103.803372887126216, 1.461538445144871 ], [ 103.798879899243587, 1.458927708008248 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "549", "topic": "topic4" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.803375337891239, 1.263127175435904 ], [ 103.798882643372195, 1.265737795973935 ], [ 103.798882574327536, 1.270959148944891 ], [ 103.803375217809958, 1.273569881840936 ], [ 103.807867921704073, 1.270959253828715 ], [ 103.807867972740709, 1.26573790042674 ], [ 103.803375337891239, 1.263127175435904 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "550", "topic": "topic8" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.803375157398264, 1.278791234725372 ], [ 103.798882435384826, 1.281401854250205 ], [ 103.798882365486776, 1.286623206582822 ], [ 103.803375035832744, 1.289233939853733 ], [ 103.807867767332539, 1.286623312759712 ], [ 103.80786781899999, 1.281401959996071 ], [ 103.803375157398264, 1.278791234725372 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "551", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.803374974678917, 1.294455292095917 ], [ 103.798882224837243, 1.297065910603629 ], [ 103.798882154085746, 1.302287262290078 ], [ 103.803374851629158, 1.304897995931946 ], [ 103.807867611068502, 1.302287369760048 ], [ 103.807867663366792, 1.29706601764257 ], [ 103.803374974678917, 1.294455292095917 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "552", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.803374789733184, 1.31011934752405 ], [ 103.798882011729333, 1.312729965010718 ], [ 103.798881940124389, 1.317951316043169 ], [ 103.803374665199087, 1.320562050052089 ], [ 103.807867452911907, 1.317951424806235 ], [ 103.80786750584106, 1.31273007334275 ], [ 103.803374789733184, 1.31011934752405 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "553", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.803374602560964, 1.325783400986283 ], [ 103.798881796061039, 1.328394017447984 ], [ 103.798881723602605, 1.333615367818608 ], [ 103.803374476542501, 1.336226102190672 ], [ 103.807867292862696, 1.333615477874784 ], [ 103.807867346422725, 1.328394127073121 ], [ 103.803374602560964, 1.325783400986283 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "560", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.803373230007921, 1.435431718203808 ], [ 103.798880214685227, 1.4380423273809 ], [ 103.798880136251654, 1.443263672899529 ], [ 103.803373093597614, 1.44587440970425 ], [ 103.8078661195199, 1.443263792007932 ], [ 103.807866177496663, 1.438042446058226 ], [ 103.803373230007921, 1.435431718203808 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "563", "topic": "topic3" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.807868074183162, 1.255295192990546 ], [ 103.803375397560842, 1.257905821917047 ], [ 103.803375337891239, 1.263127175435904 ], [ 103.807867972740709, 1.26573790042674 ], [ 103.812360658626801, 1.263127264041226 ], [ 103.812360700399665, 1.25790591015599 ], [ 103.807868074183162, 1.255295192990546 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "564", "topic": "topic8" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.807867921704073, 1.270959253828715 ], [ 103.803375217809958, 1.273569881840936 ], [ 103.803375157398264, 1.278791234725372 ], [ 103.80786781899999, 1.281401959996071 ], [ 103.812360532269182, 1.278791324429838 ], [ 103.812360574561566, 1.27356997117902 ], [ 103.807867921704073, 1.270959253828715 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "565", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.807867767332539, 1.286623312759712 ], [ 103.803375035832744, 1.289233939853733 ], [ 103.803374974678917, 1.294455292095917 ], [ 103.807867663366792, 1.29706601764257 ], [ 103.812360404352958, 1.29445538289954 ], [ 103.812360447164878, 1.289234030290969 ], [ 103.807867767332539, 1.286623312759712 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "566", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.807867611068502, 1.302287369760048 ], [ 103.803374851629158, 1.304897995931946 ], [ 103.803374789733184, 1.31011934752405 ], [ 103.80786750584106, 1.31273007334275 ], [ 103.812360274878102, 1.310119439426843 ], [ 103.812360318209571, 1.304898087468348 ], [ 103.807867611068502, 1.302287369760048 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "567", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.807867452911907, 1.317951424806235 ], [ 103.803374665199087, 1.320562050052089 ], [ 103.803374602560964, 1.325783400986283 ], [ 103.807867346422725, 1.328394127073121 ], [ 103.812360143844543, 1.325783493988258 ], [ 103.812360187695589, 1.320562142687669 ], [ 103.807867452911907, 1.317951424806235 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "570", "topic": "topic3" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.807866967086184, 1.364943577985023 ], [ 103.803374092549447, 1.367554200429213 ], [ 103.803374027684669, 1.372775549342703 ], [ 103.807866856811557, 1.375386276210516 ], [ 103.812359741391234, 1.372775645642308 ], [ 103.812359786801082, 1.367554296362408 ], [ 103.807866967086184, 1.364943577985023 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "572", "topic": "topic3" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.807866633738499, 1.396271669902873 ], [ 103.803373699649441, 1.398882290459679 ], [ 103.803373633300112, 1.40410363798689 ], [ 103.807866520940024, 1.406714365355818 ], [ 103.812359465294662, 1.404103736484982 ], [ 103.812359511743807, 1.398882388591352 ], [ 103.807866633738499, 1.396271669902873 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "573", "topic": "topic2" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.807866464225299, 1.411935712730938 ], [ 103.803373499859148, 1.414546332338171 ], [ 103.803373432767515, 1.4197676791605 ], [ 103.807866350164844, 1.422378406774125 ], [ 103.812359324907916, 1.419767778757856 ], [ 103.812359371876738, 1.414546431569103 ], [ 103.807866464225299, 1.411935712730938 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "577", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.812360783425873, 1.247463201757192 ], [ 103.807868124589007, 1.250073838958067 ], [ 103.807868074183162, 1.255295192990546 ], [ 103.812360700399665, 1.25790591015599 ], [ 103.816853368389005, 1.255295265511279 ], [ 103.816853401009382, 1.250073911177061 ], [ 103.812360783425873, 1.247463201757192 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "578", "topic": "topic3" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.812360658626801, 1.263127264041226 ], [ 103.807867972740709, 1.26573790042674 ], [ 103.807867921704073, 1.270959253828715 ], [ 103.812360574561566, 1.27356997117902 ], [ 103.81685326971143, 1.270959327254673 ], [ 103.816853302740029, 1.265737973550956 ], [ 103.812360658626801, 1.263127264041226 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "579", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.812360532269182, 1.278791324429838 ], [ 103.80786781899999, 1.281401959996071 ], [ 103.807867767332539, 1.286623312759712 ], [ 103.812360447164878, 1.289234030290969 ], [ 103.81685316980915, 1.286623387090906 ], [ 103.816853203245984, 1.281402034025518 ], [ 103.812360532269182, 1.278791324429838 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "581", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.812360274878102, 1.310119439426843 ], [ 103.80786750584106, 1.31273007334275 ], [ 103.807867452911907, 1.317951424806235 ], [ 103.812360187695589, 1.320562142687669 ], [ 103.816852966330302, 1.317951500947931 ], [ 103.816853000583663, 1.312730149182693 ], [ 103.812360274878102, 1.310119439426843 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "582", "topic": "topic2" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.812360143844543, 1.325783493988258 ], [ 103.807867346422725, 1.328394127073121 ], [ 103.807867292862696, 1.333615477874784 ], [ 103.812360055622875, 1.336226195925444 ], [ 103.816852862753677, 1.333615554921749 ], [ 103.816852897415316, 1.328394203818329 ], [ 103.812360143844543, 1.325783493988258 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "593", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.816853368389005, 1.255295265511279 ], [ 103.812360700399665, 1.25790591015599 ], [ 103.812360658626801, 1.263127264041226 ], [ 103.816853302740029, 1.265737973550956 ], [ 103.821345979881869, 1.26312732138259 ], [ 103.821346003757981, 1.257905967260251 ], [ 103.816853368389005, 1.255295265511279 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "594", "topic": "topic3" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.81685326971143, 1.270959327254673 ], [ 103.812360574561566, 1.27356997117902 ], [ 103.812360532269182, 1.278791324429838 ], [ 103.816853203245984, 1.281402034025518 ], [ 103.821345907659619, 1.278791382482519 ], [ 103.821345931832695, 1.273570028994595 ], [ 103.81685326971143, 1.270959327254673 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "595", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.81685316980915, 1.286623387090906 ], [ 103.812360447164878, 1.289234030290969 ], [ 103.812360404352958, 1.29445538289954 ], [ 103.816853102527205, 1.29706609257726 ], [ 103.821345834546548, 1.294455441663546 ], [ 103.82134585901656, 1.289234088817865 ], [ 103.81685316980915, 1.286623387090906 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "596", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.816853068682107, 1.302287444996488 ], [ 103.812360318209571, 1.304898087468348 ], [ 103.812360274878102, 1.310119439426843 ], [ 103.816853000583663, 1.312730149182693 ], [ 103.821345760542584, 1.310119498902182 ], [ 103.821345785309546, 1.304898146706575 ], [ 103.816853068682107, 1.302287444996488 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "597", "topic": "topic4" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.816852966330302, 1.317951500947931 ], [ 103.812360187695589, 1.320562142687669 ], [ 103.812360143844543, 1.325783493988258 ], [ 103.816852897415316, 1.328394203818329 ], [ 103.821345685647714, 1.325783554174939 ], [ 103.821345710711668, 1.320562202637234 ], [ 103.816852966330302, 1.317951500947931 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "599", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.816852757952191, 1.349279606894452 ], [ 103.812359921991387, 1.351890247158186 ], [ 103.812359877101159, 1.357111597119477 ], [ 103.816852687404051, 1.359722307086259 ], [ 103.821345533185166, 1.357111658728867 ], [ 103.821345558843078, 1.351890308530454 ], [ 103.816852757952191, 1.349279606894452 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "600", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.816852651925828, 1.364943656842555 ], [ 103.812359786801082, 1.367554296362408 ], [ 103.812359741391234, 1.372775645642308 ], [ 103.816852580561061, 1.375386355671582 ], [ 103.821345455617433, 1.372775707963064 ], [ 103.821345481572351, 1.367554358446041 ], [ 103.816852651925828, 1.364943656842555 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "601", "topic": "topic1" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.816852544674518, 1.380607704742572 ], [ 103.812359650051917, 1.383218343514625 ], [ 103.81235960412242, 1.388439692105304 ], [ 103.81685247249311, 1.39105040219316 ], [ 103.821345377158679, 1.388439755137437 ], [ 103.821345403410589, 1.383218406309632 ], [ 103.816852544674518, 1.380607704742572 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "605", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.81685210341918, 1.443263875392083 ], [ 103.812359087465438, 1.445874511133745 ], [ 103.812359039457249, 1.45109585688926 ], [ 103.816852027970924, 1.453706567172358 ], [ 103.82134505441293, 1.451095922766988 ], [ 103.821345081852996, 1.445874576774335 ], [ 103.81685210341918, 1.443263875392083 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "607", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.821346051213283, 1.247463258387248 ], [ 103.816853401009382, 1.250073911177061 ], [ 103.816853368389005, 1.255295265511279 ], [ 103.821346003757981, 1.257905967260251 ], [ 103.825838663003083, 1.255295306961963 ], [ 103.825838677838007, 1.25007395245528 ], [ 103.821346051213283, 1.247463258387248 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "608", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.821345979881869, 1.26312732138259 ], [ 103.816853302740029, 1.265737973550956 ], [ 103.81685326971143, 1.270959327254673 ], [ 103.821345931832695, 1.273570028994595 ], [ 103.825838618127023, 1.270959369222757 ], [ 103.825838633147583, 1.265738015346572 ], [ 103.821345979881869, 1.26312732138259 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "610", "topic": "topic8" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.821345834546548, 1.294455441663546 ], [ 103.816853102527205, 1.29706609257726 ], [ 103.816853068682107, 1.302287444996488 ], [ 103.821345785309546, 1.304898146706575 ], [ 103.825838526703976, 1.302287487999389 ], [ 103.825838542095866, 1.29706613540769 ], [ 103.821345834546548, 1.294455441663546 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "611", "topic": "topic3" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.821345760542584, 1.310119498902182 ], [ 103.816853000583663, 1.312730149182693 ], [ 103.816852966330302, 1.317951500947931 ], [ 103.821345710711668, 1.320562202637234 ], [ 103.82583848015696, 1.31795154446825 ], [ 103.825838495734516, 1.312730192530539 ], [ 103.821345760542584, 1.310119498902182 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "617", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.821345297808875, 1.4041038002285 ], [ 103.816852363200169, 1.406714446627512 ], [ 103.816852326496956, 1.411935794304408 ], [ 103.821345244413976, 1.414546495786883 ], [ 103.825838189176963, 1.411935840929365 ], [ 103.825838205868649, 1.406714493079983 ], [ 103.821345297808875, 1.4041038002285 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "619", "topic": "topic8" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.821345136436037, 1.435431884066759 ], [ 103.816852140939119, 1.438042529140594 ], [ 103.81685210341918, 1.443263875392083 ], [ 103.821345081852996, 1.445874576774335 ], [ 103.825838087726851, 1.443263923051973 ], [ 103.825838104789966, 1.438042576627992 ], [ 103.821345136436037, 1.435431884066759 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "623", "topic": "topic8" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.825838663003083, 1.255295306961963 ], [ 103.821346003757981, 1.257905967260251 ], [ 103.821345979881869, 1.26312732138259 ], [ 103.825838633147583, 1.265738015346572 ], [ 103.830331301433873, 1.263127347459991 ], [ 103.83033130741326, 1.257905993229823 ], [ 103.825838663003083, 1.255295306961963 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "624", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.825838618127023, 1.270959369222757 ], [ 103.821345931832695, 1.273570028994595 ], [ 103.821345907659619, 1.278791382482519 ], [ 103.825838587900208, 1.281402076338538 ], [ 103.830331283347036, 1.278791408883409 ], [ 103.830331289400775, 1.273570055287654 ], [ 103.825838618127023, 1.270959369222757 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "625", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.825838572693982, 1.286623429576395 ], [ 103.82134585901656, 1.289234088817865 ], [ 103.821345834546548, 1.294455441663546 ], [ 103.825838542095866, 1.29706613540769 ], [ 103.830331265037088, 1.294455468387928 ], [ 103.830331271165193, 1.289234115434416 ], [ 103.825838572693982, 1.286623429576395 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "626", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.825838526703976, 1.302287487999389 ], [ 103.821345785309546, 1.304898146706575 ], [ 103.821345760542584, 1.310119498902182 ], [ 103.825838495734516, 1.312730192530539 ], [ 103.830331246504031, 1.31011952595006 ], [ 103.830331252706515, 1.30489817364662 ], [ 103.825838526703976, 1.302287487999389 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "627", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.82583848015696, 1.31795154446825 ], [ 103.821345710711668, 1.320562202637234 ], [ 103.821345685647714, 1.325783554174939 ], [ 103.825838448816171, 1.328394247683596 ], [ 103.830331227747877, 1.325783581546317 ], [ 103.830331234024712, 1.320562229900778 ], [ 103.82583848015696, 1.31795154446825 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "630", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.825838337173764, 1.364943701915165 ], [ 103.821345481572351, 1.367554358446041 ], [ 103.821345455617433, 1.372775707963064 ], [ 103.825838304718886, 1.375386401089152 ], [ 103.830331170140639, 1.372775736304966 ], [ 103.830331176640598, 1.367554386680105 ], [ 103.825838337173764, 1.364943701915165 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "634", "topic": "topic3" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.825838138730475, 1.427599883061677 ], [ 103.821345163579053, 1.430210537353576 ], [ 103.821345136436037, 1.435431884066759 ], [ 103.825838104789966, 1.438042576627992 ], [ 103.830331090206997, 1.435431913702748 ], [ 103.830331097004503, 1.430210566881723 ], [ 103.825838138730475, 1.427599883061677 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "638", "topic": "topic1" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.830331319297642, 1.247463284141164 ], [ 103.825838677838007, 1.25007395245528 ], [ 103.825838663003083, 1.255295306961963 ], [ 103.83033130741326, 1.257905993229823 ], [ 103.834823957802797, 1.255295317342593 ], [ 103.834823954852268, 1.250073962792719 ], [ 103.830331319297642, 1.247463284141164 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "639", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.830331301433873, 1.263127347459991 ], [ 103.825838633147583, 1.265738015346572 ], [ 103.825838618127023, 1.270959369222757 ], [ 103.830331289400775, 1.273570055287654 ], [ 103.834823966728266, 1.270959379732961 ], [ 103.834823963740803, 1.265738025813585 ], [ 103.830331301433873, 1.263127347459991 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "640", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.830331283347036, 1.278791408883409 ], [ 103.825838587900208, 1.281402076338538 ], [ 103.825838572693982, 1.286623429576395 ], [ 103.830331271165193, 1.289234115434416 ], [ 103.834823975764493, 1.286623440216175 ], [ 103.834823972740111, 1.281402086935126 ], [ 103.830331283347036, 1.278791408883409 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "641", "topic": "topic8" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.830331265037088, 1.294455468387928 ], [ 103.825838542095866, 1.29706613540769 ], [ 103.825838526703976, 1.302287487999389 ], [ 103.830331252706515, 1.30489817364662 ], [ 103.834823984911509, 1.302287498768745 ], [ 103.834823981850192, 1.297066146133854 ], [ 103.830331265037088, 1.294455468387928 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "642", "topic": "topic2" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.830331246504031, 1.31011952595006 ], [ 103.825838495734516, 1.312730192530539 ], [ 103.82583848015696, 1.31795154446825 ], [ 103.830331234024712, 1.320562229900778 ], [ 103.834823994169298, 1.317951555367185 ], [ 103.834823991071062, 1.312730203386281 ], [ 103.830331246504031, 1.31011952595006 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "643", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.830331227747877, 1.325783581546317 ], [ 103.825838448816171, 1.328394247683596 ], [ 103.825838433052937, 1.333615598959491 ], [ 103.830331215119799, 1.336226284173403 ], [ 103.834824003537875, 1.333615609988007 ], [ 103.834824000402705, 1.328394258668918 ], [ 103.830331227747877, 1.325783581546317 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "644", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.830331208768584, 1.341447635153211 ], [ 103.825838401340789, 1.344058300843375 ], [ 103.825838385391876, 1.349279651449625 ], [ 103.830331195991761, 1.351890336441008 ], [ 103.83482401301724, 1.349279662607722 ], [ 103.83482400984515, 1.344058311958278 ], [ 103.830331208768584, 1.341447635153211 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "645", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.830331189566181, 1.357111686747257 ], [ 103.825838353308384, 1.359722351986389 ], [ 103.825838337173764, 1.364943701915165 ], [ 103.830331176640598, 1.367554386680105 ], [ 103.834824022607407, 1.364943713202845 ], [ 103.834824019398383, 1.359722363230875 ], [ 103.830331189566181, 1.357111686747257 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "648", "topic": "topic1" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.83033113062011, 1.404103829217437 ], [ 103.825838205868649, 1.406714493079983 ], [ 103.825838189176963, 1.411935840929365 ], [ 103.830331117248264, 1.414546524991503 ], [ 103.834824052042691, 1.411935852605805 ], [ 103.834824048722851, 1.406714504713227 ], [ 103.83033113062011, 1.404103829217437 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "649", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.830331110525137, 1.41976787252523 ], [ 103.825838155607869, 1.422378535921082 ], [ 103.825838138730475, 1.427599883061677 ], [ 103.830331097004503, 1.430210566881723 ], [ 103.834824062076052, 1.427599894867707 ], [ 103.834824058719278, 1.422378547683915 ], [ 103.830331110525137, 1.41976787252523 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "650", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.830331090206997, 1.435431913702748 ], [ 103.825838104789966, 1.438042576627992 ], [ 103.825838087726851, 1.443263923051973 ], [ 103.83033107653759, 1.445874606626013 ], [ 103.834824072220229, 1.443263934987594 ], [ 103.834824068826521, 1.438042588520416 ], [ 103.830331090206997, 1.435431913702748 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "653", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.834823931691048, 1.208303118963465 ], [ 103.830331360112211, 1.210913795824813 ], [ 103.83033135435592, 1.21613515191124 ], [ 103.834823937407506, 1.218745831146974 ], [ 103.839316517582404, 1.216135146917686 ], [ 103.839316506109668, 1.210913790852704 ], [ 103.834823931691048, 1.208303118963465 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "654", "topic": "topic3" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.83482394028421, 1.223967186934355 ], [ 103.830331342768972, 1.226577863474912 ], [ 103.830331336938329, 1.231799218950417 ], [ 103.834823946074508, 1.234409897896019 ], [ 103.839316552297078, 1.231799213892526 ], [ 103.839316540676123, 1.226577858438467 ], [ 103.83482394028421, 1.223967186934355 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "655", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.834823948988117, 1.239631253068561 ], [ 103.830331325202664, 1.242241929284412 ], [ 103.830331319297642, 1.247463284141164 ], [ 103.834823954852268, 1.250073962792719 ], [ 103.839316587456352, 1.247463279018935 ], [ 103.839316575687207, 1.24224192418363 ], [ 103.834823948988117, 1.239631253068561 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "656", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.834823957802797, 1.255295317342593 ], [ 103.83033130741326, 1.257905993229823 ], [ 103.830331301433873, 1.263127347459991 ], [ 103.834823963740803, 1.265738025813585 ], [ 103.839316623060256, 1.263127342273424 ], [ 103.839316611142891, 1.257905988064702 ], [ 103.834823957802797, 1.255295317342593 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "657", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.834823966728266, 1.270959379732961 ], [ 103.830331289400775, 1.273570055287654 ], [ 103.830331283347036, 1.278791408883409 ], [ 103.834823972740111, 1.281402086935126 ], [ 103.839316659108803, 1.278791403632502 ], [ 103.839316647043205, 1.273570050058194 ], [ 103.834823966728266, 1.270959379732961 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "658", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.834823975764493, 1.286623440216175 ], [ 103.830331271165193, 1.289234115434416 ], [ 103.830331265037088, 1.294455468387928 ], [ 103.834823981850192, 1.297066146133854 ], [ 103.83931669560198, 1.294455463072682 ], [ 103.839316683388191, 1.289234110140616 ], [ 103.834823975764493, 1.286623440216175 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "659", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.834823984911509, 1.302287498768745 ], [ 103.830331252706515, 1.30489817364662 ], [ 103.830331246504031, 1.31011952595006 ], [ 103.834823991071062, 1.312730203386281 ], [ 103.839316732539857, 1.310119520570473 ], [ 103.839316720177834, 1.30489816828848 ], [ 103.834823984911509, 1.302287498768745 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "660", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.834823994169298, 1.317951555367185 ], [ 103.830331234024712, 1.320562229900778 ], [ 103.830331227747877, 1.325783581546317 ], [ 103.834824000402705, 1.328394258668918 ], [ 103.839316769922391, 1.325783576102389 ], [ 103.839316757412135, 1.320562224478298 ], [ 103.834823994169298, 1.317951555367185 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "661", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.834824003537875, 1.333615609988007 ], [ 103.830331215119799, 1.336226284173403 ], [ 103.830331208768584, 1.341447635153211 ], [ 103.83482400984515, 1.344058311958278 ], [ 103.839316807749611, 1.341447629644941 ], [ 103.839316795091122, 1.336226278686581 ], [ 103.834824003537875, 1.333615609988007 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "662", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.83482401301724, 1.349279662607722 ], [ 103.830331195991761, 1.351890336441008 ], [ 103.830331189566181, 1.357111686747257 ], [ 103.834824019398383, 1.359722363230875 ], [ 103.839316846021546, 1.357111681174643 ], [ 103.839316833214824, 1.351890330889842 ], [ 103.83482401301724, 1.349279662607722 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "663", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.834824022607407, 1.364943713202845 ], [ 103.830331176640598, 1.367554386680105 ], [ 103.830331170140639, 1.372775736304966 ], [ 103.834824029062403, 1.375386412463222 ], [ 103.83931688473821, 1.372775730668009 ], [ 103.83931687178324, 1.367554381064597 ], [ 103.834824022607407, 1.364943713202845 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "666", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.834824052042691, 1.411935852605805 ], [ 103.830331117248264, 1.414546524991503 ], [ 103.830331110525137, 1.41976787252523 ], [ 103.834824058719278, 1.422378547683915 ], [ 103.839317003556644, 1.419767866695237 ], [ 103.839316990156931, 1.414546519182959 ], [ 103.834824052042691, 1.411935852605805 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "667", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.834824062076052, 1.427599894867707 ], [ 103.830331097004503, 1.430210566881723 ], [ 103.830331090206997, 1.435431913702748 ], [ 103.834824068826521, 1.438042588520416 ], [ 103.839317044052336, 1.435431907808409 ], [ 103.839317030504361, 1.430210561008832 ], [ 103.834824062076052, 1.427599894867707 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "669", "topic": "topic3" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.834824082475208, 1.458927972941983 ], [ 103.830331055847495, 1.461538644200891 ], [ 103.830331048901201, 1.466759989573033 ], [ 103.834824089373441, 1.469370663696925 ], [ 103.839317126378106, 1.466759983549997 ], [ 103.839317112533578, 1.461538638199305 ], [ 103.834824082475208, 1.458927972941983 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "674", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.839316659108803, 1.278791403632502 ], [ 103.834823972740111, 1.281402086935126 ], [ 103.834823975764493, 1.286623440216175 ], [ 103.839316683388191, 1.289234110140616 ], [ 103.84380937879807, 1.286623419010243 ], [ 103.84380935754308, 1.281402065815279 ], [ 103.839316659108803, 1.278791403632502 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "675", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.83931669560198, 1.294455463072682 ], [ 103.834823981850192, 1.297066146133854 ], [ 103.834823984911509, 1.302287498768745 ], [ 103.839316720177834, 1.30489816828848 ], [ 103.843809443082108, 1.302287477304557 ], [ 103.843809421567585, 1.297066124755751 ], [ 103.83931669560198, 1.294455463072682 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "676", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.839316732539857, 1.310119520570473 ], [ 103.834823991071062, 1.312730203386281 ], [ 103.834823994169298, 1.317951555367185 ], [ 103.839316757412135, 1.320562224478298 ], [ 103.843809508144702, 1.317951533644736 ], [ 103.84380948637066, 1.312730181749919 ], [ 103.839316732539857, 1.310119520570473 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "677", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.839316769922391, 1.325783576102389 ], [ 103.834824000402705, 1.328394258668918 ], [ 103.834824003537875, 1.333615609988007 ], [ 103.839316795091122, 1.336226278686581 ], [ 103.843809573985894, 1.333615588007293 ], [ 103.843809551952319, 1.328394236774293 ], [ 103.839316769922391, 1.325783576102389 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "678", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.839316807749611, 1.341447629644941 ], [ 103.83482400984515, 1.344058311958278 ], [ 103.83482401301724, 1.349279662607722 ], [ 103.839316833214824, 1.351890330889842 ], [ 103.843809640605684, 1.349279640368742 ], [ 103.843809618312562, 1.344058289805387 ], [ 103.839316807749611, 1.341447629644941 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "679", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.839316846021546, 1.357111681174643 ], [ 103.834824019398383, 1.359722363230875 ], [ 103.834824022607407, 1.364943713202845 ], [ 103.83931687178324, 1.367554381064597 ], [ 103.843809708004102, 1.364943690705595 ], [ 103.843809685451461, 1.359722340819715 ], [ 103.839316846021546, 1.357111681174643 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "680", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.83931688473821, 1.372775730668009 ], [ 103.834824029062403, 1.375386412463222 ], [ 103.834824032308362, 1.38060776174989 ], [ 103.839316910796398, 1.383218429187357 ], [ 103.843809776181203, 1.380607738994367 ], [ 103.843809753368987, 1.375386389793791 ], [ 103.83931688473821, 1.372775730668009 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "683", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.839317003556644, 1.419767866695237 ], [ 103.834824058719278, 1.422378547683915 ], [ 103.834824062076052, 1.427599894867707 ], [ 103.839317030504361, 1.430210561008832 ], [ 103.843809985384681, 1.427599871337345 ], [ 103.843809961793738, 1.422378524239648 ], [ 103.839317003556644, 1.419767866695237 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "687", "topic": "topic1" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.843809190617108, 1.239631232637384 ], [ 103.839316575687207, 1.24224192418363 ], [ 103.839316587456352, 1.247463279018935 ], [ 103.843809231829596, 1.250073942189376 ], [ 103.848301855466858, 1.247463243020562 ], [ 103.84830182602353, 1.242241888335976 ], [ 103.843809190617108, 1.239631232637384 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "689", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.843809315292589, 1.270959358785284 ], [ 103.839316647043205, 1.273570050058194 ], [ 103.839316659108803, 1.278791403632502 ], [ 103.84380935754308, 1.281402065815279 ], [ 103.848302034722352, 1.278791366729801 ], [ 103.84830200453743, 1.273570013306216 ], [ 103.843809315292589, 1.270959358785284 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "690", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.84380937879807, 1.286623419010243 ], [ 103.839316683388191, 1.289234110140616 ], [ 103.83931669560198, 1.294455463072682 ], [ 103.843809421567585, 1.297066124755751 ], [ 103.848302126018666, 1.294455425717809 ], [ 103.848302095462969, 1.289234072936468 ], [ 103.84380937879807, 1.286623419010243 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "691", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.843809443082108, 1.302287477304557 ], [ 103.839316720177834, 1.30489816828848 ], [ 103.839316732539857, 1.310119520570473 ], [ 103.84380948637066, 1.312730181749919 ], [ 103.848302218427435, 1.310119482763423 ], [ 103.84830218750092, 1.304898130632156 ], [ 103.843809443082108, 1.302287477304557 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "692", "topic": "topic4" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.843809508144702, 1.317951533644736 ], [ 103.839316757412135, 1.320562224478298 ], [ 103.839316769922391, 1.325783576102389 ], [ 103.843809551952319, 1.328394236774293 ], [ 103.848302311948686, 1.325783537843155 ], [ 103.848302280651325, 1.320562186369793 ], [ 103.843809508144702, 1.317951533644736 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "693", "topic": "topic4" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.843809573985894, 1.333615588007293 ], [ 103.839316795091122, 1.336226278686581 ], [ 103.839316807749611, 1.341447629644941 ], [ 103.843809618312562, 1.344058289805387 ], [ 103.848302406582405, 1.34144759093352 ], [ 103.848302374914226, 1.336226240125889 ], [ 103.843809573985894, 1.333615588007293 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "694", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.843809640605684, 1.349279640368742 ], [ 103.839316833214824, 1.351890330889842 ], [ 103.839316846021546, 1.357111681174643 ], [ 103.843809685451461, 1.359722340819715 ], [ 103.848302502328693, 1.357111642011028 ], [ 103.848302470289639, 1.351890291876959 ], [ 103.843809640605684, 1.349279640368742 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "695", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.843809708004102, 1.364943690705595 ], [ 103.83931687178324, 1.367554381064597 ], [ 103.83931688473821, 1.372775730668009 ], [ 103.843809753368987, 1.375386389793791 ], [ 103.848302599187534, 1.372775691052195 ], [ 103.848302566777633, 1.367554341599516 ], [ 103.843809708004102, 1.364943690705595 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "696", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.843809776181203, 1.380607738994367 ], [ 103.839316910796398, 1.383218429187357 ], [ 103.839316923899602, 1.388439778101553 ], [ 103.843809822065197, 1.391050436704127 ], [ 103.848302697158999, 1.388439738033534 ], [ 103.848302664378224, 1.383218389270074 ], [ 103.843809776181203, 1.380607738994367 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "697", "topic": "topic1" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.843809845136974, 1.396271785211572 ], [ 103.839316950254286, 1.39888247523464 ], [ 103.839316963505738, 1.404103823451791 ], [ 103.843809891540104, 1.406714481527241 ], [ 103.848302796243118, 1.404103782931561 ], [ 103.848302763091439, 1.398882434865147 ], [ 103.843809845136974, 1.396271785211572 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "702", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.848301680660711, 1.216135111823621 ], [ 103.843809109230065, 1.218745811060124 ], [ 103.843809129447095, 1.223967166761423 ], [ 103.848301738435069, 1.226577823042968 ], [ 103.85279431835049, 1.223967116294077 ], [ 103.852794280793148, 1.21874576080813 ], [ 103.848301680660711, 1.216135111823621 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "703", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.848301767507635, 1.23179917834631 ], [ 103.843809170140602, 1.234409877550924 ], [ 103.843809190617108, 1.239631232637384 ], [ 103.84830182602353, 1.242241888335976 ], [ 103.852794431986609, 1.239631181523975 ], [ 103.852794393947221, 1.23440982665287 ], [ 103.848301767507635, 1.23179917834631 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "705", "topic": "topic8" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.84830194453842, 1.263127305822889 ], [ 103.843809294297088, 1.265738004951992 ], [ 103.843809315292589, 1.270959358785284 ], [ 103.84830200453743, 1.273570013306216 ], [ 103.852794663597393, 1.270959306379728 ], [ 103.852794624593869, 1.265737952761796 ], [ 103.84830194453842, 1.263127305822889 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "706", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.848302034722352, 1.278791366729801 ], [ 103.84380935754308, 1.281402065815279 ], [ 103.84380937879807, 1.286623419010243 ], [ 103.848302095462969, 1.289234072936468 ], [ 103.852794781572143, 1.286623365958603 ], [ 103.85279474208653, 1.281402012979001 ], [ 103.848302034722352, 1.278791366729801 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "707", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.848302126018666, 1.294455425717809 ], [ 103.843809421567585, 1.297066124755751 ], [ 103.843809443082108, 1.302287477304557 ], [ 103.84830218750092, 1.304898130632156 ], [ 103.852794900993189, 1.302287423606824 ], [ 103.852794861025473, 1.297066071273384 ], [ 103.848302126018666, 1.294455425717809 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "708", "topic": "topic4" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.848302218427435, 1.310119482763423 ], [ 103.84380948637066, 1.312730181749919 ], [ 103.843809508144702, 1.317951533644736 ], [ 103.848302280651325, 1.320562186369793 ], [ 103.852795021860587, 1.317951479300904 ], [ 103.852794981410753, 1.312730127621454 ], [ 103.848302218427435, 1.310119482763423 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "709", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.848302311948686, 1.325783537843155 ], [ 103.843809551952319, 1.328394236774293 ], [ 103.843809573985894, 1.333615588007293 ], [ 103.848302374914226, 1.336226240125889 ], [ 103.852795144174365, 1.333615533017354 ], [ 103.8527951032424, 1.328394181999724 ], [ 103.848302311948686, 1.325783537843155 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "710", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.848302406582405, 1.34144759093352 ], [ 103.843809618312562, 1.344058289805387 ], [ 103.843809640605684, 1.349279640368742 ], [ 103.848302470289639, 1.351890291876959 ], [ 103.852795267934567, 1.349279584732688 ], [ 103.852795226520456, 1.344058234384706 ], [ 103.848302406582405, 1.34144759093352 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "712", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.848302599187534, 1.372775691052195 ], [ 103.843809753368987, 1.375386389793791 ], [ 103.843809776181203, 1.380607738994367 ], [ 103.848302664378224, 1.383218389270074 ], [ 103.852795519794469, 1.380607682066058 ], [ 103.852795477416009, 1.37538633308086 ], [ 103.848302599187534, 1.372775691052195 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "717", "topic": "topic3" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.848303100171677, 1.451095904890927 ], [ 103.843810104637313, 1.453706603238406 ], [ 103.843810128747435, 1.458927948895045 ], [ 103.848303169071414, 1.461538596020919 ], [ 103.852796174760059, 1.458927888735958 ], [ 103.852796129970457, 1.453706543294711 ], [ 103.848303100171677, 1.451095904890927 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "722", "topic": "topic8" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.852794663597393, 1.270959306379728 ], [ 103.84830200453743, 1.273570013306216 ], [ 103.848302034722352, 1.278791366729801 ], [ 103.85279474208653, 1.281402012979001 ], [ 103.857287409965096, 1.27879129817531 ], [ 103.857287361660866, 1.273569945031724 ], [ 103.852794663597393, 1.270959306379728 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "723", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.852794781572143, 1.286623365958603 ], [ 103.848302095462969, 1.289234072936468 ], [ 103.848302126018666, 1.294455425717809 ], [ 103.852794861025473, 1.297066071273384 ], [ 103.857287556064549, 1.294455356323313 ], [ 103.85728750716693, 1.289234003821975 ], [ 103.852794781572143, 1.286623365958603 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "724", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.852794900993189, 1.302287423606824 ], [ 103.84830218750092, 1.304898130632156 ], [ 103.848302218427435, 1.310119482763423 ], [ 103.852794981410753, 1.312730127621454 ], [ 103.857287703944223, 1.310119412528913 ], [ 103.857287654453188, 1.304898060677652 ], [ 103.852794900993189, 1.302287423606824 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "725", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.852795021860587, 1.317951479300904 ], [ 103.848302280651325, 1.320562186369793 ], [ 103.848302311948686, 1.325783537843155 ], [ 103.8527951032424, 1.328394181999724 ], [ 103.857287853604134, 1.325783466768621 ], [ 103.857287803519682, 1.320562115575268 ], [ 103.852795021860587, 1.317951479300904 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "726", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.852795144174365, 1.333615533017354 ], [ 103.848302374914226, 1.336226240125889 ], [ 103.848302406582405, 1.34144759093352 ], [ 103.852795226520456, 1.344058234384706 ], [ 103.857288005044367, 1.341447519018951 ], [ 103.85728795436647, 1.336226168491333 ], [ 103.852795144174365, 1.333615533017354 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "727", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.852795267934567, 1.349279584732688 ], [ 103.848302470289639, 1.351890291876959 ], [ 103.848302502328693, 1.357111642011028 ], [ 103.852795351244978, 1.359722284752913 ], [ 103.857288158264979, 1.357111569256415 ], [ 103.857288106993622, 1.351890219402362 ], [ 103.852795267934567, 1.349279584732688 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "728", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.852795393141264, 1.364943634423418 ], [ 103.848302566777633, 1.367554341599516 ], [ 103.848302599187534, 1.372775691052195 ], [ 103.852795477416009, 1.37538633308086 ], [ 103.857288313265997, 1.372775617457527 ], [ 103.857288261401166, 1.367554268284868 ], [ 103.852795393141264, 1.364943634423418 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "734", "topic": "topic8" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.857286843368257, 1.216135046629051 ], [ 103.852794280793148, 1.21874576080813 ], [ 103.85279431835049, 1.223967116294077 ], [ 103.857286935823268, 1.226577757288422 ], [ 103.861779506771867, 1.223967035532322 ], [ 103.861779451874199, 1.218745680390999 ], [ 103.857286843368257, 1.216135046629051 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "737", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.857287409965096, 1.27879129817531 ], [ 103.85279474208653, 1.281402012979001 ], [ 103.852794781572143, 1.286623365958603 ], [ 103.85728750716693, 1.289234003821975 ], [ 103.861780183864099, 1.286623281061261 ], [ 103.861780126147892, 1.281401928426299 ], [ 103.857287409965096, 1.27879129817531 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "738", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.857287556064549, 1.294455356323313 ], [ 103.852794861025473, 1.297066071273384 ], [ 103.852794900993189, 1.302287423606824 ], [ 103.857287654453188, 1.304898060677652 ], [ 103.861780358422152, 1.302287337675556 ], [ 103.861780300001243, 1.297065985686759 ], [ 103.857287556064549, 1.294455356323313 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "739", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.857287703944223, 1.310119412528913 ], [ 103.852794981410753, 1.312730127621454 ], [ 103.852795021860587, 1.317951479300904 ], [ 103.857287803519682, 1.320562115575268 ], [ 103.86178053509434, 1.317951392335697 ], [ 103.8617804759687, 1.312730041000895 ], [ 103.857287703944223, 1.310119412528913 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "740", "topic": "topic8" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.857287853604134, 1.325783466768621 ], [ 103.8527951032424, 1.328394181999724 ], [ 103.852795144174365, 1.333615533017354 ], [ 103.85728795436647, 1.336226168491333 ], [ 103.861780713880691, 1.333615445018196 ], [ 103.861780654050321, 1.328394094345217 ], [ 103.857287853604134, 1.325783466768621 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "741", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.857288005044367, 1.341447519018951 ], [ 103.852795226520456, 1.344058234384706 ], [ 103.852795267934567, 1.349279584732688 ], [ 103.857288106993622, 1.351890219402362 ], [ 103.861780894781305, 1.349279495699566 ], [ 103.861780834246176, 1.34405814569624 ], [ 103.857288005044367, 1.341447519018951 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "743", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.857288313265997, 1.372775617457527 ], [ 103.852795477416009, 1.37538633308086 ], [ 103.852795519794469, 1.380607682066058 ], [ 103.857288417589189, 1.383218315115364 ], [ 103.861781262925561, 1.380607590964972 ], [ 103.861781200980843, 1.375386242324438 ], [ 103.857288313265997, 1.372775617457527 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "752", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.861780183864099, 1.286623281061261 ], [ 103.85728750716693, 1.289234003821975 ], [ 103.857287556064549, 1.294455356323313 ], [ 103.861780300001243, 1.297065985686759 ], [ 103.866272985517028, 1.294455254889204 ], [ 103.866272918277502, 1.289233902797146 ], [ 103.861780183864099, 1.286623281061261 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "753", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.861780358422152, 1.302287337675556 ], [ 103.857287654453188, 1.304898060677652 ], [ 103.857287703944223, 1.310119412528913 ], [ 103.8617804759687, 1.312730041000895 ], [ 103.866273188867552, 1.310119309866953 ], [ 103.866273120812039, 1.304897958424977 ], [ 103.861780358422152, 1.302287337675556 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "754", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.86178053509434, 1.317951392335697 ], [ 103.857287803519682, 1.320562115575268 ], [ 103.857287853604134, 1.325783466768621 ], [ 103.861780654050321, 1.328394094345217 ], [ 103.866273394666152, 1.325783362878796 ], [ 103.866273325794609, 1.320562012094732 ], [ 103.86178053509434, 1.317951392335697 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "755", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.861780713880691, 1.333615445018196 ], [ 103.85728795436647, 1.336226168491333 ], [ 103.857288005044367, 1.341447519018951 ], [ 103.861780834246176, 1.34405814569624 ], [ 103.866273602912869, 1.341447413901245 ], [ 103.866273533225268, 1.336226063782923 ], [ 103.861780713880691, 1.333615445018196 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "756", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.861780894781305, 1.349279495699566 ], [ 103.857288106993622, 1.351890219402362 ], [ 103.857288158264979, 1.357111569256415 ], [ 103.861781016556336, 1.359722195030475 ], [ 103.866273813607776, 1.357111462910814 ], [ 103.866273743104117, 1.351890113466061 ], [ 103.861780894781305, 1.349279495699566 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "760", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.861781639527635, 1.411935677944028 ], [ 103.857288735306852, 1.414546402526387 ], [ 103.85728878895226, 1.419767749607896 ], [ 103.861781766941277, 1.422378371729829 ], [ 103.866274680871044, 1.419767638350561 ], [ 103.86627460710281, 1.414546291678373 ], [ 103.861781639527635, 1.411935677944028 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "764", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.866272586159795, 1.263127139129942 ], [ 103.861779954408576, 1.265737869243004 ], [ 103.861780011420123, 1.2709592225163 ], [ 103.866272718190913, 1.273569845234726 ], [ 103.870765358538179, 1.270959107195011 ], [ 103.870765283518608, 1.265737754395625 ], [ 103.866272586159795, 1.263127139129942 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "765", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.866272784614466, 1.278791197969037 ], [ 103.861780126147892, 1.281401928426299 ], [ 103.861780183864099, 1.286623281061261 ], [ 103.866272918277502, 1.289233902797146 ], [ 103.870765585451394, 1.286623164318227 ], [ 103.870765509504565, 1.281401812157182 ], [ 103.866272784614466, 1.278791197969037 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "766", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.866272985517028, 1.294455254889204 ], [ 103.861780300001243, 1.297065985686759 ], [ 103.861780358422152, 1.302287337675556 ], [ 103.866273120812039, 1.304897958424977 ], [ 103.870765815146413, 1.302287219510761 ], [ 103.870765738272311, 1.297065867995886 ], [ 103.866272985517028, 1.294455254889204 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "767", "topic": "topic4" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.866273188867552, 1.310119309866953 ], [ 103.8617804759687, 1.312730041000895 ], [ 103.86178053509434, 1.317951392335697 ], [ 103.866273325794609, 1.320562012094732 ], [ 103.870766047623349, 1.317951272749125 ], [ 103.870765969821932, 1.31272992188825 ], [ 103.866273188867552, 1.310119309866953 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "768", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.866273394666152, 1.325783362878796 ], [ 103.861780654050321, 1.328394094345217 ], [ 103.861780713880691, 1.333615445018196 ], [ 103.866273533225268, 1.336226063782923 ], [ 103.870766282882258, 1.333615324009829 ], [ 103.870766204153512, 1.328393973810784 ], [ 103.866273394666152, 1.325783362878796 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "769", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.866273602912869, 1.341447413901245 ], [ 103.861780834246176, 1.34405814569624 ], [ 103.861780894781305, 1.349279495699566 ], [ 103.866273743104117, 1.351890113466061 ], [ 103.870766520923254, 1.349279373269388 ], [ 103.870766441267151, 1.344058023740001 ], [ 103.866273602912869, 1.341447413901245 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "775", "topic": "topic1" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.866274903808161, 1.435431676943441 ], [ 103.861781959823944, 1.438042410627847 ], [ 103.861782024588109, 1.443263756448858 ], [ 103.866275053793288, 1.445874368143594 ], [ 103.870768007597789, 1.443263625487436 ], [ 103.870767922376814, 1.438042280140401 ], [ 103.866274903808161, 1.435431676943441 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "776", "topic": "topic1" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.870765358538179, 1.270959107195011 ], [ 103.866272718190913, 1.273569845234726 ], [ 103.866272784614466, 1.278791197969037 ], [ 103.870765509504565, 1.281401812157182 ], [ 103.875258158447863, 1.278791066110995 ], [ 103.875258073905016, 1.273569713915236 ], [ 103.870765358538179, 1.270959107195011 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "778", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.870765815146413, 1.302287219510761 ], [ 103.866273120812039, 1.304897958424977 ], [ 103.866273188867552, 1.310119309866953 ], [ 103.870765969821932, 1.31272992188825 ], [ 103.875258672974894, 1.310119174777554 ], [ 103.875258586354903, 1.304897823874144 ], [ 103.870765815146413, 1.302287219510761 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "779", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.870766047623349, 1.317951272749125 ], [ 103.866273325794609, 1.320562012094732 ], [ 103.866273394666152, 1.325783362878796 ], [ 103.870766204153512, 1.328393973810784 ], [ 103.875258934912125, 1.325783226173691 ], [ 103.875258847253505, 1.320561875928198 ], [ 103.870766047623349, 1.317951272749125 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "780", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.870766282882258, 1.333615324009829 ], [ 103.866273533225268, 1.336226063782923 ], [ 103.866273602912869, 1.341447413901245 ], [ 103.870766441267151, 1.344058023740001 ], [ 103.875259199965299, 1.341447275580415 ], [ 103.875259111268008, 1.336225926000669 ], [ 103.870766282882258, 1.333615324009829 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "781", "topic": "topic1" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.870766520923254, 1.349279373269388 ], [ 103.866273743104117, 1.351890113466061 ], [ 103.866273813607776, 1.357111462910814 ], [ 103.870766681162891, 1.359722071652413 ], [ 103.875259468134487, 1.357111322974238 ], [ 103.875259378398525, 1.351889974068069 ], [ 103.870766520923254, 1.349279373269388 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "782", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.87076676174641, 1.364943420504312 ], [ 103.866273955431211, 1.367554161120662 ], [ 103.866274026750972, 1.372775509884016 ], [ 103.870766923840876, 1.375386117524534 ], [ 103.875259739419832, 1.372775368331674 ], [ 103.875259648645141, 1.36755402010691 ], [ 103.87076676174641, 1.364943420504312 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "789", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.875258414153507, 1.294455121415493 ], [ 103.870765738272311, 1.297065867995886 ], [ 103.870765815146413, 1.302287219510761 ], [ 103.875258586354903, 1.304897823874144 ], [ 103.879751270943387, 1.302287069112456 ], [ 103.879751175616093, 1.297065718200782 ], [ 103.875258414153507, 1.294455121415493 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "790", "topic": "topic4" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.875258672974894, 1.310119174777554 ], [ 103.870765969821932, 1.31272992188825 ], [ 103.870766047623349, 1.317951272749125 ], [ 103.875258847253505, 1.320561875928198 ], [ 103.879751559225042, 1.317951120541202 ], [ 103.879751462747848, 1.312729770283536 ], [ 103.875258672974894, 1.310119174777554 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "791", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.875258934912125, 1.325783226173691 ], [ 103.870766204153512, 1.328393973810784 ], [ 103.870766282882258, 1.333615324009829 ], [ 103.875259111268008, 1.336225926000669 ], [ 103.879751850956481, 1.33361516999227 ], [ 103.879751753329359, 1.328393820396439 ], [ 103.875258934912125, 1.325783226173691 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "792", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.875259199965299, 1.341447275580415 ], [ 103.870766441267151, 1.344058023740001 ], [ 103.870766520923254, 1.349279373269388 ], [ 103.875259378398525, 1.351889974068069 ], [ 103.879752146137818, 1.349279217442168 ], [ 103.879752047360725, 1.344057868516003 ], [ 103.875259199965299, 1.341447275580415 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "793", "topic": "topic3" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.875259468134487, 1.357111322974238 ], [ 103.870766681162891, 1.359722071652413 ], [ 103.87076676174641, 1.364943420504312 ], [ 103.875259648645141, 1.36755402010691 ], [ 103.879752444769167, 1.364943262867411 ], [ 103.879752344842046, 1.359721914618741 ], [ 103.875259468134487, 1.357111322974238 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "795", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.875260013821389, 1.388439411629236 ], [ 103.87076716930116, 1.391050161332879 ], [ 103.870767251739579, 1.396271508806317 ], [ 103.875260198487069, 1.398882106004973 ], [ 103.879753052382327, 1.396271347549984 ], [ 103.879752950155066, 1.39105000067979 ], [ 103.875260013821389, 1.388439411629236 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "800", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.879751270943387, 1.302287069112456 ], [ 103.875258586354903, 1.304897823874144 ], [ 103.875258672974894, 1.310119174777554 ], [ 103.879751462747848, 1.312729770283536 ], [ 103.884244156043607, 1.310119007260735 ], [ 103.884244050859138, 1.304897657025168 ], [ 103.879751270943387, 1.302287069112456 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "801", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.879751559225042, 1.317951120541202 ], [ 103.875258847253505, 1.320561875928198 ], [ 103.875258934912125, 1.325783226173691 ], [ 103.879751753329359, 1.328393820396439 ], [ 103.884244474119456, 1.325783056653324 ], [ 103.884244367673759, 1.320561707075683 ], [ 103.879751559225042, 1.317951120541202 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "802", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.879751850956481, 1.33361516999227 ], [ 103.875259111268008, 1.336225926000669 ], [ 103.875259199965299, 1.341447275580415 ], [ 103.879752047360725, 1.344057868516003 ], [ 103.884244795979043, 1.341447104056476 ], [ 103.884244688272091, 1.336225755144591 ], [ 103.879751850956481, 1.33361516999227 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "803", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.879752146137818, 1.349279217442168 ], [ 103.875259378398525, 1.351889974068069 ], [ 103.875259468134487, 1.357111322974238 ], [ 103.879752344842046, 1.359721914618741 ], [ 103.884245121622499, 1.357111149446703 ], [ 103.884245012654233, 1.351889801208402 ], [ 103.879752146137818, 1.349279217442168 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "804", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.879752444769167, 1.364943262867411 ], [ 103.875259648645141, 1.36755402010691 ], [ 103.875259739419832, 1.372775368331674 ], [ 103.879752645773465, 1.375385958681166 ], [ 103.884245451049935, 1.372775192800519 ], [ 103.884245340820328, 1.367553845243631 ], [ 103.879752444769167, 1.364943262867411 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "805", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.879752746850642, 1.380607306244511 ], [ 103.875259922007956, 1.383218064093707 ], [ 103.875260013821389, 1.388439411629236 ], [ 103.879752950155066, 1.39105000067979 ], [ 103.884245784261466, 1.388439234094436 ], [ 103.884245672770504, 1.383217887226791 ], [ 103.879752746850642, 1.380607306244511 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "810", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.884243841751399, 1.294454955902197 ], [ 103.879751175616093, 1.297065718200782 ], [ 103.879751270943387, 1.302287069112456 ], [ 103.884244050859138, 1.304897657025168 ], [ 103.888736725590448, 1.302286886480657 ], [ 103.888736611810003, 1.297065536301462 ], [ 103.884243841751399, 1.294454955902197 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "811", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.884244156043607, 1.310119007260735 ], [ 103.879751462747848, 1.312729770283536 ], [ 103.879751559225042, 1.317951120541202 ], [ 103.884244367673759, 1.320561707075683 ], [ 103.888737069676793, 1.317950935711949 ], [ 103.88873695452385, 1.312729586186771 ], [ 103.884244156043607, 1.310119007260735 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "812", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.884244474119456, 1.325783056653324 ], [ 103.879751753329359, 1.328393820396439 ], [ 103.879751850956481, 1.33361516999227 ], [ 103.884244688272091, 1.336225755144591 ], [ 103.888737417880748, 1.333614982965535 ], [ 103.888737301355249, 1.328393634102201 ], [ 103.884244474119456, 1.325783056653324 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "813", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.884244795979043, 1.341447104056476 ], [ 103.879752047360725, 1.344057868516003 ], [ 103.879752146137818, 1.349279217442168 ], [ 103.884245012654233, 1.351889801208402 ], [ 103.888737770202397, 1.349279028217926 ], [ 103.888737652304314, 1.344057680024267 ], [ 103.884244795979043, 1.341447104056476 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "814", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.884245121622499, 1.357111149446703 ], [ 103.879752344842046, 1.359721914618741 ], [ 103.879752444769167, 1.364943262867411 ], [ 103.884245340820328, 1.367553845243631 ], [ 103.888738126641897, 1.364943071445634 ], [ 103.888738007371188, 1.359721723929479 ], [ 103.884245121622499, 1.357111149446703 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "815", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.884245451049935, 1.372775192800519 ], [ 103.879752645773465, 1.375385958681166 ], [ 103.879752746850642, 1.380607306244511 ], [ 103.884245672770504, 1.383217887226791 ], [ 103.88873848719939, 1.380607112625173 ], [ 103.888738366555998, 1.375385765794351 ], [ 103.884245451049935, 1.372775192800519 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "816", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.884245784261466, 1.388439234094436 ], [ 103.879752950155066, 1.39105000067979 ], [ 103.879753052382327, 1.396271347549984 ], [ 103.884246008504846, 1.398881927134395 ], [ 103.888738851874962, 1.396271151733057 ], [ 103.888738729858858, 1.391049805595396 ], [ 103.884245784261466, 1.388439234094436 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "820", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.888736725590448, 1.302286886480657 ], [ 103.884244050859138, 1.304897657025168 ], [ 103.884244156043607, 1.310119007260735 ], [ 103.88873695452385, 1.312729586186771 ], [ 103.893229637851121, 1.310118807316515 ], [ 103.893229514102188, 1.304897457878071 ], [ 103.888736725590448, 1.302286886480657 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "821", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.888737069676793, 1.317950935711949 ], [ 103.884244367673759, 1.320561707075683 ], [ 103.884244474119456, 1.325783056653324 ], [ 103.888737301355249, 1.328393634102201 ], [ 103.89323001206553, 1.325782854317716 ], [ 103.893229886832785, 1.320561505537207 ], [ 103.888737069676793, 1.317950935711949 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "822", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.888737417880748, 1.333614982965535 ], [ 103.884244688272091, 1.336225755144591 ], [ 103.884244795979043, 1.341447104056476 ], [ 103.888737652304314, 1.344057680024267 ], [ 103.893230390731503, 1.341446899329451 ], [ 103.893230264014889, 1.336225551214708 ], [ 103.888737417880748, 1.333614982965535 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "824", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.888738126641897, 1.364943071445634 ], [ 103.884245340820328, 1.367553845243631 ], [ 103.884245451049935, 1.372775192800519 ], [ 103.888738366555998, 1.375385765794351 ], [ 103.893231161418655, 1.372774983290572 ], [ 103.893231031734175, 1.367553636530846 ], [ 103.888738126641897, 1.364943071445634 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "825", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.88873848719939, 1.380607112625173 ], [ 103.884245672770504, 1.383217887226791 ], [ 103.884245784261466, 1.388439234094436 ], [ 103.888738729858858, 1.391049805595396 ], [ 103.89323155344016, 1.388439022192984 ], [ 103.893231422271654, 1.383217676122511 ], [ 103.88873848719939, 1.380607112625173 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "829", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.893229637851121, 1.310118807316515 ], [ 103.88873695452385, 1.312729586186771 ], [ 103.888737069676793, 1.317950935711949 ], [ 103.893229886832785, 1.320561505537207 ], [ 103.897722578756031, 1.317950718261388 ], [ 103.897722444927325, 1.312729369597977 ], [ 103.893229637851121, 1.310118807316515 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "830", "topic": "topic4" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.89323001206553, 1.325782854317716 ], [ 103.888737301355249, 1.328393634102201 ], [ 103.888737417880748, 1.333614982965535 ], [ 103.893230264014889, 1.336225551214708 ], [ 103.897722983432416, 1.33361476292965 ], [ 103.89772284800857, 1.328393414928094 ], [ 103.89323001206553, 1.325782854317716 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "831", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.893230390731503, 1.341446899329451 ], [ 103.888737652304314, 1.344057680024267 ], [ 103.888737770202397, 1.349279028217926 ], [ 103.893230645648643, 1.351889594887083 ], [ 103.897723392894363, 1.349278805596685 ], [ 103.897723255875306, 1.344057458264815 ], [ 103.893230390731503, 1.341446899329451 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "832", "topic": "topic8" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.893230773849169, 1.357110942328232 ], [ 103.888738007371188, 1.359721723929479 ], [ 103.888738126641897, 1.364943071445634 ], [ 103.893231031734175, 1.367553636530846 ], [ 103.897723807141958, 1.364942846239006 ], [ 103.897723668527675, 1.35972149958465 ], [ 103.893230773849169, 1.357110942328232 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "833", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.893231161418655, 1.372774983290572 ], [ 103.888738366555998, 1.375385765794351 ], [ 103.88873848719939, 1.380607112625173 ], [ 103.893231422271654, 1.383217676122511 ], [ 103.897724226175427, 1.380606884833127 ], [ 103.897724085965834, 1.375385538864114 ], [ 103.893231161418655, 1.372774983290572 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "834", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.89323155344016, 1.388439022192984 ], [ 103.888738729858858, 1.391049805595396 ], [ 103.888738851874962, 1.396271151733057 ], [ 103.893231817261196, 1.398881713638589 ], [ 103.897724649994871, 1.396270921355559 ], [ 103.897724508189924, 1.391049576079719 ], [ 103.89323155344016, 1.388439022192984 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "838", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.897722178865038, 1.302286671615388 ], [ 103.893229514102188, 1.304897457878071 ], [ 103.893229637851121, 1.310118807316515 ], [ 103.897722444927325, 1.312729369597977 ], [ 103.902215118174823, 1.310118574944919 ], [ 103.902214975861469, 1.304897226432877 ], [ 103.897722178865038, 1.302286671615388 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "839", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.897722578756031, 1.317950718261388 ], [ 103.893229886832785, 1.320561505537207 ], [ 103.89323001206553, 1.325782854317716 ], [ 103.89772284800857, 1.328393414928094 ], [ 103.902215548527764, 1.325782619166891 ], [ 103.90221540450797, 1.320561271312796 ], [ 103.897722578756031, 1.317950718261388 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "842", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.897723807141958, 1.364942846239006 ], [ 103.893231031734175, 1.367553636530846 ], [ 103.893231161418655, 1.372774983290572 ], [ 103.897724085965834, 1.375385538864114 ], [ 103.902216870303405, 1.372774739801859 ], [ 103.902216721164038, 1.367553393968581 ], [ 103.897723807141958, 1.364942846239006 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "843", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.897724226175427, 1.380606884833127 ], [ 103.893231422271654, 1.383217676122511 ], [ 103.89323155344016, 1.388439022192984 ], [ 103.897724508189924, 1.391049576079719 ], [ 103.902217321134785, 1.388438775924907 ], [ 103.902217170288765, 1.383217430780892 ], [ 103.897724226175427, 1.380606884833127 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "844", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.897724649994871, 1.396270921355559 ], [ 103.893231817261196, 1.398881713638589 ], [ 103.893231949913755, 1.404103059011982 ], [ 103.897724935200131, 1.406713611207978 ], [ 103.902217777086179, 1.404102809964505 ], [ 103.902217624533478, 1.398881465517583 ], [ 103.897724649994871, 1.396270921355559 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "845", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.897725078600473, 1.411934955782817 ], [ 103.89323221670297, 1.414545749055597 ], [ 103.893232350839639, 1.41976709372408 ], [ 103.897725366996582, 1.422377644225406 ], [ 103.902218238157744, 1.419766841897169 ], [ 103.902218083898305, 1.414545498155168 ], [ 103.897725078600473, 1.411934955782817 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "846", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.902214692941101, 1.294454528756936 ], [ 103.897722046631429, 1.297065322297951 ], [ 103.897722178865038, 1.302286671615388 ], [ 103.902214975861469, 1.304897226432877 ], [ 103.906707630544531, 1.302286424516676 ], [ 103.906707479857786, 1.297065076190274 ], [ 103.902214692941101, 1.294454528756936 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "847", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.902215118174823, 1.310118574944919 ], [ 103.897722444927325, 1.312729369597977 ], [ 103.897722578756031, 1.317950718261388 ], [ 103.90221540450797, 1.320561271312796 ], [ 103.906708086240144, 1.317950468189544 ], [ 103.906707933735703, 1.31272912051718 ], [ 103.902215118174823, 1.310118574944919 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "848", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.902215548527764, 1.325782619166891 ], [ 103.89772284800857, 1.328393414928094 ], [ 103.897722983432416, 1.33361476292965 ], [ 103.902215838273804, 1.336225314211045 ], [ 103.906708547388931, 1.333614509884639 ], [ 103.906708393066751, 1.328393162874143 ], [ 103.902215548527764, 1.325782619166891 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "851", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.902216870303405, 1.372774739801859 ], [ 103.897724085965834, 1.375385538864114 ], [ 103.897724226175427, 1.380606884833127 ], [ 103.902217170288765, 1.383217430780892 ], [ 103.906709963556125, 1.3806066228684 ], [ 103.906709803780359, 1.375385277890483 ], [ 103.902216870303405, 1.372774739801859 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "852", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.902217321134785, 1.388438775924907 ], [ 103.897724508189924, 1.391049576079719 ], [ 103.897724649994871, 1.396270921355559 ], [ 103.902217624533478, 1.398881465517583 ], [ 103.906710446519369, 1.39627065641752 ], [ 103.906710284925637, 1.391049312132787 ], [ 103.902217321134785, 1.388438775924907 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "853", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.902217777086179, 1.404102809964505 ], [ 103.897724935200131, 1.406713611207978 ], [ 103.897725078600473, 1.411934955782817 ], [ 103.902218083898305, 1.414545498155168 ], [ 103.906710934936683, 1.411934687871427 ], [ 103.906710771524899, 1.406713344287709 ], [ 103.902217777086179, 1.404102809964505 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "854", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.906707630544531, 1.302286424516676 ], [ 103.902214975861469, 1.304897226432877 ], [ 103.902215118174823, 1.310118574944919 ], [ 103.906707933735703, 1.31272912051718 ], [ 103.911200596792128, 1.310118310145975 ], [ 103.911200435914338, 1.304896962689615 ], [ 103.906707630544531, 1.302286424516676 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "855", "topic": "topic8" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.906708086240144, 1.317950468189544 ], [ 103.90221540450797, 1.320561271312796 ], [ 103.902215548527764, 1.325782619166891 ], [ 103.906708393066751, 1.328393162874143 ], [ 103.911201083283544, 1.325782351200879 ], [ 103.911200920476716, 1.320561004402477 ], [ 103.906708086240144, 1.317950468189544 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "860", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.906710446519369, 1.39627065641752 ], [ 103.902217624533478, 1.398881465517583 ], [ 103.902217777086179, 1.404102809964505 ], [ 103.906710771524899, 1.406713344287709 ], [ 103.911203602551865, 1.40410252616257 ], [ 103.911203430099036, 1.398881182771406 ], [ 103.906710446519369, 1.39627065641752 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "861", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.906710934936683, 1.411934687871427 ], [ 103.902218083898305, 1.414545498155168 ], [ 103.902218238157744, 1.419766841897169 ], [ 103.906711263578345, 1.422377374331762 ], [ 103.911204123769068, 1.419766554927929 ], [ 103.911203949386874, 1.414545212241701 ], [ 103.906710934936683, 1.411934687871427 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "864", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.911201083283544, 1.325782351200879 ], [ 103.906708393066751, 1.328393162874143 ], [ 103.906708547388931, 1.333614509884639 ], [ 103.911201410826237, 1.336225044133633 ], [ 103.915694109527649, 1.333614223830536 ], [ 103.91569393630715, 1.328392877940381 ], [ 103.911201083283544, 1.325782351200879 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "866", "topic": "topic1" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.911202073628047, 1.357110427318585 ], [ 103.906709328088894, 1.359721241584283 ], [ 103.906709486046751, 1.364942587247555 ], [ 103.911202408887306, 1.367553117556865 ], [ 103.91569516313362, 1.364942294471312 ], [ 103.915694985832246, 1.359720949928408 ], [ 103.911202073628047, 1.357110427318585 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "868", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.911203087122729, 1.388438495290235 ], [ 103.906710284925637, 1.391049312132787 ], [ 103.906710446519369, 1.39627065641752 ], [ 103.911203430099036, 1.398881182771406 ], [ 103.915696241225874, 1.39627035691897 ], [ 103.915696059843341, 1.391049013754635 ], [ 103.911203087122729, 1.388438495290235 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "870", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.911204123769068, 1.419766554927929 ], [ 103.906711263578345, 1.422377374331762 ], [ 103.906711428808251, 1.427598717206638 ], [ 103.911204474462934, 1.430209239589362 ], [ 103.915697343805959, 1.427598410985613 ], [ 103.915697158341999, 1.422377069231161 ], [ 103.911204123769068, 1.419766554927929 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "871", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.915693080406356, 1.30228614518455 ], [ 103.911200435914338, 1.304896962689615 ], [ 103.911200596792128, 1.310118310145975 ], [ 103.915693420726356, 1.312728838944413 ], [ 103.920186073480437, 1.310118012919717 ], [ 103.920185894038241, 1.304896666648316 ], [ 103.915693080406356, 1.30228614518455 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "872", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.915693591906503, 1.317950185496449 ], [ 103.911200920476716, 1.320561004402477 ], [ 103.911201083283544, 1.325782351200879 ], [ 103.91569393630715, 1.328392877940381 ], [ 103.920186616110257, 1.325782050419712 ], [ 103.920186434516438, 1.320560704806285 ], [ 103.915693591906503, 1.317950185496449 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "873", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.915694109527649, 1.333614223830536 ], [ 103.911201410826237, 1.336225044133633 ], [ 103.911201575562117, 1.341446390266245 ], [ 103.915694458009042, 1.344056914942875 ], [ 103.92018716519506, 1.341446085930127 ], [ 103.920186981449561, 1.336224740982503 ], [ 103.915694109527649, 1.333614223830536 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "877", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.915696241225874, 1.39627035691897 ], [ 103.911203430099036, 1.398881182771406 ], [ 103.911203602551865, 1.40410252616257 ], [ 103.915696606031617, 1.406713042548354 ], [ 103.920189426088172, 1.40410220760621 ], [ 103.920189233735258, 1.398880865400095 ], [ 103.915696241225874, 1.39627035691897 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "886", "topic": "topic1" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.920189426088172, 1.40410220760621 ], [ 103.915696606031617, 1.406713042548354 ], [ 103.915696789454827, 1.411934385011661 ], [ 103.92018981294602, 1.414544891315232 ], [ 103.92468264193225, 1.411934047203558 ], [ 103.924682438497626, 1.406712705989949 ], [ 103.920189426088172, 1.40410220760621 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "887", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.924678528227915, 1.302285833619045 ], [ 103.920185894038241, 1.304896666648316 ], [ 103.920186073480437, 1.310118012919717 ], [ 103.924678905676714, 1.312728524879709 ], [ 103.929171548017138, 1.31011768326618 ], [ 103.929171350010563, 1.304896338309018 ], [ 103.924678528227915, 1.302285833619045 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "888", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.924679095532554, 1.317949870182139 ], [ 103.920186434516438, 1.320560704806285 ], [ 103.920186616110257, 1.325782050419712 ], [ 103.924679477507183, 1.328392560126841 ], [ 103.929172146785319, 1.325781716823428 ], [ 103.929171946404523, 1.320560372524255 ], [ 103.924679095532554, 1.317949870182139 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "889", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.924679669625974, 1.333613904767375 ], [ 103.920186981449561, 1.336224740982503 ], [ 103.92018716519506, 1.341446085930127 ], [ 103.924680056126562, 1.344056593380456 ], [ 103.929172752676266, 1.341445748391048 ], [ 103.929172549921176, 1.336224404757695 ], [ 103.924679669625974, 1.333613904767375 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "897", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.929172146785319, 1.325781716823428 ], [ 103.924679477507183, 1.328392560126841 ], [ 103.924679669625974, 1.333613904767375 ], [ 103.929172549921176, 1.336224404757695 ], [ 103.933665227461304, 1.333613552695195 ], [ 103.933665016444237, 1.328392209433564 ], [ 103.929172146785319, 1.325781716823428 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "898", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.929172752676266, 1.341445748391048 ], [ 103.924680056126562, 1.344056593380456 ], [ 103.924680250508374, 1.349277937351263 ], [ 103.929173160560779, 1.351888434985847 ], [ 103.933665865483732, 1.349277581142341 ], [ 103.933665651981045, 1.344056238550454 ], [ 103.929172752676266, 1.341445748391048 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "900", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.929173985827433, 1.372773805463448 ], [ 103.924681233732954, 1.375384653813172 ], [ 103.924681432641023, 1.380605996421038 ], [ 103.9291744032097, 1.383216489332331 ], [ 103.933667163899983, 1.380605631938481 ], [ 103.933666945425784, 1.375384290709568 ], [ 103.929173985827433, 1.372773805463448 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "904", "topic": "topic8" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.933663973786622, 1.302285489820199 ], [ 103.929171350010563, 1.304896338309018 ], [ 103.929171548017138, 1.31011768326618 ], [ 103.933664388364164, 1.312728178323108 ], [ 103.938157020179659, 1.310117321185406 ], [ 103.93815680360872, 1.304895977671761 ], [ 103.933663973786622, 1.302285489820199 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "905", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.933664596895667, 1.31794952224665 ], [ 103.929171946404523, 1.320560372524255 ], [ 103.929172146785319, 1.325781716823428 ], [ 103.933665016444237, 1.328392209433564 ], [ 103.938157675086103, 1.325781350412067 ], [ 103.938157455918358, 1.320560007556429 ], [ 103.933664596895667, 1.31794952224665 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "906", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.933665227461304, 1.333613552695195 ], [ 103.929172549921176, 1.336224404757695 ], [ 103.929172752676266, 1.341445748391048 ], [ 103.933665651981045, 1.344056238550454 ], [ 103.938158337783136, 1.341445377649049 ], [ 103.938158116018485, 1.336224035459248 ], [ 103.933665227461304, 1.333613552695195 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "910", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.933667824294261, 1.396269654240496 ], [ 103.929175035219487, 1.398880513403686 ], [ 103.929175247472472, 1.404101854295467 ], [ 103.933668268700302, 1.406712334612537 ], [ 103.938161066482152, 1.404101466230382 ], [ 103.938160834329096, 1.398880126782225 ], [ 103.933667824294261, 1.396269654240496 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "913", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.938157020179659, 1.310117321185406 ], [ 103.933664388364164, 1.312728178323108 ], [ 103.933664596895667, 1.31794952224665 ], [ 103.938157455918358, 1.320560007556429 ], [ 103.942650095773274, 1.317949141690028 ], [ 103.942649868566122, 1.31272779927465 ], [ 103.938157020179659, 1.310117321185406 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "914", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.938157675086103, 1.325781350412067 ], [ 103.933665016444237, 1.328392209433564 ], [ 103.933665227461304, 1.333613552695195 ], [ 103.938158116018485, 1.336224035459248 ], [ 103.942650782811029, 1.33361316761404 ], [ 103.942650552895728, 1.328391825860593 ], [ 103.938157675086103, 1.325781350412067 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "915", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.938158337783136, 1.341445377649049 ], [ 103.933665651981045, 1.344056238550454 ], [ 103.933665865483732, 1.349277581142341 ], [ 103.938158783909387, 1.351888061356726 ], [ 103.942651477973413, 1.349277191536599 ], [ 103.942651245349865, 1.344055850452913 ], [ 103.938158337783136, 1.341445377649049 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "917", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.938159686549966, 1.372773426060014 ], [ 103.933666945425784, 1.375384290709568 ], [ 103.933667163899983, 1.380605631938481 ], [ 103.938160143064437, 1.383216107041704 ], [ 103.942652892673081, 1.380605233283397 ], [ 103.942652654632809, 1.375383893562723 ], [ 103.938159686549966, 1.372773426060014 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "922", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.942650095773274, 1.317949141690028 ], [ 103.938157455918358, 1.320560007556429 ], [ 103.938157675086103, 1.325781350412067 ], [ 103.942650552895728, 1.328391825860593 ], [ 103.947143200790023, 1.325780951185675 ], [ 103.947142962835343, 1.320559609902851 ], [ 103.942650095773274, 1.317949141690028 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "923", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.942650782811029, 1.33361316761404 ], [ 103.938158116018485, 1.336224035459248 ], [ 103.938158337783136, 1.341445377649049 ], [ 103.942651245349865, 1.344055850452913 ], [ 103.947143920293058, 1.341444973704176 ], [ 103.947143679518874, 1.336223633087208 ], [ 103.942650782811029, 1.33361316761404 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "924", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.942651477973413, 1.349277191536599 ], [ 103.938158783909387, 1.351888061356726 ], [ 103.938159008271001, 1.357109402872861 ], [ 103.942651945928802, 1.35971987302812 ], [ 103.947144648254749, 1.35710899420945 ], [ 103.947144404660975, 1.351887654266167 ], [ 103.942651477973413, 1.349277191536599 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "925", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.942652181260684, 1.364941213434215 ], [ 103.938159459591276, 1.367552085225375 ], [ 103.938159686549966, 1.372773426060014 ], [ 103.942652654632809, 1.375383893562723 ], [ 103.947145384675366, 1.372773012678005 ], [ 103.947145138261931, 1.367551673416239 ], [ 103.942652181260684, 1.364941213434215 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "928", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.947142489745403, 1.310116926677438 ], [ 103.942649868566122, 1.31272779927465 ], [ 103.942650095773274, 1.317949141690028 ], [ 103.947142962835343, 1.320559609902851 ], [ 103.951635591942733, 1.317948728512317 ], [ 103.951635346059973, 1.312727387734384 ], [ 103.947142489745403, 1.310116926677438 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "929", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.947143200790023, 1.325780951185675 ], [ 103.942650552895728, 1.328391825860593 ], [ 103.942650782811029, 1.33361316761404 ], [ 103.947143679518874, 1.336223633087208 ], [ 103.951636335452548, 1.333612749523957 ], [ 103.951636086639027, 1.328391409407974 ], [ 103.947143200790023, 1.325780951185675 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "931", "topic": "topic1" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.947144648254749, 1.35710899420945 ], [ 103.942651945928802, 1.35971987302812 ], [ 103.942652181260684, 1.364941213434215 ], [ 103.947145138261931, 1.367551673416239 ], [ 103.951637848849757, 1.364940785519207 ], [ 103.951637594174457, 1.359719446750616 ], [ 103.947144648254749, 1.35710899420945 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "934", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.947146882894515, 1.404101043411003 ], [ 103.942654096417016, 1.406711928416163 ], [ 103.94265433987438, 1.411933266742506 ], [ 103.947147389820586, 1.414543718458228 ], [ 103.951640184893776, 1.411932824089654 ], [ 103.951639921425084, 1.406711487400877 ], [ 103.947146882894515, 1.404101043411003 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "937", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.951635591942733, 1.317948728512317 ], [ 103.947142962835343, 1.320559609902851 ], [ 103.947143200790023, 1.325780951185675 ], [ 103.951636086639027, 1.328391409407974 ], [ 103.956128723674496, 1.325780519144301 ], [ 103.95612846693291, 1.320559179563571 ], [ 103.951635591942733, 1.317948728512317 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "938", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.951636335452548, 1.333612749523957 ], [ 103.947143679518874, 1.336223633087208 ], [ 103.947143920293058, 1.341444973704176 ], [ 103.951636836010422, 1.344055429087882 ], [ 103.956129499983419, 1.341444536556479 ], [ 103.956129240199743, 1.336223197641625 ], [ 103.951636335452548, 1.333612749523957 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "939", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.95163708775479, 1.349276768534084 ], [ 103.947144404660975, 1.351887654266167 ], [ 103.947144648254749, 1.35710899420945 ], [ 103.951637594174457, 1.359719446750616 ], [ 103.956130285418851, 1.357108551955367 ], [ 103.956130022592973, 1.35188721371422 ], [ 103.95163708775479, 1.349276768534084 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "940", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.951637848849757, 1.364940785519207 ], [ 103.947145138261931, 1.367551673416239 ], [ 103.947145384675366, 1.372773012678005 ], [ 103.951638361131387, 1.375383462372687 ], [ 103.956131079981049, 1.372772565317474 ], [ 103.956130814112882, 1.367551227757864 ], [ 103.951637848849757, 1.364940785519207 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "941", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.951638618737718, 1.380604800455836 ], [ 103.947145880321997, 1.383215690513932 ], [ 103.947146129555207, 1.388437029086353 ], [ 103.951639136881496, 1.391047475930604 ], [ 103.956131883670324, 1.38843657661931 ], [ 103.956131614759769, 1.383215239749067 ], [ 103.951638618737718, 1.380604800455836 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "945", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.956128723674496, 1.325780519144301 ], [ 103.951636086639027, 1.328391409407974 ], [ 103.951636335452548, 1.333612749523957 ], [ 103.956129240199743, 1.336223197641625 ], [ 103.960621885163249, 1.333612298424997 ], [ 103.960621617451551, 1.328390960075758 ], [ 103.956128723674496, 1.325780519144301 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "946", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.956129499983419, 1.341444536556479 ], [ 103.951636836010422, 1.344055429087882 ], [ 103.95163708775479, 1.349276768534084 ], [ 103.956130022592973, 1.35188721371422 ], [ 103.960622694605263, 1.349276312134847 ], [ 103.960622423740105, 1.344054974455412 ], [ 103.956129499983419, 1.341444536556479 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "948", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.956131079981049, 1.372772565317474 ], [ 103.951638361131387, 1.375383462372687 ], [ 103.951638618737718, 1.380604800455836 ], [ 103.956131614759769, 1.383215239749067 ], [ 103.960624341871267, 1.380604333455852 ], [ 103.960624064698891, 1.375382997139513 ], [ 103.956131079981049, 1.372772565317474 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "949", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.956132696486975, 1.404100585837384 ], [ 103.951639921425084, 1.406711487400877 ], [ 103.951640184893776, 1.411932824089654 ], [ 103.956133243435659, 1.414543257480188 ], [ 103.960626026981913, 1.411932346488656 ], [ 103.960625743501922, 1.406711011566734 ], [ 103.956132696486975, 1.404100585837384 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "951", "topic": "topic4" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.960621885163249, 1.333612298424997 ], [ 103.956129240199743, 1.336223197641625 ], [ 103.956129499983419, 1.341444536556479 ], [ 103.960622423740105, 1.344054974455412 ], [ 103.965115076631633, 1.341444066206011 ], [ 103.965114797838481, 1.336222729122553 ], [ 103.960621885163249, 1.333612298424997 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "952", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.960622694605263, 1.349276312134847 ], [ 103.956130022592973, 1.35188721371422 ], [ 103.956130285418851, 1.357108551955367 ], [ 103.960623239489124, 1.359718986817827 ], [ 103.965115919540693, 1.357108076110667 ], [ 103.965115637482725, 1.351886739700938 ], [ 103.960622694605263, 1.349276312134847 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "953", "topic": "topic8" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.960623513507841, 1.36494032381963 ], [ 103.956130814112882, 1.367551227757864 ], [ 103.956131079981049, 1.372772565317474 ], [ 103.960624064698891, 1.375382997139513 ], [ 103.965116772244372, 1.372772083978474 ], [ 103.965116486921502, 1.367550748250305 ], [ 103.960623513507841, 1.36494032381963 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "957", "topic": "topic1" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.965113420196161, 1.310116040380122 ], [ 103.960620820623134, 1.312726943702361 ], [ 103.960621085181501, 1.31794828271357 ], [ 103.96511396798843, 1.320558716538642 ], [ 103.969606575266923, 1.317947804293841 ], [ 103.969606292033006, 1.312726467178634 ], [ 103.965113420196161, 1.310116040380122 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "958", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.965114243516879, 1.325780054287998 ], [ 103.960621617451551, 1.328390960075758 ], [ 103.960621885163249, 1.333612298424997 ], [ 103.965114797838481, 1.336222729122553 ], [ 103.969607431720547, 1.333611814317217 ], [ 103.969607145110672, 1.328390477864003 ], [ 103.965114243516879, 1.325780054287998 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "965", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.969608298302219, 1.349275822338947 ], [ 103.965115637482725, 1.351886739700938 ], [ 103.965115919540693, 1.357108076110667 ], [ 103.969608881650217, 1.359718493229807 ], [ 103.974101550397648, 1.357107566675408 ], [ 103.974101249107648, 1.35188623222638 ], [ 103.969608298302219, 1.349275822338947 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "966", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.969609175012295, 1.364939828335539 ], [ 103.965116486921502, 1.367550748250305 ], [ 103.965116772244372, 1.372772083978474 ], [ 103.969609765112722, 1.375382497863257 ], [ 103.974102461242708, 1.372771568661066 ], [ 103.974102156465179, 1.367550234893621 ], [ 103.969609175012295, 1.364939828335539 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "969", "topic": "topic1" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.969611865916093, 1.411931833939571 ], [ 103.965119094008116, 1.414542761489387 ], [ 103.965119389126357, 1.419764095125896 ], [ 103.969612476275145, 1.422374499283894 ], [ 103.974105256556101, 1.419763562161595 ], [ 103.974104941315318, 1.414542230485885 ], [ 103.969611865916093, 1.411931833939571 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "973", "topic": "topic3" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.974101550397648, 1.357107566675408 ], [ 103.969608881650217, 1.359718493229807 ], [ 103.969609175012295, 1.364939828335539 ], [ 103.974102156465179, 1.367550234893621 ], [ 103.978594833140534, 1.364939299066997 ], [ 103.978594520435095, 1.359717965986619 ], [ 103.974101550397648, 1.357107566675408 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "974", "topic": "topic8" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.974102461242708, 1.372771568661066 ], [ 103.969609765112722, 1.375382497863257 ], [ 103.969610061851085, 1.380603832283502 ], [ 103.974103074285395, 1.383214235508281 ], [ 103.978595778454562, 1.380603296938847 ], [ 103.978595462150238, 1.375381964543981 ], [ 103.974102461242708, 1.372771568661066 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "980", "topic": "topic3" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.978594833140534, 1.364939299066997 ], [ 103.974102156465179, 1.367550234893621 ], [ 103.974102461242708, 1.372771568661066 ], [ 103.978595462150238, 1.375381964543981 ], [ 103.98308814675346, 1.372771019365312 ], [ 103.983087822521284, 1.367549687687876 ], [ 103.978594833140534, 1.364939299066997 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "986", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.983086219911115, 1.341443025896998 ], [ 103.978593589516407, 1.344053965388383 ], [ 103.97859389862306, 1.349275299146442 ], [ 103.983086857245098, 1.351885691290609 ], [ 103.987579495345145, 1.349274742557397 ], [ 103.987579167117815, 1.344053410953949 ], [ 103.983086219911115, 1.341443025896998 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "989", "topic": "topic3" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.983089126870453, 1.388435013020479 ], [ 103.978596414662178, 1.391045961036976 ], [ 103.9785967345655, 1.396267292738499 ], [ 103.983089786465669, 1.398877674300938 ], [ 103.987582506713025, 1.39626671675756 ], [ 103.987582167021145, 1.391045387210728 ], [ 103.983089126870453, 1.388435013020479 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "993", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.987579495345145, 1.349274742557397 ], [ 103.983086857245098, 1.351885691290609 ], [ 103.983087177767132, 1.357107023649654 ], [ 103.987580155621174, 1.359717405088327 ], [ 103.992072801426502, 1.357106447033471 ], [ 103.992072461672507, 1.351885116893691 ], [ 103.987579495345145, 1.349274742557397 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "995", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.987581491459068, 1.380602727421953 ], [ 103.983088798928023, 1.383213682032484 ], [ 103.983089126870453, 1.388435013020479 ], [ 103.987582167021145, 1.391045387210728 ], [ 103.992074867479971, 1.388434423088516 ], [ 103.992074519860324, 1.383213094319841 ], [ 103.987581491459068, 1.380602727421953 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "996", "topic": "topic3" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.987582506713025, 1.39626671675756 ], [ 103.983089786465669, 1.398877674300938 ], [ 103.983090118118483, 1.404099004591662 ], [ 103.98758318991851, 1.406709375151764 ], [ 103.99207591820489, 1.404098408001684 ], [ 103.992075566652233, 1.398877079930308 ], [ 103.987582506713025, 1.39626671675756 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1001", "topic": "topic6" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.992072801426502, 1.357106447033471 ], [ 103.987580155621174, 1.359717405088327 ], [ 103.987580487669902, 1.364938736014068 ], [ 103.99207348486722, 1.367549106633137 ], [ 103.996566138377801, 1.364938139176821 ], [ 103.996565786985812, 1.359716810535 ], [ 103.992072801426502, 1.357106447033471 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1004", "topic": "topic3" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.99207591820489, 1.404098408001684 ], [ 103.98758318991851, 1.406709375151764 ], [ 103.987583533432144, 1.411930703997395 ], [ 103.992076625243328, 1.414541063441046 ], [ 103.996569361568703, 1.411930086604444 ], [ 103.996568998043941, 1.406708760042819 ], [ 103.99207591820489, 1.404098408001684 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1010", "topic": "topic1" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 103.996567200641962, 1.380602123732891 ], [ 103.992074519860324, 1.383213094319841 ], [ 103.992074867479971, 1.388434423088516 ], [ 103.99656791555843, 1.391044778953741 ], [ 104.001060604156521, 1.388433798790494 ], [ 104.001060236859715, 1.383212472370423 ], [ 103.996567200641962, 1.380602123732891 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1017", "topic": "topic7" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.00105950642164, 1.372769818839043 ], [ 103.996566845205862, 1.375380795776637 ], [ 103.996567200641962, 1.380602123732891 ], [ 104.001060236859715, 1.383212472370423 ], [ 104.005552905780661, 1.380601485871735 ], [ 104.005552530778715, 1.375380160328712 ], [ 104.00105950642164, 1.372769818839043 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1024", "topic": "topic3" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.005552905780661, 1.380601485871735 ], [ 104.001060236859715, 1.383212472370423 ], [ 104.001060604156521, 1.388433798790494 ], [ 104.005553660051405, 1.391044136266091 ], [ 104.010046336677476, 1.38843314012649 ], [ 104.010045949703539, 1.383211816184308 ], [ 104.005552905780661, 1.380601485871735 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1044", "topic": "topic1" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.019029647917847, 1.357104515643081 ], [ 104.014537037360341, 1.359715520463537 ], [ 104.014537427438711, 1.364936844149673 ], [ 104.019030447417705, 1.367547160375689 ], [ 104.023523065346481, 1.364936145959931 ], [ 104.023522655925007, 1.359714824945561 ], [ 104.019029647917847, 1.357104515643081 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1048", "topic": "topic1" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.023519437094379, 1.317944248738425 ], [ 104.019026897973333, 1.320555251993902 ], [ 104.019027286222197, 1.32577657604016 ], [ 104.023520232378715, 1.328386894126721 ], [ 104.028012778537317, 1.325775881481183 ], [ 104.028012371501859, 1.320554560171248 ], [ 104.023519437094379, 1.317944248738425 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1053", "topic": "topic3" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.023525554859546, 1.396264067234334 ], [ 104.019032882723081, 1.398875089070948 ], [ 104.019033293974971, 1.404096409708563 ], [ 104.023526397263041, 1.406706705805175 ], [ 104.028019076993189, 1.404095674103401 ], [ 104.028018645841613, 1.398874356202278 ], [ 104.023525554859546, 1.396264067234334 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1067", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.032511305672145, 1.396263318454067 ], [ 104.028018645841613, 1.398874356202278 ], [ 104.028019076993189, 1.404095674103401 ], [ 104.032512187874886, 1.406705951422639 ], [ 104.037004855187732, 1.404094903744658 ], [ 104.037004404136567, 1.398873588709312 ], [ 104.032511305672145, 1.396263318454067 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1081", "topic": "topic1" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.041498437131494, 1.411926475424223 ], [ 104.037005762336349, 1.414537533111792 ], [ 104.037006218433845, 1.419758847441841 ], [ 104.041499369448672, 1.422369101121324 ], [ 104.045992051726046, 1.41975803334435 ], [ 104.045991575506363, 1.414536722009402 ], [ 104.041498437131494, 1.411926475424223 ] ] ] } },
    { "type": "Feature", "properties": { "hex_id": "1098", "topic": "topic5" }, "geometry": { "type": "Polygon", "coordinates": [ [ [ 104.054976396215409, 1.404093258766816 ], [ 104.05048375407101, 1.406704338203137 ], [ 104.050484237661578, 1.411925648345709 ], [ 104.054977383407362, 1.414535875895055 ], [ 104.059470032811362, 1.411924786319931 ], [ 104.059469529210006, 1.406703479366368 ], [ 104.054976396215409, 1.404093258766816 ] ] ] } }
    ]
    };

    function colors(specifier) {
      var n = specifier.length / 6 | 0, colors = new Array(n), i = 0;
      while (i < n) colors[i] = "#" + specifier.slice(i * 6, ++i * 6);
      return colors;
    }

    var schemeAccent = colors("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666");

    /* src/page/component/TopicMap.svelte generated by Svelte v3.21.0 */
    const file$d = "src/page/component/TopicMap.svelte";

    // (44:2) {#if hoverTopic !== 0}
    function create_if_block$8(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text(/*hoverTopic*/ ctx[0]);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*hoverTopic*/ 1) set_data_dev(t, /*hoverTopic*/ ctx[0]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$8.name,
    		type: "if",
    		source: "(44:2) {#if hoverTopic !== 0}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$m(ctx) {
    	let t;
    	let text_1;
    	let current;

    	const polygonlayer = new PolygonLayer({
    			props: {
    				geometry: /*topicHex*/ ctx[2].column("$geometry"),
    				fill: /*topicHex*/ ctx[2].map("topic", /*myColorScale*/ ctx[3]),
    				stroke: /*func*/ ctx[5],
    				strokeWidth: /*func_1*/ ctx[6],
    				onMouseover: /*mouseOverHandler*/ ctx[4],
    				onMouseout: /*func_2*/ ctx[7]
    			},
    			$$inline: true
    		});

    	let if_block = /*hoverTopic*/ ctx[0] !== 0 && create_if_block$8(ctx);

    	const block = {
    		c: function create() {
    			create_component(polygonlayer.$$.fragment);
    			t = space();
    			text_1 = svg_element("text");
    			if (if_block) if_block.c();
    			attr_dev(text_1, "x", "650px");
    			attr_dev(text_1, "y", "450px");
    			attr_dev(text_1, "text-anchor", "right");
    			attr_dev(text_1, "fill", "black");
    			attr_dev(text_1, "font-size", "18px");
    			attr_dev(text_1, "font-family", "Acme, sans-serif");
    			add_location(text_1, file$d, 36, 0, 1004);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(polygonlayer, target, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, text_1, anchor);
    			if (if_block) if_block.m(text_1, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const polygonlayer_changes = {};
    			if (dirty & /*selectHexId*/ 2) polygonlayer_changes.stroke = /*func*/ ctx[5];
    			if (dirty & /*selectHexId*/ 2) polygonlayer_changes.strokeWidth = /*func_1*/ ctx[6];
    			if (dirty & /*hoverTopic, selectHexId*/ 3) polygonlayer_changes.onMouseout = /*func_2*/ ctx[7];
    			polygonlayer.$set(polygonlayer_changes);

    			if (/*hoverTopic*/ ctx[0] !== 0) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$8(ctx);
    					if_block.c();
    					if_block.m(text_1, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(polygonlayer.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(polygonlayer.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(polygonlayer, detaching);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(text_1);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$m.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const hexFill$2 = "black";

    function instance$m($$self, $$props, $$invalidate) {

    	// load data
    	const topicHex = new florenceDatacontainer_umd(TOPIC_HEX);

    	// obtain bins from DataContainer method
    	const myColorScale = ordinal().domain(topicHex.domain("topic")).range(schemeAccent);

    	let hoverTopic = 0;
    	let selectHexId;

    	const mouseOverHandler = e => {
    		$$invalidate(1, selectHexId = e.key);
    		$$invalidate(0, hoverTopic = topicHex.column("topic")[selectHexId]);
    	};

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<TopicMap> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("TopicMap", $$slots, []);
    	const func = k => k === selectHexId ? "red" : "white";
    	const func_1 = k => k === selectHexId ? 2 : 1;

    	const func_2 = e => {
    		$$invalidate(0, hoverTopic = 0);
    		$$invalidate(1, selectHexId = null);
    	};

    	$$self.$capture_state = () => ({
    		PolygonLayer,
    		DataContainer: florenceDatacontainer_umd,
    		TOPIC_HEX,
    		scaleOrdinal: ordinal,
    		schemeAccent,
    		hexFill: hexFill$2,
    		topicHex,
    		myColorScale,
    		hoverTopic,
    		selectHexId,
    		mouseOverHandler
    	});

    	$$self.$inject_state = $$props => {
    		if ("hoverTopic" in $$props) $$invalidate(0, hoverTopic = $$props.hoverTopic);
    		if ("selectHexId" in $$props) $$invalidate(1, selectHexId = $$props.selectHexId);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		hoverTopic,
    		selectHexId,
    		topicHex,
    		myColorScale,
    		mouseOverHandler,
    		func,
    		func_1,
    		func_2
    	];
    }

    class TopicMap extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$m, create_fragment$m, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TopicMap",
    			options,
    			id: create_fragment$m.name
    		});
    	}
    }

    const TOPIC_COUNT = [{"topic":1,"n":29},{"topic":2,"n":3},{"topic":3,"n":30},{"topic":4,"n":17},{"topic":5,"n":91},{"topic":6,"n":112},{"topic":7,"n":77},{"topic":8,"n":22}]; 
    const TOP_TERM = [{"topic":1,"term":"airport","beta":0.0074},{"topic":1,"term":"north","beta":0.0074},{"topic":1,"term":"stadium","beta":0.0055},{"topic":1,"term":"changi","beta":0.0053},{"topic":1,"term":"meet","beta":0.0045},{"topic":1,"term":"marina bay","beta":0.0043},{"topic":1,"term":"world","beta":0.0042},{"topic":1,"term":"sport","beta":0.004},{"topic":1,"term":"park","beta":0.004},{"topic":1,"term":"korea","beta":0.0039},{"topic":2,"term":"police","beta":0.0167},{"topic":2,"term":"officer","beta":0.0109},{"topic":2,"term":"hospital","beta":0.0086},{"topic":2,"term":"force","beta":0.0077},{"topic":2,"term":"train","beta":0.0074},{"topic":2,"term":"unit","beta":0.0073},{"topic":2,"term":"road","beta":0.0064},{"topic":2,"term":"lim","beta":0.0061},{"topic":2,"term":"service","beta":0.0052},{"topic":2,"term":"division","beta":0.0047},{"topic":3,"term":"japanese","beta":0.012},{"topic":3,"term":"island","beta":0.0118},{"topic":3,"term":"park","beta":0.0087},{"topic":3,"term":"british","beta":0.0075},{"topic":3,"term":"reservoir","beta":0.0062},{"topic":3,"term":"pulau","beta":0.0057},{"topic":3,"term":"water","beta":0.0051},{"topic":3,"term":"garden","beta":0.0048},{"topic":3,"term":"war","beta":0.0042},{"topic":3,"term":"bukit","beta":0.0036},{"topic":4,"term":"university","beta":0.0159},{"topic":4,"term":"school","beta":0.0156},{"topic":4,"term":"student","beta":0.013},{"topic":4,"term":"programme","beta":0.0115},{"topic":4,"term":"college","beta":0.0075},{"topic":4,"term":"education","beta":0.0069},{"topic":4,"term":"science","beta":0.0068},{"topic":4,"term":"national","beta":0.0067},{"topic":4,"term":"research","beta":0.0062},{"topic":4,"term":"international","beta":0.0061},{"topic":5,"term":"school","beta":0.0535},{"topic":5,"term":"student","beta":0.0193},{"topic":5,"term":"secondary","beta":0.0129},{"topic":5,"term":"college","beta":0.0087},{"topic":5,"term":"secondary school","beta":0.008},{"topic":5,"term":"level","beta":0.0079},{"topic":5,"term":"junior","beta":0.0079},{"topic":5,"term":"junior college","beta":0.0065},{"topic":5,"term":"programme","beta":0.0062},{"topic":5,"term":"chinese","beta":0.0055},{"topic":6,"term":"court","beta":0.0102},{"topic":6,"term":"house","beta":0.0074},{"topic":6,"term":"church","beta":0.0068},{"topic":6,"term":"parliament","beta":0.0058},{"topic":6,"term":"art","beta":0.0047},{"topic":6,"term":"museum","beta":0.0038},{"topic":6,"term":"raffle","beta":0.0038},{"topic":6,"term":"hold","beta":0.0035},{"topic":6,"term":"national","beta":0.0034},{"topic":6,"term":"theatre","beta":0.0034},{"topic":7,"term":"mrt station","beta":0.0116},{"topic":7,"term":"line","beta":0.0115},{"topic":7,"term":"east","beta":0.0102},{"topic":7,"term":"service","beta":0.0093},{"topic":7,"term":"locate","beta":0.0089},{"topic":7,"term":"park","beta":0.0084},{"topic":7,"term":"jurong","beta":0.0076},{"topic":7,"term":"centre","beta":0.0068},{"topic":7,"term":"west","beta":0.0064},{"topic":7,"term":"woodland","beta":0.0058},{"topic":8,"term":"road","beta":0.0102},{"topic":8,"term":"temple","beta":0.0065},{"topic":8,"term":"locate","beta":0.0062},{"topic":8,"term":"chinese","beta":0.0052},{"topic":8,"term":"design","beta":0.0049},{"topic":8,"term":"centre","beta":0.0047},{"topic":8,"term":"house","beta":0.0044},{"topic":8,"term":"tower","beta":0.0043},{"topic":8,"term":"floor","beta":0.0043},{"topic":8,"term":"mosque","beta":0.0039}];

    /* src/page/component/Barchart.svelte generated by Svelte v3.21.0 */

    const { console: console_1$1 } = globals;
    const file$e = "src/page/component/Barchart.svelte";

    function get_each_context$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[7] = list[i];
    	return child_ctx;
    }

    function get_each_context_1$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[7] = list[i];
    	child_ctx[11] = i;
    	return child_ctx;
    }

    // (25:2) {#each data as item, index}
    function create_each_block_1$1(ctx) {
    	let current;

    	function func(...args) {
    		return /*func*/ ctx[5](/*index*/ ctx[11], ...args);
    	}

    	const rectangle = new Rectangle({
    			props: {
    				x1: /*item*/ ctx[7].topic - 0.4,
    				y1: 0,
    				x2: /*item*/ ctx[7].topic + 0.4,
    				y2: /*item*/ ctx[7].n,
    				fill: "#b2ded3",
    				onMouseover: func,
    				onMouseout: /*func_1*/ ctx[6]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(rectangle.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(rectangle, target, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const rectangle_changes = {};
    			if (dirty & /*hoverTopic*/ 1) rectangle_changes.onMouseover = func;
    			if (dirty & /*hoverTopic*/ 1) rectangle_changes.onMouseout = /*func_1*/ ctx[6];
    			rectangle.$set(rectangle_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(rectangle.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(rectangle.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(rectangle, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$1.name,
    		type: "each",
    		source: "(25:2) {#each data as item, index}",
    		ctx
    	});

    	return block;
    }

    // (24:0) <Graphic {width} {height} {scaleX} {scaleY} padding={30} flipY>
    function create_default_slot$2(ctx) {
    	let t0;
    	let t1;
    	let current;
    	let each_value_1 = /*data*/ ctx[2];
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$1(get_each_context_1$1(ctx, each_value_1, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const xaxis = new XAxis({ $$inline: true });
    	const yaxis = new YAxis({ $$inline: true });

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t0 = space();
    			create_component(xaxis.$$.fragment);
    			t1 = space();
    			create_component(yaxis.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, t0, anchor);
    			mount_component(xaxis, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(yaxis, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*data, hoverTopic*/ 5) {
    				each_value_1 = /*data*/ ctx[2];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$1(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block_1$1(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(t0.parentNode, t0);
    					}
    				}

    				group_outros();

    				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value_1.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			transition_in(xaxis.$$.fragment, local);
    			transition_in(yaxis.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			transition_out(xaxis.$$.fragment, local);
    			transition_out(yaxis.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(xaxis, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(yaxis, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$2.name,
    		type: "slot",
    		source: "(24:0) <Graphic {width} {height} {scaleX} {scaleY} padding={30} flipY>",
    		ctx
    	});

    	return block;
    }

    // (42:2) {#each filteredTerm as item}
    function create_each_block$3(ctx) {
    	let t_value = /*item*/ ctx[7].term + " / " + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*filteredTerm*/ 2 && t_value !== (t_value = /*item*/ ctx[7].term + " / " + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$3.name,
    		type: "each",
    		source: "(42:2) {#each filteredTerm as item}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$n(ctx) {
    	let t;
    	let p;
    	let current;

    	const graphic = new Graphic({
    			props: {
    				width: width$2,
    				height: height$2,
    				scaleX: /*scaleX*/ ctx[3],
    				scaleY: /*scaleY*/ ctx[4],
    				padding: 30,
    				flipY: true,
    				$$slots: { default: [create_default_slot$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	let each_value = /*filteredTerm*/ ctx[1];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$3(get_each_context$3(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			create_component(graphic.$$.fragment);
    			t = space();
    			p = element("p");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(p, "class", "svelte-1driywc");
    			add_location(p, file$e, 40, 0, 1028);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(graphic, target, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, p, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(p, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const graphic_changes = {};

    			if (dirty & /*$$scope, hoverTopic*/ 4097) {
    				graphic_changes.$$scope = { dirty, ctx };
    			}

    			graphic.$set(graphic_changes);

    			if (dirty & /*filteredTerm*/ 2) {
    				each_value = /*filteredTerm*/ ctx[1];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$3(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$3(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(p, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(graphic.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(graphic.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(graphic, detaching);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(p);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$n.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const width$2 = 500;
    const height$2 = 500;

    function instance$n($$self, $$props, $$invalidate) {
    	const data = TOPIC_COUNT.sort((a, b) => a.n - b.n);
    	console.log(data[data.length - 1].n);
    	const scaleX = linear$1().domain([0, data.length + 1]);
    	const scaleY = linear$1().domain([0, data[data.length - 1].n]);
    	let hoverTopic = 0;
    	let filteredTerm;
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$1.warn(`<Barchart> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Barchart", $$slots, []);

    	const func = (index, e) => {
    		$$invalidate(0, hoverTopic = data[index].topic);
    	};

    	const func_1 = e => $$invalidate(0, hoverTopic = 0);

    	$$self.$capture_state = () => ({
    		TOPIC_COUNT,
    		TOP_TERM,
    		scaleLinear: linear$1,
    		Graphic,
    		Rectangle,
    		XAxis,
    		YAxis,
    		width: width$2,
    		height: height$2,
    		data,
    		scaleX,
    		scaleY,
    		hoverTopic,
    		filteredTerm
    	});

    	$$self.$inject_state = $$props => {
    		if ("hoverTopic" in $$props) $$invalidate(0, hoverTopic = $$props.hoverTopic);
    		if ("filteredTerm" in $$props) $$invalidate(1, filteredTerm = $$props.filteredTerm);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*hoverTopic*/ 1) {
    			 hoverTopic === 0
    			? $$invalidate(1, filteredTerm = TOP_TERM)
    			: $$invalidate(1, filteredTerm = TOP_TERM.filter(el => el.topic === hoverTopic));
    		}
    	};

    	return [hoverTopic, filteredTerm, data, scaleX, scaleY, func, func_1];
    }

    class Barchart extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$n, create_fragment$n, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Barchart",
    			options,
    			id: create_fragment$n.name
    		});
    	}
    }

    /* src/page/component/SGTopic.svelte generated by Svelte v3.21.0 */
    const file$f = "src/page/component/SGTopic.svelte";

    // (20:2) <Graphic {width} {height} {...geoScale} padding={20} flipY>
    function create_default_slot$3(ctx) {
    	let t;
    	let current;

    	const basemap = new BaseMap({
    			props: { hex: /*hex*/ ctx[0] },
    			$$inline: true
    		});

    	const topicmap = new TopicMap({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(basemap.$$.fragment);
    			t = space();
    			create_component(topicmap.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(basemap, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(topicmap, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(basemap.$$.fragment, local);
    			transition_in(topicmap.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(basemap.$$.fragment, local);
    			transition_out(topicmap.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(basemap, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(topicmap, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$3.name,
    		type: "slot",
    		source: "(20:2) <Graphic {width} {height} {...geoScale} padding={20} flipY>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$o(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let current;
    	const graphic_spread_levels = [{ width: width$3 }, { height: height$3 }, /*geoScale*/ ctx[1], { padding: 20 }, { flipY: true }];

    	let graphic_props = {
    		$$slots: { default: [create_default_slot$3] },
    		$$scope: { ctx }
    	};

    	for (let i = 0; i < graphic_spread_levels.length; i += 1) {
    		graphic_props = assign(graphic_props, graphic_spread_levels[i]);
    	}

    	const graphic = new Graphic({ props: graphic_props, $$inline: true });
    	const barchart = new Barchart({ $$inline: true });

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			create_component(graphic.$$.fragment);
    			t = space();
    			div1 = element("div");
    			create_component(barchart.$$.fragment);
    			attr_dev(div0, "class", "basemap");
    			add_location(div0, file$f, 18, 0, 518);
    			attr_dev(div1, "class", "barchart");
    			add_location(div1, file$f, 25, 0, 662);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			mount_component(graphic, div0, null);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);
    			mount_component(barchart, div1, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const graphic_changes = (dirty & /*width, height, geoScale*/ 2)
    			? get_spread_update(graphic_spread_levels, [
    					dirty & /*width*/ 0 && { width: width$3 },
    					dirty & /*height*/ 0 && { height: height$3 },
    					dirty & /*geoScale*/ 2 && get_spread_object(/*geoScale*/ ctx[1]),
    					graphic_spread_levels[3],
    					graphic_spread_levels[4]
    				])
    			: {};

    			if (dirty & /*$$scope*/ 4) {
    				graphic_changes.$$scope = { dirty, ctx };
    			}

    			graphic.$set(graphic_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(graphic.$$.fragment, local);
    			transition_in(barchart.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(graphic.$$.fragment, local);
    			transition_out(barchart.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			destroy_component(graphic);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			destroy_component(barchart);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$o.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const width$3 = 700;
    const height$3 = 500;

    function instance$o($$self, $$props, $$invalidate) {

    	////// data
    	const hex = new florenceDatacontainer_umd(HEX);

    	////// basemap set up
    	const geoScale = createGeoScales(hex.domain("$geometry"));

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<SGTopic> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("SGTopic", $$slots, []);

    	$$self.$capture_state = () => ({
    		BaseMap,
    		TopicMap,
    		Barchart,
    		Graphic,
    		createGeoScales,
    		DataContainer: florenceDatacontainer_umd,
    		HEX,
    		hex,
    		geoScale,
    		width: width$3,
    		height: height$3
    	});

    	return [hex, geoScale];
    }

    class SGTopic extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$o, create_fragment$o, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SGTopic",
    			options,
    			id: create_fragment$o.name
    		});
    	}
    }

    /* src/page/Topic.svelte generated by Svelte v3.21.0 */
    const file$g = "src/page/Topic.svelte";

    function create_fragment$p(ctx) {
    	let div;
    	let current;
    	const sgtopic = new SGTopic({ $$inline: true });

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(sgtopic.$$.fragment);
    			attr_dev(div, "class", "grid-2 svelte-1gi15en");
    			add_location(div, file$g, 4, 0, 72);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(sgtopic, div, null);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(sgtopic.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(sgtopic.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(sgtopic);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$p.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$p($$self, $$props, $$invalidate) {
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Topic> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Topic", $$slots, []);
    	$$self.$capture_state = () => ({ SGTopic });
    	return [];
    }

    class Topic extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$p, create_fragment$p, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Topic",
    			options,
    			id: create_fragment$p.name
    		});
    	}
    }

    /* src/App.svelte generated by Svelte v3.21.0 */
    const file$h = "src/App.svelte";

    // (48:30) 
    function create_if_block_2$4(ctx) {
    	let current;
    	const about = new About({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(about.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(about, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(about.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(about.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(about, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$4.name,
    		type: "if",
    		source: "(48:30) ",
    		ctx
    	});

    	return block;
    }

    // (46:30) 
    function create_if_block_1$6(ctx) {
    	let current;
    	const topic = new Topic({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(topic.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(topic, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(topic.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(topic.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(topic, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$6.name,
    		type: "if",
    		source: "(46:30) ",
    		ctx
    	});

    	return block;
    }

    // (44:4) {#if nav === 'home'}
    function create_if_block$9(ctx) {
    	let current;
    	const home = new Home({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(home.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(home, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(home.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(home.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(home, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$9.name,
    		type: "if",
    		source: "(44:4) {#if nav === 'home'}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$q(ctx) {
    	let main;
    	let ul;
    	let a0;
    	let t0;
    	let a0_class_value;
    	let t1;
    	let a1;
    	let t2;
    	let a1_class_value;
    	let t3;
    	let a2;
    	let t4;
    	let a2_class_value;
    	let t5;
    	let div;
    	let current_block_type_index;
    	let if_block;
    	let current;
    	let dispose;
    	const if_block_creators = [create_if_block$9, create_if_block_1$6, create_if_block_2$4];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*nav*/ ctx[0] === "home") return 0;
    		if (/*nav*/ ctx[0] === "topic") return 1;
    		if (/*nav*/ ctx[0] === "about") return 2;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	const block = {
    		c: function create() {
    			main = element("main");
    			ul = element("ul");
    			a0 = element("a");
    			t0 = text("Home");
    			t1 = space();
    			a1 = element("a");
    			t2 = text("Topic");
    			t3 = space();
    			a2 = element("a");
    			t4 = text("About");
    			t5 = space();
    			div = element("div");
    			if (if_block) if_block.c();
    			attr_dev(a0, "href", "/");
    			attr_dev(a0, "class", a0_class_value = "" + (null_to_empty(/*class1*/ ctx[1]) + " svelte-4ba2iu"));
    			add_location(a0, file$h, 31, 4, 591);
    			attr_dev(a1, "href", "/");
    			attr_dev(a1, "class", a1_class_value = "" + (null_to_empty(/*class2*/ ctx[2]) + " svelte-4ba2iu"));
    			add_location(a1, file$h, 34, 4, 690);
    			attr_dev(a2, "href", "/");
    			attr_dev(a2, "class", a2_class_value = "" + (null_to_empty(/*class3*/ ctx[3]) + " svelte-4ba2iu"));
    			add_location(a2, file$h, 37, 4, 791);
    			attr_dev(ul, "class", "topnav svelte-4ba2iu");
    			add_location(ul, file$h, 30, 2, 567);
    			add_location(div, file$h, 42, 2, 899);
    			add_location(main, file$h, 29, 0, 558);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor, remount) {
    			insert_dev(target, main, anchor);
    			append_dev(main, ul);
    			append_dev(ul, a0);
    			append_dev(a0, t0);
    			append_dev(ul, t1);
    			append_dev(ul, a1);
    			append_dev(a1, t2);
    			append_dev(ul, t3);
    			append_dev(ul, a2);
    			append_dev(a2, t4);
    			append_dev(main, t5);
    			append_dev(main, div);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(div, null);
    			}

    			current = true;
    			if (remount) run_all(dispose);

    			dispose = [
    				listen_dev(a0, "click", prevent_default(/*click_handler*/ ctx[4]), false, true, false),
    				listen_dev(a1, "click", prevent_default(/*click_handler_1*/ ctx[5]), false, true, false),
    				listen_dev(a2, "click", prevent_default(/*click_handler_2*/ ctx[6]), false, true, false)
    			];
    		},
    		p: function update(ctx, [dirty]) {
    			if (!current || dirty & /*class1*/ 2 && a0_class_value !== (a0_class_value = "" + (null_to_empty(/*class1*/ ctx[1]) + " svelte-4ba2iu"))) {
    				attr_dev(a0, "class", a0_class_value);
    			}

    			if (!current || dirty & /*class2*/ 4 && a1_class_value !== (a1_class_value = "" + (null_to_empty(/*class2*/ ctx[2]) + " svelte-4ba2iu"))) {
    				attr_dev(a1, "class", a1_class_value);
    			}

    			if (!current || dirty & /*class3*/ 8 && a2_class_value !== (a2_class_value = "" + (null_to_empty(/*class3*/ ctx[3]) + " svelte-4ba2iu"))) {
    				attr_dev(a2, "class", a2_class_value);
    			}

    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index !== previous_block_index) {
    				if (if_block) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block = if_blocks[current_block_type_index];

    					if (!if_block) {
    						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block.c();
    					}

    					transition_in(if_block, 1);
    					if_block.m(div, null);
    				} else {
    					if_block = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(main);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d();
    			}

    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$q.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$q($$self, $$props, $$invalidate) {
    	let { nav = "home" } = $$props;
    	let class1, class2, class3;
    	const writable_props = ["nav"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<App> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("App", $$slots, []);
    	const click_handler = () => $$invalidate(0, nav = "home");
    	const click_handler_1 = () => $$invalidate(0, nav = "topic");
    	const click_handler_2 = () => $$invalidate(0, nav = "about");

    	$$self.$set = $$props => {
    		if ("nav" in $$props) $$invalidate(0, nav = $$props.nav);
    	};

    	$$self.$capture_state = () => ({
    		Home,
    		About,
    		Topic,
    		nav,
    		class1,
    		class2,
    		class3
    	});

    	$$self.$inject_state = $$props => {
    		if ("nav" in $$props) $$invalidate(0, nav = $$props.nav);
    		if ("class1" in $$props) $$invalidate(1, class1 = $$props.class1);
    		if ("class2" in $$props) $$invalidate(2, class2 = $$props.class2);
    		if ("class3" in $$props) $$invalidate(3, class3 = $$props.class3);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*nav*/ 1) {
    			 {
    				if (nav) {
    					if (nav === "home") {
    						$$invalidate(1, class1 = "topnav-active");
    					} else {
    						$$invalidate(1, class1 = "");
    					}

    					if (nav === "topic") {
    						$$invalidate(2, class2 = "topnav-active");
    					} else {
    						$$invalidate(2, class2 = "");
    					}

    					if (nav === "about") {
    						$$invalidate(3, class3 = "topnav-active");
    					} else {
    						$$invalidate(3, class3 = "");
    					}
    				}
    			}
    		}
    	};

    	return [nav, class1, class2, class3, click_handler, click_handler_1, click_handler_2];
    }

    class App extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$q, create_fragment$q, safe_not_equal, { nav: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "App",
    			options,
    			id: create_fragment$q.name
    		});
    	}

    	get nav() {
    		throw new Error("<App>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set nav(value) {
    		throw new Error("<App>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const app$1 = new App({
    	target: document.body,
    	props: {
    		name: 'world'
    	}
    });

    return app$1;

}());
//# sourceMappingURL=bundle.js.map
